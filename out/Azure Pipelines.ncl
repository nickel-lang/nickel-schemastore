# DO NOT EDIT
# This file was automatically generated using json-schema-to-nickel
let js2n
  = import "../lib/main.ncl"
  in
let rec refs
    = {
      "definitions.any" =
        std.contract.any_of
            [
              String,
              Array (
                std.contract.Sequence
                  [
                    js2n.Always,
                    std.contract.any_of [ { _ | Dyn }, Array Dyn, String ]
                  ]
              ),
              {  .. }
            ],
      "definitions.boolean" =
        std.contract.any_of
            [
              js2n.string.Matches "^true$",
              js2n.string.Matches "^y$",
              js2n.string.Matches "^yes$",
              js2n.string.Matches "^on$",
              js2n.string.Matches "^false$",
              js2n.string.Matches "^n$",
              js2n.string.Matches "^no$",
              js2n.string.Matches "^off$"
            ],
      "definitions.branchFilter" =
        js2n.string.Matches
            "^[^\\/~\\^\\: \\[\\]\\\\]+(\\/[^\\/~\\^\\: \\[\\]\\\\]+)*$",
      "definitions.branchFilterArray" =
        Array (
            std.contract.Sequence [ refs."definitions.branchFilter", String ]
          ),
      "definitions.buildResource" =
        {
            branch
              | refs."definitions.string_allowExpressions"
              | String
              | optional,
            build
              | refs."definitions.referenceName"
              | String
              | doc "Alias or name of build artifact",
            connection
              | refs."definitions.nonEmptyString"
              | String
              | doc "Name of the connection. This connection will be used for all the communication related to this artifact.",
            source
              | refs."definitions.nonEmptyString"
              | String
              | doc "Name of the source definition/build/job",
            trigger
              | refs."definitions.buildResourceTrigger"
              | String
              | doc "When the artifact mentioned in this build resource completes a build, its allowed to trigger this pipeline."
              | optional,
            type
              | refs."definitions.nonEmptyString"
              | String
              | doc "Name of the artifact type",
            version
              | refs."definitions.string_allowExpressions"
              | String
              | optional,
          },
      "definitions.buildResourceTrigger" =
        std.contract.any_of
            [ js2n.string.Matches "^none$", js2n.string.Matches "^true$" ],
      "definitions.buildResources" =
        Array (
            std.contract.Sequence
              [ refs."definitions.buildResource", { _ | Dyn } ]
          ),
      "definitions.canaryDeploymentIncrements" =
        Array (
            std.contract.Sequence [ refs."definitions.nonEmptyString", String ]
          ),
      "definitions.canaryDeploymentStrategy" =
        {
            deploy
              | refs."definitions.deployHook"
              | { _ | Dyn }
              | doc "Deploy hook for canary deployment strategy"
              | optional,
            increments
              | refs."definitions.canaryDeploymentIncrements"
              | Array Dyn
              | doc "Maximum batch size for deployment"
              | optional,
            on
              | refs."definitions.onSuccessOrFailureHook"
              | { _ | Dyn }
              | doc "On success or failure hook for canary deployment strategy"
              | optional,
            postRouteTraffic
              | refs."definitions.postRouteTrafficHook"
              | { _ | Dyn }
              | doc "Post route traffic hook for canary deployment strategy"
              | optional,
            preDeploy
              | refs."definitions.preDeployHook"
              | { _ | Dyn }
              | doc "Pre deploy hook for canary deployment strategy"
              | optional,
            routeTraffic
              | refs."definitions.routeTrafficHook"
              | { _ | Dyn }
              | doc "Route traffic hook for canary deployment strategy"
              | optional,
          },
      "definitions.containerArtifactType" =
        std.contract.any_of [ js2n.string.Matches "^ACR$", String ],
      "definitions.containerResource" =
        {
            container
              | refs."definitions.referenceName"
              | String
              | doc "ID for the container",
            endpoint
              | refs."definitions.string_allowExpressions"
              | String
              | doc "ID of the service endpoint connecting to a private container registry"
              | optional,
            env
              | refs."definitions.mappingOfStringString"
              | { _ | Dyn }
              | doc "Variables to map into the container's environment"
              | optional,
            image
              | refs."definitions.string"
              | String
              | doc "Container image tag",
            mapDockerSocket
              | refs."definitions.boolean"
              | String
              | doc "Set this flag to false to force the agent not to setup the /var/run/docker.sock volume on container jobs"
              | optional,
            mountReadOnly
              | refs."definitions.readOnlyMounts"
              | { _ | Dyn }
              | optional,
            options
              | refs."definitions.string_allowExpressions"
              | String
              | doc "Options to pass into container host"
              | optional,
            ports
              | refs."definitions.sequenceOfString_allowExpressions"
              | Array Dyn
              | optional,
            trigger
              | refs."definitions.containerResourceTrigger"
              | std.contract.any_of [ { _ | Dyn }, String ]
              | optional,
            type | refs."definitions.containerArtifactType" | String | optional,
            volumes
              | refs."definitions.sequenceOfString_allowExpressions"
              | Array Dyn
              | optional,
            ..
          },
      "definitions.containerResourceTrigger" =
        std.contract.any_of
            [
              js2n.string.Matches "^none$",
              js2n.string.Matches "^true$",
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        enabled =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        tags =
                          std.contract.Sequence
                              [
                                refs."definitions.includeExcludeStringFilters",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                      },
                  required = {},
                }
            ],
      "definitions.containerResources" =
        Array (
            std.contract.Sequence
              [ refs."definitions.containerResource", { _ | Dyn } ]
          ),
      "definitions.deployHook" =
        {
            pool
              | refs."definitions.pool"
              | std.contract.any_of [ { _ | Dyn }, String ]
              | doc "Pool where deploy steps will run"
              | optional,
            steps
              | refs."definitions.steps"
              | Array Dyn
              | doc "A list of steps to run"
              | optional,
          },
      "definitions.deploymentEnvironment" =
        std.contract.any_of
            [
              String,
              {
                name
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "Name of environment"
                  | optional,
                resourceId
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "Id of resource"
                  | optional,
                resourceName
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "Name of resource"
                  | optional,
                resourceType
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "Type of environment resource"
                  | optional,
                tags
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "List of tag filters"
                  | optional,
              }
            ],
      "definitions.deploymentStrategy" =
        std.contract.any_of
            [
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        runOnce =
                          std.contract.Sequence
                              [
                                refs."definitions.runOnceDeploymentStrategy",
                                { _ | Dyn }
                              ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        rolling =
                          std.contract.Sequence
                              [
                                refs."definitions.rollingDeploymentStrategy",
                                { _ | Dyn }
                              ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        canary =
                          std.contract.Sequence
                              [
                                refs."definitions.canaryDeploymentStrategy",
                                { _ | Dyn }
                              ],
                      },
                  required = {},
                }
            ],
      "definitions.explicitResources" =
        {
            pools
              | refs."definitions.sequenceOfNonEmptyString"
              | Array Dyn
              | doc "Pool references"
              | optional,
            repositories
              | refs."definitions.sequenceOfNonEmptyString"
              | Array Dyn
              | doc "Repository references"
              | optional,
          },
      "definitions.extends" =
        {
            parameters
              | refs."definitions.mapping"
              | { _ | Dyn }
              | doc "Parameters used in the extend"
              | optional,
            template | refs."definitions.nonEmptyString" | String | optional,
          },
      "definitions.includeExcludeFilters" =
        {
            exclude
              | refs."definitions.branchFilterArray"
              | Array Dyn
              | optional,
            include
              | refs."definitions.branchFilterArray"
              | Array Dyn
              | optional,
          },
      "definitions.includeExcludeStringFilters" =
        std.contract.any_of
            [
              Array (
                std.contract.Sequence
                  [ refs."definitions.nonEmptyString", String ]
              ),
              {
                exclude
                  | refs."definitions.sequenceOfNonEmptyString"
                  | Array Dyn
                  | optional,
                include
                  | refs."definitions.sequenceOfNonEmptyString"
                  | Array Dyn
                  | optional,
              }
            ],
      "definitions.job" =
        std.contract.any_of
            [
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        cancelTimeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        container =
                          std.contract.Sequence
                              [
                                refs."definitions.jobContainer",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.jobContinueOnError", String ],
                        dependsOn =
                          std.contract.Sequence
                              [
                                refs."definitions.jobDependsOn",
                                std.contract.any_of [ Array Dyn, String ]
                              ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        job =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        pool =
                          std.contract.Sequence
                              [
                                refs."definitions.pool",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        services =
                          std.contract.Sequence
                              [ refs."definitions.jobServices", { _ | Dyn } ],
                        steps =
                          std.contract.Sequence
                              [ refs."definitions.steps", Array Dyn ],
                        strategy =
                          std.contract.Sequence
                              [ refs."definitions.jobStrategy", { _ | Dyn } ],
                        templateContext =
                          std.contract.Sequence
                              [
                                refs."definitions.templateContext",
                                { _ | Dyn }
                              ],
                        timeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        uses =
                          std.contract.Sequence
                              [
                                refs."definitions.explicitResources",
                                { _ | Dyn }
                              ],
                        variables =
                          std.contract.Sequence
                              [
                                refs."definitions.variables",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                        workspace =
                          std.contract.Sequence
                              [ refs."definitions.jobWorkspace", { _ | Dyn } ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        cancelTimeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        container =
                          std.contract.Sequence
                              [
                                refs."definitions.jobContainer",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.jobContinueOnError", String ],
                        dependsOn =
                          std.contract.Sequence
                              [
                                refs."definitions.jobDependsOn",
                                std.contract.any_of [ Array Dyn, String ]
                              ],
                        deployment =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        environment =
                          std.contract.Sequence
                              [
                                refs."definitions.deploymentEnvironment",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        pool =
                          std.contract.Sequence
                              [
                                refs."definitions.pool",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        services =
                          std.contract.Sequence
                              [ refs."definitions.jobServices", { _ | Dyn } ],
                        strategy =
                          std.contract.Sequence
                              [
                                refs."definitions.deploymentStrategy",
                                { _ | Dyn }
                              ],
                        templateContext =
                          std.contract.Sequence
                              [
                                refs."definitions.templateContext",
                                { _ | Dyn }
                              ],
                        timeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        uses =
                          std.contract.Sequence
                              [
                                refs."definitions.explicitResources",
                                { _ | Dyn }
                              ],
                        variables =
                          std.contract.Sequence
                              [
                                refs."definitions.variables",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                        workspace =
                          std.contract.Sequence
                              [ refs."definitions.jobWorkspace", { _ | Dyn } ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        parameters =
                          std.contract.Sequence
                              [ refs."definitions.mapping", { _ | Dyn } ],
                        template =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                      },
                  required = {},
                }
            ],
      "definitions.jobContainer" =
        std.contract.any_of
            [
              String,
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        alias =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'Some Dyn,
                  patterns = {},
                  properties =
                    {
                        endpoint =
                          std.contract.Sequence
                              [
                                refs."definitions.string_allowExpressions",
                                String
                              ],
                        env =
                          std.contract.Sequence
                              [
                                refs."definitions.mappingOfStringString",
                                { _ | Dyn }
                              ],
                        image =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        mapDockerSocket =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        mountReadOnly =
                          std.contract.Sequence
                              [
                                refs."definitions.readOnlyMounts",
                                { _ | Dyn }
                              ],
                        options =
                          std.contract.Sequence
                              [
                                refs."definitions.string_allowExpressions",
                                String
                              ],
                        ports =
                          std.contract.Sequence
                              [
                                refs."definitions.sequenceOfString_allowExpressions",
                                Array Dyn
                              ],
                        volumes =
                          std.contract.Sequence
                              [
                                refs."definitions.sequenceOfString_allowExpressions",
                                Array Dyn
                              ],
                      },
                  required = { image = true, },
                }
            ],
      "definitions.jobContinueOnError" = String,
      "definitions.jobDependsOn" =
        std.contract.any_of
            [
              String,
              Array (
                std.contract.Sequence [ refs."definitions.string", String ]
              )
            ],
      "definitions.jobMatrix" =
        std.contract.any_of
            [
              std.contract.Sequence
                [
                  js2n.record.MinProperties 1,
                  js2n.record.Record
                    {
                      additional = 'Some js2n.Always,
                      patterns =
                        {
                            "^[A-Za-z0-9_]+$" =
                              std.contract.Sequence
                                  [
                                    refs."definitions.matrixProperties",
                                    { _ | Dyn }
                                  ],
                          },
                      properties = {},
                      required = {},
                    }
                ],
              String
            ],
      "definitions.jobServices" = {  .. },
      "definitions.jobStrategy" =
        std.contract.any_of
            [
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        matrix =
                          std.contract.Sequence
                              [
                                refs."definitions.jobMatrix",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        maxParallel =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        parallel =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                      },
                  required = {},
                }
            ],
      "definitions.jobWorkspace" =
        {
            clean
              | std.enum.TagOrString
              | [| 'all, 'resources, 'outputs |]
              | refs."definitions.string"
              | doc "Which parts of the workspace should be scorched before fetching"
              | optional,
          },
      "definitions.jobs" =
        Array (std.contract.Sequence [ refs."definitions.job", { _ | Dyn } ]),
      "definitions.legacyRepoResourceAlias" = js2n.string.Matches "^self$",
      "definitions.legacyResource" =
        {
            clean
              | std.enum.TagOrString
              | [| '"false", '"true" |]
              | refs."definitions.string"
              | doc "Scorch the repo before fetching?"
              | optional,
            fetchDepth
              | refs."definitions.string"
              | String
              | doc "Depth of Git graph to fetch"
              | optional,
            lfs
              | refs."definitions.string"
              | String
              | doc "Fetch and checkout Git LFS objects?"
              | optional,
            repo
              | refs."definitions.legacyRepoResourceAlias"
              | String
              | optional,
          },
      "definitions.lockBehavior" =
        std.contract.any_of
            [
              js2n.string.Matches "^sequential$",
              js2n.string.Matches "^runLatest$"
            ],
      "definitions.mapping" = {  .. },
      "definitions.mappingOfStringString" = {  .. },
      "definitions.matrixProperties" = {  .. },
      "definitions.nonEmptyString" = String,
      "definitions.onFailureHook" =
        {
            pool
              | refs."definitions.pool"
              | std.contract.any_of [ { _ | Dyn }, String ]
              | doc "Pool where post on failure steps will run"
              | optional,
            steps
              | refs."definitions.steps"
              | Array Dyn
              | doc "A list of steps to run"
              | optional,
          },
      "definitions.onSuccessHook" =
        {
            pool
              | refs."definitions.pool"
              | std.contract.any_of [ { _ | Dyn }, String ]
              | doc "Pool where on success steps will run"
              | optional,
            steps
              | refs."definitions.steps"
              | Array Dyn
              | doc "A list of steps to run"
              | optional,
          },
      "definitions.onSuccessOrFailureHook" =
        {
            failure
              | refs."definitions.onFailureHook"
              | { _ | Dyn }
              | doc "Runs on failure of any step"
              | optional,
            success
              | refs."definitions.onSuccessHook"
              | { _ | Dyn }
              | doc "Runs on success of all of the steps"
              | optional,
          },
      "definitions.packageResource" =
        {
            connection
              | refs."definitions.nonEmptyString"
              | String
              | doc "Name of the connection. This connection will be used for all the communication related to this artifact.",
            name
              | refs."definitions.nonEmptyString"
              | String
              | doc "Name of the package",
            package
              | refs."definitions.referenceName"
              | String
              | doc "Alias of package artifact",
            tag
              | refs."definitions.string_allowExpressions"
              | String
              | optional,
            trigger
              | refs."definitions.packageResourceTrigger"
              | String
              | doc "Trigger a new pipeline run when a new version of this package is available."
              | optional,
            type
              | refs."definitions.nonEmptyString"
              | String
              | doc "Type of the package. Ex - NuGet, NPM etc.",
            version
              | refs."definitions.string_allowExpressions"
              | String
              | optional,
          },
      "definitions.packageResourceTrigger" =
        std.contract.any_of
            [ js2n.string.Matches "^none$", js2n.string.Matches "^true$" ],
      "definitions.packageResources" =
        Array (
            std.contract.Sequence
              [ refs."definitions.packageResource", { _ | Dyn } ]
          ),
      "definitions.phase" =
        std.contract.any_of
            [
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.jobContinueOnError", String ],
                        dependsOn =
                          std.contract.Sequence
                              [
                                refs."definitions.jobDependsOn",
                                std.contract.any_of [ Array Dyn, String ]
                              ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        phase =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        queue =
                          std.contract.Sequence
                              [
                                refs."definitions.phaseQueueTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        steps =
                          std.contract.Sequence
                              [ refs."definitions.steps", Array Dyn ],
                        variables =
                          std.contract.Sequence
                              [
                                refs."definitions.variables",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.jobContinueOnError", String ],
                        dependsOn =
                          std.contract.Sequence
                              [
                                refs."definitions.jobDependsOn",
                                std.contract.any_of [ Array Dyn, String ]
                              ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        phase =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        server =
                          std.contract.Sequence
                              [
                                refs."definitions.phaseServerTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        steps =
                          std.contract.Sequence
                              [ refs."definitions.steps", Array Dyn ],
                        variables =
                          std.contract.Sequence
                              [
                                refs."definitions.variables",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        parameters =
                          std.contract.Sequence
                              [ refs."definitions.mapping", { _ | Dyn } ],
                        template =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                      },
                  required = {},
                }
            ],
      "definitions.phaseQueueTarget" =
        std.contract.any_of
            [
              String,
              {
                cancelTimeoutInMinutes
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "Time to wait for the phase to cancel before forcibly terminating it"
                  | optional,
                container
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "Container resource name"
                  | optional,
                demands
                  | refs."definitions.phaseTargetDemands"
                  | std.contract.any_of [ Array Dyn, String ]
                  | doc "List of demands (for a private queue)"
                  | optional,
                matrix
                  | refs."definitions.phaseTargetMatrix"
                  | std.contract.any_of [ { _ | Dyn }, String ]
                  | optional,
                name
                  | refs."definitions.string"
                  | String
                  | doc "Name of a queue"
                  | optional,
                parallel
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "Maximum number of parallel agent executions"
                  | optional,
                timeoutInMinutes
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "Time to wait before cancelling the phase"
                  | optional,
                workspace
                  | refs."definitions.phaseTargetWorkspace"
                  | { _ | Dyn }
                  | optional,
              }
            ],
      "definitions.phaseServerTarget" =
        std.contract.any_of
            [
              String,
              {
                cancelTimeoutInMinutes
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "Time to wait for the job to cancel before forcibly terminating it"
                  | optional,
                matrix
                  | refs."definitions.phaseTargetMatrix"
                  | std.contract.any_of [ { _ | Dyn }, String ]
                  | optional,
                parallel
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "Maximum number of parallel agent executions"
                  | optional,
                timeoutInMinutes
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "Time to wait before cancelling the job"
                  | optional,
              }
            ],
      "definitions.phaseTargetDemands" =
        std.contract.any_of
            [
              String,
              Array (
                std.contract.Sequence
                  [ refs."definitions.nonEmptyString", String ]
              )
            ],
      "definitions.phaseTargetMatrix" =
        std.contract.Sequence
            [
              std.contract.any_of
                [
                  String,
                  std.contract.Sequence
                    [
                      js2n.record.MinProperties 1,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns =
                            {
                                "^[A-Za-z0-9_]+$" =
                                  std.contract.Sequence
                                      [
                                        refs."definitions.matrixProperties",
                                        { _ | Dyn }
                                      ],
                              },
                          properties = {},
                          required = {},
                        }
                    ]
                ],
              std.contract.any_of [ {  .. }, String ]
            ],
      "definitions.phaseTargetWorkspace" =
        {
            clean
              | std.enum.TagOrString
              | [| 'all, 'resources, 'outputs |]
              | refs."definitions.string"
              | doc "Scorch the repo before fetching?"
              | optional,
          },
      "definitions.phases" =
        Array (std.contract.Sequence [ refs."definitions.phase", { _ | Dyn } ]),
      "definitions.pipeline" =
        std.contract.any_of
            [
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        appendCommitMessageToRunName =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        lockBehavior =
                          std.contract.Sequence
                              [ refs."definitions.lockBehavior", String ],
                        name =
                          std.contract.Sequence
                              [
                                refs."definitions.string_allowExpressions",
                                String
                              ],
                        parameters =
                          std.contract.Sequence
                              [
                                refs."definitions.pipelineTemplateParameters",
                                Array Dyn
                              ],
                        pool =
                          std.contract.Sequence
                              [
                                refs."definitions.pool",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        pr =
                          std.contract.Sequence
                              [
                                refs."definitions.pr",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        resources =
                          std.contract.Sequence
                              [
                                refs."definitions.resources",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                        schedules =
                          std.contract.Sequence
                              [ refs."definitions.schedules", Array Dyn ],
                        stages =
                          std.contract.Sequence
                              [ refs."definitions.stages", Array Dyn ],
                        trigger =
                          std.contract.Sequence
                              [
                                refs."definitions.trigger",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        variables =
                          std.contract.Sequence
                              [
                                refs."definitions.variables",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                      },
                  required = { stages = true, },
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        appendCommitMessageToRunName =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        extends =
                          std.contract.Sequence
                              [ refs."definitions.extends", { _ | Dyn } ],
                        lockBehavior =
                          std.contract.Sequence
                              [ refs."definitions.lockBehavior", String ],
                        name =
                          std.contract.Sequence
                              [
                                refs."definitions.string_allowExpressions",
                                String
                              ],
                        parameters =
                          std.contract.Sequence
                              [
                                refs."definitions.pipelineTemplateParameters",
                                Array Dyn
                              ],
                        pool =
                          std.contract.Sequence
                              [
                                refs."definitions.pool",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        pr =
                          std.contract.Sequence
                              [
                                refs."definitions.pr",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        resources =
                          std.contract.Sequence
                              [
                                refs."definitions.resources",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                        schedules =
                          std.contract.Sequence
                              [ refs."definitions.schedules", Array Dyn ],
                        trigger =
                          std.contract.Sequence
                              [
                                refs."definitions.trigger",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        variables =
                          std.contract.Sequence
                              [
                                refs."definitions.variables",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                      },
                  required = { extends = true, },
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        appendCommitMessageToRunName =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        jobs =
                          std.contract.Sequence
                              [ refs."definitions.jobs", Array Dyn ],
                        lockBehavior =
                          std.contract.Sequence
                              [ refs."definitions.lockBehavior", String ],
                        name =
                          std.contract.Sequence
                              [
                                refs."definitions.string_allowExpressions",
                                String
                              ],
                        parameters =
                          std.contract.Sequence
                              [
                                refs."definitions.pipelineTemplateParameters",
                                Array Dyn
                              ],
                        pool =
                          std.contract.Sequence
                              [
                                refs."definitions.pool",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        pr =
                          std.contract.Sequence
                              [
                                refs."definitions.pr",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        resources =
                          std.contract.Sequence
                              [
                                refs."definitions.resources",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                        schedules =
                          std.contract.Sequence
                              [ refs."definitions.schedules", Array Dyn ],
                        trigger =
                          std.contract.Sequence
                              [
                                refs."definitions.trigger",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        variables =
                          std.contract.Sequence
                              [
                                refs."definitions.variables",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                      },
                  required = { jobs = true, },
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        appendCommitMessageToRunName =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        lockBehavior =
                          std.contract.Sequence
                              [ refs."definitions.lockBehavior", String ],
                        name =
                          std.contract.Sequence
                              [
                                refs."definitions.string_allowExpressions",
                                String
                              ],
                        parameters =
                          std.contract.Sequence
                              [
                                refs."definitions.pipelineTemplateParameters",
                                Array Dyn
                              ],
                        phases =
                          std.contract.Sequence
                              [ refs."definitions.phases", Array Dyn ],
                        pr =
                          std.contract.Sequence
                              [
                                refs."definitions.pr",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        resources =
                          std.contract.Sequence
                              [
                                refs."definitions.resources",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                        schedules =
                          std.contract.Sequence
                              [ refs."definitions.schedules", Array Dyn ],
                        trigger =
                          std.contract.Sequence
                              [
                                refs."definitions.trigger",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        variables =
                          std.contract.Sequence
                              [
                                refs."definitions.variables",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                      },
                  required = { phases = true, },
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        appendCommitMessageToRunName =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        container =
                          std.contract.Sequence
                              [
                                refs."definitions.jobContainer",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.jobContinueOnError", String ],
                        lockBehavior =
                          std.contract.Sequence
                              [ refs."definitions.lockBehavior", String ],
                        name =
                          std.contract.Sequence
                              [
                                refs."definitions.string_allowExpressions",
                                String
                              ],
                        parameters =
                          std.contract.Sequence
                              [
                                refs."definitions.pipelineTemplateParameters",
                                Array Dyn
                              ],
                        pool =
                          std.contract.Sequence
                              [
                                refs."definitions.pool",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        pr =
                          std.contract.Sequence
                              [
                                refs."definitions.pr",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        resources =
                          std.contract.Sequence
                              [
                                refs."definitions.resources",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                        schedules =
                          std.contract.Sequence
                              [ refs."definitions.schedules", Array Dyn ],
                        services =
                          std.contract.Sequence
                              [ refs."definitions.jobServices", { _ | Dyn } ],
                        steps =
                          std.contract.Sequence
                              [ refs."definitions.steps", Array Dyn ],
                        strategy =
                          std.contract.Sequence
                              [ refs."definitions.jobStrategy", { _ | Dyn } ],
                        trigger =
                          std.contract.Sequence
                              [
                                refs."definitions.trigger",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        variables =
                          std.contract.Sequence
                              [
                                refs."definitions.variables",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                        workspace =
                          std.contract.Sequence
                              [ refs."definitions.jobWorkspace", { _ | Dyn } ],
                      },
                  required = { steps = true, },
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        appendCommitMessageToRunName =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.jobContinueOnError", String ],
                        lockBehavior =
                          std.contract.Sequence
                              [ refs."definitions.lockBehavior", String ],
                        name =
                          std.contract.Sequence
                              [
                                refs."definitions.string_allowExpressions",
                                String
                              ],
                        parameters =
                          std.contract.Sequence
                              [
                                refs."definitions.pipelineTemplateParameters",
                                Array Dyn
                              ],
                        pr =
                          std.contract.Sequence
                              [
                                refs."definitions.pr",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        queue =
                          std.contract.Sequence
                              [
                                refs."definitions.phaseQueueTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        resources =
                          std.contract.Sequence
                              [
                                refs."definitions.resources",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                        schedules =
                          std.contract.Sequence
                              [ refs."definitions.schedules", Array Dyn ],
                        steps =
                          std.contract.Sequence
                              [ refs."definitions.steps", Array Dyn ],
                        trigger =
                          std.contract.Sequence
                              [
                                refs."definitions.trigger",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        variables =
                          std.contract.Sequence
                              [
                                refs."definitions.variables",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                      },
                  required = { steps = true, },
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        appendCommitMessageToRunName =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.jobContinueOnError", String ],
                        lockBehavior =
                          std.contract.Sequence
                              [ refs."definitions.lockBehavior", String ],
                        name =
                          std.contract.Sequence
                              [
                                refs."definitions.string_allowExpressions",
                                String
                              ],
                        parameters =
                          std.contract.Sequence
                              [
                                refs."definitions.pipelineTemplateParameters",
                                Array Dyn
                              ],
                        pr =
                          std.contract.Sequence
                              [
                                refs."definitions.pr",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        resources =
                          std.contract.Sequence
                              [
                                refs."definitions.resources",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                        schedules =
                          std.contract.Sequence
                              [ refs."definitions.schedules", Array Dyn ],
                        server =
                          std.contract.Sequence
                              [
                                refs."definitions.phaseServerTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        steps =
                          std.contract.Sequence
                              [ refs."definitions.steps", Array Dyn ],
                        trigger =
                          std.contract.Sequence
                              [
                                refs."definitions.trigger",
                                std.contract.any_of
                                  [ { _ | Dyn }, Array Dyn, String ]
                              ],
                        variables =
                          std.contract.Sequence
                              [
                                refs."definitions.variables",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                      },
                  required = { steps = true, },
                }
            ],
      "definitions.pipelineResource" =
        {
            branch
              | refs."definitions.string_allowExpressions"
              | String
              | optional,
            pipeline
              | refs."definitions.referenceName"
              | String
              | doc "ID of the pipeline resource",
            project | refs."definitions.nonEmptyString" | String | optional,
            source | refs."definitions.nonEmptyString" | String | optional,
            tags
              | refs."definitions.sequenceOfNonEmptyString"
              | Array Dyn
              | optional,
            trigger
              | refs."definitions.pipelineResourceTrigger"
              | std.contract.any_of [ { _ | Dyn }, String ]
              | optional,
            version
              | refs."definitions.string_allowExpressions"
              | String
              | optional,
          },
      "definitions.pipelineResourceTrigger" =
        std.contract.any_of
            [
              js2n.string.Matches "^none$",
              js2n.string.Matches "^true$",
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        branches =
                          std.contract.Sequence
                              [
                                refs."definitions.triggerBranchFilter",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                        enabled =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        stages =
                          std.contract.Sequence
                              [
                                refs."definitions.sequenceOfNonEmptyString",
                                Array Dyn
                              ],
                        tags =
                          std.contract.Sequence
                              [
                                refs."definitions.sequenceOfNonEmptyString",
                                Array Dyn
                              ],
                      },
                  required = {},
                }
            ],
      "definitions.pipelineResources" =
        Array (
            std.contract.Sequence
              [ refs."definitions.pipelineResource", { _ | Dyn } ]
          ),
      "definitions.pipelineTemplateParameter" =
        {
            "default"
              | refs."definitions.any"
              | std.contract.any_of [ { _ | Dyn }, Array Dyn, String ]
              | optional,
            displayName
              | refs."definitions.string"
              | String
              | doc "Human-readable name for the parameter"
              | optional,
            name | refs."definitions.nonEmptyString" | String | optional,
            type
              | refs."definitions.pipelineTemplateParameterType"
              | String
              | optional,
            values
              | refs."definitions.sequenceOfNonEmptyString"
              | Array Dyn
              | optional,
          },
      "definitions.pipelineTemplateParameterType" =
        std.contract.any_of
            [
              js2n.string.Matches "^boolean$",
              js2n.string.Matches "^container$",
              js2n.string.Matches "^containerList$",
              js2n.string.Matches "^deployment$",
              js2n.string.Matches "^deploymentList$",
              js2n.string.Matches "^environment$",
              js2n.string.Matches "^filePath$",
              js2n.string.Matches "^job$",
              js2n.string.Matches "^jobList$",
              js2n.string.Matches "^number$",
              js2n.string.Matches "^object$",
              js2n.string.Matches "^pool$",
              js2n.string.Matches "^secureFile$",
              js2n.string.Matches "^serviceConnection$",
              js2n.string.Matches "^stage$",
              js2n.string.Matches "^stageList$",
              js2n.string.Matches "^step$",
              js2n.string.Matches "^stepList$",
              js2n.string.Matches "^string$"
            ],
      "definitions.pipelineTemplateParameters" =
        Array (
            std.contract.Sequence
              [ refs."definitions.pipelineTemplateParameter", { _ | Dyn } ]
          ),
      "definitions.pool" =
        std.contract.any_of
            [
              String,
              {
                demands
                  | refs."definitions.poolDemands"
                  | std.contract.any_of [ Array Dyn, String ]
                  | doc "List of demands (for a private pool)"
                  | optional,
                name
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "Name of a pool"
                  | optional,
                ..
              }
            ],
      "definitions.poolDemands" =
        std.contract.any_of
            [
              String,
              Array (
                std.contract.Sequence
                  [ refs."definitions.nonEmptyString", String ]
              )
            ],
      "definitions.postRouteTrafficHook" =
        {
            pool
              | refs."definitions.pool"
              | std.contract.any_of [ { _ | Dyn }, String ]
              | doc "Pool where post route traffic steps will run"
              | optional,
            steps
              | refs."definitions.steps"
              | Array Dyn
              | doc "A list of steps to run"
              | optional,
          },
      "definitions.pr" =
        std.contract.any_of
            [
              js2n.string.Matches "^none$",
              Array (
                std.contract.Sequence
                  [ refs."definitions.branchFilter", String ]
              ),
              {
                autoCancel
                  | refs."definitions.boolean"
                  | String
                  | doc "Whether to cancel running PR builds when a new commit lands in the branch"
                  | optional,
                branches
                  | refs."definitions.includeExcludeFilters"
                  | { _ | Dyn }
                  | optional,
                drafts
                  | refs."definitions.boolean"
                  | String
                  | doc "Whether to start a run when a draft PR is created"
                  | optional,
                paths
                  | refs."definitions.includeExcludeFilters"
                  | { _ | Dyn }
                  | optional,
              }
            ],
      "definitions.preDeployHook" =
        {
            pool
              | refs."definitions.pool"
              | std.contract.any_of [ { _ | Dyn }, String ]
              | doc "Pool where pre deploy steps will run"
              | optional,
            steps
              | refs."definitions.steps"
              | Array Dyn
              | doc "A list of steps to run"
              | optional,
          },
      "definitions.readOnlyMounts" =
        {
            externals
              | refs."definitions.boolean"
              | String
              | doc "Mount the externals directory as readonly"
              | optional,
            tasks
              | refs."definitions.boolean"
              | String
              | doc "Mount the tasks directory as readonly"
              | optional,
            tools
              | refs."definitions.boolean"
              | String
              | doc "Mount the tools directory as readonly"
              | optional,
            work
              | refs."definitions.boolean"
              | String
              | doc "Mount the work directory as readonly"
              | optional,
          },
      "definitions.referenceName" = js2n.string.Matches "^[-_A-Za-z0-9]*$",
      "definitions.repositoryCheckoutOptions" =
        {
            clean
              | std.enum.TagOrString
              | [| '"false", '"true" |]
              | refs."definitions.string"
              | doc "Scorch the repo before fetching?"
              | optional,
            fetchDepth
              | refs."definitions.string"
              | String
              | doc "Depth of Git graph to fetch"
              | optional,
            fetchTags
              | refs."definitions.string"
              | String
              | doc "Fetch tags?"
              | optional,
            lfs
              | refs."definitions.string"
              | String
              | doc "Fetch and checkout Git LFS objects?"
              | optional,
            persistCredentials
              | refs."definitions.string"
              | String
              | doc "Keep credentials available for later use?"
              | optional,
            submodules
              | refs."definitions.string"
              | String
              | doc "Fetch and checkout submodules?"
              | optional,
          },
      "definitions.repositoryResource" =
        {
            checkoutOptions
              | refs."definitions.repositoryCheckoutOptions"
              | { _ | Dyn }
              | optional,
            endpoint
              | refs."definitions.nonEmptyString"
              | String
              | doc "ID of the service endpoint connecting to this repository"
              | optional,
            ref
              | refs."definitions.string_allowExpressions"
              | String
              | optional,
            repository
              | refs."definitions.referenceName"
              | String
              | doc "ID of the external repository",
            trigger
              | refs."definitions.trigger"
              | std.contract.any_of [ { _ | Dyn }, Array Dyn, String ]
              | optional,
            ..
          },
      "definitions.repositoryResources" =
        Array (
            std.contract.Sequence
              [ refs."definitions.repositoryResource", { _ | Dyn } ]
          ),
      "definitions.resources" =
        std.contract.any_of
            [
              {
                builds
                  | refs."definitions.buildResources"
                  | Array Dyn
                  | doc "List of external build resources"
                  | optional,
                containers
                  | refs."definitions.containerResources"
                  | Array Dyn
                  | doc "List of container images"
                  | optional,
                packages
                  | refs."definitions.packageResources"
                  | Array Dyn
                  | doc "List of external packages"
                  | optional,
                pipelines
                  | refs."definitions.pipelineResources"
                  | Array Dyn
                  | optional,
                repositories
                  | refs."definitions.repositoryResources"
                  | Array Dyn
                  | doc "List of external repositories"
                  | optional,
                webhooks
                  | refs."definitions.webhookResources"
                  | Array Dyn
                  | doc "List of webhooks"
                  | optional,
              },
              Array (
                std.contract.Sequence
                  [ refs."definitions.legacyResource", { _ | Dyn } ]
              )
            ],
      "definitions.rollingDeploymentStrategy" =
        {
            deploy
              | refs."definitions.deployHook"
              | { _ | Dyn }
              | doc "Deploy hook for rolling deployment strategy"
              | optional,
            maxParallel
              | refs."definitions.nonEmptyString"
              | String
              | doc "Maximum number of jobs running in parallel"
              | optional,
            on
              | refs."definitions.onSuccessOrFailureHook"
              | { _ | Dyn }
              | doc "On success or failure hook for rolling deployment strategy"
              | optional,
            postRouteTraffic
              | refs."definitions.postRouteTrafficHook"
              | { _ | Dyn }
              | doc "Post route traffic hook for rolling deployment strategy"
              | optional,
            preDeploy
              | refs."definitions.preDeployHook"
              | { _ | Dyn }
              | doc "Pre deploy hook for rolling deployment strategy"
              | optional,
            routeTraffic
              | refs."definitions.routeTrafficHook"
              | { _ | Dyn }
              | doc "Route traffic hook for rolling deployment strategy"
              | optional,
          },
      "definitions.routeTrafficHook" =
        {
            pool
              | refs."definitions.pool"
              | std.contract.any_of [ { _ | Dyn }, String ]
              | doc "Pool where route traffic steps will run"
              | optional,
            steps
              | refs."definitions.steps"
              | Array Dyn
              | doc "A list of steps to run"
              | optional,
          },
      "definitions.runOnceDeploymentStrategy" =
        {
            deploy
              | refs."definitions.deployHook"
              | { _ | Dyn }
              | doc "Deploy hook for runOnce deployment strategy"
              | optional,
            on
              | refs."definitions.onSuccessOrFailureHook"
              | { _ | Dyn }
              | doc "On success or failure hook for runOnce deployment strategy"
              | optional,
            postRouteTraffic
              | refs."definitions.postRouteTrafficHook"
              | { _ | Dyn }
              | doc "Post route traffic hook for runOnce deployment strategy"
              | optional,
            preDeploy
              | refs."definitions.preDeployHook"
              | { _ | Dyn }
              | doc "Pre deploy hook for runOnce deployment strategy"
              | optional,
            routeTraffic
              | refs."definitions.routeTrafficHook"
              | { _ | Dyn }
              | doc "Route traffic hook for runOnce deployment strategy"
              | optional,
          },
      "definitions.schedule" =
        {
            always | refs."definitions.boolean" | String | optional,
            batch | refs."definitions.boolean" | String | optional,
            branches
              | refs."definitions.includeExcludeFilters"
              | { _ | Dyn }
              | optional,
            cron | refs."definitions.nonEmptyString" | String | optional,
            displayName | refs."definitions.string" | String | optional,
          },
      "definitions.schedules" =
        Array (
            std.contract.Sequence [ refs."definitions.schedule", { _ | Dyn } ]
          ),
      "definitions.sequenceOfNonEmptyString" =
        Array (
            std.contract.Sequence [ refs."definitions.nonEmptyString", String ]
          ),
      "definitions.sequenceOfString_allowExpressions" =
        Array (
            std.contract.Sequence
              [ refs."definitions.string_allowExpressions", String ]
          ),
      "definitions.stage" =
        std.contract.any_of
            [
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        dependsOn =
                          std.contract.Sequence
                              [
                                refs."definitions.jobDependsOn",
                                std.contract.any_of [ Array Dyn, String ]
                              ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        isSkippable =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        jobs =
                          std.contract.Sequence
                              [ refs."definitions.jobs", Array Dyn ],
                        lockBehavior =
                          std.contract.Sequence
                              [ refs."definitions.lockBehavior", String ],
                        pool =
                          std.contract.Sequence
                              [
                                refs."definitions.pool",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        stage =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        templateContext =
                          std.contract.Sequence
                              [
                                refs."definitions.templateContext",
                                { _ | Dyn }
                              ],
                        trigger =
                          std.contract.Sequence
                              [ refs."definitions.stageTrigger", String ],
                        variables =
                          std.contract.Sequence
                              [
                                refs."definitions.variables",
                                std.contract.any_of [ { _ | Dyn }, Array Dyn ]
                              ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        parameters =
                          std.contract.Sequence
                              [ refs."definitions.mapping", { _ | Dyn } ],
                        template =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                      },
                  required = {},
                }
            ],
      "definitions.stageTrigger" =
        std.contract.any_of
            [
              js2n.string.Matches "^manual$",
              js2n.string.Matches "^automatic$"
            ],
      "definitions.stages" =
        Array (std.contract.Sequence [ refs."definitions.stage", { _ | Dyn } ]),
      "definitions.step" =
        std.contract.any_of
            [
              std.contract.Sequence [ refs."definitions.task", { _ | Dyn } ],
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        enabled =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        env =
                          std.contract.Sequence
                              [
                                refs."definitions.mappingOfStringString",
                                { _ | Dyn }
                              ],
                        failOnStderr =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        name =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        retryCountOnTaskFailure =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        script =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        target =
                          std.contract.Sequence
                              [
                                refs."definitions.stepTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        timeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        workingDirectory =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                      },
                  required = { script = true, },
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        enabled =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        env =
                          std.contract.Sequence
                              [
                                refs."definitions.mappingOfStringString",
                                { _ | Dyn }
                              ],
                        errorActionPreference =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        failOnStderr =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        ignoreLASTEXITCODE =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        name =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        powershell =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        retryCountOnTaskFailure =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        target =
                          std.contract.Sequence
                              [
                                refs."definitions.stepTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        timeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        workingDirectory =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                      },
                  required = { powershell = true, },
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        enabled =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        env =
                          std.contract.Sequence
                              [
                                refs."definitions.mappingOfStringString",
                                { _ | Dyn }
                              ],
                        errorActionPreference =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        failOnStderr =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        ignoreLASTEXITCODE =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        name =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        pwsh =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        retryCountOnTaskFailure =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        target =
                          std.contract.Sequence
                              [
                                refs."definitions.stepTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        timeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        workingDirectory =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                      },
                  required = { pwsh = true, },
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        bash =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        enabled =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        env =
                          std.contract.Sequence
                              [
                                refs."definitions.mappingOfStringString",
                                { _ | Dyn }
                              ],
                        failOnStderr =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        name =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        retryCountOnTaskFailure =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        target =
                          std.contract.Sequence
                              [
                                refs."definitions.stepTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        timeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        workingDirectory =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                      },
                  required = { bash = true, },
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        checkout =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        clean =
                          std.contract.Sequence
                              [
                                std.enum.TagOrString,
                                [| '"false", '"true" |],
                                refs."definitions.string"
                              ],
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        enabled =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        env =
                          std.contract.Sequence
                              [
                                refs."definitions.mappingOfStringString",
                                { _ | Dyn }
                              ],
                        fetchDepth =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        fetchFilter =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        fetchTags =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        lfs =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        name =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        path =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        persistCredentials =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        retryCountOnTaskFailure =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        submodules =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        target =
                          std.contract.Sequence
                              [
                                refs."definitions.stepTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        timeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        workspaceRepo =
                          std.contract.Sequence
                              [
                                std.enum.TagOrString,
                                [| '"false", '"true" |],
                                refs."definitions.string"
                              ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        artifact =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        download =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        enabled =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        env =
                          std.contract.Sequence
                              [
                                refs."definitions.mappingOfStringString",
                                { _ | Dyn }
                              ],
                        name =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        patterns =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        retryCountOnTaskFailure =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        target =
                          std.contract.Sequence
                              [
                                refs."definitions.stepTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        timeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                      },
                  required = { download = true, },
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        artifact =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        downloadBuild =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        enabled =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        env =
                          std.contract.Sequence
                              [
                                refs."definitions.mappingOfStringString",
                                { _ | Dyn }
                              ],
                        inputs =
                          std.contract.Sequence
                              [
                                refs."definitions.mappingOfStringString",
                                { _ | Dyn }
                              ],
                        name =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        path =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        patterns =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        retryCountOnTaskFailure =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        target =
                          std.contract.Sequence
                              [
                                refs."definitions.stepTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        timeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        enabled =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        env =
                          std.contract.Sequence
                              [
                                refs."definitions.mappingOfStringString",
                                { _ | Dyn }
                              ],
                        getPackage =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        name =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        path =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        retryCountOnTaskFailure =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        target =
                          std.contract.Sequence
                              [
                                refs."definitions.stepTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        timeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        artifact =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        enabled =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        env =
                          std.contract.Sequence
                              [
                                refs."definitions.mappingOfStringString",
                                { _ | Dyn }
                              ],
                        name =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        retryCountOnTaskFailure =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        target =
                          std.contract.Sequence
                              [
                                refs."definitions.stepTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        timeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        upload =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        artifact =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        enabled =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        env =
                          std.contract.Sequence
                              [
                                refs."definitions.mappingOfStringString",
                                { _ | Dyn }
                              ],
                        name =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        publish =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        retryCountOnTaskFailure =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        target =
                          std.contract.Sequence
                              [
                                refs."definitions.stepTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        timeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        parameters =
                          std.contract.Sequence
                              [ refs."definitions.mapping", { _ | Dyn } ],
                        template =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        condition =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        continueOnError =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        displayName =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        enabled =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        env =
                          std.contract.Sequence
                              [
                                refs."definitions.mappingOfStringString",
                                { _ | Dyn }
                              ],
                        name =
                          std.contract.Sequence
                              [ refs."definitions.referenceName", String ],
                        retryCountOnTaskFailure =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        reviewApp =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                        target =
                          std.contract.Sequence
                              [
                                refs."definitions.stepTarget",
                                std.contract.any_of [ { _ | Dyn }, String ]
                              ],
                        timeoutInMinutes =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                      },
                  required = {},
                }
            ],
      "definitions.stepTarget" =
        std.contract.any_of
            [
              String,
              {
                commands
                  | std.enum.TagOrString
                  | [| 'restricted, 'any |]
                  | refs."definitions.string"
                  | doc "Set of allowed logging commands ('any' or 'restricted')"
                  | optional,
                container
                  | refs."definitions.nonEmptyString"
                  | String
                  | doc "Container to target (or 'host' for host machine)"
                  | optional,
                settableVariables
                  | refs."definitions.variableRestrictions"
                  | std.contract.any_of [ Array Dyn, String ]
                  | doc "Restrictions on which variables that can be set"
                  | optional,
              }
            ],
      "definitions.steps" =
        Array (std.contract.Sequence [ refs."definitions.step", { _ | Dyn } ]),
      "definitions.string" = String,
      "definitions.string_allowExpressions" = String,
      "definitions.task" =
        std.contract.Sequence
            [
              std.contract.any_of
                [
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              debugPreference =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'silentlyContinue,
                                                        'continue,
                                                        'stop,
                                                        '"default"
                                                      |]
                                                    ],
                                              errorActionPreference =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'silentlyContinue,
                                                        'continue,
                                                        'stop,
                                                        '"default"
                                                      |]
                                                    ],
                                              failOnStderr = Bool,
                                              filePath = String,
                                              ignoreLASTEXITCODE = Bool,
                                              informationPreference =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'silentlyContinue,
                                                        'continue,
                                                        'stop,
                                                        '"default"
                                                      |]
                                                    ],
                                              progressPreference =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'silentlyContinue,
                                                        'continue,
                                                        'stop,
                                                        '"default"
                                                      |]
                                                    ],
                                              pwsh = Bool,
                                              runScriptInSeparateScope = Bool,
                                              script = String,
                                              showWarnings = Bool,
                                              targetType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'inline, 'filePath |]
                                                    ],
                                              verbosePreference =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'silentlyContinue,
                                                        'continue,
                                                        'stop,
                                                        '"default"
                                                      |]
                                                    ],
                                              warningPreference =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'silentlyContinue,
                                                        'continue,
                                                        'stop,
                                                        '"default"
                                                      |]
                                                    ],
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^PowerShell@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              failOnStandardError = Bool,
                                              inlineScript = String,
                                              scriptName = String,
                                              scriptType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'filePath,
                                                        'inlineScript
                                                      |]
                                                    ],
                                              workingFolder = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^PowerShell@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              FailOnStandardError = Bool,
                                              Inline = String,
                                              ScriptArguments = String,
                                              ScriptPath = String,
                                              ScriptType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'InlineScript,
                                                        'FilePath
                                                      |]
                                                    ],
                                              azurePowerShellVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'OtherVersion,
                                                        'LatestVersion
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                              errorActionPreference =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'silentlyContinue,
                                                        'continue,
                                                        'stop
                                                      |]
                                                    ],
                                              preferredAzurePowerShellVersion =
                                                String,
                                              pwsh = Bool,
                                              validateScriptSignature = Bool,
                                              workingDirectory = String,
                                            },
                                        required =
                                          { azureSubscription = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzurePowerShell@5$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              Inline = String,
                                              ScriptArguments = String,
                                              ScriptPath = String,
                                              ScriptType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'InlineScript,
                                                        'FilePath
                                                      |]
                                                    ],
                                              azureClassicSubscription = String,
                                              azureConnectionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'ConnectedServiceNameARM,
                                                        'ConnectedServiceName
                                                      |]
                                                    ],
                                              azurePowerShellVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'OtherVersion,
                                                        'LatestVersion
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                              preferredAzurePowerShellVersion =
                                                String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzurePowerShell@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              FailOnStandardError = Bool,
                                              Inline = String,
                                              RestrictContextToCurrentTask =
                                                Bool,
                                              ScriptArguments = String,
                                              ScriptPath = String,
                                              ScriptType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'InlineScript,
                                                        'FilePath
                                                      |]
                                                    ],
                                              azurePowerShellVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'OtherVersion,
                                                        'LatestVersion
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                              errorActionPreference =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'silentlyContinue,
                                                        'continue,
                                                        'stop
                                                      |]
                                                    ],
                                              preferredAzurePowerShellVersion =
                                                String,
                                              pwsh = Bool,
                                              validateScriptSignature = Bool,
                                              workingDirectory = String,
                                            },
                                        required =
                                          { azureSubscription = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzurePowerShell@4$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              FailOnStandardError = Bool,
                                              Inline = String,
                                              ScriptArguments = String,
                                              ScriptPath = String,
                                              ScriptType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'InlineScript,
                                                        'FilePath
                                                      |]
                                                    ],
                                              azureClassicSubscription = String,
                                              azureConnectionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'ConnectedServiceNameARM,
                                                        'ConnectedServiceName
                                                      |]
                                                    ],
                                              azurePowerShellVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'OtherVersion,
                                                        'LatestVersion
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                              errorActionPreference =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'silentlyContinue,
                                                        'continue,
                                                        'stop
                                                      |]
                                                    ],
                                              preferredAzurePowerShellVersion =
                                                String,
                                              validateScriptSignature = Bool,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzurePowerShell@3$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ConnectedServiceName = String,
                                              ConnectedServiceNameARM = String,
                                              ConnectedServiceNameSelector =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'ConnectedServiceNameARM,
                                                        'ConnectedServiceName
                                                      |]
                                                    ],
                                              Inline = String,
                                              ScriptArguments = String,
                                              ScriptPath = String,
                                              ScriptType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'InlineScript,
                                                        'FilePath
                                                      |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzurePowerShell@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              DatabaseName = String,
                                              ServerName = String,
                                              SqlAdditionalArguments = String,
                                              SqlFile = String,
                                              SqlInline = String,
                                              SqlPassword = String,
                                              SqlUsername = String,
                                              TaskNameSelector =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'InlineSqlTask,
                                                        'SqlTaskFile
                                                      |]
                                                    ],
                                            },
                                        required =
                                          {
                                              SqlPassword = true,
                                              SqlUsername = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^MysqlDeploymentOnMachineGroup@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              artifactFeeds = String,
                                              azureDevOpsServiceConnection =
                                                String,
                                              feedUrl = String,
                                              onlyAddExtraIndex = Bool,
                                              pythonDownloadServiceConnections =
                                                String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^PipAuthenticate@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              artifactFeeds = String,
                                              externalFeeds = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^PipAuthenticate@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              allowBrokenSymlinks = Bool,
                                              checkStyleRunAnalysis = Bool,
                                              codeCoverageClassFilesDirectories =
                                                String,
                                              codeCoverageClassFilter = String,
                                              codeCoverageFailIfEmpty = Bool,
                                              codeCoverageRestoreOriginalPomXml =
                                                Bool,
                                              codeCoverageSourceDirectories =
                                                String,
                                              codeCoverageToolOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'JaCoCo,
                                                        'Cobertura,
                                                        'None
                                                      |]
                                                    ],
                                              findBugsRunAnalysis = Bool,
                                              goals = String,
                                              isJacocoCoverageReportXML = Bool,
                                              javaHomeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Path, 'JDKVersion |]
                                                    ],
                                              jdkArchitectureOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x64, 'x86 |]
                                                    ],
                                              jdkDirectory = String,
                                              jdkVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"1.6",
                                                        '"1.7",
                                                        '"1.8",
                                                        '"1.9",
                                                        '"1.10",
                                                        '"1.11",
                                                        '"1.17",
                                                        '"default"
                                                      |]
                                                    ],
                                              mavenAuthenticateFeed = Bool,
                                              mavenDirectory = String,
                                              mavenOptions = String,
                                              mavenPomFile = String,
                                              mavenSetM2Home = Bool,
                                              mavenVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Path, 'Default |]
                                                    ],
                                              options = String,
                                              pmdRunAnalysis = Bool,
                                              publishJUnitResults = Bool,
                                              sonarQubeRunAnalysis = Bool,
                                              sqMavenPluginVersionChoice =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'pom, 'latest |]
                                                    ],
                                              testResultsFiles = String,
                                              testRunTitle = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Maven@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              allowBrokenSymlinks = Bool,
                                              checkStyleRunAnalysis = Bool,
                                              codeCoverageClassFilesDirectories =
                                                String,
                                              codeCoverageClassFilter = String,
                                              codeCoverageFailIfEmpty = Bool,
                                              codeCoverageRestoreOriginalPomXml =
                                                Bool,
                                              codeCoverageSourceDirectories =
                                                String,
                                              codeCoverageToolOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'JaCoCo,
                                                        'Cobertura,
                                                        'None
                                                      |]
                                                    ],
                                              effectivePomSkip = Bool,
                                              failWhenBugsFound = Bool,
                                              findBugsRunAnalysis = Bool,
                                              goals = String,
                                              isJacocoCoverageReportXML = Bool,
                                              javaHomeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Path, 'JDKVersion |]
                                                    ],
                                              jdkArchitectureOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x64, 'x86 |]
                                                    ],
                                              jdkDirectory = String,
                                              jdkVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"1.6",
                                                        '"1.7",
                                                        '"1.8",
                                                        '"1.9",
                                                        '"1.10",
                                                        '"1.11",
                                                        '"1.17",
                                                        '"default"
                                                      |]
                                                    ],
                                              mavenAuthenticateFeed = Bool,
                                              mavenDirectory = String,
                                              mavenOptions = String,
                                              mavenPomFile = String,
                                              mavenSetM2Home = Bool,
                                              mavenVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Path, 'Default |]
                                                    ],
                                              options = String,
                                              pmdRunAnalysis = Bool,
                                              publishJUnitResults = Bool,
                                              sonarQubeRunAnalysis = Bool,
                                              spotBugsGoal =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'check, 'spotbugs |]
                                                    ],
                                              spotBugsRunAnalysis = Bool,
                                              spotBugsVersion = String,
                                              sqMavenPluginVersionChoice =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'pom, 'latest |]
                                                    ],
                                              testResultsFiles = String,
                                              testRunTitle = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Maven@3$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              allowBrokenSymlinks = Bool,
                                              azureSubscription = String,
                                              checkStyleRunAnalysis = Bool,
                                              codeCoverageClassFilesDirectories =
                                                String,
                                              codeCoverageClassFilter = String,
                                              codeCoverageFailIfEmpty = Bool,
                                              codeCoverageRestoreOriginalPomXml =
                                                Bool,
                                              codeCoverageSourceDirectories =
                                                String,
                                              codeCoverageToolOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'JaCoCo,
                                                        'Cobertura,
                                                        'None
                                                      |]
                                                    ],
                                              effectivePomSkip = Bool,
                                              failWhenBugsFound = Bool,
                                              findBugsRunAnalysis = Bool,
                                              goals = String,
                                              isJacocoCoverageReportXML = Bool,
                                              javaHomeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Path, 'JDKVersion |]
                                                    ],
                                              jdkArchitectureOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x64, 'x86 |]
                                                    ],
                                              jdkDirectory = String,
                                              jdkVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"1.6",
                                                        '"1.7",
                                                        '"1.8",
                                                        '"1.9",
                                                        '"1.10",
                                                        '"1.11",
                                                        '"1.17",
                                                        '"default"
                                                      |]
                                                    ],
                                              mavenAuthenticateFeed = Bool,
                                              mavenDirectory = String,
                                              mavenOptions = String,
                                              mavenPomFile = String,
                                              mavenSetM2Home = Bool,
                                              mavenVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Path, 'Default |]
                                                    ],
                                              options = String,
                                              pmdRunAnalysis = Bool,
                                              publishJUnitResults = Bool,
                                              sonarQubeRunAnalysis = Bool,
                                              spotBugsGoal =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'check, 'spotbugs |]
                                                    ],
                                              spotBugsRunAnalysis = Bool,
                                              spotBugsVersion = String,
                                              sqMavenPluginVersionChoice =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'pom, 'latest |]
                                                    ],
                                              testResultsFiles = String,
                                              testRunTitle = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Maven@4$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              checkStyleRunAnalysis = Bool,
                                              codeCoverageClassFilesDirectories =
                                                String,
                                              codeCoverageClassFilter = String,
                                              codeCoverageFailIfEmpty = Bool,
                                              codeCoverageSourceDirectories =
                                                String,
                                              codeCoverageToolOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'JaCoCo,
                                                        'Cobertura,
                                                        'None
                                                      |]
                                                    ],
                                              findBugsRunAnalysis = Bool,
                                              goals = String,
                                              javaHomeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Path, 'JDKVersion |]
                                                    ],
                                              jdkArchitectureOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x64, 'x86 |]
                                                    ],
                                              jdkDirectory = String,
                                              jdkVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"1.6",
                                                        '"1.7",
                                                        '"1.8",
                                                        '"1.9",
                                                        '"default"
                                                      |]
                                                    ],
                                              mavenAuthenticateFeed = Bool,
                                              mavenDirectory = String,
                                              mavenOptions = String,
                                              mavenPomFile = String,
                                              mavenSetM2Home = Bool,
                                              mavenVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Path, 'Default |]
                                                    ],
                                              options = String,
                                              pmdRunAnalysis = Bool,
                                              publishJUnitResults = Bool,
                                              sonarQubeDBPassword = String,
                                              sonarQubeDBUrl = String,
                                              sonarQubeDBUsername = String,
                                              sonarQubeFailWhenQualityGateFails =
                                                Bool,
                                              sonarQubeIncludeFullReport = Bool,
                                              sonarQubeProjectKey = String,
                                              sonarQubeProjectName = String,
                                              sonarQubeProjectVersion = String,
                                              sonarQubeRunAnalysis = Bool,
                                              sonarQubeServiceEndpoint = String,
                                              sonarQubeSpecifyDB = Bool,
                                              testResultsFiles = String,
                                              testRunTitle = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Maven@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              azureSubscription = String,
                                              buildProperties = String,
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'custom,
                                                        'test,
                                                        'run,
                                                        'restore,
                                                        'publish,
                                                        'pack,
                                                        'push,
                                                        'build
                                                      |]
                                                    ],
                                              configuration = String,
                                              custom = String,
                                              externalFeedCredentials = String,
                                              feedsToUse =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'config, 'select |]
                                                    ],
                                              includeNuGetOrg = Bool,
                                              includesource = Bool,
                                              includesymbols = Bool,
                                              majorVersion = String,
                                              minorVersion = String,
                                              modifyOutputPath = Bool,
                                              noCache = Bool,
                                              nobuild = Bool,
                                              nuGetFeedType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'external, 'internal |]
                                                    ],
                                              nugetConfigPath = String,
                                              packDirectory = String,
                                              packagesToPack = String,
                                              packagesToPush = String,
                                              patchVersion = String,
                                              projects = String,
                                              publishFeedCredentials = String,
                                              publishPackageMetadata = Bool,
                                              publishTestResults = Bool,
                                              publishVstsFeed = String,
                                              publishWebProjects = Bool,
                                              requestTimeout =
                                                std.number.Integer,
                                              restoreArguments = String,
                                              restoreDirectory = String,
                                              testRunTitle = String,
                                              verbosityPack =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Diagnostic,
                                                        'Detailed,
                                                        'Normal,
                                                        'Minimal,
                                                        'Quiet,
                                                        '"-"
                                                      |]
                                                    ],
                                              verbosityRestore =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Diagnostic,
                                                        'Detailed,
                                                        'Normal,
                                                        'Minimal,
                                                        'Quiet,
                                                        '"-"
                                                      |]
                                                    ],
                                              versionEnvVar = String,
                                              versioningScheme =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'byBuildNumber,
                                                        'byEnvVar,
                                                        'byPrereleaseNumber,
                                                        'off
                                                      |]
                                                    ],
                                              vstsFeed = String,
                                              workingDirectory = String,
                                              zipAfterPublish = Bool,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^DotNetCoreCLI@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'run,
                                                        'test,
                                                        'restore,
                                                        'publish,
                                                        'build
                                                      |]
                                                    ],
                                              projects = String,
                                              publishWebProjects = Bool,
                                              zipAfterPublish = Bool,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^DotNetCoreCLI@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'run,
                                                        'test,
                                                        'restore,
                                                        'publish,
                                                        'build
                                                      |]
                                                    ],
                                              projects = String,
                                              publishWebProjects = Bool,
                                              zipAfterPublish = Bool,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^DotNetCoreCLI@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              email = String,
                                              password = String,
                                              solutionFile = String,
                                            },
                                        required =
                                          { email = true, password = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^XamarinComponentRestore@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArguments = String,
                                              AppSettings = String,
                                              AzureContainerRegistry = String,
                                              AzureContainerRegistryImage =
                                                String,
                                              AzureContainerRegistryLoginServer =
                                                String,
                                              AzureContainerRegistryTag =
                                                String,
                                              ConfigurationSettings = String,
                                              DeployToSlotFlag = Bool,
                                              DockerImageTag = String,
                                              DockerNamespace = String,
                                              DockerRepository = String,
                                              DockerRepositoryAccess =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'public, 'private |]
                                                    ],
                                              ExcludeFilesFromAppDataFlag =
                                                Bool,
                                              GenerateWebConfig = Bool,
                                              ImageSource =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Builtin, 'Registry |]
                                                    ],
                                              InlineScript = String,
                                              JSONFiles = String,
                                              Package = String,
                                              PrivateRegistryImage = String,
                                              PrivateRegistryTag = String,
                                              RemoveAdditionalFilesFlag = Bool,
                                              RenameFilesFlag = Bool,
                                              ResourceGroupName = String,
                                              RuntimeStack = String,
                                              ScriptPath = String,
                                              ScriptType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"File Path",
                                                        '"Inline Script",
                                                        '""
                                                      |]
                                                    ],
                                              SetParametersFile = String,
                                              SlotName = String,
                                              StartupCommand = String,
                                              TakeAppOfflineFlag = Bool,
                                              UseWebDeploy = Bool,
                                              VirtualApplication = String,
                                              WebAppName = String,
                                              WebAppUri = String,
                                              WebConfigParameters = String,
                                              appType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'mobileapp,
                                                        'api,
                                                        'functionapp,
                                                        'applinux,
                                                        'app
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                              dockerRegistryConnection = String,
                                              enableXmlTransform = Bool,
                                              enableXmlVariableSubstitution =
                                                Bool,
                                              packageForLinux = String,
                                            },
                                        required =
                                          {
                                              WebAppName = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureRmWebAppDeployment@3$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArguments = String,
                                              ConnectedServiceName = String,
                                              DeployToSlotFlag = Bool,
                                              ExcludeFilesFromAppDataFlag =
                                                Bool,
                                              Package = String,
                                              RemoveAdditionalFilesFlag = Bool,
                                              ResourceGroupName = String,
                                              SetParametersFile = String,
                                              SlotName = String,
                                              TakeAppOfflineFlag = Bool,
                                              UseWebDeploy = Bool,
                                              VirtualApplication = String,
                                              WebAppName = String,
                                              WebAppUri = String,
                                            },
                                        required =
                                          {
                                              ConnectedServiceName = true,
                                              WebAppName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureRmWebAppDeployment@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArguments = String,
                                              AppSettings = String,
                                              ConfigurationSettings = String,
                                              ConnectionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'PublishProfile,
                                                        'AzureRM
                                                      |]
                                                    ],
                                              DeploymentType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'runFromZip,
                                                        'zipDeploy,
                                                        'webDeploy
                                                      |]
                                                    ],
                                              DockerImageTag = String,
                                              DockerNamespace = String,
                                              DockerRepository = String,
                                              ExcludeFilesFromAppDataFlag =
                                                Bool,
                                              InlineScript = String,
                                              JSONFiles = String,
                                              PublishProfilePassword = String,
                                              PublishProfilePath = String,
                                              RemoveAdditionalFilesFlag = Bool,
                                              RenameFilesFlag = Bool,
                                              ResourceGroupName = String,
                                              RuntimeStack = String,
                                              RuntimeStackFunction =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"PYTHON|3.8",
                                                        '"PYTHON|3.7",
                                                        '"PYTHON|3.6",
                                                        '"NODE|14",
                                                        '"NODE|12",
                                                        '"NODE|10",
                                                        '"NODE|8",
                                                        '"JAVA|11",
                                                        '"JAVA|8",
                                                        '"DOTNET|3.1",
                                                        '"DOTNET|2.2"
                                                      |]
                                                    ],
                                              ScriptPath = String,
                                              ScriptType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"File Path",
                                                        '"Inline Script",
                                                        '""
                                                      |]
                                                    ],
                                              SetParametersFile = String,
                                              SlotName = String,
                                              StartupCommand = String,
                                              TakeAppOfflineFlag = Bool,
                                              VirtualApplication = String,
                                              WebAppName = String,
                                              WebConfigParameters = String,
                                              appType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'mobileApp,
                                                        'apiApp,
                                                        'functionAppContainer,
                                                        'functionAppLinux,
                                                        'functionApp,
                                                        'webAppHyperVContainer,
                                                        'webAppContainer,
                                                        'webAppLinux,
                                                        'webApp
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                              deployToSlotOrASE = Bool,
                                              enableCustomDeployment = Bool,
                                              enableXmlTransform = Bool,
                                              enableXmlVariableSubstitution =
                                                Bool,
                                              packageForLinux = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureRmWebAppDeployment@4$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AuthenticationMechanism =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Credssp, 'Default |]
                                                    ],
                                              CommunicationProtocol =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Https, 'Http |]
                                                    ],
                                              ErrorActionPreference =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'silentlyContinue,
                                                        'continue,
                                                        'stop
                                                      |]
                                                    ],
                                              InitializationScript = String,
                                              InlineScript = String,
                                              Machines = String,
                                              NewPsSessionOptionArguments =
                                                String,
                                              RunPowershellInParallel = Bool,
                                              ScriptArguments = String,
                                              ScriptPath = String,
                                              ScriptType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Inline, 'FilePath |]
                                                    ],
                                              SessionVariables = String,
                                              UserName = String,
                                              UserPassword = String,
                                              WorkingDirectory = String,
                                              failOnStderr = Bool,
                                              ignoreLASTEXITCODE = Bool,
                                            },
                                        required = { Machines = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PowerShellOnTargetMachines@3$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdminPassword = String,
                                              AdminUserName = String,
                                              EnvironmentName = String,
                                              InitializationScriptPath = String,
                                              MachineNames = String,
                                              Protocol =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Https, 'Http |]
                                                    ],
                                              ResourceFilteringMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'tags, 'machineNames |]
                                                    ],
                                              RunPowershellInParallel = Bool,
                                              ScriptArguments = String,
                                              ScriptPath = String,
                                              SessionVariables = String,
                                              TestCertificate = Bool,
                                            },
                                        required =
                                          {
                                              EnvironmentName = true,
                                              ScriptPath = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PowerShellOnTargetMachines@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdminPassword = String,
                                              AdminUserName = String,
                                              EnvironmentName = String,
                                              InitializationScriptPath = String,
                                              MachineNames = String,
                                              Protocol =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Https, 'Http |]
                                                    ],
                                              ResourceFilteringMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'tags, 'machineNames |]
                                                    ],
                                              RunPowershellInParallel = Bool,
                                              ScriptArguments = String,
                                              ScriptPath = String,
                                              SessionVariables = String,
                                              TestCertificate = Bool,
                                            },
                                        required =
                                          {
                                              EnvironmentName = true,
                                              ScriptPath = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PowerShellOnTargetMachines@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              failIfCoverageEmpty = Bool,
                                              pathToSources = String,
                                              summaryFileLocation = String,
                                            },
                                        required =
                                          { summaryFileLocation = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PublishCodeCoverageResults@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              additionalCodeCoverageFiles =
                                                String,
                                              codeCoverageTool =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'JaCoCo, 'Cobertura |]
                                                    ],
                                              failIfCoverageEmpty = Bool,
                                              pathToSources = String,
                                              reportDirectory = String,
                                              summaryFileLocation = String,
                                            },
                                        required =
                                          { summaryFileLocation = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PublishCodeCoverageResults@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              autMachineGroup = String,
                                              codeCoverageEnabled = Bool,
                                              configuration = String,
                                              customSlicingEnabled = Bool,
                                              dropLocation = String,
                                              overrideRunParams = String,
                                              platform = String,
                                              runSettingsFile = String,
                                              sourcefilters = String,
                                              testConfiguration = String,
                                              testConfigurations = String,
                                              testFilterCriteria = String,
                                              testMachineGroup = String,
                                              testPlan = String,
                                              testRunTitle = String,
                                              testSelection =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'testPlan,
                                                        'testAssembly
                                                      |]
                                                    ],
                                              testSuite = String,
                                            },
                                        required =
                                          {
                                              dropLocation = true,
                                              testMachineGroup = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^RunVisualStudioTestsusingTestAgent@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              emailRecipients = String,
                                              instructions = String,
                                              onTimeout =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'resume, 'reject |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^ManualIntervention@8$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              provProfileSecureFile = String,
                                              provProfileSourceRepository =
                                                String,
                                              provisioningProfileLocation =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'sourceRepository,
                                                        'secureFiles
                                                      |]
                                                    ],
                                              removeProfile = Bool,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^InstallAppleProvisioningProfile@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              provProfileSecureFile = String,
                                              removeProfile = Bool,
                                            },
                                        required =
                                          { provProfileSecureFile = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^InstallAppleProvisioningProfile@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    {},
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^SonarQubePostTest@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              alsoPublishWheel = Bool,
                                              packageDirectory = String,
                                              pypiConnection = String,
                                            },
                                        required =
                                          {
                                              packageDirectory = true,
                                              pypiConnection = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^PyPIPublisher@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ConnectedServiceName = String,
                                              ScriptArguments = String,
                                              ScriptPath = String,
                                            },
                                        required =
                                          {
                                              ConnectedServiceName = true,
                                              ScriptPath = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^ChefKnife@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              goBin = String,
                                              goPath = String,
                                              version = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^GoTool@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appName = String,
                                              appPath = String,
                                              ipaName = String,
                                              ipaPath = String,
                                              provisioningProfile = String,
                                              sdk = String,
                                            },
                                        required =
                                          { provisioningProfile = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^XcodePackageiOS@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'custom,
                                                        'test,
                                                        'build,
                                                        'get
                                                      |]
                                                    ],
                                              customCommand = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Go@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    {},
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PublishPipelineMetadata@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Run a Docker command",
                                                        '"Run an image",
                                                        '"Push images",
                                                        '"Push an image",
                                                        '"Tag images",
                                                        '"Build an image"
                                                      |]
                                                    ],
                                              addBaseImageData = Bool,
                                              additionalImageTags = String,
                                              azureContainerRegistry = String,
                                              azureSubscription = String,
                                              buildArguments = String,
                                              containerCommand = String,
                                              containerName = String,
                                              containerregistrytype =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Container Registry",
                                                        '"Azure Container Registry"
                                                      |]
                                                    ],
                                              context = String,
                                              customCommand = String,
                                              defaultContext = Bool,
                                              detached = Bool,
                                              dockerFile = String,
                                              dockerHostEndpoint = String,
                                              dockerRegistryConnection = String,
                                              enforceDockerNamingConvention =
                                                Bool,
                                              entrypoint = String,
                                              envVars = String,
                                              imageDigestFile = String,
                                              imageName = String,
                                              imageNamesPath = String,
                                              includeLatestTag = Bool,
                                              includeSourceTags = Bool,
                                              memory = String,
                                              ports = String,
                                              qualifyImageName = Bool,
                                              restartMaxRetries = String,
                                              restartPolicy =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'unlessStopped,
                                                        'always,
                                                        'onFailure,
                                                        'no
                                                      |]
                                                    ],
                                              volumes = String,
                                              workDir = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Docker@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              Dockerfile = String,
                                              addBaseImageData = Bool,
                                              addPipelineData = Bool,
                                              arguments = String,
                                              buildContext = String,
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'stop,
                                                        'start,
                                                        'logout,
                                                        'login,
                                                        'push,
                                                        'build,
                                                        'buildAndPush
                                                      |]
                                                    ],
                                              container = String,
                                              containerRegistry = String,
                                              repository = String,
                                              tags = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Docker@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              addBaseImageData = Bool,
                                              addDefaultLabels = Bool,
                                              arguments = String,
                                              azureContainerRegistry = String,
                                              azureSubscriptionEndpoint =
                                                String,
                                              buildContext = String,
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'logout,
                                                        'login,
                                                        '"Run an image",
                                                        '"Push an image",
                                                        '"Tag image",
                                                        '"Build an image"
                                                      |]
                                                    ],
                                              containerCommand = String,
                                              containerName = String,
                                              containerregistrytype =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Container Registry",
                                                        '"Azure Container Registry"
                                                      |]
                                                    ],
                                              dockerFile = String,
                                              dockerHostEndpoint = String,
                                              dockerRegistryEndpoint = String,
                                              enforceDockerNamingConvention =
                                                Bool,
                                              entrypointOverride = String,
                                              envVars = String,
                                              imageDigestFile = String,
                                              imageName = String,
                                              imageNamesPath = String,
                                              includeLatestTag = Bool,
                                              includeSourceTags = Bool,
                                              maxRestartRetries = String,
                                              memoryLimit = String,
                                              ports = String,
                                              pushMultipleImages = Bool,
                                              qualifyImageName = Bool,
                                              qualifySourceImageName = Bool,
                                              restartPolicy =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'unlessStopped,
                                                        'always,
                                                        'onFailure,
                                                        'no
                                                      |]
                                                    ],
                                              runInBackground = Bool,
                                              tagMultipleImages = Bool,
                                              useDefaultContext = Bool,
                                              volumes = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Docker@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              captureConsole = Bool,
                                              capturePipeline = Bool,
                                              delayBetweenRetries = String,
                                              failOnUnstableResult = Bool,
                                              isMultibranchJob = Bool,
                                              isParameterizedJob = Bool,
                                              jobName = String,
                                              jobParameters = String,
                                              multibranchPipelineBranch =
                                                String,
                                              retryCount = String,
                                              serverEndpoint = String,
                                            },
                                        required =
                                          {
                                              jobName = true,
                                              serverEndpoint = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^JenkinsQueueJob@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              captureConsole = Bool,
                                              capturePipeline = Bool,
                                              isMultibranchJob = Bool,
                                              jobName = String,
                                              jobParameters = String,
                                              multibranchPipelineBranch =
                                                String,
                                              parameterizedJob = Bool,
                                              serverEndpoint = String,
                                            },
                                        required =
                                          {
                                              jobName = true,
                                              serverEndpoint = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^JenkinsQueueJob@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              clean = Bool,
                                              cleanContents = Bool,
                                              credentialsOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'inputs,
                                                        'serviceEndpoint
                                                      |]
                                                    ],
                                              customCmds = String,
                                              enableUtf8 = Bool,
                                              filePatterns = String,
                                              implicitFTPS = Bool,
                                              password = String,
                                              preservePaths = Bool,
                                              remoteDirectory = String,
                                              rootDirectory = String,
                                              serverEndpoint = String,
                                              serverUrl = String,
                                              trustSSL = Bool,
                                              username = String,
                                            },
                                        required = { rootDirectory = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^FtpUpload@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              clean = Bool,
                                              cleanContents = Bool,
                                              credentialsOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'inputs,
                                                        'serviceEndpoint
                                                      |]
                                                    ],
                                              filePatterns = String,
                                              overwrite = Bool,
                                              password = String,
                                              preservePaths = Bool,
                                              remoteDirectory = String,
                                              rootDirectory = String,
                                              serverEndpoint = String,
                                              serverUrl = String,
                                              trustSSL = Bool,
                                              username = String,
                                            },
                                        required = { rootDirectory = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^FtpUpload@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArguments = String,
                                              AdminPassword = String,
                                              AdminUserName = String,
                                              CleanTargetBeforeCopy = Bool,
                                              CopyFilesInParallel = Bool,
                                              EnvironmentName = String,
                                              MachineNames = String,
                                              ResourceFilteringMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'tags, 'machineNames |]
                                                    ],
                                              SourcePath = String,
                                              TargetPath = String,
                                            },
                                        required =
                                          {
                                              SourcePath = true,
                                              TargetPath = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^WindowsMachineFileCopy@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArguments = String,
                                              AdminPassword = String,
                                              AdminUserName = String,
                                              CleanTargetBeforeCopy = Bool,
                                              CopyFilesInParallel = Bool,
                                              MachineNames = String,
                                              SourcePath = String,
                                              TargetPath = String,
                                            },
                                        required =
                                          {
                                              AdminPassword = true,
                                              AdminUserName = true,
                                              MachineNames = true,
                                              SourcePath = true,
                                              TargetPath = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^WindowsMachineFileCopy@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              avdAbi = String,
                                              avdForce = Bool,
                                              avdName = String,
                                              avdOptionalArgs = String,
                                              createAvd = Bool,
                                              deleteAvd = Bool,
                                              emulatorDevice = String,
                                              emulatorHeadless = Bool,
                                              emulatorOptionalArgs = String,
                                              emulatorTarget = String,
                                              emulatorTimeout = String,
                                              gradleArguments = String,
                                              gradleProj = String,
                                              gradleWrapper = String,
                                              startEmulator = Bool,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AndroidBuild@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              artifactFeeds = String,
                                              externalFeeds = String,
                                              publishPackageMetadata = Bool,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^TwineAuthenticate@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              artifactFeed = String,
                                              azureDevOpsServiceConnection =
                                                String,
                                              feedUrl = String,
                                              pythonUploadServiceConnection =
                                                String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^TwineAuthenticate@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArguments = String,
                                              ExcludeFilesFromAppDataFlag =
                                                Bool,
                                              JSONFiles = String,
                                              Package = String,
                                              RemoveAdditionalFilesFlag = Bool,
                                              SetParametersFile = String,
                                              TakeAppOfflineFlag = Bool,
                                              VirtualApplication = String,
                                              WebSiteName = String,
                                              XmlTransformation = Bool,
                                              XmlVariableSubstitution = Bool,
                                            },
                                        required = { WebSiteName = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^IISWebAppDeploymentOnMachineGroup@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              failOnStderr = Bool,
                                              pythonInterpreter = String,
                                              script = String,
                                              scriptPath = String,
                                              scriptSource =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'inline, 'filePath |]
                                                    ],
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^PythonScript@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              checkLatestHelmVersion = Bool,
                                              checkLatestKubectl = Bool,
                                              helmVersion = String,
                                              installKubectl = Bool,
                                              kubectlVersion = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^HelmInstaller@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          { helmVersionToInstall = String, },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^HelmInstaller@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              nodeVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| '"16", '"10", '"6" |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^NodeTaskRunnerInstaller@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Deactivate,
                                                        'Activate
                                                      |]
                                                    ],
                                              email = String,
                                              password = String,
                                              product =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'MM, 'MT, 'MA |]
                                                    ],
                                              timeout = String,
                                            },
                                        required =
                                          { email = true, password = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^XamarinLicense@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              forceReinstallCredentialProvider =
                                                Bool,
                                              nuGetServiceConnections = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^NuGetAuthenticate@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              azureDevOpsServiceConnection =
                                                String,
                                              feedUrl = String,
                                              forceReinstallCredentialProvider =
                                                Bool,
                                              nuGetServiceConnections = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^NuGetAuthenticate@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              externalFeedCredentials = String,
                                              packageName = String,
                                              restoreDirectory = String,
                                              version = String,
                                            },
                                        required =
                                          {
                                              packageName = true,
                                              version = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DownloadGitHubNugetPackage@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              artifactsFeeds = String,
                                              mavenServiceConnections = String,
                                              workloadIdentityServiceConnection =
                                                String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^MavenAuthenticate@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AppConfigurationEndpoint = String,
                                              KeyFilter = String,
                                              Label = String,
                                              SelectionMode =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Snapshot, 'Default |]
                                                    ],
                                              SnapshotName = String,
                                              SuppressWarningForOverriddenKeys =
                                                Bool,
                                              TreatKeyVaultErrorsAsWarning =
                                                Bool,
                                              TrimKeyPrefix = String,
                                              azureSubscription = String,
                                            },
                                        required =
                                          {
                                              AppConfigurationEndpoint = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureAppConfigurationExport@10$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              baseEnvironmentName = String,
                                              resourceName = String,
                                              reviewResourceName = String,
                                            },
                                        required = { resourceName = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^ReviewApp@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              azureCommonVirtualFile = String,
                                              azureContainerName = String,
                                              azureResourceGroupName = String,
                                              azureResourceManagerEndpoint =
                                                String,
                                              azureStorageAccountName = String,
                                              cleanDestinationDirectory = Bool,
                                              createExtractDirectory = Bool,
                                              jdkArchitectureOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x86, 'x64 |]
                                                    ],
                                              jdkDestinationDirectory = String,
                                              jdkFile = String,
                                              jdkSourceOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'PreInstalled,
                                                        'LocalDirectory,
                                                        'AzureStorage
                                                      |]
                                                    ],
                                              versionSpec = String,
                                            },
                                        required =
                                          {
                                              jdkArchitectureOption = true,
                                              jdkSourceOption = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^JavaToolInstaller@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              azureCommonVirtualFile = String,
                                              azureContainerName = String,
                                              azureResourceGroupName = String,
                                              azureResourceManagerEndpoint =
                                                String,
                                              azureStorageAccountName = String,
                                              cleanDestinationDirectory = Bool,
                                              createExtractDirectory = Bool,
                                              jdkArchitectureOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x86, 'x64 |]
                                                    ],
                                              jdkDestinationDirectory = String,
                                              jdkFile = String,
                                              jdkSourceOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'PreInstalled,
                                                        'LocalDirectory,
                                                        'AzureStorage
                                                      |]
                                                    ],
                                              versionSpec = String,
                                            },
                                        required =
                                          {
                                              jdkArchitectureOption = true,
                                              jdkSourceOption = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^JavaToolInstaller@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              Attributes = String,
                                              Environment = String,
                                              chefWaitTime = String,
                                              connectedServiceName = String,
                                            },
                                        required =
                                          {
                                              Attributes = true,
                                              Environment = true,
                                              connectedServiceName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Chef@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appName = String,
                                              appSettings = String,
                                              appType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'functionAppLinux,
                                                        'functionApp
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                              configurationStrings = String,
                                              customWebConfig = String,
                                              deployToSlotOrASE = Bool,
                                              deploymentMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'runFromPackage,
                                                        'zipDeploy,
                                                        'auto
                                                      |]
                                                    ],
                                              package = String,
                                              resourceGroupName = String,
                                              runtimeStack =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"PYTHON|3.11",
                                                        '"PYTHON|3.10",
                                                        '"PYTHON|3.9",
                                                        '"PYTHON|3.8",
                                                        '"NODE|20",
                                                        '"NODE|18",
                                                        '"NODE|16",
                                                        '"NODE|14",
                                                        '"JAVA|21",
                                                        '"JAVA|17",
                                                        '"JAVA|11",
                                                        '"JAVA|8",
                                                        '"DOTNET-ISOLATED|8.0",
                                                        '"DOTNET-ISOLATED|7.0",
                                                        '"DOTNET-ISOLATED|6.0",
                                                        '"DOTNET|6.0"
                                                      |]
                                                    ],
                                              slotName = String,
                                              startUpCommand = String,
                                            },
                                        required =
                                          {
                                              appName = true,
                                              appType = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureFunctionApp@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appName = String,
                                              appSettings = String,
                                              appType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'functionAppLinux,
                                                        'functionApp
                                                      |]
                                                    ],
                                              connectedServiceNameARM = String,
                                              deployToSlotOrASE = Bool,
                                              deploymentMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'runFromPackage,
                                                        'zipDeploy,
                                                        'auto
                                                      |]
                                                    ],
                                              isFlexConsumption = Bool,
                                              package = String,
                                              resourceGroupName = String,
                                              runtimeStack =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"PYTHON|3.11",
                                                        '"PYTHON|3.10",
                                                        '"PYTHON|3.9",
                                                        '"PYTHON|3.8",
                                                        '"NODE|20",
                                                        '"NODE|18",
                                                        '"NODE|16",
                                                        '"NODE|14",
                                                        '"JAVA|21",
                                                        '"JAVA|17",
                                                        '"JAVA|11",
                                                        '"JAVA|8",
                                                        '"DOTNET-ISOLATED|8.0",
                                                        '"DOTNET-ISOLATED|7.0",
                                                        '"DOTNET-ISOLATED|6.0",
                                                        '"DOTNET|6.0"
                                                      |]
                                                    ],
                                              slotName = String,
                                            },
                                        required =
                                          {
                                              appName = true,
                                              appType = true,
                                              connectedServiceNameARM = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureFunctionApp@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              azureDevOpsServiceConnection =
                                                String,
                                              customEndpoint = String,
                                              feedUrl = String,
                                              workingFile = String,
                                            },
                                        required = { workingFile = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^npmAuthenticate@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              clean = Bool,
                                              configuration = String,
                                              createLogFile = Bool,
                                              logFileVerbosity =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'diagnostic,
                                                        'detailed,
                                                        'normal,
                                                        'minimal,
                                                        'quiet
                                                      |]
                                                    ],
                                              logProjectEvents = Bool,
                                              maximumCpuCount = Bool,
                                              msbuildArchitecture =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x64, 'x86 |]
                                                    ],
                                              msbuildArguments = String,
                                              msbuildLocation = String,
                                              msbuildLocationMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'location, 'version |]
                                                    ],
                                              msbuildVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"4.0",
                                                        '"12.0",
                                                        '"14.0",
                                                        '"15.0",
                                                        '"16.0",
                                                        '"17.0",
                                                        'latest
                                                      |]
                                                    ],
                                              platform = String,
                                              restoreNugetPackages = Bool,
                                              solution = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^MSBuild@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ConnectedServiceName = String,
                                              additionalBuilderParameters =
                                                String,
                                              azureResourceGroup = String,
                                              baseImage =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"SUSE:SLES:11-SP4:linux",
                                                        '"SUSE:SLES:12-SP2:linux",
                                                        '"SUSE:openSUSE-Leap:42.2:linux",
                                                        '"credativ:Debian:7:linux",
                                                        '"credativ:Debian:8:linux",
                                                        '"OpenLogic:CentOS:6.8:linux",
                                                        '"OpenLogic:CentOS:7.2:linux",
                                                        '"RedHat:RHEL:6.8:linux",
                                                        '"RedHat:RHEL:7.2:linux",
                                                        '"Canonical:UbuntuServer:16.04-LTS:linux",
                                                        '"Canonical:UbuntuServer:14.04.4-LTS:linux",
                                                        '"MicrosoftWindowsServer:WindowsServer:2008-R2-SP1:windows",
                                                        '"MicrosoftWindowsServer:WindowsServer:2012-Datacenter:windows",
                                                        '"MicrosoftWindowsServer:WindowsServer:2016-Datacenter:windows",
                                                        '"MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter:windows"
                                                      |]
                                                    ],
                                              baseImageSource =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'customVhd,
                                                        '"default"
                                                      |]
                                                    ],
                                              customImageOSType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'linux, 'windows |]
                                                    ],
                                              customImageUrl = String,
                                              customTemplateLocation = String,
                                              customTemplateParameters = String,
                                              deployScriptArguments = String,
                                              deployScriptPath = String,
                                              imageUri = String,
                                              location = String,
                                              packagePath = String,
                                              skipTempFileCleanupDuringVMDeprovision =
                                                Bool,
                                              storageAccountName = String,
                                              templateType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'custom, 'builtin |]
                                                    ],
                                            },
                                        required =
                                          {
                                              ConnectedServiceName = true,
                                              azureResourceGroup = true,
                                              deployScriptPath = true,
                                              location = true,
                                              packagePath = true,
                                              storageAccountName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^PackerBuild@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ConnectedServiceName = String,
                                              additionalBuilderParameters =
                                                String,
                                              azureResourceGroup = String,
                                              baseImage =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"SUSE:SLES:11-SP4:linux",
                                                        '"SUSE:SLES:12-SP2:linux",
                                                        '"SUSE:openSUSE-Leap:42.2:linux",
                                                        '"credativ:Debian:7:linux",
                                                        '"credativ:Debian:8:linux",
                                                        '"OpenLogic:CentOS:6.8:linux",
                                                        '"OpenLogic:CentOS:7.2:linux",
                                                        '"RedHat:RHEL:6.8:linux",
                                                        '"RedHat:RHEL:7.2:linux",
                                                        '"Canonical:UbuntuServer:18.04-LTS:linux",
                                                        '"Canonical:UbuntuServer:16.04-LTS:linux",
                                                        '"Canonical:UbuntuServer:14.04.4-LTS:linux",
                                                        '"MicrosoftWindowsServer:WindowsServer:2008-R2-SP1:windows",
                                                        '"MicrosoftWindowsServer:WindowsServer:2012-Datacenter:windows",
                                                        '"MicrosoftWindowsServer:WindowsServer:2016-Datacenter:windows",
                                                        '"MicrosoftWindowsServer:WindowsServer:2012-R2-Datacenter:windows"
                                                      |]
                                                    ],
                                              baseImageSource =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'customVhd,
                                                        '"default"
                                                      |]
                                                    ],
                                              customImageOSType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'linux, 'windows |]
                                                    ],
                                              customImageUrl = String,
                                              customTemplateLocation = String,
                                              customTemplateParameters = String,
                                              deployScriptArguments = String,
                                              deployScriptPath = String,
                                              imageId = String,
                                              imageUri = String,
                                              isManagedImage = Bool,
                                              location = String,
                                              managedImageName = String,
                                              packagePath = String,
                                              packerVersion = String,
                                              skipTempFileCleanupDuringVMDeprovision =
                                                Bool,
                                              storageAccountName = String,
                                              templateType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'custom, 'builtin |]
                                                    ],
                                            },
                                        required =
                                          {
                                              ConnectedServiceName = true,
                                              azureResourceGroup = true,
                                              deployScriptPath = true,
                                              location = true,
                                              packagePath = true,
                                              storageAccountName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^PackerBuild@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              buildProperties = String,
                                              configurationToPack = String,
                                              includeReferencedProjects = Bool,
                                              nuGetAdditionalArgs = String,
                                              nuGetPath = String,
                                              outputdir = String,
                                              requestedMajorVersion = String,
                                              requestedMinorVersion = String,
                                              requestedPatchVersion = String,
                                              searchPattern = String,
                                              versionByBuild =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"true",
                                                        'byEnvVar,
                                                        'byPrereleaseNumber,
                                                        '"false"
                                                      |]
                                                    ],
                                              versionEnvVar = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^NuGetPackager@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AppConfigurationEndpoint = String,
                                              CompositionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'key_label, 'key |]
                                                    ],
                                              Filters = String,
                                              RetentionPeriod =
                                                std.number.Integer,
                                              SnapshotName = String,
                                              Tags = String,
                                              azureSubscription = String,
                                            },
                                        required =
                                          {
                                              AppConfigurationEndpoint = true,
                                              Filters = true,
                                              SnapshotName = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureAppConfigurationSnapshot@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              checkLatestVersion = Bool,
                                              version = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^DuffleInstaller@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              applicationPackagePath = String,
                                              buildNumber = String,
                                              compareType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Specific,
                                                        'LastSuccessful
                                                      |]
                                                    ],
                                              logAllChanges = Bool,
                                              pkgArtifactName = String,
                                              updateOnlyChanged = Bool,
                                              versionBehavior =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Replace, 'Append |]
                                                    ],
                                              versionSuffix = String,
                                            },
                                        required =
                                          { applicationPackagePath = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^ServiceFabricUpdateAppVersions@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              applicationPackagePath = String,
                                              buildNumber = String,
                                              compareType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Specific,
                                                        'LastSuccessful
                                                      |]
                                                    ],
                                              imageDigestsPath = String,
                                              imageNamesPath = String,
                                              logAllChanges = Bool,
                                              overwriteExistingPkgArtifact =
                                                Bool,
                                              pkgArtifactName = String,
                                              updateOnlyChanged = Bool,
                                              updateType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Docker image settings",
                                                        '"Manifest versions"
                                                      |]
                                                    ],
                                              versionBehavior =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Replace, 'Append |]
                                                    ],
                                              versionSuffix = String,
                                            },
                                        required =
                                          { applicationPackagePath = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^ServiceFabricUpdateManifests@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ResourceGroupName = String,
                                              alertRule = String,
                                              alertState =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Closed,
                                                        'Acknowledged,
                                                        'New
                                                      |]
                                                    ],
                                              connectedServiceNameARM = String,
                                              filterType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'none,
                                                        'alertrule,
                                                        'resource
                                                      |]
                                                    ],
                                              monitorCondition =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Resolved, '"Fired " |]
                                                    ],
                                              resource = String,
                                              severity =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Sev4,
                                                        'Sev3,
                                                        'Sev2,
                                                        'Sev1,
                                                        'Sev0
                                                      |]
                                                    ],
                                              timeRange =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"30d",
                                                        '"7d",
                                                        '"1d",
                                                        '"1h"
                                                      |]
                                                    ],
                                            },
                                        required =
                                          {
                                              ResourceGroupName = true,
                                              connectedServiceNameARM = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureMonitor@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ResourceGroupName = String,
                                              ResourceType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Microsoft.Compute/virtualMachines",
                                                        '"Microsoft.Storage/storageAccounts",
                                                        '"Microsoft.Web/sites",
                                                        '"Microsoft.Insights/components"
                                                      |]
                                                    ],
                                              alertRules = String,
                                              connectedServiceNameARM = String,
                                              resourceName = String,
                                            },
                                        required =
                                          {
                                              ResourceGroupName = true,
                                              alertRules = true,
                                              connectedServiceNameARM = true,
                                              resourceName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureMonitor@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              akvPluginVersion = String,
                                              allowReferrersAPI = Bool,
                                              artifactRefs = String,
                                              azurekvServiceConection = String,
                                              caCertBundle = String,
                                              checksum = String,
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'verify,
                                                        'sign,
                                                        'install
                                                      |]
                                                    ],
                                              isCustomVersion = Bool,
                                              keyid = String,
                                              plugin =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'azureKeyVault |]
                                                    ],
                                              selfSigned = Bool,
                                              signatureFormat =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'jws, 'cose |]
                                                    ],
                                              timestampRootCert = String,
                                              timestampURL = String,
                                              trustPolicy = String,
                                              trustStore = String,
                                              url = String,
                                              version = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Notation@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              Action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Connect,
                                                        'Disconnect
                                                      |]
                                                    ],
                                              LoadBalancer = String,
                                              ResourceGroupName = String,
                                              azureSubscription = String,
                                            },
                                        required =
                                          {
                                              Action = true,
                                              LoadBalancer = true,
                                              ResourceGroupName = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureNLBManagement@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              LoadTest = String,
                                              TestDrop = String,
                                              agentCount =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"5",
                                                        '"4",
                                                        '"3",
                                                        '"2",
                                                        '"1"
                                                      |]
                                                    ],
                                              connectedServiceName = String,
                                              geoLocation =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"West US",
                                                        '"West Europe",
                                                        '"Southeast Asia",
                                                        '"South India",
                                                        '"South Central US",
                                                        '"North Europe",
                                                        '"North Central US",
                                                        '"Japan West",
                                                        '"Japan East",
                                                        '"East US",
                                                        '"East US 2",
                                                        '"East Asia",
                                                        '"Central US",
                                                        '"Central India",
                                                        '"Brazil South",
                                                        '"Australia Southeast",
                                                        '"Australia East",
                                                        'Default
                                                      |]
                                                    ],
                                              machineType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| '"2", '"0" |]
                                                    ],
                                              runDuration =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"300",
                                                        '"240",
                                                        '"180",
                                                        '"120",
                                                        '"60"
                                                      |]
                                                    ],
                                            },
                                        required = { TestDrop = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^ApacheJMeterLoadTest@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              abortOnContainerExit = Bool,
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Run a Docker Compose command",
                                                        '"Combine configuration",
                                                        '"Write service image digests",
                                                        '"Lock services",
                                                        '"Run a specific service",
                                                        '"Run services",
                                                        '"Push services",
                                                        '"Build services"
                                                      |]
                                                    ],
                                              additionalDockerComposeFiles =
                                                String,
                                              additionalImageTags = String,
                                              arguments = String,
                                              azureContainerRegistry = String,
                                              azureSubscription = String,
                                              baseResolveDirectory = String,
                                              buildImages = Bool,
                                              containerCommand = String,
                                              containerName = String,
                                              containerregistrytype =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Container Registry",
                                                        '"Azure Container Registry"
                                                      |]
                                                    ],
                                              currentWorkingDirectory = String,
                                              detached = Bool,
                                              dockerComposeCommand = String,
                                              dockerComposeFile = String,
                                              dockerComposeFileArgs = String,
                                              dockerComposePath = String,
                                              dockerHostEndpoint = String,
                                              dockerRegistryEndpoint = String,
                                              entrypoint = String,
                                              imageDigestComposeFile = String,
                                              includeLatestTag = Bool,
                                              includeSourceTags = Bool,
                                              nopIfNoDockerComposeFile = Bool,
                                              outputDockerComposeFile = String,
                                              ports = String,
                                              projectName = String,
                                              qualifyImageNames = Bool,
                                              removeBuildOptions = Bool,
                                              requireAdditionalDockerComposeFiles =
                                                Bool,
                                              serviceName = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^DockerCompose@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              abortOnContainerExit = Bool,
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Run a Docker Compose command",
                                                        '"Combine configuration",
                                                        '"Write service image digests",
                                                        '"Lock services",
                                                        '"Run a specific service",
                                                        '"Run services",
                                                        '"Push services",
                                                        '"Build services"
                                                      |]
                                                    ],
                                              additionalDockerComposeFiles =
                                                String,
                                              additionalImageTags = String,
                                              arguments = String,
                                              azureContainerRegistry = String,
                                              azureSubscription = String,
                                              baseResolveDirectory = String,
                                              buildImages = Bool,
                                              containerCommand = String,
                                              containerName = String,
                                              containerregistrytype =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Container Registry",
                                                        '"Azure Container Registry"
                                                      |]
                                                    ],
                                              currentWorkingDirectory = String,
                                              detached = Bool,
                                              dockerComposeCommand = String,
                                              dockerComposeFile = String,
                                              dockerComposeFileArgs = String,
                                              dockerComposePath = String,
                                              dockerHostEndpoint = String,
                                              dockerRegistryEndpoint = String,
                                              entrypoint = String,
                                              imageDigestComposeFile = String,
                                              includeLatestTag = Bool,
                                              includeSourceTags = Bool,
                                              nopIfNoDockerComposeFile = Bool,
                                              outputDockerComposeFile = String,
                                              ports = String,
                                              projectName = String,
                                              qualifyImageNames = Bool,
                                              removeBuildOptions = Bool,
                                              requireAdditionalDockerComposeFiles =
                                                Bool,
                                              serviceName = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^DockerCompose@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AlertRules = String,
                                              NotifyEmails = String,
                                              NotifyServiceOwners = Bool,
                                              ResourceGroupName = String,
                                              ResourceName = String,
                                              ResourceType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Microsoft.Compute/virtualMachines",
                                                        '"Microsoft.Storage/storageAccounts",
                                                        '"Microsoft.Web/sites",
                                                        '"Microsoft.Insights/components"
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                            },
                                        required =
                                          {
                                              AlertRules = true,
                                              ResourceGroupName = true,
                                              ResourceName = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureMonitorAlerts@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appFile = String,
                                              devices = String,
                                              dsymFile = String,
                                              email = String,
                                              localeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'user,
                                                        'es_ES,
                                                        'es_MX,
                                                        'ru_RU,
                                                        'ja_JP,
                                                        'de_DE,
                                                        'fr_FR,
                                                        'en_US,
                                                        'en_GB,
                                                        'nl_NL,
                                                        'da_DK
                                                      |]
                                                    ],
                                              optionalArgs = String,
                                              parallelizationOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"--test-chunk",
                                                        '"--fixture-chunk",
                                                        'none
                                                      |]
                                                    ],
                                              publishNUnitResults = Bool,
                                              series = String,
                                              teamApiKey = String,
                                              testAssemblyDirectory = String,
                                              testCloudFile = String,
                                              userDefinedLocale = String,
                                            },
                                        required =
                                          {
                                              appFile = true,
                                              devices = true,
                                              email = true,
                                              teamApiKey = true,
                                              testAssemblyDirectory = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^XamarinTestCloud@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ConsiderWarningAsError = Bool,
                                              DefaultServiceTypeHealthPolicy =
                                                String,
                                              FailureAction =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Manual, 'Rollback |]
                                                    ],
                                              ForceRestart = Bool,
                                              HealthCheckRetryTimeoutSec =
                                                String,
                                              HealthCheckStableDurationSec =
                                                String,
                                              HealthCheckWaitDurationSec =
                                                String,
                                              MaxPercentUnhealthyDeployedApplications =
                                                String,
                                              ServiceTypeHealthPolicyMap =
                                                String,
                                              TimeoutSec = String,
                                              UpgradeDomainTimeoutSec = String,
                                              UpgradeReplicaSetCheckTimeoutSec =
                                                String,
                                              UpgradeTimeoutSec = String,
                                              applicationPackagePath = String,
                                              applicationParameterPath = String,
                                              azureSubscription = String,
                                              compressPackage = Bool,
                                              configureDockerSettings = Bool,
                                              copyPackageTimeoutSec = String,
                                              dockerRegistryConnection = String,
                                              isUpgrade = Bool,
                                              overrideApplicationParameter =
                                                Bool,
                                              overridePublishProfileSettings =
                                                Bool,
                                              overwriteBehavior =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'SameAppTypeAndVersion,
                                                        'Never,
                                                        'Always
                                                      |]
                                                    ],
                                              passwordEncrypted = Bool,
                                              publishProfilePath = String,
                                              registerPackageTimeoutSec =
                                                String,
                                              registryCredentials =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'UsernamePassword,
                                                        'ContainerRegistryEndpoint,
                                                        'AzureResourceManagerEndpoint
                                                      |]
                                                    ],
                                              registryPassword = String,
                                              registryUserName = String,
                                              serviceConnectionName = String,
                                              skipPackageValidation = Bool,
                                              skipUpgradeSameTypeAndVersion =
                                                Bool,
                                              unregisterUnusedVersions = Bool,
                                              upgradeMode =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'UnmonitoredManual,
                                                        'UnmonitoredAuto,
                                                        'Monitored
                                                      |]
                                                    ],
                                              useDiffPackage = Bool,
                                            },
                                        required =
                                          {
                                              applicationPackagePath = true,
                                              serviceConnectionName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^ServiceFabricDeploy@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              actions = String,
                                              archivePath = String,
                                              args = String,
                                              configuration = String,
                                              destinationDevices = String,
                                              destinationPlatform = String,
                                              destinationPlatformOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'custom,
                                                        'macOS,
                                                        'tvOS,
                                                        'iOS,
                                                        '"default"
                                                      |]
                                                    ],
                                              destinationSimulators = String,
                                              destinationTypeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'devices,
                                                        'simulators
                                                      |]
                                                    ],
                                              exportArgs = String,
                                              exportMethod = String,
                                              exportOptions =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'specify,
                                                        'plist,
                                                        'auto
                                                      |]
                                                    ],
                                              exportOptionsPlist = String,
                                              exportPath = String,
                                              exportTeamId = String,
                                              packageApp = Bool,
                                              provisioningProfileName = String,
                                              provisioningProfileUuid = String,
                                              publishJUnitResults = Bool,
                                              scheme = String,
                                              sdk = String,
                                              signingIdentity = String,
                                              signingOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'auto,
                                                        'manual,
                                                        '"default",
                                                        'nosign
                                                      |]
                                                    ],
                                              teamId = String,
                                              testRunTitle = String,
                                              useXcpretty = Bool,
                                              workingDirectory = String,
                                              xcWorkspacePath = String,
                                              xcodeDeveloperDir = String,
                                              xcodeVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'specifyPath,
                                                        '"default",
                                                        '"13",
                                                        '"12",
                                                        '"11",
                                                        '"10",
                                                        '"9",
                                                        '"8"
                                                      |]
                                                    ],
                                              xcprettyArgs = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Xcode@5$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              actions = String,
                                              archivePath = String,
                                              args = String,
                                              configuration = String,
                                              cwd = String,
                                              defaultKeychainPassword = String,
                                              exportArgs = String,
                                              exportMethod = String,
                                              exportOptions =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'specify,
                                                        'plist,
                                                        'auto
                                                      |]
                                                    ],
                                              exportOptionsPlist = String,
                                              exportPath = String,
                                              exportTeamId = String,
                                              iosSigningIdentity = String,
                                              outputPattern = String,
                                              p12 = String,
                                              p12pwd = String,
                                              packageApp = Bool,
                                              provProfile = String,
                                              provProfileUuid = String,
                                              publishJUnitResults = Bool,
                                              removeProfile = Bool,
                                              scheme = String,
                                              sdk = String,
                                              signMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'id, 'file |]
                                                    ],
                                              teamId = String,
                                              unlockDefaultKeychain = Bool,
                                              useXcpretty = Bool,
                                              xcWorkspacePath = String,
                                              xcode8AutomaticSigning = Bool,
                                              xcodeDeveloperDir = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Xcode@3$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              actions = String,
                                              archivePath = String,
                                              args = String,
                                              configuration = String,
                                              destinationDevices = String,
                                              destinationPlatform = String,
                                              destinationPlatformOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'custom,
                                                        'macOS,
                                                        'tvOS,
                                                        'iOS,
                                                        '"default"
                                                      |]
                                                    ],
                                              destinationSimulators = String,
                                              destinationTypeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'devices,
                                                        'simulators
                                                      |]
                                                    ],
                                              exportArgs = String,
                                              exportMethod = String,
                                              exportOptions =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'specify,
                                                        'plist,
                                                        'auto
                                                      |]
                                                    ],
                                              exportOptionsPlist = String,
                                              exportPath = String,
                                              exportTeamId = String,
                                              outputPattern = String,
                                              packageApp = Bool,
                                              provisioningProfileUuid = String,
                                              publishJUnitResults = Bool,
                                              scheme = String,
                                              sdk = String,
                                              signingIdentity = String,
                                              signingOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'auto,
                                                        'manual,
                                                        '"default",
                                                        'nosign
                                                      |]
                                                    ],
                                              teamId = String,
                                              useXcpretty = Bool,
                                              workingDirectory = String,
                                              xcWorkspacePath = String,
                                              xcodeDeveloperDir = String,
                                              xcodeVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'specifyPath,
                                                        '"default",
                                                        '"9",
                                                        '"8"
                                                      |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Xcode@4$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              actions = String,
                                              archivePath = String,
                                              args = String,
                                              configuration = String,
                                              cwd = String,
                                              defaultKeychainPassword = String,
                                              exportMethod = String,
                                              exportOptions =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'specify,
                                                        'plist,
                                                        'auto
                                                      |]
                                                    ],
                                              exportOptionsPlist = String,
                                              exportPath = String,
                                              exportTeamId = String,
                                              iosSigningIdentity = String,
                                              outputPattern = String,
                                              p12 = String,
                                              p12pwd = String,
                                              packageApp = Bool,
                                              packageTool =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'xcodebuild, 'xcrun |]
                                                    ],
                                              provProfile = String,
                                              provProfileUuid = String,
                                              publishJUnitResults = Bool,
                                              removeProfile = Bool,
                                              scheme = String,
                                              sdk = String,
                                              signMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'id, 'file |]
                                                    ],
                                              teamId = String,
                                              unlockDefaultKeychain = Bool,
                                              useXcpretty = Bool,
                                              useXctool = Bool,
                                              xcWorkspacePath = String,
                                              xcode8AutomaticSigning = Bool,
                                              xcodeDeveloperDir = String,
                                              xctoolReporter = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Xcode@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              connectedServiceName = String,
                                              continueOnEmptyNupkgMatch = Bool,
                                              feedName = String,
                                              nuGetAdditionalArgs = String,
                                              nuGetFeedType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'internal, 'external |]
                                                    ],
                                              nuGetPath = String,
                                              nuGetVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'custom,
                                                        '"4.0.0.2283",
                                                        '"3.5.0.1829",
                                                        '"3.3.0"
                                                      |]
                                                    ],
                                              searchPattern = String,
                                              verbosity =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Detailed,
                                                        'Normal,
                                                        'Quiet,
                                                        '"-"
                                                      |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^NuGetPublisher@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              maxThreshold = String,
                                              minThreshold = String,
                                              queryId = String,
                                            },
                                        required = { queryId = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^queryWorkItems@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appName = String,
                                              appSettings = String,
                                              azureSubscription = String,
                                              configurationStrings = String,
                                              containerCommand = String,
                                              containers = String,
                                              deployToSlotOrASE = Bool,
                                              multicontainerConfigFile = String,
                                              resourceGroupName = String,
                                              slotName = String,
                                            },
                                        required =
                                          {
                                              appName = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureWebAppContainer@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArguments = String,
                                              AdditionalArgumentsSql = String,
                                              AppLockName = String,
                                              AuthScheme =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'sqlServerAuthentication,
                                                        'windowsAuthentication
                                                      |]
                                                    ],
                                              ConnectionString = String,
                                              DacpacFile = String,
                                              DatabaseName = String,
                                              ExclusiveLock = Bool,
                                              ExecuteInTransaction = Bool,
                                              InlineSql = String,
                                              PublishProfile = String,
                                              ServerName = String,
                                              SqlFile = String,
                                              SqlPassword = String,
                                              SqlUsername = String,
                                              TargetMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'publishProfile,
                                                        'connectionString,
                                                        'server
                                                      |]
                                                    ],
                                              TaskType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'sqlInline,
                                                        'sqlQuery,
                                                        'dacpac
                                                      |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^SqlDacpacDeploymentOnMachineGroup@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              cacheHitVar = String,
                                              key = String,
                                              path = String,
                                              restoreKeys = String,
                                            },
                                        required = { key = true, path = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CacheBeta@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              cacheHitVar = String,
                                              key = String,
                                              path = String,
                                            },
                                        required = { key = true, path = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CacheBeta@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              cacheHitVar = String,
                                              key = String,
                                              path = String,
                                              restoreKeys = String,
                                            },
                                        required = { key = true, path = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Cache@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              cmakeArgs = String,
                                              runInsideShell = Bool,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CMake@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              app = String,
                                              appSlug = String,
                                              appiumBuildDir = String,
                                              artifactsDir = String,
                                              async = Bool,
                                              calabashConfigFile = String,
                                              calabashProfile = String,
                                              calabashProjectDir = String,
                                              calabashSkipConfigCheck = Bool,
                                              cliLocationOverride = String,
                                              credsType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'inputs,
                                                        'serviceEndpoint
                                                      |]
                                                    ],
                                              debug = Bool,
                                              devices = String,
                                              dsymDir = String,
                                              enablePrepare = Bool,
                                              enableRun = Bool,
                                              espressoBuildDir = String,
                                              espressoTestApkPath = String,
                                              framework =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'xcuitest,
                                                        'uitest,
                                                        'calabash,
                                                        'espresso,
                                                        'appium
                                                      |]
                                                    ],
                                              locale =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'user,
                                                        'es_ES,
                                                        'es_MX,
                                                        'ru_RU,
                                                        'ja_JP,
                                                        'de_DE,
                                                        'fr_FR,
                                                        'en_US,
                                                        'en_GB,
                                                        'nl_NL,
                                                        'da_DK
                                                      |]
                                                    ],
                                              loginOpts = String,
                                              password = String,
                                              prepareOpts = String,
                                              runOpts = String,
                                              series = String,
                                              serverEndpoint = String,
                                              signInfo = String,
                                              uitestBuildDir = String,
                                              uitestKeyAlias = String,
                                              uitestKeyPass = String,
                                              uitestStoreFile = String,
                                              uitestStorePass = String,
                                              uitestToolsDir = String,
                                              userDefinedLocale = String,
                                              username = String,
                                              xcuitestBuildDir = String,
                                              xcuitestTestIpaPath = String,
                                            },
                                        required = { app = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^VSMobileCenterTest@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appFile = String,
                                              appSlug = String,
                                              appiumBuildDirectory = String,
                                              artifactsDirectory = String,
                                              calabashConfigFile = String,
                                              calabashProfile = String,
                                              calabashProjectDirectory = String,
                                              calabashSkipConfigCheck = Bool,
                                              cliFile = String,
                                              credentialsOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'inputs,
                                                        'serviceEndpoint
                                                      |]
                                                    ],
                                              devices = String,
                                              dsymDirectory = String,
                                              espressoBuildDirectory = String,
                                              espressoTestApkFile = String,
                                              frameworkOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'xcuitest,
                                                        'uitest,
                                                        'calabash,
                                                        'espresso,
                                                        'appium
                                                      |]
                                                    ],
                                              localeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'user,
                                                        'es_ES,
                                                        'es_MX,
                                                        'ru_RU,
                                                        'ja_JP,
                                                        'de_DE,
                                                        'fr_FR,
                                                        'en_US,
                                                        'en_GB,
                                                        'nl_NL,
                                                        'da_DK
                                                      |]
                                                    ],
                                              loginOptions = String,
                                              password = String,
                                              prepareOptions = String,
                                              prepareTests = Bool,
                                              runOptions = String,
                                              runTests = Bool,
                                              series = String,
                                              serverEndpoint = String,
                                              showDebugOutput = Bool,
                                              signInfo = String,
                                              skipWaitingForResults = Bool,
                                              uiTestBuildDirectory = String,
                                              uiTestKeyPassword = String,
                                              uiTestStorePassword = String,
                                              uiTestToolsDirectory = String,
                                              uitestKeyAlias = String,
                                              uitestStorePath = String,
                                              userDefinedLocale = String,
                                              username = String,
                                              xcUITestBuildDirectory = String,
                                              xcUITestIpaFile = String,
                                            },
                                        required = { appFile = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AppCenterTest@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              retryCount = String,
                                              secureFile = String,
                                              socketTimeout = String,
                                            },
                                        required = { secureFile = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DownloadSecureFile@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              acrName = String,
                                              acrPassword = String,
                                              acrUsername = String,
                                              appSourcePath = String,
                                              azureSubscription = String,
                                              containerAppEnvironment = String,
                                              containerAppName = String,
                                              disableTelemetry = Bool,
                                              dockerfilePath = String,
                                              environmentVariables = String,
                                              imageToBuild = String,
                                              imageToDeploy = String,
                                              ingress = String,
                                              location = String,
                                              resourceGroup = String,
                                              runtimeStack = String,
                                              targetPort = String,
                                              workingDirectory = String,
                                              yamlConfigPath = String,
                                            },
                                        required =
                                          { azureSubscription = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureContainerApps@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              acrName = String,
                                              acrPassword = String,
                                              acrUsername = String,
                                              appSourcePath = String,
                                              azureSubscription = String,
                                              containerAppEnvironment = String,
                                              containerAppName = String,
                                              disableTelemetry = Bool,
                                              dockerfilePath = String,
                                              environmentVariables = String,
                                              imageToBuild = String,
                                              imageToDeploy = String,
                                              ingress = String,
                                              location = String,
                                              resourceGroup = String,
                                              runtimeStack = String,
                                              targetPort = String,
                                              workingDirectory = String,
                                              yamlConfigPath = String,
                                            },
                                        required =
                                          { azureSubscription = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureContainerApps@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              addToPath = Bool,
                                              versionSpec = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^UseRubyVersion@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              enableCodeCoverage = Bool,
                                              gruntCli = String,
                                              gruntFile = String,
                                              publishJUnitResults = Bool,
                                              srcFiles = String,
                                              targets = String,
                                              testFiles = String,
                                              testFramework =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Jasmine, 'Mocha |]
                                                    ],
                                              testResultsFiles = String,
                                              testRunTitle = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Grunt@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArguments = String,
                                              AuthenticationType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'servicePrincipal,
                                                        'connectionString,
                                                        'aadAuthenticationIntegrated,
                                                        'aadAuthenticationPassword,
                                                        'server
                                                      |]
                                                    ],
                                              BacpacFile = String,
                                              ConnectionString = String,
                                              DacpacFile = String,
                                              DatabaseName = String,
                                              DeleteFirewallRule = Bool,
                                              DeploymentAction =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'DeployReport,
                                                        'DriftReport,
                                                        'Script,
                                                        'Import,
                                                        'Export,
                                                        'Extract,
                                                        'Publish
                                                      |]
                                                    ],
                                              EndIpAddress = String,
                                              InlineAdditionalArguments =
                                                String,
                                              IpDetectionMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'IPAddressRange,
                                                        'AutoDetect
                                                      |]
                                                    ],
                                              PublishProfile = String,
                                              ServerName = String,
                                              SqlAdditionalArguments = String,
                                              SqlFile = String,
                                              SqlInline = String,
                                              SqlPassword = String,
                                              SqlUsername = String,
                                              StartIpAddress = String,
                                              aadSqlPassword = String,
                                              aadSqlUsername = String,
                                              azureClassicSubscription = String,
                                              azureConnectionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'ConnectedServiceNameARM,
                                                        'ConnectedServiceName
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                              deployType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'InlineSqlTask,
                                                        'SqlTask,
                                                        'DacpacTask
                                                      |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^SqlAzureDacpacDeployment@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              configFile = String,
                                              dockerRegistryServiceConnection =
                                                String,
                                              failTaskOnFailedTests = Bool,
                                              repository = String,
                                              tag = String,
                                              testRunTitle = String,
                                            },
                                        required =
                                          {
                                              configFile = true,
                                              dockerRegistryServiceConnection =
                                                true,
                                              repository = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^ContainerStructureTest@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AddBinding = Bool,
                                              AdminPassword = String,
                                              AdminUserName = String,
                                              AppCmdCommands = String,
                                              AppPoolIdentity =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'SpecificUser,
                                                        'NetworkService,
                                                        'LocalSystem,
                                                        'LocalService,
                                                        'ApplicationPoolIdentity
                                                      |]
                                                    ],
                                              AppPoolName = String,
                                              AppPoolPassword = String,
                                              AppPoolUsername = String,
                                              AssignDuplicateBinding = Bool,
                                              CreateAppPool = Bool,
                                              CreateWebSite = Bool,
                                              DeployInParallel = Bool,
                                              DotNetVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"No Managed Code",
                                                        '"v2.0",
                                                        '"v4.0"
                                                      |]
                                                    ],
                                              EnvironmentName = String,
                                              HostNameWithHttp = String,
                                              HostNameWithOutSNI = String,
                                              HostNameWithSNI = String,
                                              IPAddress = String,
                                              MachineFilter = String,
                                              OverRideParams = String,
                                              PipeLineMode =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Classic,
                                                        'Integrated
                                                      |]
                                                    ],
                                              Port = String,
                                              Protocol =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'http, 'https |]
                                                    ],
                                              ResourceFilteringMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'tags, 'machineNames |]
                                                    ],
                                              SSLCertThumbPrint = String,
                                              ServerNameIndication = Bool,
                                              TestCertificate = Bool,
                                              WebDeployPackage = String,
                                              WebDeployParamFile = String,
                                              WebSiteAuthUserName = String,
                                              WebSiteAuthUserPassword = String,
                                              WebSiteName = String,
                                              WebSitePhysicalPath = String,
                                              WebSitePhysicalPathAuth =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'WebSiteWindowsAuth,
                                                        'WebSiteUserPassThrough
                                                      |]
                                                    ],
                                              WinRMProtocol =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Https, 'Http |]
                                                    ],
                                            },
                                        required =
                                          {
                                              EnvironmentName = true,
                                              WebDeployPackage = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^IISWebAppDeployment@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              LoadTest = String,
                                              MachineType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| '"2", '"0" |]
                                                    ],
                                              TestDrop = String,
                                              TestSettings = String,
                                              ThresholdLimit = String,
                                              activeRunSettings =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'changeActive,
                                                        'useFile
                                                      |]
                                                    ],
                                              connectedServiceName = String,
                                              numOfSelfProvisionedAgents =
                                                std.number.Integer,
                                              resourceGroupName = String,
                                              runSettingName = String,
                                              testContextParameters = String,
                                            },
                                        required = { LoadTest = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CloudLoadTest@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          { kubectlVersion = String, },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^KubectlInstaller@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              failOnStderr = Bool,
                                              script = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CmdLine@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              failOnStandardError = Bool,
                                              filename = String,
                                              workingFolder = String,
                                            },
                                        required = { filename = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CmdLine@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              command = String,
                                            },
                                        required = { command = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^NuGet@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              Dockerfile = String,
                                              buildContext = String,
                                              dockerRegistryServiceConnection =
                                                String,
                                              repository = String,
                                              tags = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^ContainerBuild@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              noCache = Bool,
                                              nuGetPath = String,
                                              nuGetRestoreArgs = String,
                                              nuGetVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'custom,
                                                        '"4.0.0.2283",
                                                        '"3.5.0.1829",
                                                        '"3.3.0"
                                                      |]
                                                    ],
                                              nugetConfigPath = String,
                                              restoreMode =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'install, 'restore |]
                                                    ],
                                              solution = String,
                                              verbosity =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Detailed,
                                                        'Normal,
                                                        'Quiet,
                                                        '"-"
                                                      |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^NuGetInstaller@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              feed = String,
                                              includeNuGetOrg = Bool,
                                              noCache = Bool,
                                              nugetConfigPath = String,
                                              packagesDirectory = String,
                                              selectOrConfig =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'config, 'select |]
                                                    ],
                                              solution = String,
                                              verbosity =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Detailed,
                                                        'Normal,
                                                        'Quiet,
                                                        '"-"
                                                      |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^NuGetRestore@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              allowPackageConflicts = Bool,
                                              arguments = String,
                                              basePath = String,
                                              buildProperties = String,
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'custom,
                                                        'push,
                                                        'pack,
                                                        'restore
                                                      |]
                                                    ],
                                              configuration = String,
                                              disableParallelProcessing = Bool,
                                              externalFeedCredentials = String,
                                              feedsToUse =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'config, 'select |]
                                                    ],
                                              includeNuGetOrg = Bool,
                                              includeReferencedProjects = Bool,
                                              includeSymbols = Bool,
                                              majorVersion = String,
                                              minorVersion = String,
                                              noCache = Bool,
                                              nuGetFeedType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'external, 'internal |]
                                                    ],
                                              nugetConfigPath = String,
                                              packDestination = String,
                                              packTimezone =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'local, 'utc |]
                                                    ],
                                              packagesToPack = String,
                                              packagesToPush = String,
                                              patchVersion = String,
                                              publishFeedCredentials = String,
                                              publishPackageMetadata = Bool,
                                              publishVstsFeed = String,
                                              restoreDirectory = String,
                                              restoreSolution = String,
                                              toolPackage = Bool,
                                              verbosityPack =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Detailed,
                                                        'Normal,
                                                        'Quiet
                                                      |]
                                                    ],
                                              verbosityPush =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Detailed,
                                                        'Normal,
                                                        'Quiet
                                                      |]
                                                    ],
                                              verbosityRestore =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Detailed,
                                                        'Normal,
                                                        'Quiet
                                                      |]
                                                    ],
                                              versionEnvVar = String,
                                              versioningScheme =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'byBuildNumber,
                                                        'byEnvVar,
                                                        'byPrereleaseNumber,
                                                        'off
                                                      |]
                                                    ],
                                              vstsFeed = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^NuGetCommand@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          { delayForMinutes = String, },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Delay@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              args = String,
                                              buildForSimulator = Bool,
                                              clean = Bool,
                                              configuration = String,
                                              mdtoolFile = String,
                                              packageApp = Bool,
                                              runNugetRestore = Bool,
                                              signingIdentity = String,
                                              signingProvisioningProfileID =
                                                String,
                                              solutionFile = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^XamariniOS@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              args = String,
                                              buildForSimulator = Bool,
                                              buildToolOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'msbuild, 'xbuild |]
                                                    ],
                                              clean = Bool,
                                              configuration = String,
                                              mdtoolFile = String,
                                              packageApp = Bool,
                                              runNugetRestore = Bool,
                                              signingDefaultKeychainPassword =
                                                String,
                                              signingIdentity = String,
                                              signingOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'id, 'file |]
                                                    ],
                                              signingP12File = String,
                                              signingP12Password = String,
                                              signingProvisioningProfileFile =
                                                String,
                                              signingProvisioningProfileID =
                                                String,
                                              signingRemoveProfile = Bool,
                                              signingUnlockDefaultKeychain =
                                                Bool,
                                              solutionFile = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^XamariniOS@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              buildConfiguration = String,
                                              buildPlatform = String,
                                              failTaskOnFailedTests = Bool,
                                              failTaskOnFailureToPublishResults =
                                                Bool,
                                              failTaskOnMissingResultsFile =
                                                Bool,
                                              mergeTestResults = Bool,
                                              publishRunAttachments = Bool,
                                              searchFolder = String,
                                              testResultsFiles = String,
                                              testResultsFormat =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'CTest,
                                                        'XUnit,
                                                        'VSTest,
                                                        'NUnit,
                                                        'JUnit
                                                      |]
                                                    ],
                                              testRunTitle = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PublishTestResults@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              configuration = String,
                                              mergeTestResults = Bool,
                                              platform = String,
                                              publishRunAttachments = Bool,
                                              testResultsFiles = String,
                                              testRunTitle = String,
                                              testRunner =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'XUnit,
                                                        'VSTest,
                                                        'NUnit,
                                                        'JUnit
                                                      |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PublishTestResults@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArgumentsForBlobCopy =
                                                String,
                                              AdditionalArgumentsForVMCopy =
                                                String,
                                              BlobPrefix = String,
                                              CleanTargetBeforeCopy = Bool,
                                              ContainerName = String,
                                              CopyFilesInParallel = Bool,
                                              Destination =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'AzureVMs,
                                                        'AzureBlob
                                                      |]
                                                    ],
                                              MachineNames = String,
                                              ResourceFilteringMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'tags, 'machineNames |]
                                                    ],
                                              SourcePath = String,
                                              TargetPath = String,
                                              azureSubscription = String,
                                              enableCopyPrerequisites = Bool,
                                              resourceGroup = String,
                                              sasTokenTimeOutInMinutes = String,
                                              skipCACheck = Bool,
                                              storage = String,
                                              vmsAdminPassword = String,
                                              vmsAdminUserName = String,
                                            },
                                        required =
                                          {
                                              Destination = true,
                                              SourcePath = true,
                                              azureSubscription = true,
                                              storage = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureFileCopy@5$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArgumentsForBlobCopy =
                                                String,
                                              AdditionalArgumentsForVMCopy =
                                                String,
                                              BlobPrefix = String,
                                              CleanTargetBeforeCopy = Bool,
                                              ContainerName = String,
                                              CopyFilesInParallel = Bool,
                                              Destination =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'AzureVMs,
                                                        'AzureBlob
                                                      |]
                                                    ],
                                              MachineNames = String,
                                              ResourceFilteringMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'tags, 'machineNames |]
                                                    ],
                                              SourcePath = String,
                                              TargetPath = String,
                                              azureSubscription = String,
                                              enableCopyPrerequisites = Bool,
                                              resourceGroup = String,
                                              skipCACheck = Bool,
                                              storage = String,
                                              vmsAdminPassword = String,
                                              vmsAdminUserName = String,
                                            },
                                        required =
                                          {
                                              Destination = true,
                                              SourcePath = true,
                                              azureSubscription = true,
                                              storage = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureFileCopy@6$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArgumentsForBlobCopy =
                                                String,
                                              AdditionalArgumentsForVMCopy =
                                                String,
                                              BlobPrefix = String,
                                              CleanTargetBeforeCopy = Bool,
                                              ContainerName = String,
                                              CopyFilesInParallel = Bool,
                                              Destination =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'AzureVMs,
                                                        'AzureBlob
                                                      |]
                                                    ],
                                              MachineNames = String,
                                              ResourceFilteringMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'tags, 'machineNames |]
                                                    ],
                                              SourcePath = String,
                                              TargetPath = String,
                                              azureSubscription = String,
                                              enableCopyPrerequisites = Bool,
                                              resourceGroup = String,
                                              sasTokenTimeOutInMinutes = String,
                                              skipCACheck = Bool,
                                              storage = String,
                                              vmsAdminPassword = String,
                                              vmsAdminUserName = String,
                                            },
                                        required =
                                          {
                                              Destination = true,
                                              SourcePath = true,
                                              azureSubscription = true,
                                              storage = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureFileCopy@4$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArgumentsForBlobCopy =
                                                String,
                                              AdditionalArgumentsForVMCopy =
                                                String,
                                              BlobPrefix = String,
                                              CleanTargetBeforeCopy = Bool,
                                              ContainerName = String,
                                              CopyFilesInParallel = Bool,
                                              Destination =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'AzureVMs,
                                                        'AzureBlob
                                                      |]
                                                    ],
                                              MachineNames = String,
                                              ResourceFilteringMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'tags, 'machineNames |]
                                                    ],
                                              SourcePath = String,
                                              TargetPath = String,
                                              azureClassicSubscription = String,
                                              azureConnectionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'ConnectedServiceNameARM,
                                                        'ConnectedServiceName
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                              classicStorage = String,
                                              cloudService = String,
                                              enableCopyPrerequisites = Bool,
                                              outputStorageContainerSasToken =
                                                String,
                                              outputStorageUri = String,
                                              resourceGroup = String,
                                              skipCACheck = Bool,
                                              storage = String,
                                              vmsAdminPassword = String,
                                              vmsAdminUserName = String,
                                            },
                                        required =
                                          {
                                              Destination = true,
                                              SourcePath = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureFileCopy@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArgumentsForBlobCopy =
                                                String,
                                              AdditionalArgumentsForVMCopy =
                                                String,
                                              BlobPrefix = String,
                                              CleanTargetBeforeCopy = Bool,
                                              ContainerName = String,
                                              CopyFilesInParallel = Bool,
                                              Destination =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'AzureVMs,
                                                        'AzureBlob
                                                      |]
                                                    ],
                                              MachineNames = String,
                                              ResourceFilteringMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'tags, 'machineNames |]
                                                    ],
                                              SourcePath = String,
                                              TargetPath = String,
                                              azureSubscription = String,
                                              enableCopyPrerequisites = Bool,
                                              outputStorageContainerSasToken =
                                                String,
                                              outputStorageUri = String,
                                              resourceGroup = String,
                                              sasTokenTimeOutInMinutes = String,
                                              skipCACheck = Bool,
                                              storage = String,
                                              vmsAdminPassword = String,
                                              vmsAdminUserName = String,
                                            },
                                        required =
                                          {
                                              Destination = true,
                                              SourcePath = true,
                                              azureSubscription = true,
                                              storage = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureFileCopy@3$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArguments = String,
                                              BlobPrefix = String,
                                              CleanTargetBeforeCopy = Bool,
                                              ContainerName = String,
                                              CopyFilesInParallel = Bool,
                                              Destination =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'AzureVMs,
                                                        'AzureBlob
                                                      |]
                                                    ],
                                              MachineNames = String,
                                              ResourceFilteringMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'tags, 'machineNames |]
                                                    ],
                                              SourcePath = String,
                                              TargetPath = String,
                                              azureClassicSubscription = String,
                                              azureConnectionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'ConnectedServiceNameARM,
                                                        'ConnectedServiceName
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                              classicStorage = String,
                                              cloudService = String,
                                              enableCopyPrerequisites = Bool,
                                              outputStorageContainerSasToken =
                                                String,
                                              outputStorageUri = String,
                                              resourceGroup = String,
                                              skipCACheck = Bool,
                                              storage = String,
                                              vmsAdminPassword = String,
                                              vmsAdminUserName = String,
                                            },
                                        required =
                                          {
                                              Destination = true,
                                              SourcePath = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureFileCopy@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              CompressSymbols = Bool,
                                              ConnectedServiceName = String,
                                              DetailedLog = Bool,
                                              IndexSources = Bool,
                                              IndexableFileFormats =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'All,
                                                        'SourceMap,
                                                        'Pdb,
                                                        'Default
                                                      |]
                                                    ],
                                              PublishSymbols = Bool,
                                              SearchPattern = String,
                                              SymbolExpirationInDays = String,
                                              SymbolServerType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'FileShare,
                                                        'TeamServices,
                                                        '" "
                                                      |]
                                                    ],
                                              SymbolsArtifactName = String,
                                              SymbolsFolder = String,
                                              SymbolsMaximumWaitTime = String,
                                              SymbolsPath = String,
                                              SymbolsProduct = String,
                                              SymbolsVersion = String,
                                              TreatNotIndexedAsWarning = Bool,
                                              UseNetCoreClientTool = Bool,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^PublishSymbols@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              SearchPattern = String,
                                              SkipIndexing = Bool,
                                              SymbolsArtifactName = String,
                                              SymbolsFolder = String,
                                              SymbolsMaximumWaitTime = String,
                                              SymbolsPath = String,
                                              SymbolsProduct = String,
                                              SymbolsVersion = String,
                                              TreatNotIndexedAsWarning = Bool,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^PublishSymbols@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              cleanHiddenFilesInTarget = Bool,
                                              cleanTargetFolder = Bool,
                                              concurrentUploads = String,
                                              contents = String,
                                              delayBetweenUploads = String,
                                              failOnEmptySource = Bool,
                                              flattenFolders = Bool,
                                              isWindowsOnTarget = Bool,
                                              overwrite = Bool,
                                              readyTimeout = String,
                                              sourceFolder = String,
                                              sshEndpoint = String,
                                              targetFolder = String,
                                            },
                                        required = { sshEndpoint = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CopyFilesOverSSH@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              checkStyleRunAnalysis = Bool,
                                              codeCoverageClassFilesDirectories =
                                                String,
                                              codeCoverageClassFilter = String,
                                              codeCoverageFailIfEmpty = Bool,
                                              codeCoverageGradle5xOrHigher =
                                                Bool,
                                              codeCoverageToolOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'JaCoCo,
                                                        'Cobertura,
                                                        'None
                                                      |]
                                                    ],
                                              findBugsRunAnalysis = Bool,
                                              gradleOptions = String,
                                              gradleWrapperFile = String,
                                              javaHomeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Path, 'JDKVersion |]
                                                    ],
                                              jdkArchitectureOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x64, 'x86 |]
                                                    ],
                                              jdkDirectory = String,
                                              jdkVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"1.6",
                                                        '"1.7",
                                                        '"1.8",
                                                        '"1.9",
                                                        '"1.10",
                                                        '"1.11",
                                                        '"1.17",
                                                        '"default"
                                                      |]
                                                    ],
                                              options = String,
                                              pmdRunAnalysis = Bool,
                                              publishJUnitResults = Bool,
                                              sonarQubeGradlePluginVersion =
                                                String,
                                              sonarQubeRunAnalysis = Bool,
                                              spotBugsAnalysis = Bool,
                                              spotBugsGradlePluginVersionChoice =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'build, 'specify |]
                                                    ],
                                              spotbugsGradlePluginVersion =
                                                String,
                                              sqGradlePluginVersionChoice =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'build, 'specify |]
                                                    ],
                                              tasks = String,
                                              testResultsFiles = String,
                                              testRunTitle = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Gradle@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              checkStyleRunAnalysis = Bool,
                                              codeCoverageClassFilesDirectories =
                                                String,
                                              codeCoverageClassFilter = String,
                                              codeCoverageFailIfEmpty = Bool,
                                              codeCoverageGradle5xOrHigher =
                                                Bool,
                                              codeCoverageToolOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'JaCoCo,
                                                        'Cobertura,
                                                        'None
                                                      |]
                                                    ],
                                              findBugsRunAnalysis = Bool,
                                              gradleOptions = String,
                                              gradleWrapperFile = String,
                                              javaHomeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Path, 'JDKVersion |]
                                                    ],
                                              jdkArchitectureOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x64, 'x86 |]
                                                    ],
                                              jdkDirectory = String,
                                              jdkVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"1.6",
                                                        '"1.7",
                                                        '"1.8",
                                                        '"1.9",
                                                        '"1.10",
                                                        '"1.11",
                                                        '"1.17",
                                                        '"default"
                                                      |]
                                                    ],
                                              options = String,
                                              pmdRunAnalysis = Bool,
                                              publishJUnitResults = Bool,
                                              sonarQubeGradlePluginVersion =
                                                String,
                                              sonarQubeRunAnalysis = Bool,
                                              spotBugsAnalysis = Bool,
                                              spotBugsGradlePluginVersionChoice =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'build, 'specify |]
                                                    ],
                                              spotbugsGradlePluginVersion =
                                                String,
                                              sqGradlePluginVersionChoice =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'build, 'specify |]
                                                    ],
                                              tasks = String,
                                              testResultsFiles = String,
                                              testRunTitle = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Gradle@3$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              checkStyleRunAnalysis = Bool,
                                              codeCoverageClassFilesDirectories =
                                                String,
                                              codeCoverageClassFilter = String,
                                              codeCoverageFailIfEmpty = Bool,
                                              codeCoverageToolOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'JaCoCo,
                                                        'Cobertura,
                                                        'None
                                                      |]
                                                    ],
                                              findBugsRunAnalysis = Bool,
                                              gradleOptions = String,
                                              gradleWrapperFile = String,
                                              javaHomeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Path, 'JDKVersion |]
                                                    ],
                                              jdkArchitectureOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x64, 'x86 |]
                                                    ],
                                              jdkDirectory = String,
                                              jdkVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"1.6",
                                                        '"1.7",
                                                        '"1.8",
                                                        '"1.9",
                                                        '"default"
                                                      |]
                                                    ],
                                              options = String,
                                              pmdRunAnalysis = Bool,
                                              publishJUnitResults = Bool,
                                              sonarQubeDBPassword = String,
                                              sonarQubeDBUrl = String,
                                              sonarQubeDBUsername = String,
                                              sonarQubeFailWhenQualityGateFails =
                                                Bool,
                                              sonarQubeGradlePluginVersion =
                                                String,
                                              sonarQubeIncludeFullReport = Bool,
                                              sonarQubeProjectKey = String,
                                              sonarQubeProjectName = String,
                                              sonarQubeProjectVersion = String,
                                              sonarQubeRunAnalysis = Bool,
                                              sonarQubeServiceEndpoint = String,
                                              sonarQubeSpecifyDB = Bool,
                                              tasks = String,
                                              testResultsFiles = String,
                                              testRunTitle = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Gradle@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appFile = String,
                                              appSlug = String,
                                              distributionGroupId = String,
                                              isMandatory = Bool,
                                              releaseNotesFile = String,
                                              releaseNotesInput = String,
                                              releaseNotesOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'file, 'input |]
                                                    ],
                                              serverEndpoint = String,
                                              symbolsDsymFiles = String,
                                              symbolsIncludeParentDirectory =
                                                Bool,
                                              symbolsMappingTxtFile = String,
                                              symbolsOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Apple |]
                                                    ],
                                              symbolsPath = String,
                                              symbolsPdbFiles = String,
                                            },
                                        required =
                                          {
                                              appFile = true,
                                              appSlug = true,
                                              serverEndpoint = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AppCenterDistribute@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appFile = String,
                                              appSlug = String,
                                              distributionGroupId = String,
                                              isMandatory = Bool,
                                              releaseNotesFile = String,
                                              releaseNotesInput = String,
                                              releaseNotesOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'file, 'input |]
                                                    ],
                                              serverEndpoint = String,
                                              symbolsDsymFiles = String,
                                              symbolsIncludeParentDirectory =
                                                Bool,
                                              symbolsMappingTxtFile = String,
                                              symbolsOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Apple |]
                                                    ],
                                              symbolsPath = String,
                                              symbolsPdbFiles = String,
                                            },
                                        required =
                                          {
                                              appFile = true,
                                              appSlug = true,
                                              serverEndpoint = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AppCenterDistribute@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appFile = String,
                                              appSlug = String,
                                              appxsymPath = String,
                                              buildVersion = String,
                                              destinationStoreId = String,
                                              destinationType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'store, 'groups |]
                                                    ],
                                              distributionGroupId = String,
                                              isMandatory = Bool,
                                              isSilent = Bool,
                                              nativeLibrariesPath = String,
                                              releaseNotesFile = String,
                                              releaseNotesInput = String,
                                              releaseNotesOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'file, 'input |]
                                                    ],
                                              serverEndpoint = String,
                                              symbolsDsymFiles = String,
                                              symbolsIncludeParentDirectory =
                                                Bool,
                                              symbolsMappingTxtFile = String,
                                              symbolsOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'UWP,
                                                        'Android,
                                                        'Apple
                                                      |]
                                                    ],
                                              symbolsPath = String,
                                            },
                                        required =
                                          {
                                              appFile = true,
                                              appSlug = true,
                                              serverEndpoint = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AppCenterDistribute@3$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appFile = String,
                                              appSlug = String,
                                              distributionGroupId = String,
                                              releaseNotesFile = String,
                                              releaseNotesInput = String,
                                              releaseNotesOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'file, 'input |]
                                                    ],
                                              serverEndpoint = String,
                                              symbolsDsymFiles = String,
                                              symbolsIncludeParentDirectory =
                                                Bool,
                                              symbolsMappingTxtFile = String,
                                              symbolsOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Apple |]
                                                    ],
                                              symbolsPath = String,
                                              symbolsPdbFiles = String,
                                            },
                                        required =
                                          {
                                              appFile = true,
                                              appSlug = true,
                                              serverEndpoint = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AppCenterDistribute@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              checkLatest = Bool,
                                              versionSpec = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^NuGetToolInstaller@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              checkLatest = Bool,
                                              versionSpec = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^NuGetToolInstaller@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ConnectedServiceNameARM = String,
                                              artifactDetailsFileNameSuffix =
                                                String,
                                              artifactProvider =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'azureStorage |]
                                                    ],
                                              commonVirtualPath = String,
                                              containerName = String,
                                              downloadCommitsAndWorkItems =
                                                Bool,
                                              itemPattern = String,
                                              jenkinsBuild =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'BuildNumber,
                                                        'LastSuccessfulBuild
                                                      |]
                                                    ],
                                              jenkinsBuildNumber = String,
                                              jenkinsJobType = String,
                                              jenkinsServerConnection = String,
                                              jobName = String,
                                              propagatedArtifacts = Bool,
                                              saveTo = String,
                                              startJenkinsBuildNumber = String,
                                              storageAccountName = String,
                                            },
                                        required =
                                          {
                                              jenkinsServerConnection = true,
                                              jobName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^JenkinsDownloadArtifacts@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ConnectedServiceNameARM = String,
                                              artifactDetailsFileNameSuffix =
                                                String,
                                              artifactProvider =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'azureStorage |]
                                                    ],
                                              commonVirtualPath = String,
                                              containerName = String,
                                              downloadCommitsAndWorkItems =
                                                Bool,
                                              itemPattern = String,
                                              jenkinsBuild =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'BuildNumber,
                                                        'LastSuccessfulBuild
                                                      |]
                                                    ],
                                              jenkinsBuildNumber = String,
                                              jenkinsJobType = String,
                                              jenkinsServerConnection = String,
                                              jobName = String,
                                              propagatedArtifacts = Bool,
                                              saveTo = String,
                                              startJenkinsBuildNumber = String,
                                              storageAccountName = String,
                                            },
                                        required =
                                          {
                                              jenkinsServerConnection = true,
                                              jobName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^JenkinsDownloadArtifacts@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appName = String,
                                              appSettings = String,
                                              azureSubscription = String,
                                              configurationStrings = String,
                                              containerCommand = String,
                                              deployToSlotOrASE = Bool,
                                              imageName = String,
                                              resourceGroupName = String,
                                              slotName = String,
                                            },
                                        required =
                                          {
                                              appName = true,
                                              azureSubscription = true,
                                              imageName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureFunctionAppContainer@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              cipher = String,
                                              inFile = String,
                                              outFile = String,
                                              passphrase = String,
                                              workingDirectory = String,
                                            },
                                        required =
                                          { inFile = true, passphrase = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^DecryptFile@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              azureContainerRegistry = String,
                                              azureResourceGroup = String,
                                              azureResourceGroupForACR = String,
                                              azureSubscription = String,
                                              azureSubscriptionForACR = String,
                                              caCert = String,
                                              canaryImage = Bool,
                                              certificate = String,
                                              chartName = String,
                                              chartNameForACR = String,
                                              chartPath = String,
                                              chartPathForACR = String,
                                              chartType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'FilePath, 'Name |]
                                                    ],
                                              chartVersion = String,
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'uninstall,
                                                        'upgrade,
                                                        'rollback,
                                                        'package,
                                                        'ls,
                                                        'logout,
                                                        'login,
                                                        'install,
                                                        'init,
                                                        'get,
                                                        'expose,
                                                        'delete,
                                                        'create
                                                      |]
                                                    ],
                                              connectionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'None,
                                                        '"Kubernetes Service Connection",
                                                        '"Azure Resource Manager"
                                                      |]
                                                    ],
                                              destination = String,
                                              enableTls = Bool,
                                              failOnStderr = Bool,
                                              "force" = Bool,
                                              install = Bool,
                                              kubernetesCluster = String,
                                              kubernetesServiceConnection =
                                                String,
                                              namespace = String,
                                              overrideValues = String,
                                              privatekey = String,
                                              publishPipelineMetadata = Bool,
                                              recreate = Bool,
                                              releaseName = String,
                                              resetValues = Bool,
                                              save = Bool,
                                              tillerNamespace = String,
                                              updateDependency = Bool,
                                              upgradeTiller = Bool,
                                              useClusterAdmin = Bool,
                                              valueFile = String,
                                              waitForExecution = Bool,
                                            },
                                        required =
                                          {
                                              azureContainerRegistry = true,
                                              azureResourceGroupForACR = true,
                                              azureSubscriptionForACR = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^HelmDeploy@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              azureContainerRegistry = String,
                                              azureResourceGroup = String,
                                              azureResourceGroupForACR = String,
                                              azureSubscription = String,
                                              azureSubscriptionForACR = String,
                                              caCert = String,
                                              canaryImage = Bool,
                                              certificate = String,
                                              chartName = String,
                                              chartNameForACR = String,
                                              chartPath = String,
                                              chartPathForACR = String,
                                              chartType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'FilePath, 'Name |]
                                                    ],
                                              chartVersion = String,
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'uninstall,
                                                        'upgrade,
                                                        'save,
                                                        'rollback,
                                                        'package,
                                                        'ls,
                                                        'logout,
                                                        'login,
                                                        'install,
                                                        'init,
                                                        'get,
                                                        'expose,
                                                        'delete,
                                                        'create
                                                      |]
                                                    ],
                                              connectionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'None,
                                                        '"Kubernetes Service Connection",
                                                        '"Azure Resource Manager"
                                                      |]
                                                    ],
                                              destination = String,
                                              enableTls = Bool,
                                              failOnStderr = Bool,
                                              "force" = Bool,
                                              install = Bool,
                                              kubernetesCluster = String,
                                              kubernetesServiceConnection =
                                                String,
                                              namespace = String,
                                              overrideValues = String,
                                              privatekey = String,
                                              publishPipelineMetadata = Bool,
                                              recreate = Bool,
                                              releaseName = String,
                                              resetValues = Bool,
                                              save = Bool,
                                              tillerNamespace = String,
                                              updateDependency = Bool,
                                              upgradeTiller = Bool,
                                              useClusterAdmin = Bool,
                                              valueFile = String,
                                              waitForExecution = Bool,
                                            },
                                        required =
                                          {
                                              azureContainerRegistry = true,
                                              azureResourceGroupForACR = true,
                                              azureSubscriptionForACR = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^HelmDeploy@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              certPwd = String,
                                              certSecureFile = String,
                                              customKeychainPath = String,
                                              deleteCert = Bool,
                                              deleteCustomKeychain = Bool,
                                              keychain =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'custom,
                                                        'temp,
                                                        '"default"
                                                      |]
                                                    ],
                                              keychainPassword = String,
                                              opensslPkcsArgs = String,
                                              setUpPartitionIdACLForPrivateKey =
                                                Bool,
                                              signingIdentity = String,
                                            },
                                        required = { certSecureFile = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^InstallAppleCertificate@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              certPwd = String,
                                              certSecureFile = String,
                                              customKeychainPath = String,
                                              deleteCert = Bool,
                                              deleteCustomKeychain = Bool,
                                              keychain =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'custom,
                                                        'temp,
                                                        '"default"
                                                      |]
                                                    ],
                                              keychainPassword = String,
                                              signingIdentity = String,
                                            },
                                        required = { certSecureFile = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^InstallAppleCertificate@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              certPwd = String,
                                              certSecureFile = String,
                                              customKeychainPath = String,
                                              deleteCert = Bool,
                                              deleteCustomKeychain = Bool,
                                              keychain =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'custom,
                                                        'temp,
                                                        '"default"
                                                      |]
                                                    ],
                                              keychainPassword = String,
                                              signingIdentity = String,
                                            },
                                        required = { certSecureFile = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^InstallAppleCertificate@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              body = String,
                                              function = String,
                                              headers = String,
                                              key = String,
                                              method =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'PATCH,
                                                        'TRACE,
                                                        'DELETE,
                                                        'PUT,
                                                        'POST,
                                                        'HEAD,
                                                        'GET,
                                                        'OPTIONS
                                                      |]
                                                    ],
                                              queryParameters = String,
                                              successCriteria = String,
                                              waitForCompletion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| '"false", '"true" |]
                                                    ],
                                            },
                                        required =
                                          { function = true, key = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureFunction@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              body = String,
                                              function = String,
                                              headers = String,
                                              key = String,
                                              method =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'PATCH,
                                                        'TRACE,
                                                        'DELETE,
                                                        'PUT,
                                                        'POST,
                                                        'HEAD,
                                                        'GET,
                                                        'OPTIONS
                                                      |]
                                                    ],
                                              queryParameters = String,
                                              successCriteria = String,
                                              waitForCompletion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| '"false", '"true" |]
                                                    ],
                                            },
                                        required =
                                          { function = true, key = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureFunction@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties = { opaVersion = String, },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^OpenPolicyAgentInstaller@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              connection = String,
                                              defaultVersionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'specificTag,
                                                        'specificVersion,
                                                        'latest
                                                      |]
                                                    ],
                                              downloadPath = String,
                                              itemPattern = String,
                                              userRepository = String,
                                              version = String,
                                            },
                                        required =
                                          {
                                              connection = true,
                                              userRepository = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DownloadGitHubRelease@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              args = String,
                                              commands = String,
                                              failOnStdErr = Bool,
                                              inline = String,
                                              interactiveKeyboardAuthentication =
                                                Bool,
                                              interactiveSession = Bool,
                                              interpreterCommand = String,
                                              readyTimeout = String,
                                              runOptions =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'inline,
                                                        'script,
                                                        'commands
                                                      |]
                                                    ],
                                              scriptPath = String,
                                              sshEndpoint = String,
                                            },
                                        required = { sshEndpoint = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^SSH@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              artifactName = String,
                                              properties = String,
                                              targetPath = String,
                                            },
                                        required = { targetPath = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PublishPipelineArtifact@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              artifact = String,
                                              fileSharePath = String,
                                              parallel = Bool,
                                              parallelCount =
                                                std.number.Integer,
                                              properties = String,
                                              publishLocation =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'filepath, 'pipeline |]
                                                    ],
                                              targetPath = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PublishPipelineArtifact@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              breakBuild = Bool,
                                              cmdLineArgs = String,
                                              configFile = String,
                                              connectedServiceName = String,
                                              dbPassword = String,
                                              dbUrl = String,
                                              dbUsername = String,
                                              includeFullReport = Bool,
                                              projectKey = String,
                                              projectName = String,
                                              projectVersion = String,
                                            },
                                        required =
                                          {
                                              connectedServiceName = true,
                                              projectKey = true,
                                              projectName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^SonarQubePreBuild@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              artifactName = String,
                                              downloadPath = String,
                                              filesharePath = String,
                                              itemPattern = String,
                                              parallelizationLimit = String,
                                            },
                                        required =
                                          {
                                              artifactName = true,
                                              filesharePath = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DownloadFileshareArtifacts@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              azureContainerRegistry = String,
                                              azureSubscription = String,
                                              checkLatest = Bool,
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'top,
                                                        'set,
                                                        'run,
                                                        'logs,
                                                        'get,
                                                        'expose,
                                                        'exec,
                                                        'delete,
                                                        'create,
                                                        'apply
                                                      |]
                                                    ],
                                              configMapArguments = String,
                                              configMapFile = String,
                                              configMapName = String,
                                              configuration = String,
                                              containerRegistryType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Container Registry",
                                                        '"Azure Container Registry"
                                                      |]
                                                    ],
                                              dockerRegistryConnection = String,
                                              forceUpdate = Bool,
                                              forceUpdateConfigMap = Bool,
                                              kubectlOutput = String,
                                              kubernetesServiceConnection =
                                                String,
                                              namespace = String,
                                              outputFormat =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'yaml, 'json |]
                                                    ],
                                              secretArguments = String,
                                              secretName = String,
                                              secretType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'generic,
                                                        'dockerRegistry
                                                      |]
                                                    ],
                                              specifyLocation = String,
                                              useConfigMapFile = Bool,
                                              useConfigurationFile = Bool,
                                              versionOrLocation =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'location, 'version |]
                                                    ],
                                              versionSpec = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Kubernetes@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              azureContainerRegistry = String,
                                              azureResourceGroup = String,
                                              azureSubscriptionEndpoint =
                                                String,
                                              azureSubscriptionEndpointForSecrets =
                                                String,
                                              checkLatest = Bool,
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'top,
                                                        'set,
                                                        'run,
                                                        'logs,
                                                        'logout,
                                                        'login,
                                                        'get,
                                                        'expose,
                                                        'exec,
                                                        'delete,
                                                        'create,
                                                        'apply
                                                      |]
                                                    ],
                                              configMapArguments = String,
                                              configMapFile = String,
                                              configMapName = String,
                                              configuration = String,
                                              configurationType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'inline,
                                                        'configuration
                                                      |]
                                                    ],
                                              connectionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'None,
                                                        '"Kubernetes Service Connection",
                                                        '"Azure Resource Manager"
                                                      |]
                                                    ],
                                              containerRegistryType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Container Registry",
                                                        '"Azure Container Registry"
                                                      |]
                                                    ],
                                              dockerRegistryEndpoint = String,
                                              forceUpdate = Bool,
                                              forceUpdateConfigMap = Bool,
                                              inline = String,
                                              kubernetesCluster = String,
                                              kubernetesServiceEndpoint =
                                                String,
                                              namespace = String,
                                              outputFormat =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'none, 'yaml, 'json |]
                                                    ],
                                              secretArguments = String,
                                              secretName = String,
                                              secretType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'generic,
                                                        'dockerRegistry
                                                      |]
                                                    ],
                                              specifyLocation = String,
                                              useClusterAdmin = Bool,
                                              useConfigMapFile = Bool,
                                              useConfigurationFile = Bool,
                                              versionOrLocation =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'location, 'version |]
                                                    ],
                                              versionSpec = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Kubernetes@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Deploy to IoT Edge devices",
                                                        '"Generate deployment manifest",
                                                        '"Push module images",
                                                        '"Build module images"
                                                      |]
                                                    ],
                                              azureContainerRegistry = String,
                                              azureSubscription = String,
                                              azureSubscriptionEndpoint =
                                                String,
                                              bypassModules = String,
                                              containerregistrytype =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Generic Container Registry",
                                                        '"Azure Container Registry"
                                                      |]
                                                    ],
                                              defaultPlatform =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'arm64v8,
                                                        'arm32v7,
                                                        'windows-amd64,
                                                        'amd64
                                                      |]
                                                    ],
                                              deploymentFilePath = String,
                                              deploymentManifestOutputPath =
                                                String,
                                              deploymentid = String,
                                              deviceId = String,
                                              deviceOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Multiple Devices",
                                                        '"Single Device"
                                                      |]
                                                    ],
                                              dockerRegistryConnection = String,
                                              fillRegistryCredential =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| '"false", '"true" |]
                                                    ],
                                              iothubname = String,
                                              "priority" = String,
                                              targetcondition = String,
                                              templateFilePath = String,
                                              validateGeneratedDeploymentManifest =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| '"false", '"true" |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureIoTEdge@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              applicationName = String,
                                              azureSubscription = String,
                                              clusterConnection = String,
                                              composeFilePath = String,
                                              deployTimeoutSec = String,
                                              dockerRegistryConnection = String,
                                              getStatusTimeoutSec = String,
                                              passwordEncrypted = Bool,
                                              registryCredentials =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'None,
                                                        'UsernamePassword,
                                                        'ContainerRegistryEndpoint,
                                                        'AzureResourceManagerEndpoint
                                                      |]
                                                    ],
                                              registryPassword = String,
                                              registryUserName = String,
                                              removeTimeoutSec = String,
                                              upgrade = Bool,
                                            },
                                        required =
                                          { clusterConnection = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^ServiceFabricComposeDeploy@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              files = String,
                                              jarsign = Bool,
                                              jarsignerArguments = String,
                                              keyPass = String,
                                              keystoreAlias = String,
                                              keystoreFile = String,
                                              keystorePass = String,
                                              zipalign = Bool,
                                              zipalignLocation = String,
                                            },
                                        required = { files = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AndroidSigning@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              apkFiles = String,
                                              jarsign = Bool,
                                              jarsignerArguments = String,
                                              jarsignerKeyPassword = String,
                                              jarsignerKeystoreAlias = String,
                                              jarsignerKeystoreFile = String,
                                              jarsignerKeystorePassword =
                                                String,
                                              zipalign = Bool,
                                              zipalignFile = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AndroidSigning@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              apkFiles = String,
                                              apksign = Bool,
                                              apksignerArguments = String,
                                              apksignerFile = String,
                                              apksignerKeyPassword = String,
                                              apksignerKeystoreAlias = String,
                                              apksignerKeystoreFile = String,
                                              apksignerKeystorePassword =
                                                String,
                                              apksignerVersion = String,
                                              zipalign = Bool,
                                              zipalignFile = String,
                                              zipalignVersion = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AndroidSigning@3$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              artifactName = String,
                                              pipelineId = String,
                                              targetPath = String,
                                            },
                                        required = { targetPath = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DownloadPipelineArtifact@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              allowFailedBuilds = Bool,
                                              allowPartiallySucceededBuilds =
                                                Bool,
                                              artifactName = String,
                                              branchName = String,
                                              buildType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'specific, 'current |]
                                                    ],
                                              buildVersionToDownload =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'specific,
                                                        'latestFromBranch,
                                                        'latest
                                                      |]
                                                    ],
                                              definition = String,
                                              itemPattern = String,
                                              pipelineId = String,
                                              project = String,
                                              specificBuildWithTriggering =
                                                Bool,
                                              tags = String,
                                              targetPath = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DownloadPipelineArtifact@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              artifactName = String,
                                              branchName = String,
                                              buildType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'specific, 'current |]
                                                    ],
                                              buildVersionToDownload =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'specific,
                                                        'latestFromBranch,
                                                        'latest
                                                      |]
                                                    ],
                                              itemPattern = String,
                                              pipeline = String,
                                              pipelineId = String,
                                              project = String,
                                              specificBuildWithTriggering =
                                                Bool,
                                              tags = String,
                                              targetPath = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DownloadPipelineArtifact@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              addToPath = Bool,
                                              allowUnstable = Bool,
                                              architecture =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x64, 'x86 |]
                                                    ],
                                              disableDownloadFromRegistry =
                                                Bool,
                                              githubToken = String,
                                              versionSpec = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^UsePythonVersion@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              Inline = String,
                                              ScriptArguments = String,
                                              ScriptPath = String,
                                              ScriptType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'InlineScript,
                                                        'FilePath
                                                      |]
                                                    ],
                                              clusterConnection = String,
                                            },
                                        required =
                                          { clusterConnection = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^ServiceFabricPowerShell@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              batchingBasedOnAgentsOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'customBatchSize,
                                                        'autoBatchSize
                                                      |]
                                                    ],
                                              batchingBasedOnExecutionTimeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'customTimeBatchSize,
                                                        'autoBatchSize
                                                      |]
                                                    ],
                                              codeCoverageEnabled = Bool,
                                              collectDumpOn =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'never,
                                                        'always,
                                                        'onAbortOnly
                                                      |]
                                                    ],
                                              configuration = String,
                                              customBatchSizeValue = String,
                                              customRunTimePerBatchValue =
                                                String,
                                              diagnosticsEnabled = Bool,
                                              distributionBatchType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'basedOnAssembly,
                                                        'basedOnExecutionTime,
                                                        'basedOnTestCases
                                                      |]
                                                    ],
                                              dontDistribute = Bool,
                                              failOnMinTestsNotRun = Bool,
                                              minimumExpectedTests = String,
                                              otherConsoleOptions = String,
                                              overrideTestrunParameters =
                                                String,
                                              pathtoCustomTestAdapters = String,
                                              platform = String,
                                              publishRunAttachments = Bool,
                                              rerunFailedTestCasesMaxLimit =
                                                String,
                                              rerunFailedTests = Bool,
                                              rerunFailedThreshold = String,
                                              rerunMaxAttempts = String,
                                              rerunType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'basedOnTestFailureCount,
                                                        'basedOnTestFailurePercentage
                                                      |]
                                                    ],
                                              resultsFolder = String,
                                              runAllTestsAfterXBuilds = String,
                                              runInParallel = Bool,
                                              runOnlyImpactedTests = Bool,
                                              runSettingsFile = String,
                                              runTestsInIsolation = Bool,
                                              searchFolder = String,
                                              tcmTestRun = String,
                                              testAssemblyVer2 = String,
                                              testConfiguration = String,
                                              testFiltercriteria = String,
                                              testPlan = String,
                                              testRunTitle = String,
                                              testSelector =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'testRun,
                                                        'testPlan,
                                                        'testAssemblies
                                                      |]
                                                    ],
                                              testSuite = String,
                                              uiTests = Bool,
                                              vsTestVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'toolsInstaller,
                                                        '"14.0",
                                                        '"15.0",
                                                        '"16.0",
                                                        '"17.0",
                                                        'latest
                                                      |]
                                                    ],
                                              vstestLocation = String,
                                              vstestLocationMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'location, 'version |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^VSTest@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              azureSubscription = String,
                                              batchingBasedOnAgentsOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'customBatchSize,
                                                        'autoBatchSize
                                                      |]
                                                    ],
                                              batchingBasedOnExecutionTimeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'customTimeBatchSize,
                                                        'autoBatchSize
                                                      |]
                                                    ],
                                              codeCoverageEnabled = Bool,
                                              collectDumpOn =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'never,
                                                        'always,
                                                        'onAbortOnly
                                                      |]
                                                    ],
                                              configuration = String,
                                              customBatchSizeValue = String,
                                              customRunTimePerBatchValue =
                                                String,
                                              diagnosticsEnabled = Bool,
                                              distributionBatchType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'basedOnAssembly,
                                                        'basedOnExecutionTime,
                                                        'basedOnTestCases
                                                      |]
                                                    ],
                                              dontDistribute = Bool,
                                              failOnMinTestsNotRun = Bool,
                                              minimumExpectedTests = String,
                                              otherConsoleOptions = String,
                                              overrideTestrunParameters =
                                                String,
                                              pathtoCustomTestAdapters = String,
                                              platform = String,
                                              publishRunAttachments = Bool,
                                              rerunFailedTestCasesMaxLimit =
                                                String,
                                              rerunFailedTests = Bool,
                                              rerunFailedThreshold = String,
                                              rerunMaxAttempts = String,
                                              rerunType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'basedOnTestFailureCount,
                                                        'basedOnTestFailurePercentage
                                                      |]
                                                    ],
                                              resultsFolder = String,
                                              runAllTestsAfterXBuilds = String,
                                              runInParallel = Bool,
                                              runOnlyImpactedTests = Bool,
                                              runSettingsFile = String,
                                              runTestsInIsolation = Bool,
                                              searchFolder = String,
                                              tcmTestRun = String,
                                              testAssemblyVer2 = String,
                                              testConfiguration = String,
                                              testFiltercriteria = String,
                                              testPlan = String,
                                              testRunTitle = String,
                                              testSelector =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'testRun,
                                                        'testPlan,
                                                        'testAssemblies
                                                      |]
                                                    ],
                                              testSuite = String,
                                              uiTests = Bool,
                                              vsTestVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'toolsInstaller,
                                                        '"14.0",
                                                        '"15.0",
                                                        '"16.0",
                                                        '"17.0",
                                                        'latest
                                                      |]
                                                    ],
                                              vstestLocation = String,
                                              vstestLocationMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'location, 'version |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^VSTest@3$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              codeCoverageEnabled = Bool,
                                              configuration = String,
                                              otherConsoleOptions = String,
                                              overrideTestrunParameters =
                                                String,
                                              pathtoCustomTestAdapters = String,
                                              platform = String,
                                              publishRunAttachments = Bool,
                                              runInParallel = Bool,
                                              runSettingsFile = String,
                                              testAssembly = String,
                                              testFiltercriteria = String,
                                              testRunTitle = String,
                                              vsTestVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"12.0",
                                                        '"14.0",
                                                        'latest
                                                      |]
                                                    ],
                                              vstestLocation = String,
                                              vstestLocationMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'location, 'version |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^VSTest@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              allowApproversToApproveTheirOwnRuns =
                                                Bool,
                                              approvers = String,
                                              instructions = String,
                                              notifyUsers = String,
                                              onTimeout =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'resume, 'reject |]
                                                    ],
                                            },
                                        required = { notifyUsers = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^ManualValidation@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              instructions = String,
                                              notifyUsers = String,
                                              onTimeout =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'resume, 'reject |]
                                                    ],
                                            },
                                        required = { notifyUsers = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^ManualValidation@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              antHomeDirectory = String,
                                              buildFile = String,
                                              codeCoverageClassFilesDirectories =
                                                String,
                                              codeCoverageClassFilter = String,
                                              codeCoverageFailIfEmpty = Bool,
                                              codeCoverageSourceDirectories =
                                                String,
                                              codeCoverageToolOptions =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'JaCoCo,
                                                        'Cobertura,
                                                        'None
                                                      |]
                                                    ],
                                              javaHomeOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Path, 'JDKVersion |]
                                                    ],
                                              jdkArchitectureOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x64, 'x86 |]
                                                    ],
                                              jdkUserInputDirectory = String,
                                              jdkVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"1.6",
                                                        '"1.7",
                                                        '"1.8",
                                                        '"1.9",
                                                        '"1.10",
                                                        '"1.11",
                                                        '"default"
                                                      |]
                                                    ],
                                              options = String,
                                              publishJUnitResults = Bool,
                                              targets = String,
                                              testResultsFiles = String,
                                              testRunTitle = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Ant@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              adminPassword = String,
                                              adminUserName = String,
                                              agentLocation = String,
                                              isDataCollectionOnly = Bool,
                                              machinePassword = String,
                                              machineUserName = String,
                                              runAsProcess = Bool,
                                              testCertificate = Bool,
                                              testMachines = String,
                                              testPlatform =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| '"14.0", '"15.0" |]
                                                    ],
                                              updateTestAgent = Bool,
                                              winRmProtocol =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Https, 'Http |]
                                                    ],
                                            },
                                        required =
                                          {
                                              adminPassword = true,
                                              adminUserName = true,
                                              machinePassword = true,
                                              machineUserName = true,
                                              testMachines = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DeployVisualStudioTestAgent@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              adminPassword = String,
                                              adminUserName = String,
                                              agentLocation = String,
                                              isDataCollectionOnly = Bool,
                                              machinePassword = String,
                                              machineUserName = String,
                                              resourceFilteringMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'tags, 'machineNames |]
                                                    ],
                                              runAsProcess = Bool,
                                              testCertificate = Bool,
                                              testMachineGroup = String,
                                              testMachines = String,
                                              updateTestAgent = Bool,
                                              winRmProtocol =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Https, 'Http |]
                                                    ],
                                            },
                                        required =
                                          {
                                              machinePassword = true,
                                              machineUserName = true,
                                              testMachineGroup = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DeployVisualStudioTestAgent@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              cleanEnvironment = Bool,
                                              createOptions = String,
                                              environmentName = String,
                                              packageSpecs = String,
                                              updateConda = Bool,
                                            },
                                        required = { environmentName = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CondaEnvironment@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              cleanEnvironment = Bool,
                                              createCustomEnvironment = Bool,
                                              createOptions = String,
                                              environmentName = String,
                                              installOptions = String,
                                              packageSpecs = String,
                                              updateConda = Bool,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CondaEnvironment@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              failOnStandardError = Bool,
                                              filename = String,
                                              modifyEnvironment = Bool,
                                              workingFolder = String,
                                            },
                                        required = { filename = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^BatchScript@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              externalRegistryCredentials =
                                                String,
                                              installDirectory = String,
                                              packageName = String,
                                              version = String,
                                            },
                                        required =
                                          {
                                              externalRegistryCredentials =
                                                true,
                                              packageName = true,
                                              version = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DownloadGithubNpmPackage@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              clean = Bool,
                                              configuration = String,
                                              createLogFile = Bool,
                                              customVersion = String,
                                              enableDefaultLogger = Bool,
                                              logFileVerbosity =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'diagnostic,
                                                        'detailed,
                                                        'normal,
                                                        'minimal,
                                                        'quiet
                                                      |]
                                                    ],
                                              logProjectEvents = Bool,
                                              maximumCpuCount = Bool,
                                              msbuildArchitecture =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x64, 'x86 |]
                                                    ],
                                              msbuildArgs = String,
                                              platform = String,
                                              restoreNugetPackages = Bool,
                                              solution = String,
                                              vsVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"11.0",
                                                        '"12.0",
                                                        '"14.0",
                                                        '"15.0",
                                                        '"16.0",
                                                        '"17.0",
                                                        'latest
                                                      |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^VSBuild@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              KeyVaultName = String,
                                              RunAsPreJob = Bool,
                                              SecretsFilter = String,
                                              azureSubscription = String,
                                            },
                                        required =
                                          {
                                              KeyVaultName = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureKeyVault@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              KeyVaultName = String,
                                              RunAsPreJob = Bool,
                                              SecretsFilter = String,
                                              azureSubscription = String,
                                            },
                                        required =
                                          {
                                              KeyVaultName = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureKeyVault@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              includePreviewVersions = Bool,
                                              installationPath = String,
                                              packageType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'sdk, 'runtime |]
                                                    ],
                                              performMultiLevelLookup = Bool,
                                              requestTimeout =
                                                std.number.Integer,
                                              useGlobalJson = Bool,
                                              version = String,
                                              vsVersion = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^UseDotNet@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              packageType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'sdk, 'runtime |]
                                                    ],
                                              version = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DotNetCoreInstaller@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              includePreviewVersions = Bool,
                                              installationPath = String,
                                              packageType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'sdk, 'runtime |]
                                                    ],
                                              performMultiLevelLookup = Bool,
                                              version = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DotNetCoreInstaller@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AppConfigurationEndpoint = String,
                                              ConfigurationFile = String,
                                              ContentType = String,
                                              Depth = String,
                                              DryRun = Bool,
                                              ExcludeFeatureFlags = Bool,
                                              FileContentProfile =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"appconfig/kvset",
                                                        '"appconfig/default"
                                                      |]
                                                    ],
                                              FileFormat =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'properties,
                                                        'yaml,
                                                        'json
                                                      |]
                                                    ],
                                              ImportMode =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Ignore-Match, 'All |]
                                                    ],
                                              Label = String,
                                              Prefix = String,
                                              Separator =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"__",
                                                        '"_",
                                                        '"-",
                                                        '",",
                                                        '";",
                                                        '":",
                                                        '"/",
                                                        '"."
                                                      |]
                                                    ],
                                              Strict = Bool,
                                              Tags = String,
                                              UseFilePathExtension = Bool,
                                              azureSubscription = String,
                                            },
                                        required =
                                          {
                                              AppConfigurationEndpoint = true,
                                              ConfigurationFile = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureAppConfigurationImport@10$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              Action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Stop all continuous webjobs",
                                                        '"Start all continuous webjobs",
                                                        '"Enable Continuous Monitoring",
                                                        '"Install Extensions",
                                                        '"Delete Slot",
                                                        '"Cancel Swap",
                                                        '"Complete Swap",
                                                        '"Start Swap With Preview",
                                                        '"Restart Azure App Service",
                                                        '"Stop Azure App Service",
                                                        '"Start Azure App Service",
                                                        '"Swap Slots"
                                                      |]
                                                    ],
                                              AppInsightsResourceGroupName =
                                                String,
                                              ApplicationInsightsResourceName =
                                                String,
                                              ApplicationInsightsWebTestName =
                                                String,
                                              ExtensionsList = String,
                                              OutputVariable = String,
                                              PreserveVnet = Bool,
                                              ResourceGroupName = String,
                                              Slot = String,
                                              SourceSlot = String,
                                              SpecifySlotOrASE = Bool,
                                              SwapWithProduction = Bool,
                                              TargetSlot = String,
                                              WebAppName = String,
                                              azureSubscription = String,
                                            },
                                        required =
                                          {
                                              WebAppName = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureAppServiceManage@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          { kubeloginVersion = String, },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^KubeloginInstaller@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties = { version = String, },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^FuncToolsInstaller@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              enableXmlTransform = Bool,
                                              folderPath = String,
                                              jsonTargetFiles = String,
                                              xmlTargetFiles = String,
                                              xmlTransformationRules = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^FileTransform@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              enableXmlTransform = Bool,
                                              fileType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'json, 'xml |]
                                                    ],
                                              folderPath = String,
                                              targetFiles = String,
                                              xmlTransformationRules = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^FileTransform@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              archiveFilePatterns = String,
                                              cleanDestinationFolder = Bool,
                                              destinationFolder = String,
                                              overwriteExistingFiles = Bool,
                                              pathToSevenZipTool = String,
                                            },
                                        required =
                                          { destinationFolder = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^ExtractFiles@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              clean = Bool,
                                              configuration = String,
                                              createAppPackage = Bool,
                                              jdkArchitectureOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x64, 'x86 |]
                                                    ],
                                              jdkDirectory = String,
                                              jdkOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Path, 'JDKVersion |]
                                                    ],
                                              jdkVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"1.6",
                                                        '"1.7",
                                                        '"1.8",
                                                        '"1.9",
                                                        '"1.10",
                                                        '"1.11",
                                                        '"default"
                                                      |]
                                                    ],
                                              msbuildArchitectureOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'x64, 'x86 |]
                                                    ],
                                              msbuildArguments = String,
                                              msbuildFile = String,
                                              msbuildLocationOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'location, 'version |]
                                                    ],
                                              msbuildVersionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"4.0",
                                                        '"12.0",
                                                        '"14.0",
                                                        '"15.0",
                                                        '"16.0",
                                                        '"17.0",
                                                        'latest
                                                      |]
                                                    ],
                                              outputDirectory = String,
                                              projectFile = String,
                                              target = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^XamarinAndroid@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ArtifactName = String,
                                              ArtifactType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'FilePath,
                                                        'Container
                                                      |]
                                                    ],
                                              Contents = String,
                                              CopyRoot = String,
                                              TargetPath = String,
                                            },
                                        required =
                                          {
                                              ArtifactName = true,
                                              ArtifactType = true,
                                              Contents = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^CopyPublishBuildArtifacts@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              definition = String,
                                              downloadPath = String,
                                              feed = String,
                                              version = String,
                                            },
                                        required =
                                          {
                                              definition = true,
                                              feed = true,
                                              version = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^DownloadPackage@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              definition = String,
                                              downloadPath = String,
                                              extract = Bool,
                                              feed = String,
                                              files = String,
                                              packageType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'cargo,
                                                        'upack,
                                                        'pypi,
                                                        'nuget,
                                                        'npm,
                                                        'maven
                                                      |]
                                                    ],
                                              version = String,
                                              view = String,
                                            },
                                        required =
                                          {
                                              definition = true,
                                              feed = true,
                                              version = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^DownloadPackage@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'DeleteRG,
                                                        'Delete,
                                                        'Restart,
                                                        'StopWithDeallocate,
                                                        'Stop,
                                                        'Start,
                                                        '"Select Resource Group",
                                                        '"Create Or Update Resource Group"
                                                      |]
                                                    ],
                                              addSpnToEnvironment = Bool,
                                              azureSubscription = String,
                                              copyAzureVMTags = Bool,
                                              csmFile = String,
                                              csmFileLink = String,
                                              csmParametersFile = String,
                                              csmParametersFileLink = String,
                                              deploymentGroupName = String,
                                              deploymentMode =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Validation,
                                                        'Complete,
                                                        'Incremental
                                                      |]
                                                    ],
                                              deploymentName = String,
                                              deploymentOutputs = String,
                                              enableDeploymentPrerequisites =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'ConfigureVMWithDGAgent,
                                                        'ConfigureVMwithWinRM,
                                                        'None
                                                      |]
                                                    ],
                                              location = String,
                                              outputVariable = String,
                                              overrideParameters = String,
                                              password = String,
                                              resourceGroupName = String,
                                              runAgentServiceAsUser = Bool,
                                              teamProject = String,
                                              teamServicesConnection = String,
                                              templateLocation =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"URL of the file",
                                                        '"Linked artifact"
                                                      |]
                                                    ],
                                              useWithoutJSON = Bool,
                                              userName = String,
                                            },
                                        required =
                                          {
                                              azureSubscription = true,
                                              resourceGroupName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureResourceGroupDeployment@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ConnectedServiceName = String,
                                              ConnectedServiceNameClassic =
                                                String,
                                              ConnectedServiceNameSelector =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'ConnectedServiceNameClassic,
                                                        'ConnectedServiceName
                                                      |]
                                                    ],
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'DeleteRG,
                                                        'Delete,
                                                        'Restart,
                                                        'Stop,
                                                        'Start,
                                                        '"Select Resource Group",
                                                        '"Create Or Update Resource Group"
                                                      |]
                                                    ],
                                              actionClassic =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Select Resource Group"
                                                      |]
                                                    ],
                                              cloudService = String,
                                              csmFile = String,
                                              csmParametersFile = String,
                                              deploymentMode =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Complete,
                                                        'Incremental,
                                                        'Validation
                                                      |]
                                                    ],
                                              enableDeploymentPrerequisitesForCreate =
                                                Bool,
                                              enableDeploymentPrerequisitesForSelect =
                                                Bool,
                                              location =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"West US 2",
                                                        '"West US",
                                                        '"West India",
                                                        '"West Europe",
                                                        '"West Central US",
                                                        '"UK West",
                                                        '"UK South",
                                                        '"Southeast Asia",
                                                        '"South India",
                                                        '"South Central US",
                                                        '"North Europe",
                                                        '"North Central US",
                                                        '"Japan West",
                                                        '"Japan East",
                                                        '"East US 2 ",
                                                        '"East US",
                                                        '"East Asia",
                                                        '"Central US",
                                                        '"Central India",
                                                        '"Canada East",
                                                        '"Canada Central",
                                                        '"Brazil South",
                                                        '"Australia Southeast",
                                                        '"Australia East"
                                                      |]
                                                    ],
                                              outputVariable = String,
                                              overrideParameters = String,
                                              resourceGroupName = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureResourceGroupDeployment@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'DeleteRG,
                                                        '"Create Or Update Resource Group"
                                                      |]
                                                    ],
                                              addSpnToEnvironment = Bool,
                                              azureResourceManagerConnection =
                                                String,
                                              csmFile = String,
                                              csmFileLink = String,
                                              csmParametersFile = String,
                                              csmParametersFileLink = String,
                                              deploymentMode =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Validation,
                                                        'Complete,
                                                        'Incremental
                                                      |]
                                                    ],
                                              deploymentName = String,
                                              deploymentOutputs = String,
                                              deploymentScope =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Resource Group",
                                                        'Subscription,
                                                        '"Management Group"
                                                      |]
                                                    ],
                                              location = String,
                                              overrideParameters = String,
                                              resourceGroupName = String,
                                              subscriptionId = String,
                                              templateLocation =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"URL of the file",
                                                        '"Linked artifact"
                                                      |]
                                                    ],
                                              useWithoutJSON = Bool,
                                            },
                                        required =
                                          {
                                              azureResourceManagerConnection =
                                                true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureResourceManagerTemplateDeployment@3$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              body = String,
                                              headers = String,
                                              method =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'PATCH,
                                                        'TRACE,
                                                        'DELETE,
                                                        'PUT,
                                                        'POST,
                                                        'HEAD,
                                                        'GET,
                                                        'OPTIONS
                                                      |]
                                                    ],
                                              serviceConnection = String,
                                              successCriteria = String,
                                              urlSuffix = String,
                                              waitForCompletion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| '"false", '"true" |]
                                                    ],
                                            },
                                        required =
                                          { serviceConnection = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^InvokeRESTAPI@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              azureServiceConnection = String,
                                              body = String,
                                              connectionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'connectedServiceNameARM,
                                                        'connectedServiceName
                                                      |]
                                                    ],
                                              headers = String,
                                              method =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'PATCH,
                                                        'TRACE,
                                                        'DELETE,
                                                        'PUT,
                                                        'POST,
                                                        'HEAD,
                                                        'GET,
                                                        'OPTIONS
                                                      |]
                                                    ],
                                              serviceConnection = String,
                                              successCriteria = String,
                                              urlSuffix = String,
                                              waitForCompletion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| '"false", '"true" |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^InvokeRESTAPI@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              archiveFile = String,
                                              archiveType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'wim,
                                                        'tar,
                                                        '"7z",
                                                        'zip
                                                      |]
                                                    ],
                                              includeRootFolder = Bool,
                                              quiet = Bool,
                                              replaceExistingArchive = Bool,
                                              rootFolderOrFile = String,
                                              sevenZipCompression =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'none,
                                                        'fastest,
                                                        'fast,
                                                        'normal,
                                                        'maximum,
                                                        'ultra
                                                      |]
                                                    ],
                                              tarCompression =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'none,
                                                        'xz,
                                                        'bz2,
                                                        'gz
                                                      |]
                                                    ],
                                              verbose = Bool,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^ArchiveFiles@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              archiveFile = String,
                                              archiveType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'wim,
                                                        'tar,
                                                        '"7z",
                                                        '"default"
                                                      |]
                                                    ],
                                              includeRootFolder = Bool,
                                              replaceExistingArchive = Bool,
                                              rootFolder = String,
                                              tarCompression =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'none,
                                                        'xz,
                                                        'bz2,
                                                        'gz
                                                      |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^ArchiveFiles@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              comment = String,
                                              gitHubConnection = String,
                                              id = String,
                                              repositoryName = String,
                                            },
                                        required = { gitHubConnection = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^GitHubComment@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              CleanTargetFolder = Bool,
                                              Contents = String,
                                              OverWrite = Bool,
                                              SourceFolder = String,
                                              TargetFolder = String,
                                              delayBetweenRetries = String,
                                              flattenFolders = Bool,
                                              ignoreMakeDirErrors = Bool,
                                              preserveTimestamp = Bool,
                                              retryCount = String,
                                            },
                                        required = { TargetFolder = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CopyFiles@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              CleanTargetFolder = Bool,
                                              Contents = String,
                                              OverWrite = Bool,
                                              SourceFolder = String,
                                              TargetFolder = String,
                                              flattenFolders = Bool,
                                            },
                                        required = { TargetFolder = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CopyFiles@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              DatabaseName = String,
                                              DeleteFirewallRule = Bool,
                                              EndIpAddress = String,
                                              IpDetectionMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'IPAddressRange,
                                                        'AutoDetect
                                                      |]
                                                    ],
                                              ServerName = String,
                                              SqlAdditionalArguments = String,
                                              SqlFile = String,
                                              SqlInline = String,
                                              SqlPassword = String,
                                              SqlUsername = String,
                                              StartIpAddress = String,
                                              TaskNameSelector =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'InlineSqlTask,
                                                        'SqlTaskFile
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                            },
                                        required =
                                          {
                                              ServerName = true,
                                              SqlPassword = true,
                                              SqlUsername = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureMysqlDeployment@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'custom,
                                                        'publish,
                                                        'install,
                                                        'ci
                                                      |]
                                                    ],
                                              customCommand = String,
                                              customEndpoint = String,
                                              customFeed = String,
                                              customRegistry =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'useFeed, 'useNpmrc |]
                                                    ],
                                              publishEndpoint = String,
                                              publishFeed = String,
                                              publishPackageMetadata = Bool,
                                              publishRegistry =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'useFeed,
                                                        'useExternalRegistry
                                                      |]
                                                    ],
                                              verbose = Bool,
                                              workingDir = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Npm@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              command = String,
                                              cwd = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Npm@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              api_build_command = String,
                                              api_location = String,
                                              app_build_command = String,
                                              app_location = String,
                                              azure_access_token = String,
                                              azure_static_web_apps_api_token =
                                                String,
                                              build_timeout_in_minutes =
                                                std.number.Integer,
                                              config_file_location = String,
                                              data_api_location = String,
                                              default_hostname = String,
                                              deployment_environment = String,
                                              is_static_export = Bool,
                                              output_location = String,
                                              production_branch = String,
                                              routes_location = String,
                                              skip_api_build = Bool,
                                              skip_app_build = Bool,
                                              verbose = Bool,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureStaticWebApp@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              checkLatest = Bool,
                                              delayBetweenRetries = String,
                                              force32bit = Bool,
                                              retryCountOnDownloadFails =
                                                String,
                                              version = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^UseNode@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              checkLatest = Bool,
                                              delayBetweenRetries = String,
                                              force32bit = Bool,
                                              nodejsMirror = String,
                                              retryCountOnDownloadFails =
                                                String,
                                              versionFilePath = String,
                                              versionSource =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'fromFile, 'spec |]
                                                    ],
                                              versionSpec = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^NodeTool@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArguments = String,
                                              AdminPassword = String,
                                              AdminUserName = String,
                                              ConnectionString = String,
                                              DacpacFile = String,
                                              DatabaseName = String,
                                              DeployInParallel = Bool,
                                              EnvironmentName = String,
                                              MachineFilter = String,
                                              Protocol =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Https, 'Http |]
                                                    ],
                                              PublishProfile = String,
                                              ResourceFilteringMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'tags, 'machineNames |]
                                                    ],
                                              ServerName = String,
                                              SqlPassword = String,
                                              SqlUsername = String,
                                              TargetMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'publishProfile,
                                                        'connectionString,
                                                        'server
                                                      |]
                                                    ],
                                              TestCertificate = Bool,
                                            },
                                        required =
                                          {
                                              DacpacFile = true,
                                              EnvironmentName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^SqlServerDacpacDeployment@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              customFeed = String,
                                              netShare = String,
                                              packageFeedSelector =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'netShare,
                                                        'customFeed,
                                                        'nugetOrg
                                                      |]
                                                    ],
                                              password = String,
                                              testPlatformVersion = String,
                                              username = String,
                                              versionSelector =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'specificVersion,
                                                        'latestStable,
                                                        'latestPreRelease
                                                      |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^VisualStudioTestPlatformInstaller@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              azureSubscription = String,
                                              certificateString = String,
                                              messageBody = String,
                                              sessionId = String,
                                              signPayload = Bool,
                                              signatureKey = String,
                                              useDataContractSerializer = Bool,
                                              waitForCompletion = Bool,
                                            },
                                        required =
                                          { azureSubscription = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PublishToAzureServiceBus@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              azureSubscription = String,
                                              certificateString = String,
                                              messageBody = String,
                                              serviceBusNamespace = String,
                                              serviceBusQueueName = String,
                                              sessionId = String,
                                              signPayload = Bool,
                                              signatureKey = String,
                                              useDataContractSerializer = Bool,
                                              waitForCompletion = Bool,
                                            },
                                        required =
                                          {
                                              azureSubscription = true,
                                              serviceBusNamespace = true,
                                              serviceBusQueueName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PublishToAzureServiceBus@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              azureSubscription = String,
                                              messageBody = String,
                                              waitForCompletion = Bool,
                                            },
                                        required =
                                          { azureSubscription = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PublishToAzureServiceBus@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'reject,
                                                        'scale,
                                                        'promote,
                                                        'patch,
                                                        'deploy,
                                                        'delete,
                                                        'createSecret,
                                                        'bake
                                                      |]
                                                    ],
                                              arguments = String,
                                              baselineAndCanaryReplicas =
                                                String,
                                              containers = String,
                                              dockerComposeFile = String,
                                              dockerRegistryEndpoint = String,
                                              helmChart = String,
                                              imagePullSecrets = String,
                                              kind =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'statefulset,
                                                        'replicaset,
                                                        'deployment
                                                      |]
                                                    ],
                                              kubernetesServiceConnection =
                                                String,
                                              kustomizationPath = String,
                                              manifests = String,
                                              mergeStrategy =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'strategic,
                                                        '"merge",
                                                        'json
                                                      |]
                                                    ],
                                              name = String,
                                              namespace = String,
                                              overrideFiles = String,
                                              overrides = String,
                                              patch = String,
                                              percentage = String,
                                              releaseName = String,
                                              renderType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'kustomize,
                                                        'kompose,
                                                        'helm
                                                      |]
                                                    ],
                                              replicas = String,
                                              resourceFileToPatch = String,
                                              resourceToPatch =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'name, 'file |]
                                                    ],
                                              rolloutStatusTimeout = String,
                                              secretArguments = String,
                                              secretName = String,
                                              secretType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'generic,
                                                        'dockerRegistry
                                                      |]
                                                    ],
                                              strategy =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'none, 'canary |]
                                                    ],
                                              trafficSplitMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'smi, 'pod |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^KubernetesManifest@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'reject,
                                                        'scale,
                                                        'promote,
                                                        'patch,
                                                        'deploy,
                                                        'delete,
                                                        'createSecret,
                                                        'bake
                                                      |]
                                                    ],
                                              arguments = String,
                                              azureResourceGroup = String,
                                              azureSubscriptionConnection =
                                                String,
                                              baselineAndCanaryReplicas =
                                                String,
                                              connectionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'kubernetesServiceConnection,
                                                        'azureResourceManager
                                                      |]
                                                    ],
                                              containers = String,
                                              dockerComposeFile = String,
                                              dockerRegistryEndpoint = String,
                                              helmChart = String,
                                              imagePullSecrets = String,
                                              kind =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'statefulset,
                                                        'replicaset,
                                                        'deployment
                                                      |]
                                                    ],
                                              kubernetesCluster = String,
                                              kubernetesServiceConnection =
                                                String,
                                              kustomizationPath = String,
                                              manifests = String,
                                              mergeStrategy =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'strategic,
                                                        '"merge",
                                                        'json
                                                      |]
                                                    ],
                                              name = String,
                                              namespace = String,
                                              overrideFiles = String,
                                              overrides = String,
                                              patch = String,
                                              percentage = String,
                                              releaseName = String,
                                              renderType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'kustomize,
                                                        'kompose,
                                                        'helm
                                                      |]
                                                    ],
                                              replicas = String,
                                              resourceFileToPatch = String,
                                              resourceToPatch =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'name, 'file |]
                                                    ],
                                              rolloutStatusTimeout = String,
                                              secretArguments = String,
                                              secretName = String,
                                              secretType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'generic,
                                                        'dockerRegistry
                                                      |]
                                                    ],
                                              strategy =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'none, 'canary |]
                                                    ],
                                              trafficSplitMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'smi, 'pod |]
                                                    ],
                                              useClusterAdmin = Bool,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^KubernetesManifest@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              allowPartiallySucceededBuilds =
                                                Bool,
                                              artifactName = String,
                                              branchName = String,
                                              buildId = String,
                                              buildType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'specific, 'current |]
                                                    ],
                                              buildVersionToDownload =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'specific,
                                                        'latestFromBranch,
                                                        'latest
                                                      |]
                                                    ],
                                              checkDownloadedFiles = Bool,
                                              cleanDestinationFolder = Bool,
                                              downloadPath = String,
                                              downloadType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'specific, 'single |]
                                                    ],
                                              extractTars = Bool,
                                              itemPattern = String,
                                              parallelizationLimit = String,
                                              pipeline = String,
                                              project = String,
                                              retryDownloadCount = String,
                                              retryRedirectDownloadCount =
                                                String,
                                              specificBuildWithTriggering =
                                                Bool,
                                              tags = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DownloadBuildArtifacts@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              allowPartiallySucceededBuilds =
                                                Bool,
                                              artifactName = String,
                                              branchName = String,
                                              buildId = String,
                                              buildType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'specific, 'current |]
                                                    ],
                                              buildVersionToDownload =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'specific,
                                                        'latestFromBranch,
                                                        'latest
                                                      |]
                                                    ],
                                              checkDownloadedFiles = Bool,
                                              cleanDestinationFolder = Bool,
                                              downloadPath = String,
                                              downloadType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'specific, 'single |]
                                                    ],
                                              extractTars = Bool,
                                              itemPattern = String,
                                              parallelizationLimit = String,
                                              pipeline = String,
                                              project = String,
                                              retryDownloadCount = String,
                                              specificBuildWithTriggering =
                                                Bool,
                                              tags = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^DownloadBuildArtifacts@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              forceRepoUpdate = Bool,
                                              projectDirectory = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CocoaPods@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              Action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Delete Staging Deployment",
                                                        '"Set Production",
                                                        'Deploy
                                                      |]
                                                    ],
                                              AppName = String,
                                              AzureSpringCloud = String,
                                              Builder = String,
                                              CreateNewDeployment = Bool,
                                              DeploymentName = String,
                                              DeploymentType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'CustomContainer,
                                                        'Artifacts
                                                      |]
                                                    ],
                                              DotNetCoreMainEntryPath = String,
                                              EnvironmentVariables = String,
                                              ImageArgs = String,
                                              ImageCommand = String,
                                              ImageLanguageFramework =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| '"", 'springboot |]
                                                    ],
                                              ImageName = String,
                                              JvmOptions = String,
                                              Package = String,
                                              RegistryPassword = String,
                                              RegistryServer = String,
                                              RegistryUsername = String,
                                              RuntimeVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'NetCore_31,
                                                        'Java_21,
                                                        'Java_17,
                                                        'Java_11,
                                                        'Java_8
                                                      |]
                                                    ],
                                              UseStagingDeployment = Bool,
                                              Version = String,
                                              azureSubscription = String,
                                            },
                                        required =
                                          {
                                              AppName = true,
                                              AzureSpringCloud = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureSpringCloud@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appName = String,
                                              appSettings = String,
                                              appType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'webAppLinux,
                                                        'webApp
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                              configurationStrings = String,
                                              customDeployFolder = String,
                                              customWebConfig = String,
                                              deployToSlotOrASE = Bool,
                                              deploymentMethod =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'runFromPackage,
                                                        'zipDeploy,
                                                        'auto
                                                      |]
                                                    ],
                                              package = String,
                                              resourceGroupName = String,
                                              runtimeStack = String,
                                              slotName = String,
                                              startUpCommand = String,
                                            },
                                        required =
                                          {
                                              appName = true,
                                              appType = true,
                                              azureSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureWebApp@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              addSpnToEnvironment = Bool,
                                              arguments = String,
                                              azureSubscription = String,
                                              failOnStandardError = Bool,
                                              inlineScript = String,
                                              scriptLocation =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'scriptPath,
                                                        'inlineScript
                                                      |]
                                                    ],
                                              scriptPath = String,
                                              useGlobalConfig = Bool,
                                              workingDirectory = String,
                                            },
                                        required =
                                          { azureSubscription = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureCLI@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              args = String,
                                              connectedServiceName = String,
                                              connectedServiceNameARM = String,
                                              connectedServiceNameSelector =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'connectedServiceNameARM,
                                                        'connectedServiceName
                                                      |]
                                                    ],
                                              cwd = String,
                                              failOnStandardError = Bool,
                                              inlineScript = String,
                                              scriptLocation =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'scriptPath,
                                                        'inlineScript
                                                      |]
                                                    ],
                                              scriptPath = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureCLI@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              addSpnToEnvironment = Bool,
                                              arguments = String,
                                              azureSubscription = String,
                                              failOnStandardError = Bool,
                                              inlineScript = String,
                                              keepAzSessionActive = Bool,
                                              powerShellErrorActionPreference =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'silentlyContinue,
                                                        'continue,
                                                        'stop
                                                      |]
                                                    ],
                                              powerShellIgnoreLASTEXITCODE =
                                                Bool,
                                              scriptLocation =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'scriptPath,
                                                        'inlineScript
                                                      |]
                                                    ],
                                              scriptPath = String,
                                              scriptType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'bash,
                                                        'batch,
                                                        'pscore,
                                                        'ps
                                                      |]
                                                    ],
                                              useGlobalConfig = Bool,
                                              visibleAzLogin = Bool,
                                              workingDirectory = String,
                                            },
                                        required =
                                          {
                                              azureSubscription = true,
                                              scriptType = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^AzureCLI@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'delete,
                                                        'edit,
                                                        'create
                                                      |]
                                                    ],
                                              addChangeLog = Bool,
                                              assetUploadMode =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'replace, 'delete |]
                                                    ],
                                              assets = String,
                                              changeLogCompareToRelease =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'lastNonDraftReleaseByTag,
                                                        'lastNonDraftRelease,
                                                        'lastFullRelease
                                                      |]
                                                    ],
                                              changeLogCompareToReleaseTag =
                                                String,
                                              changeLogLabels = String,
                                              changeLogType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'issueBased,
                                                        'commitBased
                                                      |]
                                                    ],
                                              gitHubConnection = String,
                                              isDraft = Bool,
                                              isPreRelease = Bool,
                                              releaseNotesFilePath = String,
                                              releaseNotesInline = String,
                                              releaseNotesSource =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'inline, 'filePath |]
                                                    ],
                                              repositoryName = String,
                                              tag = String,
                                              tagPattern = String,
                                              tagSource =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'userSpecifiedTag,
                                                        'gitTag
                                                      |]
                                                    ],
                                              target = String,
                                              title = String,
                                            },
                                        required = { gitHubConnection = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^GitHubRelease@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'delete,
                                                        'edit,
                                                        'create
                                                      |]
                                                    ],
                                              addChangeLog = Bool,
                                              assetUploadMode =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'replace, 'delete |]
                                                    ],
                                              assets = String,
                                              changeLogCompareToRelease =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'lastNonDraftReleaseByTag,
                                                        'lastNonDraftRelease,
                                                        'lastFullRelease
                                                      |]
                                                    ],
                                              changeLogCompareToReleaseTag =
                                                String,
                                              changeLogLabels = String,
                                              changeLogType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'issueBased,
                                                        'commitBased
                                                      |]
                                                    ],
                                              gitHubConnection = String,
                                              isDraft = Bool,
                                              isPreRelease = Bool,
                                              releaseNotes = String,
                                              releaseNotesFile = String,
                                              releaseNotesSource =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'input, 'file |]
                                                    ],
                                              repositoryName = String,
                                              tag = String,
                                              tagPattern = String,
                                              tagSource =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'manual, 'auto |]
                                                    ],
                                              target = String,
                                              title = String,
                                            },
                                        required = { gitHubConnection = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^GitHubRelease@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              files = String,
                                              options = String,
                                              password = String,
                                              redirectStderr = Bool,
                                              url = String,
                                              username = String,
                                            },
                                        required =
                                          { files = true, url = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^cURLUploader@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              authType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'UserAndPass,
                                                        'ServiceEndpoint
                                                      |]
                                                    ],
                                              files = String,
                                              options = String,
                                              password = String,
                                              redirectStderr = Bool,
                                              remotePath = String,
                                              serviceEndpoint = String,
                                              url = String,
                                              username = String,
                                            },
                                        required = { files = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^cURLUploader@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appName = String,
                                              appSettings = String,
                                              azureSubscription = String,
                                              connectionStrings = String,
                                              generalSettings = String,
                                              resourceGroupName = String,
                                              slotName = String,
                                            },
                                        required =
                                          {
                                              appName = true,
                                              azureSubscription = true,
                                              resourceGroupName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureAppServiceSettings@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              command =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'publish, 'download |]
                                                    ],
                                              downloadDirectory = String,
                                              externalFeedCredentials = String,
                                              feedDownloadExternal = String,
                                              feedPublishExternal = String,
                                              feedsToUse =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'external, 'internal |]
                                                    ],
                                              feedsToUsePublish =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'external, 'internal |]
                                                    ],
                                              packageDownloadExternal = String,
                                              packagePublishDescription =
                                                String,
                                              packagePublishExternal = String,
                                              publishDirectory = String,
                                              publishFeedCredentials = String,
                                              publishPackageMetadata = Bool,
                                              publishedPackageVar = String,
                                              verbosity =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Critical,
                                                        'Error,
                                                        'Warning,
                                                        'Information,
                                                        'Debug,
                                                        'Trace,
                                                        'None
                                                      |]
                                                    ],
                                              versionDownloadExternal = String,
                                              versionOption =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'custom,
                                                        'patch,
                                                        'minor,
                                                        'major
                                                      |]
                                                    ],
                                              versionPublish = String,
                                              vstsFeed = String,
                                              vstsFeedPackage = String,
                                              vstsFeedPackagePublish = String,
                                              vstsFeedPublish = String,
                                              vstsPackageVersion = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^UniversalPackages@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ResourceGroupName = String,
                                              Resources = String,
                                              RetryDuration = String,
                                              azureSubscription = String,
                                            },
                                        required =
                                          { azureSubscription = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzurePolicyCheckGate@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appName = String,
                                              arguments = String,
                                              dockerHubNamespace = String,
                                              dockerRegistryServiceConnection =
                                                String,
                                              functionRootDirectory = String,
                                              kubernetesServiceConnection =
                                                String,
                                              namespace = String,
                                              secretName = String,
                                              waitForStability = Bool,
                                            },
                                        required =
                                          {
                                              appName = true,
                                              dockerRegistryServiceConnection =
                                                true,
                                              kubernetesServiceConnection =
                                                true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureFunctionOnKubernetes@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              appName = String,
                                              arguments = String,
                                              azureResourceGroup = String,
                                              azureSubscriptionConnection =
                                                String,
                                              connectionType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Kubernetes Service Connection",
                                                        '"Azure Resource Manager"
                                                      |]
                                                    ],
                                              dockerHubNamespace = String,
                                              dockerRegistryServiceConnection =
                                                String,
                                              functionRootDirectory = String,
                                              kubernetesCluster = String,
                                              kubernetesServiceConnection =
                                                String,
                                              namespace = String,
                                              secretName = String,
                                              waitForStability = Bool,
                                            },
                                        required =
                                          {
                                              appName = true,
                                              dockerRegistryServiceConnection =
                                                true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureFunctionOnKubernetes@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              args = String,
                                              cwd = String,
                                              disableAutoCwd = Bool,
                                              failOnStandardError = Bool,
                                              scriptPath = String,
                                            },
                                        required = { scriptPath = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^ShellScript@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              bashEnvValue = String,
                                              failOnStderr = Bool,
                                              filePath = String,
                                              script = String,
                                              targetType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'inline, 'filePath |]
                                                    ],
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^Bash@3$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ArtifactName = String,
                                              MaxArtifactSize =
                                                std.number.Integer,
                                              Parallel = Bool,
                                              ParallelCount =
                                                std.number.Integer,
                                              PathtoPublish = String,
                                              StoreAsTar = Bool,
                                              TargetPath = String,
                                              publishLocation =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'FilePath,
                                                        'Container
                                                      |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^PublishBuildArtifacts@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              addEntryToConfig = Bool,
                                              configHostAlias = String,
                                              configHostname = String,
                                              configPort = String,
                                              configUser = String,
                                              knownHostsEntry = String,
                                              sshKeySecureFile = String,
                                              sshPassphrase = String,
                                              sshPublicKey = String,
                                            },
                                        required =
                                          {
                                              knownHostsEntry = true,
                                              sshKeySecureFile = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^InstallSSHKey@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Configure application startup",
                                                        '"Update image"
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                              customScript = String,
                                              customScriptArguments = String,
                                              customScriptsDirectory = String,
                                              customScriptsStorageAccount =
                                                String,
                                              imageUrl = String,
                                              skipArchivingCustomScripts = Bool,
                                              vmssName = String,
                                              vmssOsType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Linux, 'Windows |]
                                                    ],
                                            },
                                        required =
                                          {
                                              azureSubscription = true,
                                              imageUrl = true,
                                              vmssName = true,
                                              vmssOsType = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureVmssDeployment@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              action =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"Configure application startup",
                                                        '"Update image"
                                                      |]
                                                    ],
                                              azureSubscription = String,
                                              customScript = String,
                                              customScriptArguments = String,
                                              customScriptsDirectory = String,
                                              customScriptsStorageAccount =
                                                String,
                                              imageUrl = String,
                                              skipArchivingCustomScripts = Bool,
                                              vmssName = String,
                                              vmssOsType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Linux, 'Windows |]
                                                    ],
                                            },
                                        required =
                                          {
                                              azureSubscription = true,
                                              imageUrl = true,
                                              vmssName = true,
                                              vmssOsType = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureVmssDeployment@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              AdditionalArguments = String,
                                              ConnectedServiceName = String,
                                              Package = String,
                                              Slot = String,
                                              WebSiteLocation = String,
                                              WebSiteName = String,
                                              doNotDelete = Bool,
                                            },
                                        required =
                                          {
                                              ConnectedServiceName = true,
                                              Package = true,
                                              WebSiteLocation = true,
                                              WebSiteName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureWebPowerShellDeployment@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              azureDevOpsServiceConnection =
                                                String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CondaAuthenticate@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ARMConnectedServiceName = String,
                                              ARMStorageAccount = String,
                                              AllowUpgrade = Bool,
                                              AppendDateTimeToLabel = Bool,
                                              CsCfg = String,
                                              CsDef = String,
                                              CsPkg = String,
                                              DeploymentLabel = String,
                                              DiagnosticStorageAccountKeys =
                                                String,
                                              KeyVault = String,
                                              ResourceGroupName = String,
                                              ServiceLocation = String,
                                              ServiceName = String,
                                              UpgradeMode = String,
                                              VerifyRoleInstanceStatus = Bool,
                                            },
                                        required =
                                          {
                                              ARMConnectedServiceName = true,
                                              ARMStorageAccount = true,
                                              CsCfg = true,
                                              CsDef = true,
                                              CsPkg = true,
                                              ResourceGroupName = true,
                                              ServiceLocation = true,
                                              ServiceName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureCloudPowerShellDeployment@2$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ARMConnectedServiceName = String,
                                              ARMStorageAccount = String,
                                              AllowUpgrade = Bool,
                                              AppendDateTimeToLabel = Bool,
                                              CsCfg = String,
                                              CsPkg = String,
                                              DeploymentLabel = String,
                                              DiagnosticStorageAccountKeys =
                                                String,
                                              EnableAdvancedStorageOptions =
                                                Bool,
                                              ForceUpgrade = Bool,
                                              NewServiceAdditionalArguments =
                                                String,
                                              NewServiceAffinityGroup = String,
                                              NewServiceCustomCertificates =
                                                String,
                                              ServiceLocation = String,
                                              ServiceName = String,
                                              SimultaneousUpgrade = Bool,
                                              StorageAccount = String,
                                              VerifyRoleInstanceStatus = Bool,
                                              azureClassicSubscription = String,
                                              slotName = String,
                                            },
                                        required =
                                          {
                                              CsCfg = true,
                                              CsPkg = true,
                                              ServiceLocation = true,
                                              ServiceName = true,
                                              azureClassicSubscription = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^AzureCloudPowerShellDeployment@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              azureDevOpsServiceConnection =
                                                String,
                                              cargoServiceConnections = String,
                                              configFile = String,
                                              registryNames = String,
                                            },
                                        required = { configFile = true, },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^CargoAuthenticate@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              Contents = String,
                                              RemoveDotFiles = Bool,
                                              RemoveSourceFolder = Bool,
                                              SourceFolder = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^DeleteFiles@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              enableCodeCoverage = Bool,
                                              gulpFile = String,
                                              gulpjs = String,
                                              publishJUnitResults = Bool,
                                              srcFiles = String,
                                              targets = String,
                                              testFiles = String,
                                              testFramework =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Jasmine, 'Mocha |]
                                                    ],
                                              testResultsFiles = String,
                                              testRunTitle = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^gulp@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              arguments = String,
                                              enableCodeCoverage = Bool,
                                              gulpFile = String,
                                              gulpjs = String,
                                              publishJUnitResults = Bool,
                                              srcFiles = String,
                                              targets = String,
                                              testFiles = String,
                                              testFramework =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'Jasmine, 'Mocha |]
                                                    ],
                                              testResultsFiles = String,
                                              testRunTitle = String,
                                              workingDirectory = String,
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^gulp@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              avgResponseTimeThreshold = String,
                                              connectedServiceName = String,
                                              geoLocation =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"West US",
                                                        '"West Europe",
                                                        '"Southeast Asia",
                                                        '"South India",
                                                        '"South Central US",
                                                        '"North Europe",
                                                        '"North Central US",
                                                        '"Japan West",
                                                        '"Japan East",
                                                        '"East US",
                                                        '"East US 2",
                                                        '"East Asia",
                                                        '"Central US",
                                                        '"Central India",
                                                        '"Brazil South",
                                                        '"Australia Southeast",
                                                        '"Australia East",
                                                        'Default
                                                      |]
                                                    ],
                                              machineType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| '"2", '"0" |]
                                                    ],
                                              numOfSelfProvisionedAgents =
                                                std.number.Integer,
                                              resourceGroupName = String,
                                              runDuration =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"300",
                                                        '"240",
                                                        '"180",
                                                        '"120",
                                                        '"60"
                                                      |]
                                                    ],
                                              testName = String,
                                              vuLoad =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"250",
                                                        '"100",
                                                        '"50",
                                                        '"25"
                                                      |]
                                                    ],
                                              websiteUrl = String,
                                            },
                                        required =
                                          {
                                              testName = true,
                                              websiteUrl = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^QuickPerfTest@1$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              ActionIISApplicationPool =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'RecycleAppPool,
                                                        'StopAppPool,
                                                        'StartAppPool,
                                                        'CreateOrUpdateAppPool
                                                      |]
                                                    ],
                                              ActionIISWebsite =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'StopWebsite,
                                                        'StartWebsite,
                                                        'CreateOrUpdateWebsite
                                                      |]
                                                    ],
                                              AddBinding = Bool,
                                              AnonymousAuthenticationForWebsite =
                                                Bool,
                                              AppCmdCommands = String,
                                              AppPoolIdentity =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'SpecificUser,
                                                        'NetworkService,
                                                        'LocalSystem,
                                                        'LocalService,
                                                        'ApplicationPoolIdentity
                                                      |]
                                                    ],
                                              AppPoolIdentityForApplication =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'SpecificUser,
                                                        'NetworkService,
                                                        'LocalSystem,
                                                        'LocalService,
                                                        'ApplicationPoolIdentity
                                                      |]
                                                    ],
                                              AppPoolIdentityForWebsite =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'SpecificUser,
                                                        'NetworkService,
                                                        'LocalSystem,
                                                        'LocalService,
                                                        'ApplicationPoolIdentity
                                                      |]
                                                    ],
                                              AppPoolName = String,
                                              AppPoolNameForApplication =
                                                String,
                                              AppPoolNameForWebsite = String,
                                              AppPoolPassword = String,
                                              AppPoolPasswordForApplication =
                                                String,
                                              AppPoolPasswordForWebsite =
                                                String,
                                              AppPoolUsername = String,
                                              AppPoolUsernameForApplication =
                                                String,
                                              AppPoolUsernameForWebsite =
                                                String,
                                              ApplicationAuthUserName = String,
                                              ApplicationAuthUserPassword =
                                                String,
                                              ApplicationPhysicalPathAuth =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'ApplicationWindowsAuth,
                                                        'ApplicationUserPassThrough
                                                      |]
                                                    ],
                                              BasicAuthenticationForWebsite =
                                                Bool,
                                              Bindings = String,
                                              ConfigureAuthenticationForWebsite =
                                                Bool,
                                              CreateOrUpdateAppPoolForApplication =
                                                Bool,
                                              CreateOrUpdateAppPoolForWebsite =
                                                Bool,
                                              DotNetVersion =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"No Managed Code",
                                                        '"v2.0",
                                                        '"v4.0"
                                                      |]
                                                    ],
                                              DotNetVersionForApplication =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"No Managed Code",
                                                        '"v2.0",
                                                        '"v4.0"
                                                      |]
                                                    ],
                                              DotNetVersionForWebsite =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        '"No Managed Code",
                                                        '"v2.0",
                                                        '"v4.0"
                                                      |]
                                                    ],
                                              EnableIIS = Bool,
                                              HostNameWithHttp = String,
                                              HostNameWithOutSNI = String,
                                              HostNameWithSNI = String,
                                              IISDeploymentType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'IISApplicationPool,
                                                        'IISVirtualDirectory,
                                                        'IISWebApplication,
                                                        'IISWebsite
                                                      |]
                                                    ],
                                              IPAddress = String,
                                              ParentWebsiteNameForApplication =
                                                String,
                                              ParentWebsiteNameForVD = String,
                                              PhysicalPathForApplication =
                                                String,
                                              PhysicalPathForVD = String,
                                              PipeLineMode =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Classic,
                                                        'Integrated
                                                      |]
                                                    ],
                                              PipeLineModeForApplication =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Classic,
                                                        'Integrated
                                                      |]
                                                    ],
                                              PipeLineModeForWebsite =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'Classic,
                                                        'Integrated
                                                      |]
                                                    ],
                                              Port = String,
                                              Protocol =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [| 'http, 'https |]
                                                    ],
                                              SSLCertThumbPrint = String,
                                              ServerNameIndication = Bool,
                                              StartStopRecycleAppPoolName =
                                                String,
                                              StartStopWebsiteName = String,
                                              VDAuthUserName = String,
                                              VDAuthUserPassword = String,
                                              VDPhysicalPathAuth =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'VDWindowsAuth,
                                                        'VDUserPassThrough
                                                      |]
                                                    ],
                                              VirtualPathForApplication =
                                                String,
                                              VirtualPathForVD = String,
                                              WebsiteAuthUserName = String,
                                              WebsiteAuthUserPassword = String,
                                              WebsiteName = String,
                                              WebsitePhysicalPath = String,
                                              WebsitePhysicalPathAuth =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'WebsiteWindowsAuth,
                                                        'WebsiteUserPassThrough
                                                      |]
                                                    ],
                                              WindowsAuthenticationForWebsite =
                                                Bool,
                                            },
                                        required =
                                          {
                                              AppPoolName = true,
                                              AppPoolNameForApplication = true,
                                              AppPoolNameForWebsite = true,
                                              Bindings = true,
                                              ParentWebsiteNameForApplication =
                                                true,
                                              ParentWebsiteNameForVD = true,
                                              VirtualPathForApplication = true,
                                              VirtualPathForVD = true,
                                              WebsiteName = true,
                                            },
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches
                                      "^IISWebAppManagementOnMachineGroup@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { inputs = true, task = true, },
                    },
                  js2n.record.Record
                    {
                      additional = 'Some Dyn,
                      patterns = {},
                      properties =
                        {
                            inputs =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    String,
                                    js2n.record.Record
                                      {
                                        additional = 'None,
                                        patterns = {},
                                        properties =
                                          {
                                              dockerVersion = String,
                                              releaseType =
                                                std.contract.Sequence
                                                    [
                                                      std.enum.TagOrString,
                                                      [|
                                                        'nightly,
                                                        'test,
                                                        'edge,
                                                        'stable
                                                      |]
                                                    ],
                                            },
                                        required = {},
                                      },
                                    Array Dyn
                                  ],
                            task =
                              std.contract.any_of
                                  [
                                    js2n.Null,
                                    Bool,
                                    Number,
                                    js2n.string.Matches "^DockerInstaller@0$",
                                    { _ | Dyn },
                                    Array Dyn
                                  ],
                          },
                      required = { task = true, },
                    }
                ],
              {
                condition
                  | String
                  | doc "Evaluate this condition expression to determine whether to run this task"
                  | optional,
                continueOnError
                  | Bool
                  | doc "Continue running the parent job even on failure?"
                  | optional,
                displayName
                  | String
                  | doc "Human-readable name for the task"
                  | optional,
                enabled
                  | String
                  | doc "Run this task when the job runs?"
                  | optional,
                env
                  | { _ | Dyn }
                  | doc "Variables to map into the process's environment"
                  | optional,
                inputs | { _ | Dyn } | doc "Task-specific inputs" | optional,
                name
                  | js2n.string.Matches "^[_A-Za-z0-9]*$"
                  | doc "ID of the task instance"
                  | optional,
                retryCountOnTaskFailure
                  | std.number.Integer
                  | doc "Number of retries if the task fails"
                  | optional,
                task
                  | std.contract.any_of
                    [
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"PowerShell@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"PowerShell@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzurePowerShell@5" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzurePowerShell@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzurePowerShell@4" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzurePowerShell@3" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzurePowerShell@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"MysqlDeploymentOnMachineGroup@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"PipAuthenticate@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"PipAuthenticate@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Maven@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Maven@3" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Maven@4" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Maven@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"DotNetCoreCLI@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"DotNetCoreCLI@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"DotNetCoreCLI@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"XamarinComponentRestore@0" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureRmWebAppDeployment@3" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureRmWebAppDeployment@2" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureRmWebAppDeployment@4" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"PowerShellOnTargetMachines@3" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"PowerShellOnTargetMachines@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"PowerShellOnTargetMachines@2" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"PublishCodeCoverageResults@2" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"PublishCodeCoverageResults@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"RunVisualStudioTestsusingTestAgent@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"ManualIntervention@8" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"InstallAppleProvisioningProfile@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"InstallAppleProvisioningProfile@0" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"SonarQubePostTest@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"PyPIPublisher@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"ChefKnife@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"GoTool@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"XcodePackageiOS@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Go@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"PublishPipelineMetadata@0" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Docker@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Docker@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Docker@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"JenkinsQueueJob@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"JenkinsQueueJob@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"FtpUpload@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"FtpUpload@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"WindowsMachineFileCopy@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"WindowsMachineFileCopy@2" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AndroidBuild@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"TwineAuthenticate@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"TwineAuthenticate@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"IISWebAppDeploymentOnMachineGroup@0" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"PythonScript@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"HelmInstaller@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"HelmInstaller@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"NodeTaskRunnerInstaller@0" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"XamarinLicense@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"NuGetAuthenticate@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"NuGetAuthenticate@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"DownloadGitHubNugetPackage@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"MavenAuthenticate@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureAppConfigurationExport@10" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"ReviewApp@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"JavaToolInstaller@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"JavaToolInstaller@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Chef@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureFunctionApp@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureFunctionApp@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"npmAuthenticate@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"MSBuild@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"PackerBuild@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"PackerBuild@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"NuGetPackager@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureAppConfigurationSnapshot@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"DuffleInstaller@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"ServiceFabricUpdateAppVersions@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"ServiceFabricUpdateManifests@2" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureMonitor@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureMonitor@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Notation@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureNLBManagement@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"ApacheJMeterLoadTest@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"DockerCompose@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"DockerCompose@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureMonitorAlerts@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"XamarinTestCloud@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"ServiceFabricDeploy@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Xcode@5" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Xcode@3" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Xcode@4" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Xcode@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"NuGetPublisher@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"queryWorkItems@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureWebAppContainer@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"SqlDacpacDeploymentOnMachineGroup@0" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CacheBeta@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CacheBeta@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Cache@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CMake@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"VSMobileCenterTest@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AppCenterTest@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"DownloadSecureFile@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureContainerApps@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureContainerApps@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"UseRubyVersion@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Grunt@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"SqlAzureDacpacDeployment@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"ContainerStructureTest@0" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"IISWebAppDeployment@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CloudLoadTest@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"KubectlInstaller@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CmdLine@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CmdLine@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"NuGet@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"ContainerBuild@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"NuGetInstaller@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"NuGetRestore@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"NuGetCommand@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Delay@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"XamariniOS@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"XamariniOS@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"PublishTestResults@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"PublishTestResults@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureFileCopy@5" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureFileCopy@6" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureFileCopy@4" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureFileCopy@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureFileCopy@3" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureFileCopy@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"PublishSymbols@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"PublishSymbols@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CopyFilesOverSSH@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Gradle@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Gradle@3" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Gradle@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AppCenterDistribute@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AppCenterDistribute@2" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AppCenterDistribute@3" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AppCenterDistribute@0" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"NuGetToolInstaller@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"NuGetToolInstaller@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"JenkinsDownloadArtifacts@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"JenkinsDownloadArtifacts@2" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureFunctionAppContainer@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"DecryptFile@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"HelmDeploy@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"HelmDeploy@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"InstallAppleCertificate@2" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"InstallAppleCertificate@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"InstallAppleCertificate@0" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureFunction@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureFunction@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"OpenPolicyAgentInstaller@0" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"DownloadGitHubRelease@0" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"SSH@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"PublishPipelineArtifact@0" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"PublishPipelineArtifact@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"SonarQubePreBuild@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"DownloadFileshareArtifacts@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Kubernetes@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Kubernetes@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureIoTEdge@2" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"ServiceFabricComposeDeploy@0" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AndroidSigning@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AndroidSigning@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AndroidSigning@3" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"DownloadPipelineArtifact@0" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"DownloadPipelineArtifact@2" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"DownloadPipelineArtifact@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"UsePythonVersion@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"ServiceFabricPowerShell@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"VSTest@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"VSTest@3" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"VSTest@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"ManualValidation@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"ManualValidation@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Ant@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"DeployVisualStudioTestAgent@2" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"DeployVisualStudioTestAgent@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CondaEnvironment@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CondaEnvironment@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"BatchScript@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"DownloadGithubNpmPackage@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"VSBuild@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureKeyVault@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureKeyVault@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"UseDotNet@2" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"DotNetCoreInstaller@0" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"DotNetCoreInstaller@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureAppConfigurationImport@10" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureAppServiceManage@0" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"KubeloginInstaller@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"FuncToolsInstaller@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"FileTransform@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"FileTransform@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"ExtractFiles@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"XamarinAndroid@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"CopyPublishBuildArtifacts@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"DownloadPackage@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"DownloadPackage@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureResourceGroupDeployment@2" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureResourceGroupDeployment@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureResourceManagerTemplateDeployment@3" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"InvokeRESTAPI@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"InvokeRESTAPI@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"ArchiveFiles@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"ArchiveFiles@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"GitHubComment@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CopyFiles@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CopyFiles@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureMysqlDeployment@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Npm@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Npm@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureStaticWebApp@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"UseNode@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"NodeTool@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"SqlServerDacpacDeployment@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"VisualStudioTestPlatformInstaller@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"PublishToAzureServiceBus@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"PublishToAzureServiceBus@2" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"PublishToAzureServiceBus@0" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"KubernetesManifest@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"KubernetesManifest@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"DownloadBuildArtifacts@0" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"DownloadBuildArtifacts@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CocoaPods@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureSpringCloud@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureWebApp@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureCLI@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureCLI@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"AzureCLI@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"GitHubRelease@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"GitHubRelease@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"cURLUploader@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"cURLUploader@2" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureAppServiceSettings@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"UniversalPackages@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzurePolicyCheckGate@0" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureFunctionOnKubernetes@0" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureFunctionOnKubernetes@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"ShellScript@2" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"Bash@3" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"PublishBuildArtifacts@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"InstallSSHKey@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureVmssDeployment@0" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureVmssDeployment@1" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureWebPowerShellDeployment@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CondaAuthenticate@0" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureCloudPowerShellDeployment@2" |]
                        ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"AzureCloudPowerShellDeployment@1" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"CargoAuthenticate@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"DeleteFiles@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"gulp@0" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"gulp@1" |] ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"QuickPerfTest@1" |] ],
                      std.contract.Sequence
                        [
                          std.enum.TagOrString,
                          [| '"IISWebAppManagementOnMachineGroup@0" |]
                        ],
                      std.contract.Sequence
                        [ std.enum.TagOrString, [| '"DockerInstaller@0" |] ]
                    ]
                  | optional,
                timeoutInMinutes
                  | std.number.Integer
                  | doc "Time to wait for this task to complete before the server kills it"
                  | optional,
              }
            ],
      "definitions.templateContext" = {  .. },
      "definitions.trigger" =
        std.contract.any_of
            [
              js2n.string.Matches "^none$",
              Array (
                std.contract.Sequence
                  [ refs."definitions.branchFilter", String ]
              ),
              {
                batch
                  | refs."definitions.boolean"
                  | String
                  | doc "Whether to batch changes per branch"
                  | optional,
                branches
                  | refs."definitions.includeExcludeFilters"
                  | { _ | Dyn }
                  | optional,
                paths
                  | refs."definitions.includeExcludeFilters"
                  | { _ | Dyn }
                  | optional,
                tags
                  | refs."definitions.includeExcludeFilters"
                  | { _ | Dyn }
                  | optional,
              }
            ],
      "definitions.triggerBranchFilter" =
        std.contract.any_of
            [
              {
                exclude
                  | refs."definitions.branchFilterArray"
                  | Array Dyn
                  | optional,
                include
                  | refs."definitions.branchFilterArray"
                  | Array Dyn
                  | optional,
              },
              Array (
                std.contract.Sequence
                  [ refs."definitions.branchFilter", String ]
              )
            ],
      "definitions.variable" =
        std.contract.any_of
            [
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        name =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                        readonly =
                          std.contract.Sequence
                              [ refs."definitions.boolean", String ],
                        value =
                          std.contract.Sequence
                              [ refs."definitions.string", String ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        group =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                      },
                  required = {},
                },
              js2n.record.Record
                {
                  additional = 'None,
                  patterns = {},
                  properties =
                    {
                        parameters =
                          std.contract.Sequence
                              [ refs."definitions.mapping", { _ | Dyn } ],
                        template =
                          std.contract.Sequence
                              [ refs."definitions.nonEmptyString", String ],
                      },
                  required = {},
                }
            ],
      "definitions.variableRestrictions" =
        std.contract.any_of
            [
              js2n.string.Matches "^none$",
              Array (
                std.contract.Sequence
                  [ refs."definitions.nonEmptyString", String ]
              )
            ],
      "definitions.variables" =
        std.contract.any_of
            [
              {  .. },
              Array (
                std.contract.Sequence
                  [ refs."definitions.variable", { _ | Dyn } ]
              )
            ],
      "definitions.webhookFilter" =
        {
            path
              | refs."definitions.nonEmptyString"
              | String
              | doc "json path to select data from event payload",
            value
              | refs."definitions.nonEmptyString"
              | String
              | doc "Expected value for the filter to match",
          },
      "definitions.webhookFilters" =
        Array (
            std.contract.Sequence
              [ refs."definitions.webhookFilter", { _ | Dyn } ]
          ),
      "definitions.webhookResource" =
        {
            connection
              | refs."definitions.nonEmptyString"
              | String
              | doc "Name of the connection. In case of offline webhook this will be the type of Incoming Webhook otherwise it will be the type of the webhook extension.",
            filters
              | refs."definitions.webhookFilters"
              | Array Dyn
              | doc "List of trigger filters."
              | optional,
            type
              | refs."definitions.nonEmptyString"
              | String
              | doc "Name of the webhook extension. leave this empty if its offline webhook."
              | optional,
            webhook
              | refs."definitions.referenceName"
              | String
              | doc "Name of the webhook",
          },
      "definitions.webhookResources" =
        Array (
            std.contract.Sequence
              [ refs."definitions.webhookResource", { _ | Dyn } ]
          ),
    }
    in
  std.contract.any_of [ refs."definitions.pipeline", js2n.string.Matches "^$" ]