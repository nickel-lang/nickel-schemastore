# DO NOT EDIT
# This file was automatically generated using json-schema-to-nickel
let predicates =
{
    allOf
      : Array (Dyn -> { success: Bool, error: String }) -> Dyn -> {
        success: Bool,
        error: String
      }
      | doc m%"
      `allOf preds` succeeds if all of the predicates in `preds` succeed
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.1]
      "%
      = fun preds x => std.array.fold_right
          (fun pred acc => let result = pred x in
            if !result.success then result else acc)
          { error = "", success = true, }
          preds,
    always : Dyn -> { success: Bool, error: String }
      = std.function.const { error = "", success = true, },
    anyOf
      : Array (Dyn -> { success: Bool, error: String }) -> Dyn -> {
        success: Bool,
        error: String
      }
      | doc m%"
      `anyOf preds` succeeds if at least one of the predicates in `preds` succeeds
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.2]
      "%
      = fun preds x => (fun result => if result.success then
            { error = "", success = true, }
            else
            {
              error = m%"
                  anyOf: none of the options matched%{std.string.join "\n"
                  result.errors}
                  "%,
              success = false,
            })
          (std.array.fold_right
          (fun pred acc => let result = pred x in
            if result.success || acc.success then
            { errors = [  ], success = true, }
            else
            {
              errors = [
                      m%"
                      - %{result.error}
                      "%
                    ] @
                    acc.errors,
              success = false,
            })
          { errors = [  ], success = false, }
          preds),
    arrays = {
          additionalItems
            : (Dyn -> { success: Bool, error: String }) -> Number -> Dyn -> {
              success: Bool,
              error: String
            }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.2]
            "%
            = fun pred start x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (let x  | Array Dyn = x in
                let value_length = std.array.length x in
                if start >= value_length then
                { error = "", success = true, }
                else
                (arrayOf pred ((std.array.slice start value_length x) | Dyn))),
          arrayOf
            : (Dyn -> { success: Bool, error: String }) -> Dyn -> {
              success: Bool,
              error: String
            }
            | doc m%"
            Apply a predicate to all elements of an array, succeeding if all
            applications succeed. If the value isn't an array, fail.
            "%
            = fun pred x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (let x  | Array Dyn = x in
                std.array.fold_right
                (fun x acc => let result = pred x in
                  if !result.success then result else acc)
                { error = "", success = true, }
                x),
          contains
            : (Dyn -> { success: Bool, error: String }) -> Dyn -> {
              success: Bool,
              error: String
            }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.6]
            "%
            = fun pred x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (let x  | Array Dyn = x in
                (fun result => if result.success then
                  { error = "", success = true, }
                  else
                  {
                    error = m%"
                        contains: no elements matched%{std.string.join "\n"
                        result.errors}
                        "%,
                    success = false,
                  })
                (std.array.fold_right
                (fun x acc => let result = pred x in
                  if result.success || acc.success then
                  { errors = [  ], success = true, }
                  else
                  {
                    errors = [
                            m%"
                            - %{result.error}
                            "%
                          ] @
                          acc.errors,
                    success = false,
                  })
                { errors = [  ], success = false, }
                x)),
          items
            : Array (Dyn -> { success: Bool, error: String }) -> Dyn -> {
              success: Bool,
              error: String
            }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.1]
            "%
            = fun preds x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (let x  | Array Dyn = x in
                let length_to_check =
                std.number.min (std.array.length preds) (std.array.length x)
                in
                
                std.array.fold_right
                (fun i acc => let result =
                  std.array.at i preds (std.array.at i x)
                  in
                  
                  if !result.success then result else acc)
                { error = "", success = true, }
                (std.array.range 0 length_to_check)),
          maxItems
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            `maxItems n x` fails if `x` is an array of length strictly greater than `n` and succeeds otherwise.
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.3]
            "%
            = fun n x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (if (std.array.length (x | Array Dyn)) > n then
                {
                    error = m%"
                        array is longer than %{std.string.from_number n} items
                        "%,
                    success = false,
                  }
                else
                { error = "", success = true, }),
          minItems
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            `minItems n x` fails if `x` is an array of length strictly smaller than `n` and succeeds otherwise.
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.4]
            "%
            = fun n x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (if (std.array.length (x | Array Dyn)) < n then
                {
                    error = m%"
                        array is shorter than %{std.string.from_number n} items
                        "%,
                    success = false,
                  }
                else
                { error = "", success = true, }),
          uniqueItems
            : Dyn -> { success: Bool, error: String }
            | doc m%"
            Succeeds for any array if its elements are pairwise distinct.
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.5]
            "%
            = let find_duplicate 
                : Array Dyn -> {
                  has_duplicate: Bool,
                  duplicate: Dyn,
                  seen: { _ : Bool }
                } =
              std.array.fold_right
                (fun elt acc => if acc.has_duplicate then acc else
                  (let index = std.serialize 'Json elt in
                  if std.record.has_field index acc.seen then
                  { duplicate = elt, has_duplicate = true, seen = acc.seen, }
                  else
                  {
                    duplicate = null,
                    has_duplicate = false,
                    seen = std.record.insert index true acc.seen,
                  }))
                { duplicate = null, has_duplicate = false, seen = {  }, }
              in
              
              fun x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (let {has_duplicate  | Dyn, duplicate  | Dyn, ..} =
                find_duplicate (x | Array Dyn)
                in
                
                if has_duplicate then
                {
                    error = m%"
                        duplicate found: %{std.serialize 'Json duplicate}
                        "%,
                    success = false,
                  }
                else
                { error = "", success = true, }),
        },
    const
      : Dyn -> Dyn -> { success: Bool, error: String }
      | doc m%"
      `const value x` succeeds if and only if `x` is equalt to `value`
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.1.3]
      "%
      = fun value x => if x == value then { error = "", success = true, } else
          {
            error = m%"
                expected %{std.serialize 'Json value}
                "%,
            success = false,
          },
    contract_from_predicate
      : (Dyn -> { success: Bool, error: String }) -> Dyn -> Dyn -> Dyn
      = fun predicate label value => let {success  | Dyn, error  | Dyn} =
          predicate value
          in
          
          if success then value else
          ((std.contract.blame_with_message error label) | Dyn),
    enum
      : Array Dyn -> Dyn -> { success: Bool, error: String }
      | doc m%"
      `enum values x` succeeds if and only if `x` is equal to one of the elements of `values`.
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.1.2]
      "%
      = let checkEqual =
        fun input variant => (input == variant) ||
            ((std.is_enum input) &&
            (((std.string.from_enum input) == variant) | Bool))
        in
        
        fun values x => std.array.fold_right
          (fun value acc => if checkEqual x value then
            { error = "", success = true, }
            else
            acc)
          {
            error = m%"
                expected one of %{std.serialize 'Json (values | Dyn)}
                "%,
            success = false,
          }
          values,
    from_simple_predicate
      : String -> (Dyn -> Bool) -> Dyn -> { success: Bool, error: String }
      | doc m%"
      Convert a simple boolean predicate into a predicate supporting error messages
      "%
      = fun error' pred x => { error = error', success = pred x, },
    ifThenElse
      : (Dyn -> { success: Bool, error: String }) -> (Dyn -> {
        success: Bool,
        error: String
      }) -> (Dyn -> { success: Bool, error: String }) -> Dyn -> {
        success: Bool,
        error: String
      }
      | doc m%"
      `ifThenElse i t e` first checks if the predicate `i` succeeds. If it does, it's equivalent to `t`, otherwise it's equivalent to `e`.
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.6]
      "%
      = fun i t e x => let {success  | Dyn, ..} = i x in
          if success then t x else (e x),
    isType
      : [| '"Array", '"Bool", 'Integer, 'Null, '"Number", 'Record, '"String" |]
      -> Dyn -> { success: Bool, error: String }
      = fun t => (match {'Integer => from_simple_predicate "expected an integer"
            (fun x => (std.is_number x) &&
              (std.number.is_integer (x | Number))),
            'Null => from_simple_predicate "expected `null`"
            (fun x => x == null),
            _ => from_simple_predicate
            m%"
            value is not of type %{std.string.from_enum t}
            "%
            (fun x => (std.typeof x) == t)
          })
          t,
    never : Dyn -> { success: Bool, error: String }
      = std.function.const { error = "never", success = false, },
    not
      : (Dyn -> { success: Bool, error: String }) -> Dyn -> {
        success: Bool,
        error: String
      }
      | doc m%"
      `not pred` succeeds if and only if `pred` fails
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.4]
      "%
      = fun pred x => let result = pred x in
          if result.success then
          {
              error = "Inverted predicate succeeded unexpectedly",
              success = false,
            }
          else
          { error = "", success = true, },
    numbers = {
          exclusiveMaximum
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.3]
            "%
            = fun limit x => if !(std.is_number x) then
                { error = "", success = true, }
                else
                (if (x | Number) < limit then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected an exclusive maximum of %{std.string.from_number
                      limit}
                      "%,
                  success = false,
                }),
          exclusiveMinimum
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.5]
            "%
            = fun limit x => if !(std.is_number x) then
                { error = "", success = true, }
                else
                (if (x | Number) > limit then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected an exclusive minimum of %{std.string.from_number
                      limit}
                      "%,
                  success = false,
                }),
          maximum
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.2]
            "%
            = fun limit x => if !(std.is_number x) then
                { error = "", success = true, }
                else
                (if (x | Number) <= limit then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected a maximum of %{std.string.from_number limit}
                      "%,
                  success = false,
                }),
          minimum
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.4]
            "%
            = fun limit x => if !(std.is_number x) then
                { error = "", success = true, }
                else
                (if (x | Number) >= limit then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected a minimum of %{std.string.from_number limit}
                      "%,
                  success = false,
                }),
          multipleOf
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.1]
            "%
            = fun mult x => if !(std.is_number x) then
                { error = "", success = true, }
                else
                (if std.number.is_integer ((x | Number) / mult) then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected a multiple of %{std.string.from_number mult}
                      "%,
                  success = false,
                }),
        },
    oneOf
      : Array (Dyn -> { success: Bool, error: String }) -> Dyn -> {
        success: Bool,
        error: String
      }
      | doc m%"
      `oneOf preds` succeeds if precisely one of the predicates in `preds` succeeds
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.3]
      "%
      = fun preds x => let count_true 
            : Array { success: Bool, error: String } -> Number =
          fun results => std.array.fold_left
              (fun n b => if b.success then n + 1 else n)
              0
              results
          in
          
          let results = std.array.map (fun pred => pred x) preds in
          let count = count_true results in
          if count == 0 then
          let errors =
            std.array.map
              (fun result => m%"
                - %{result.error}
                "%)
              results
            in
            
            {
              error = m%"
                  oneOf: none of the options matched%{std.string.join "\n"
                  errors}
                  "%,
              success = false,
            }
          else
          (if count > 1 then
          {
              error = "oneOf: more than one of the options matched",
              success = false,
            }
          else
          { error = "", success = true, }),
    records = {
          dependencies
            : { _ : Dyn } -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.7]
            "%
            = let mustHaveFields 
                : Array String -> { _ : Dyn } -> {
                  success: Bool,
                  error: String
                } =
              fun fields x => std.array.fold_right
                  (fun field acc => if !(std.record.has_field field x) then
                    {
                        error = m%"
                            expected field `%{field}`
                            "%,
                        success = false,
                      }
                    else
                    acc)
                  { error = "", success = true, }
                  fields
              in
              
              fun deps x => if !(std.is_record x) then
                { error = "", success = true, }
                else
                (let x  | { _ : Dyn } = x in
                std.array.fold_right
                (fun {field  | Dyn, value  | Dyn} => fun acc =>
                  if !(std.record.has_field field x) then acc else
                    (let result =
                    if std.is_array value then
                      mustHaveFields (value | Array String) x
                      else
                      (let pred  | Dyn -> { success: Bool, error: String } =
                      value
                      in
                      
                      pred (x | Dyn))
                    in
                    
                    if !result.success then
                    {
                        error = m%"
                            dependency of `%{field}` failed: %{result.error}
                            "%,
                        success = false,
                      }
                    else
                    acc))
                { error = "", success = true, }
                (std.record.to_array deps)),
          maxProperties
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            `maxProperties n x` fails if `x` is a record containing stricly more than `n` fields.
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.1]
            "%
            = fun n x => if !(std.is_record x) then
                { error = "", success = true, }
                else
                (if (std.record.length (x | { _ : Dyn })) > n then
                {
                    error = m%"
                        record contains more than %{std.string.from_number
                        n} fields
                        "%,
                    success = false,
                  }
                else
                { error = "", success = true, }),
          minProperties
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            `minProperties n x` fails if `x` is a record containing stricly less than `n` fields.
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.1]
            "%
            = fun n x => if !(std.is_record x) then
                { error = "", success = true, }
                else
                (if (std.record.length (x | { _ : Dyn })) < n then
                {
                    error = m%"
                        record contains fewer than %{std.string.from_number
                        n} fields
                        "%,
                    success = false,
                  }
                else
                { error = "", success = true, }),
          propertyNames
            : (Dyn -> { success: Bool, error: String }) -> Dyn -> {
              success: Bool,
              error: String
            }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.8]
            "%
            = fun pred x => if !(std.is_record x) then
                { error = "", success = true, }
                else
                (std.array.fold_right
                (fun field acc => let result = pred (field | Dyn) in
                  if !result.success then
                  {
                      error = m%"
                          field `%{field}` did not validate against `propertyNames` schema
                          "%,
                      success = false,
                    }
                  else
                  acc)
                { error = "", success = true, }
                (std.record.fields (x | { _ : Dyn }))),
          record
            : { _ : Dyn -> { success: Bool, error: String } } -> { _ : Dyn -> {
              success: Bool,
              error: String
            } } -> Bool -> (Dyn -> { success: Bool, error: String }) -> Dyn -> {
              success: Bool,
              error: String
            }
            | doc m%"
            `record properties patternProperties additionalAllowed
            additionalProperties x` is a combination of the `properties`,
            `patternProperties` and `additionalProperties` validation keywords in
            JSON schema.
            
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5]
            "%
            =
            fun properties patternProperties additionalAllowed additionalProperties x =>
              if !(std.is_record x) then { error = "", success = true, } else
                (let x  | { _ : Dyn } = x in
                let check_properties 
                  : { success: Bool, error: String, checked: { _ : Bool } } =
                std.array.fold_right
                  (fun {field  | Dyn, value  | Dyn} => fun acc =>
                    if !(std.record.has_field field x) then acc else
                      (let result = value x."%{field}" in
                      if !result.success then
                      {
                          checked : { _ : Bool }
                            = {  },
                          error = m%"
                              field `%{field}` didn't validate: %{result.error}
                              "%,
                          success = false,
                        }
                      else
                      {
                        checked = std.record.insert field true acc.checked,
                        error = acc.error,
                        success = acc.success,
                      }))
                  { checked = {  }, error = "", success = true, }
                  (std.record.to_array properties)
                in
                
                let matching_fields  : String -> { _ : Dyn } =
                fun pattern => let matcher = std.string.is_match pattern in
                    std.array.fold_left
                    (fun acc => fun {field  | Dyn, value  | Dyn} => if matcher
                        field then
                        std.record.insert field value acc
                        else
                        acc)
                    {  }
                    (std.record.to_array x)
                in
                
                let check_pattern_properties 
                  : { success: Bool, error: String, checked: { _ : Bool } } =
                std.array.fold_right
                  (fun {field  | Dyn = pattern, value  | Dyn = pred} =>
                  fun acc => let result =
                      std.array.fold_right
                        (fun {field  | Dyn, value  | Dyn} => fun acc =>
                          let result = pred value in
                            if !result.success then
                            {
                                checked : { _ : Bool }
                                  = {  },
                                error = m%"
                                    field `%{field}` didn't validate: %{result.error}
                                    "%,
                                success = false,
                              }
                            else
                            {
                              checked = std.record.insert field true
                                  acc.checked,
                              error = acc.error,
                              success = acc.success,
                            })
                        {
                          checked : { _ : Bool }
                            = {  },
                          error = "",
                          success = true,
                        }
                        (std.record.to_array (matching_fields pattern))
                      in
                      
                      if !result.success then result else
                      {
                        checked = std.array.fold_left
                            (fun r field => if !(std.record.has_field field
                              r) then
                              std.record.insert field true r
                              else
                              r)
                            acc.checked
                            (std.record.fields result.checked),
                        error = acc.error,
                        success = acc.success,
                      })
                  { checked : { _ : Bool } = {  }, error = "", success = true, }
                  (std.record.to_array patternProperties)
                in
                
                let remaining_fields =
                std.array.fold_left
                  (fun acc field => if !(std.record.has_field field acc) then
                    acc
                    else
                    (std.record.remove field acc))
                  x
                  ((std.record.fields check_properties.checked) @
                    (std.record.fields check_pattern_properties.checked))
                in
                
                let check_additional_properties 
                  : { success: Bool, error: String } =
                if (!additionalAllowed) &&
                  (!(std.record.is_empty remaining_fields)) then
                  {
                      error = m%"
                          extra fields %{std.serialize 'Json
                          ((std.record.fields remaining_fields) | Dyn)}
                          "%,
                      success = false,
                    }
                  else
                  (std.array.fold_right
                  (fun {field  | Dyn, value  | Dyn} => fun acc => let result =
                      additionalProperties value
                      in
                      
                      if !result.success then
                      {
                          error = m%"
                              field `%{field}` didn't validate: %{result.error}
                              "%,
                          success = false,
                        }
                      else
                      acc)
                  { error = "", success = true, }
                  (std.record.to_array remaining_fields))
                in
                
                if !check_properties.success then
                { error = check_properties.error, success = false, }
                else
                (if !check_pattern_properties.success then
                { error = check_pattern_properties.error, success = false, }
                else
                check_additional_properties)),
          required
            : Array String -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.3]
            "%
            = fun fields x => if !(std.is_record x) then
                { error = "", success = true, }
                else
                (std.array.fold_right
                (fun field acc => if !(std.record.has_field field
                  (x | { _ : Dyn })) then
                  {
                      error = m%"
                          missing required field %{field}
                          "%,
                      success = false,
                    }
                  else
                  acc)
                { error = "", success = true, }
                fields),
        },
    strings = {
          maxLength
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.3.1]
            "%
            = fun limit x => if !(std.is_string x) then
                { error = "", success = true, }
                else
                (if (std.string.length (x | String)) <= limit then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected a string of length no larger than %{std.string.from_number
                      limit}
                      "%,
                  success = false,
                }),
          minLength
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.3.2]
            "%
            = fun limit x => if !(std.is_string x) then
                { error = "", success = true, }
                else
                (if (std.string.length (x | String)) >= limit then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected a string of length no smaller than %{std.string.from_number
                      limit}
                      "%,
                  success = false,
                }),
          pattern
            : String -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.3.3]
            "%
            = fun pattern x => if !(std.is_string x) then
                { error = "", success = true, }
                else
                (if std.string.is_match pattern (x | String) then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected a string matching the pattern `%{pattern}`
                      "%,
                  success = false,
                }),
        },
  }
in

let rec definitions = { contract = {  }, predicate = {  }, } in
{
  apic
    | {
      access_policies
        | {
          aaeps
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  endpoint_groups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required
                          [ "application_profile", "endpoint_group", "tenant" ],
                          predicates.records.record
                          {
                            application_profile = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            deployment_immediacy = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.enum [ "immediate", "lazy" ]
                                ],
                            endpoint_group = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            mode = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.enum
                                  [ "regular", "native", "untagged" ]
                                ],
                            primary_vlan = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 4096,
                                  predicates.numbers.minimum 1
                                ],
                            secondary_vlan = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 4096,
                                  predicates.numbers.minimum 1
                                ],
                            tenant = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            vlan = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 4096,
                                  predicates.numbers.minimum 1
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  infra_vlan = predicates.isType '"Bool",
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  physical_domains = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType '"String",
                          predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                        ])
                      ],
                  routed_domains = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType '"String",
                          predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                        ])
                      ],
                  vmware_vmm_domains = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType '"String",
                          predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            AAEPs (List - Object)
            
            Elements:
            - name (required)
            - infra_vlan
            - physical_domains
            - routed_domains
            - vmware_vmm_domains
            - endpoint_groups
            - expected_state
            "%
            | optional,
          fex_interface_profiles
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  selectors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "name" ],
                          predicates.records.record
                          {
                            fex_id = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 199,
                                  predicates.numbers.minimum 101
                                ],
                            fex_profile = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            policy_group = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            port_blocks = predicates.allOf
                                [
                                  predicates.isType '"Array",
                                  predicates.arrays.arrayOf
                                  (predicates.allOf
                                  [
                                    predicates.isType 'Record,
                                    predicates.records.required
                                    [ "from_port", "name" ],
                                    predicates.records.record
                                    {
                                      description = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                          ],
                                      from_module = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 9,
                                            predicates.numbers.minimum 1
                                          ],
                                      from_port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 127,
                                            predicates.numbers.minimum 1
                                          ],
                                      name = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                          ],
                                      to_module = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 9,
                                            predicates.numbers.minimum 1
                                          ],
                                      to_port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 127,
                                            predicates.numbers.minimum 1
                                          ],
                                    }
                                    {  }
                                    false
                                    predicates.never
                                  ])
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            FEX Interface Profiles (List - Object)
            
            Elements:
            - name (required)
            - selectors
            - expected_state
            "%
            | optional,
          fex_interface_selector_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            FEX Interface Selector Name (String)
            - Default value: ETH\g<mod>-\g<port>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          fex_profile_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            FEX Profile Name (String)
            - Default value: LEAF\g<id>-FEX\g<fex>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          infra_vlan
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType 'Integer,
              predicates.numbers.maximum 4096,
              predicates.numbers.minimum 1
            ])
            | doc m%"
            Infra Vlan (Integer)
            - Minimum value: 1
            - Maximum value: 4096
            "%
            | optional,
          interface_policies
            | {
              cdp_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "admin_state", "name" ],
                    predicates.records.record
                    {
                      admin_state = predicates.isType '"Bool",
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                CDP Policies (List - Object)
                
                Elements:
                - name (required)
                - admin_state (required)
                "%
                | optional,
              l2_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      qinq = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum
                            [
                              "disabled",
                              "edgePort",
                              "corePort",
                              "doubleQtagPort"
                            ]
                          ],
                      reflective_relay = predicates.isType '"Bool",
                      vlan_scope = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "portlocal", "global" ]
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                L2 Policies (List - Object)
                
                Elements:
                - name (required)
                - vlan_scope
                - qinq
                - reflective_relay
                "%
                | optional,
              link_level_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      auto = predicates.isType '"Bool",
                      fec_mode = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum
                            [
                              "inherit",
                              "cl91-rs-fec",
                              "cl74-fc-fec",
                              "ieee-rs-fec",
                              "cons16-rs-fec",
                              "disable-fec"
                            ]
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      speed = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum
                            [
                              "auto",
                              "100M",
                              "1G",
                              "10G",
                              "25G",
                              "40G",
                              "100G",
                              "400G",
                              "inherit"
                            ]
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Link Level Policies (List - Object)
                
                Elements:
                - name (required)
                - speed
                - auto
                - fec_mode
                "%
                | optional,
              lldp_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required
                    [ "admin_rx_state", "admin_tx_state", "name" ],
                    predicates.records.record
                    {
                      admin_rx_state = predicates.isType '"Bool",
                      admin_tx_state = predicates.isType '"Bool",
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                LLDP Policies (List - Object)
                
                Elements:
                - name (required)
                - admin_rx_state (required)
                - admin_tx_state (required)
                "%
                | optional,
              mcp_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "admin_state", "name" ],
                    predicates.records.record
                    {
                      admin_state = predicates.isType '"Bool",
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                MCP Policies (List - Object)
                
                Elements:
                - name (required)
                - admin_state (required)
                "%
                | optional,
              port_channel_member_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      "priority" = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 65535,
                            predicates.numbers.minimum 1
                          ],
                      rate = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "fast", "normal" ]
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Port Channel Member Policies (List - Object)
                
                Elements:
                - name (required)
                - rate
                - priority
                "%
                | optional,
              port_channel_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "mode", "name" ],
                    predicates.records.record
                    {
                      fast_select_standby = predicates.isType '"Bool",
                      graceful_convergence = predicates.isType '"Bool",
                      hash_key = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum
                            [ "src-ip", "dst-ip", "l4-src-port", "l4-dst-port" ]
                          ],
                      load_defer = predicates.isType '"Bool",
                      max_links = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 16,
                            predicates.numbers.minimum 1
                          ],
                      min_links = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 16,
                            predicates.numbers.minimum 1
                          ],
                      mode = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum
                            [
                              "off",
                              "active",
                              "passive",
                              "mac-pin",
                              "mac-pin-nicload"
                            ]
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      suspend_individual = predicates.isType '"Bool",
                      symmetric_hash = predicates.isType '"Bool",
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Port Channel Policies (List - Object)
                
                Elements:
                - name (required)
                - mode (required)
                - min_links
                - max_links
                - suspend_individual
                - graceful_convergence
                - fast_select_standby
                - load_defer
                - symmetric_hash
                - hash_key
                "%
                | optional,
              spanning_tree_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      bpdu_filter = predicates.isType '"Bool",
                      bpdu_guard = predicates.isType '"Bool",
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Spanning Tree Policies (List - Object)
                
                Elements:
                - name (required)
                - bpdu_filter
                - bpdu_guard
                "%
                | optional,
              storm_control_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      action = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "drop", "shutdown" ]
                          ],
                      alias = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      broadcast_burst_pps = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 4882812,
                              predicates.numbers.minimum 1
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "unspecified" ]
                            ]
                          ],
                      broadcast_burst_rate = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType '"Number",
                              predicates.numbers.maximum 100
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^(100|[1-9]?[0-9])(\\.\\d+)?$"
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "defaultValue" ]
                            ]
                          ],
                      broadcast_pps = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 4882812,
                              predicates.numbers.minimum 1
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "unspecified" ]
                            ]
                          ],
                      broadcast_rate = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType '"Number",
                              predicates.numbers.maximum 100
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^(100|[1-9]?[0-9])(\\.\\d+)?$"
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "defaultValue" ]
                            ]
                          ],
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      multicast_burst_pps = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 4882812,
                              predicates.numbers.minimum 1
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "unspecified" ]
                            ]
                          ],
                      multicast_burst_rate = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType '"Number",
                              predicates.numbers.maximum 100
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^(100|[1-9]?[0-9])(\\.\\d+)?$"
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "defaultValue" ]
                            ]
                          ],
                      multicast_pps = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 4882812,
                              predicates.numbers.minimum 1
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "unspecified" ]
                            ]
                          ],
                      multicast_rate = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType '"Number",
                              predicates.numbers.maximum 100
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^(100|[1-9]?[0-9])(\\.\\d+)?$"
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "defaultValue" ]
                            ]
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      unknown_unicast_burst_pps = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 4882812,
                              predicates.numbers.minimum 1
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "unspecified" ]
                            ]
                          ],
                      unknown_unicast_burst_rate = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType '"Number",
                              predicates.numbers.maximum 100
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^(100|[1-9]?[0-9])(\\.\\d+)?$"
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "defaultValue" ]
                            ]
                          ],
                      unknown_unicast_pps = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 4882812,
                              predicates.numbers.minimum 1
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "unspecified" ]
                            ]
                          ],
                      unknown_unicast_rate = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType '"Number",
                              predicates.numbers.maximum 100
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^(100|[1-9]?[0-9])(\\.\\d+)?$"
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "defaultValue" ]
                            ]
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Storm Control Policies (List - Object)
                
                Elements:
                - name (required)
                - description
                - alias
                - broadcast_burst_pps
                - broadcast_burst_rate
                - broadcast_rate
                - broadcast_pps
                - multicast_burst_pps
                - multicast_burst_rate
                - multicast_rate
                - multicast_pps
                - unknown_unicast_burst_pps
                - unknown_unicast_burst_rate
                - unknown_unicast_rate
                - unknown_unicast_pps
                - action
                "%
                | optional,
            }
            | doc m%"
            Interface Policies (Object)
            
            Elements:
            - cdp_policies
            - lldp_policies
            - link_level_policies
            - port_channel_policies
            - port_channel_member_policies
            - spanning_tree_policies
            - mcp_policies
            - l2_policies
            - storm_control_policies
            "%
            | optional,
          leaf_interface_policy_groups
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "type" ],
                predicates.records.record
                {
                  aaep = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  cdp_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  description = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern
                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                      ],
                  l2_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  link_level_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  lldp_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  map = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.enum
                        [
                          "none",
                          "10g-4x",
                          "25g-4x",
                          "100g-2x",
                          "50g-8",
                          "100g-4x"
                        ]
                      ],
                  mcp_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  port_channel_member_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  port_channel_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  spanning_tree_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  storm_control_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  type = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.enum [ "access", "vpc", "pc", "breakout" ]
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Leaf Interface Policy Groups (List - Object)
            
            Elements:
            - name (required)
            - description
            - type (required)
            - map
            - link_level_policy
            - cdp_policy
            - lldp_policy
            - spanning_tree_policy
            - mcp_policy
            - l2_policy
            - port_channel_policy
            - port_channel_member_policy
            - storm_control_policy
            - aaep
            "%
            | optional,
          leaf_interface_profile_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Leaf Interface Profile Name (String)
            - Default value: LEAF\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          leaf_interface_profiles
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  selectors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "name" ],
                          predicates.records.record
                          {
                            fex_id = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 199,
                                  predicates.numbers.minimum 101
                                ],
                            fex_profile = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            policy_group = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            port_blocks = predicates.allOf
                                [
                                  predicates.isType '"Array",
                                  predicates.arrays.arrayOf
                                  (predicates.allOf
                                  [
                                    predicates.isType 'Record,
                                    predicates.records.required
                                    [ "from_port", "name" ],
                                    predicates.records.record
                                    {
                                      description = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                          ],
                                      from_module = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 9,
                                            predicates.numbers.minimum 1
                                          ],
                                      from_port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 127,
                                            predicates.numbers.minimum 1
                                          ],
                                      name = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                          ],
                                      to_module = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 9,
                                            predicates.numbers.minimum 1
                                          ],
                                      to_port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 127,
                                            predicates.numbers.minimum 1
                                          ],
                                    }
                                    {  }
                                    false
                                    predicates.never
                                  ])
                                ],
                            sub_port_blocks = predicates.allOf
                                [
                                  predicates.isType '"Array",
                                  predicates.arrays.arrayOf
                                  (predicates.allOf
                                  [
                                    predicates.isType 'Record,
                                    predicates.records.required
                                    [ "from_port", "from_sub_port", "name" ],
                                    predicates.records.record
                                    {
                                      description = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                          ],
                                      from_module = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 9,
                                            predicates.numbers.minimum 1
                                          ],
                                      from_port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 127,
                                            predicates.numbers.minimum 1
                                          ],
                                      from_sub_port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 16,
                                            predicates.numbers.minimum 1
                                          ],
                                      name = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                          ],
                                      to_module = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 9,
                                            predicates.numbers.minimum 1
                                          ],
                                      to_port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 127,
                                            predicates.numbers.minimum 1
                                          ],
                                      to_sub_port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 16,
                                            predicates.numbers.minimum 1
                                          ],
                                    }
                                    {  }
                                    false
                                    predicates.never
                                  ])
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Leaf Interface Profiles (List - Object)
            
            Elements:
            - name (required)
            - selectors
            - expected_state
            "%
            | optional,
          leaf_interface_selector_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Leaf Interface Selector Name (String)
            - Default value: ETH\g<mod>-\g<port>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          leaf_interface_selector_sub_port_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Leaf Interface Selector Sub Port Name (String)
            - Default value: ETH\g<mod>-\g<port>-\g<sport>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          leaf_switch_policy_groups
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  forwarding_scale_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Leaf Switch Policy Groups (List - Object)
            
            Elements:
            - name (required)
            - forwarding_scale_policy
            "%
            | optional,
          leaf_switch_profile_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Leaf Switch Profile Name (String)
            - Default value: LEAF\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          leaf_switch_profiles
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  interface_profiles = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType '"String",
                          predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                        ])
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  selectors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "name" ],
                          predicates.records.record
                          {
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            node_blocks = predicates.allOf
                                [
                                  predicates.isType '"Array",
                                  predicates.arrays.arrayOf
                                  (predicates.allOf
                                  [
                                    predicates.isType 'Record,
                                    predicates.records.required
                                    [ "from", "name" ],
                                    predicates.records.record
                                    {
                                      from = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 4000,
                                            predicates.numbers.minimum 1
                                          ],
                                      name = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                          ],
                                      to = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 4000,
                                            predicates.numbers.minimum 1
                                          ],
                                    }
                                    {  }
                                    false
                                    predicates.never
                                  ])
                                ],
                            policy = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Leaf Switch Profiles (List - Object)
            
            Elements:
            - name (required)
            - selectors
            - interface_profiles
            - expected_state
            "%
            | optional,
          leaf_switch_selector_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Leaf Switch Selector Name (String)
            - Default value: LEAF\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          mcp
            | {
              action
                | Bool
                | doc m%"
                Action (Boolean)
                - Default value: true
                "%
                | optional,
              admin_state
                | Bool
                | doc m%"
                Admin State (Boolean)
                - Default value: true
                "%
                | optional,
              frequency_msec
                | predicates.contract_from_predicate
                (predicates.allOf
                [ predicates.isType 'Integer, predicates.numbers.maximum 999 ])
                | doc m%"
                Frequency Msec (Integer)
                - Maximum value: 999
                "%
                | optional,
              frequency_sec
                | predicates.contract_from_predicate
                (predicates.allOf
                [ predicates.isType 'Integer, predicates.numbers.maximum 300 ])
                | doc m%"
                Frequency Sec (Integer)
                - Default value: 2
                - Maximum value: 300
                "%
                | optional,
              initial_delay
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 1800,
                  predicates.numbers.minimum 1
                ])
                | doc m%"
                Initial Delay (Integer)
                - Default value: 180
                - Minimum value: 1
                - Maximum value: 1800
                "%
                | optional,
              key
                | String
                | doc m%"
                Key (String)
                - Default value: cisco
                "%,
              loop_detection
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 255,
                  predicates.numbers.minimum 1
                ])
                | doc m%"
                Loop Detection (Integer)
                - Default value: 3
                - Minimum value: 1
                - Maximum value: 255
                "%
                | optional,
              per_vlan
                | Bool
                | doc m%"
                Per Vlan (Boolean)
                - Default value: true
                "%
                | optional,
            }
            | doc m%"
            MCP (Object)
            
            Elements:
            - action
            - admin_state
            - frequency_sec
            - frequency_msec
            - initial_delay
            - loop_detection
            - per_vlan
            - key (required)
            "%
            | optional,
          physical_domains
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "vlan_pool" ],
                predicates.records.record
                {
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  security_domains = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType '"String",
                          predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                        ])
                      ],
                  vlan_pool = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Physical Domains (List - Object)
            
            Elements:
            - name (required)
            - vlan_pool (required)
            - expected_state
            - security_domains
            "%
            | optional,
          qos
            | {
              preserve_cos
                | Bool
                | doc m%"
                Preserve CoS (Boolean)
                - Default value: false
                "%
                | optional,
              qos_classes
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "level" ],
                    predicates.records.record
                    {
                      admin_state = predicates.isType '"Bool",
                      bandwidth_percent = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 100
                          ],
                      congestion_algorithm = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "tail-drop", "wred" ]
                          ],
                      ecn = predicates.isType '"Bool",
                      forward_non_ecn = predicates.isType '"Bool",
                      level = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 6,
                            predicates.numbers.minimum 1
                          ],
                      minimum_buffer = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 3
                          ],
                      mtu = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 9216,
                            predicates.numbers.minimum 1
                          ],
                      no_drop_cos = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum
                            [
                              "unspecified",
                              "cos0",
                              "cos1",
                              "cos2",
                              "cos3",
                              "cos4",
                              "cos5",
                              "cos6",
                              "cos7"
                            ]
                          ],
                      pfc_scope = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "tor", "fabric" ]
                          ],
                      pfc_state = predicates.isType '"Bool",
                      scheduling = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "wrr", "strict-priority" ]
                          ],
                      weight = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 7
                          ],
                      wred_max_threshold = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 100
                          ],
                      wred_min_threshold = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 100
                          ],
                      wred_probability = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 100
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                QoS Classes (List - Object)
                
                Elements:
                - level (required)
                - admin_state
                - mtu
                - scheduling
                - bandwidth_percent
                - congestion_algorithm
                - minimum_buffer
                - pfc_state
                - no_drop_cos
                - pfc_scope
                - ecn
                - forward_non_ecn
                - wred_max_threshold
                - wred_min_threshold
                - wred_probability
                - weight
                "%
                | optional,
            }
            | doc m%"
            QoS (Object)
            
            Elements:
            - preserve_cos
            - qos_classes
            "%
            | optional,
          routed_domains
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "vlan_pool" ],
                predicates.records.record
                {
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  security_domains = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType '"String",
                          predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                        ])
                      ],
                  vlan_pool = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Routed Domains (List - Object)
            
            Elements:
            - name (required)
            - vlan_pool (required)
            - expected_state
            - security_domains
            "%
            | optional,
          span
            | {
              destination_groups
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      application_profile = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      channel = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      dscp = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum
                              [
                                "unspecified",
                                "CS0",
                                "CS1",
                                "AF11",
                                "AF12",
                                "AF13",
                                "CS2",
                                "AF21",
                                "AF22",
                                "AF23",
                                "CS3",
                                "AF31",
                                "AF32",
                                "AF33",
                                "CS4",
                                "AF41",
                                "AF42",
                                "AF43",
                                "CS5",
                                "VA",
                                "EF",
                                "CS6",
                                "CS7"
                              ]
                            ],
                            predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 63
                            ]
                          ],
                      endpoint_group = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      enforce_version = predicates.isType '"Bool",
                      expected_state = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.record
                            {
                              maximum_critical_faults = predicates.isType
                                  'Integer,
                              maximum_major_faults = predicates.isType 'Integer,
                              maximum_minor_faults = predicates.isType 'Integer,
                              minimum_health = predicates.allOf
                                  [
                                    predicates.isType 'Integer,
                                    predicates.numbers.maximum 100
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      flow_id = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 1023,
                            predicates.numbers.minimum 1
                          ],
                      ip = predicates.isType '"String",
                      module = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 9,
                            predicates.numbers.minimum 1
                          ],
                      mtu = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 9216,
                            predicates.numbers.minimum 64
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      node_id = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 4000,
                            predicates.numbers.minimum 1
                          ],
                      pod_id = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 255,
                            predicates.numbers.minimum 1
                          ],
                      port = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 127,
                            predicates.numbers.minimum 1
                          ],
                      source_prefix = predicates.isType '"String",
                      sub_port = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 16,
                            predicates.numbers.minimum 1
                          ],
                      tenant = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      ttl = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 255,
                            predicates.numbers.minimum 1
                          ],
                      version = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ 1, 2 ]
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Destination Groups (List - Object)
                
                Elements:
                - name (required)
                - description
                - node_id
                - pod_id
                - sub_port
                - module
                - port
                - channel
                - ip
                - source_prefix
                - dscp
                - flow_id
                - mtu
                - ttl
                - version
                - enforce_version
                - tenant
                - application_profile
                - endpoint_group
                - expected_state
                "%
                | optional,
              filter_groups
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      entries = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required
                              [ "destination_ip", "name", "source_ip" ],
                              predicates.records.record
                              {
                                destination_from_port = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 65535
                                      ],
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [
                                          "unspecified",
                                          "ftpData",
                                          "smtp",
                                          "dns",
                                          "http",
                                          "pop3",
                                          "https",
                                          "rtsp",
                                          "ssh"
                                        ]
                                      ]
                                    ],
                                destination_ip = predicates.isType '"String",
                                destination_to_port = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 65535
                                      ],
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [
                                          "unspecified",
                                          "ftpData",
                                          "smtp",
                                          "dns",
                                          "http",
                                          "pop3",
                                          "https",
                                          "rtsp",
                                          "ssh"
                                        ]
                                      ]
                                    ],
                                ip_protocol = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 255
                                      ],
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [
                                          "unspecified",
                                          "icmp",
                                          "igmp",
                                          "tcp",
                                          "egp",
                                          "igp",
                                          "udp",
                                          "icmpv6",
                                          "eigrp",
                                          "ospfigp",
                                          "pim",
                                          "l2tp"
                                        ]
                                      ]
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                source_from_port = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 65535
                                      ],
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [
                                          "unspecified",
                                          "ftpData",
                                          "smtp",
                                          "dns",
                                          "http",
                                          "pop3",
                                          "https",
                                          "rtsp",
                                          "ssh"
                                        ]
                                      ]
                                    ],
                                source_ip = predicates.isType '"String",
                                source_to_port = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 65535
                                      ],
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [
                                          "unspecified",
                                          "ftpData",
                                          "smtp",
                                          "dns",
                                          "http",
                                          "pop3",
                                          "https",
                                          "rtsp",
                                          "ssh"
                                        ]
                                      ]
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Filter Groups (List - Object)
                
                Elements:
                - name (required)
                - description
                - entries
                "%
                | optional,
              source_groups
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "destination", "name" ],
                    predicates.records.record
                    {
                      admin_state = predicates.isType '"Bool",
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      destination = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.required [ "name" ],
                            predicates.records.record
                            {
                              description = predicates.allOf
                                  [
                                    predicates.isType '"String",
                                    predicates.strings.pattern
                                    "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                  ],
                              name = predicates.allOf
                                  [
                                    predicates.isType '"String",
                                    predicates.strings.pattern
                                    "^[a-zA-Z0-9_.:-]{1,64}$"
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      expected_state = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.record
                            {
                              maximum_critical_faults = predicates.isType
                                  'Integer,
                              maximum_major_faults = predicates.isType 'Integer,
                              maximum_minor_faults = predicates.isType 'Integer,
                              minimum_health = predicates.allOf
                                  [
                                    predicates.isType 'Integer,
                                    predicates.numbers.maximum 100
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      filter_group = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      sources = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                access_paths = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.record
                                        {
                                          channel = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          fex_id = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 199,
                                                predicates.numbers.minimum 101
                                              ],
                                          module = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 9,
                                                predicates.numbers.minimum 1
                                              ],
                                          node2_id = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 4000,
                                                predicates.numbers.minimum 1
                                              ],
                                          node_id = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 4000,
                                                predicates.numbers.minimum 1
                                              ],
                                          pod_id = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 255,
                                                predicates.numbers.minimum 1
                                              ],
                                          port = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 127,
                                                predicates.numbers.minimum 1
                                              ],
                                          sub_port = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 16,
                                                predicates.numbers.minimum 1
                                              ],
                                          type = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [ "access", "vpc", "pc" ]
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                application_profile = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                direction = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "in", "out", "both" ]
                                    ],
                                endpoint_group = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                l3out = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                span_drop = predicates.isType '"Bool",
                                tenant = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                vlan = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 4096,
                                      predicates.numbers.minimum 1
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Source Groups (List - Object)
                
                Elements:
                - name (required)
                - description
                - admin_state
                - sources
                - destination (required)
                - filter_group
                - expected_state
                "%
                | optional,
            }
            | doc m%"
            Span (Object)
            
            Elements:
            - destination_groups
            - source_groups
            - filter_groups
            "%
            | optional,
          spine_interface_policy_groups
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  aaep = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  cdp_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  link_level_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Spine Interface Policy Groups (List - Object)
            
            Elements:
            - name (required)
            - link_level_policy
            - cdp_policy
            - aaep
            "%
            | optional,
          spine_interface_profile_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Spine Interface Profile Name (String)
            - Default value: SPINE\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          spine_interface_profiles
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  selectors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "name" ],
                          predicates.records.record
                          {
                            fex_id = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 199,
                                  predicates.numbers.minimum 101
                                ],
                            fex_profile = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            policy_group = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            port_blocks = predicates.allOf
                                [
                                  predicates.isType '"Array",
                                  predicates.arrays.arrayOf
                                  (predicates.allOf
                                  [
                                    predicates.isType 'Record,
                                    predicates.records.required
                                    [ "from_port", "name" ],
                                    predicates.records.record
                                    {
                                      description = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                          ],
                                      from_module = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 9,
                                            predicates.numbers.minimum 1
                                          ],
                                      from_port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 127,
                                            predicates.numbers.minimum 1
                                          ],
                                      name = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                          ],
                                      to_module = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 9,
                                            predicates.numbers.minimum 1
                                          ],
                                      to_port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 127,
                                            predicates.numbers.minimum 1
                                          ],
                                    }
                                    {  }
                                    false
                                    predicates.never
                                  ])
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Spine Interface Profiles (List - Object)
            
            Elements:
            - name (required)
            - selectors
            - expected_state
            "%
            | optional,
          spine_interface_selector_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Spine Interface Selector Name (String)
            - Default value: ETH\g<mod>-\g<port>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          spine_switch_policy_groups
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  lldp_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Spine Switch Policy Groups (List - Object)
            
            Elements:
            - name (required)
            - lldp_policy
            "%
            | optional,
          spine_switch_profile_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Spine Switch Profile Name (String)
            - Default value: SPINE\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          spine_switch_profiles
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  interface_profiles = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType '"String",
                          predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                        ])
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  selectors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "name" ],
                          predicates.records.record
                          {
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            node_blocks = predicates.allOf
                                [
                                  predicates.isType '"Array",
                                  predicates.arrays.arrayOf
                                  (predicates.allOf
                                  [
                                    predicates.isType 'Record,
                                    predicates.records.required
                                    [ "from", "name" ],
                                    predicates.records.record
                                    {
                                      from = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 4000,
                                            predicates.numbers.minimum 1
                                          ],
                                      name = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                          ],
                                      to = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 4000,
                                            predicates.numbers.minimum 1
                                          ],
                                    }
                                    {  }
                                    false
                                    predicates.never
                                  ])
                                ],
                            policy = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Spine Switch Profiles (List - Object)
            
            Elements:
            - name (required)
            - selectors
            - interface_profiles
            - expected_state
            "%
            | optional,
          spine_switch_selector_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Spine Switch Selector Name (String)
            - Default value: SPINE\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          switch_policies
            | {
              forwarding_scale_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      profile = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum
                            [
                              "dual-stack",
                              "ipv4",
                              "high-dual-stack",
                              "high-lpm"
                            ]
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Forwarding Scale Policies (List - Object)
                
                Elements:
                - name (required)
                - profile
                "%
                | optional,
              mst_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required
                    [ "name", "region", "revision" ],
                    predicates.records.record
                    {
                      instances = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "id", "name" ],
                              predicates.records.record
                              {
                                id = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 4096,
                                      predicates.numbers.minimum 1
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                vlan_ranges = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "from" ],
                                        predicates.records.record
                                        {
                                          from = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 4096,
                                                predicates.numbers.minimum 1
                                              ],
                                          to = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 4096,
                                                predicates.numbers.minimum 1
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      region = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.maxLength 32
                          ],
                      revision = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 65535
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                MST Policies (List - Object)
                
                Elements:
                - name (required)
                - region (required)
                - revision (required)
                - instances
                "%
                | optional,
              vpc_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      peer_dead_interval = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 600,
                            predicates.numbers.minimum 5
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                vPC Policies (List - Object)
                
                Elements:
                - name (required)
                - peer_dead_interval
                "%
                | optional,
            }
            | doc m%"
            Switch Policies (Object)
            
            Elements:
            - mst_policies
            - vpc_policies
            - forwarding_scale_policies
            "%
            | optional,
          vlan_pools
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  allocation = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.enum [ "static", "dynamic" ]
                      ],
                  description = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern
                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  ranges = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "from" ],
                          predicates.records.record
                          {
                            allocation = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.enum
                                  [ "inherit", "static", "dynamic" ]
                                ],
                            description = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                ],
                            from = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 4096,
                                  predicates.numbers.minimum 1
                                ],
                            role = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.enum [ "external", "internal" ]
                                ],
                            to = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 4096,
                                  predicates.numbers.minimum 1
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Vlan Pools (List - Object)
            
            Elements:
            - name (required)
            - description
            - allocation
            - ranges
            "%
            | optional,
          vpc_group_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            vPC Group Name (String)
            - Default value: VPC\g<switch1_id>-\g<switch2_id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          vspan
            | {
              destination_groups
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      destinations = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                application_profile = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                dscp = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [
                                          "CS0",
                                          "CS1",
                                          "AF11",
                                          "AF12",
                                          "AF13",
                                          "CS2",
                                          "AF21",
                                          "AF22",
                                          "AF23",
                                          "CS3",
                                          "AF31",
                                          "AF32",
                                          "AF33",
                                          "CS4",
                                          "AF41",
                                          "AF42",
                                          "AF43",
                                          "CS5",
                                          "VA",
                                          "EF",
                                          "CS6",
                                          "CS7",
                                          "unspecified"
                                        ]
                                      ],
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 63
                                      ]
                                    ],
                                endpoint = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                endpoint_group = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                flow_id = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 1023,
                                      predicates.numbers.minimum 1
                                    ],
                                ip = predicates.isType '"String",
                                mtu = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 9216,
                                      predicates.numbers.minimum 64
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                tenant = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                ttl = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 255,
                                      predicates.numbers.minimum 1
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      expected_state = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.record
                            {
                              maximum_critical_faults = predicates.isType
                                  'Integer,
                              maximum_major_faults = predicates.isType 'Integer,
                              maximum_minor_faults = predicates.isType 'Integer,
                              minimum_health = predicates.allOf
                                  [
                                    predicates.isType 'Integer,
                                    predicates.numbers.maximum 100
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Destination Groups (List - Object)
                
                Elements:
                - name (required)
                - description
                - destinations
                - expected_state
                "%
                | optional,
              sessions
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "destination", "name" ],
                    predicates.records.record
                    {
                      admin_state = predicates.isType '"Bool",
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      destination = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.required [ "name" ],
                            predicates.records.record
                            {
                              description = predicates.allOf
                                  [
                                    predicates.isType '"String",
                                    predicates.strings.pattern
                                    "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                  ],
                              name = predicates.allOf
                                  [
                                    predicates.isType '"String",
                                    predicates.strings.pattern
                                    "^[a-zA-Z0-9_.:-]{1,64}$"
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      expected_state = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.record
                            {
                              maximum_critical_faults = predicates.isType
                                  'Integer,
                              maximum_major_faults = predicates.isType 'Integer,
                              maximum_minor_faults = predicates.isType 'Integer,
                              minimum_health = predicates.allOf
                                  [
                                    predicates.isType 'Integer,
                                    predicates.numbers.maximum 100
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      sources = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required
                              [ "direction", "name" ],
                              predicates.records.record
                              {
                                access_paths = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.record
                                        {
                                          channel = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          module = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 9,
                                                predicates.numbers.minimum 1
                                              ],
                                          node2_id = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 4000,
                                                predicates.numbers.minimum 1
                                              ],
                                          node_id = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 4000,
                                                predicates.numbers.minimum 1
                                              ],
                                          pod_id = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 255,
                                                predicates.numbers.minimum 1
                                              ],
                                          port = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 127,
                                                predicates.numbers.minimum 1
                                              ],
                                          type = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [ "access", "vpc", "pc" ]
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                application_profile = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                direction = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "in", "out", "both" ]
                                    ],
                                endpoint = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                endpoint_group = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                tenant = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Sessions (List - Object)
                
                Elements:
                - name (required)
                - description
                - admin_state
                - sources
                - destination (required)
                - expected_state
                "%
                | optional,
            }
            | doc m%"
            Vspan (Object)
            
            Elements:
            - sessions
            - destination_groups
            "%
            | optional,
        }
        | doc m%"
        Access Policies (Object)
        
        Elements:
        - leaf_switch_profile_name
        - leaf_switch_selector_name
        - leaf_interface_profile_name
        - leaf_interface_selector_name
        - leaf_interface_selector_sub_port_name
        - fex_profile_name
        - fex_interface_selector_name
        - spine_switch_profile_name
        - spine_switch_selector_name
        - spine_interface_profile_name
        - spine_interface_selector_name
        - vpc_group_name
        - infra_vlan
        - vlan_pools
        - physical_domains
        - routed_domains
        - aaeps
        - switch_policies
        - spine_switch_policy_groups
        - leaf_switch_policy_groups
        - leaf_switch_profiles
        - spine_switch_profiles
        - interface_policies
        - leaf_interface_policy_groups
        - spine_interface_policy_groups
        - leaf_interface_profiles
        - fex_interface_profiles
        - spine_interface_profiles
        - mcp
        - qos
        - span
        - vspan
        "%
        | optional,
      auto_generate_access_leaf_switch_interface_profiles
        | Bool
        | doc m%"
        Auto Generate Access Leaf Switch Interface Profiles (Boolean)
        - Default value: false
        "%
        | optional,
      auto_generate_access_spine_switch_interface_profiles
        | Bool
        | doc m%"
        Auto Generate Access Spine Switch Interface Profiles (Boolean)
        - Default value: false
        "%
        | optional,
      auto_generate_fabric_leaf_switch_interface_profiles
        | Bool
        | doc m%"
        Auto Generate Fabric Leaf Switch Interface Profiles (Boolean)
        - Default value: false
        "%
        | optional,
      auto_generate_fabric_spine_switch_interface_profiles
        | Bool
        | doc m%"
        Auto Generate Fabric Spine Switch Interface Profiles (Boolean)
        - Default value: false
        "%
        | optional,
      auto_generate_pod_profiles
        | Bool
        | doc m%"
        Auto Generate Pod Profiles (Boolean)
        - Default value: false
        "%
        | optional,
      auto_generate_switch_pod_profiles
        | Bool
        | doc m%"
        Auto Generate Switch Pod Profiles (Boolean)
        - Default value: false
        "%
        | optional,
      bootstrap
        | {
          admin_password
            | String
            | doc m%"
            Admin Password (String)
            "%,
          admin_username
            | String
            | doc m%"
            Admin Username (String)
            "%
            | optional,
          objects_to_delete
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "dn", "name" ],
                predicates.records.record
                {
                  dn = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern
                        "^[a-zA-Z0-9_.:\\-\\/]{1,256}$"
                      ],
                  name = predicates.isType '"String",
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Objects To Delete (List - Object)
            
            Elements:
            - name (required)
            - dn (required)
            "%
            | optional,
          snapshot_policy
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
            ])
            | doc m%"
            Snapshot Policy (String)
            "%
            | optional,
        }
        | doc m%"
        Bootstrap (Object)
        
        Elements:
        - admin_username
        - admin_password (required)
        - snapshot_policy
        - objects_to_delete
        "%
        | optional,
      expected_state
        | {
          maximum_critical_faults
            | std.number.Integer
            | doc m%"
            Maximum Critical Faults (Integer)
            "%
            | optional,
          maximum_major_faults
            | std.number.Integer
            | doc m%"
            Maximum Major Faults (Integer)
            "%
            | optional,
          maximum_minor_faults
            | std.number.Integer
            | doc m%"
            Maximum Minor Faults (Integer)
            "%
            | optional,
          minimum_health
            | predicates.contract_from_predicate
            (predicates.allOf
            [ predicates.isType 'Integer, predicates.numbers.maximum 100 ])
            | doc m%"
            Minimum Health (Integer)
            - Maximum value: 100
            "%
            | optional,
        }
        | doc m%"
        Expected State (Object)
        
        Elements:
        - minimum_health
        - maximum_critical_faults
        - maximum_major_faults
        - maximum_minor_faults
        "%
        | optional,
      fabric_policies
        | {
          aaa
            | {
              ca_certificates
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      certificate_chain = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9=\n/+ _.@-]{1,16384}$"
                          ],
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                CA Certificates (List - Object)
                
                Elements:
                - name (required)
                - description
                - certificate_chain
                "%
                | optional,
              console_login_domain
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"String",
                  predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                ])
                | doc m%"
                Console Login Domain (String)
                "%
                | optional,
              console_realm
                | std.enum.TagOrString
                | [| 'ldap, 'tacacs, 'local |]
                | doc m%"
                Console Realm (String)
                - Default value: local
                - Allowed values: local, tacacs, ldap
                "%
                | optional,
              default_fallback_check
                | Bool
                | doc m%"
                Default Fallback Check (Boolean)
                - Default value: false
                "%
                | optional,
              default_login_domain
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"String",
                  predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                ])
                | doc m%"
                Default Login Domain (String)
                "%
                | optional,
              default_realm
                | std.enum.TagOrString
                | [| 'ldap, 'tacacs, 'local |]
                | doc m%"
                Default Realm (String)
                - Default value: local
                - Allowed values: local, tacacs, ldap
                "%
                | optional,
              key_rings
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      ca_certificate = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      certificate = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9=\n/+ _.@-]{1,16384}$"
                          ],
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      modulus = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "mod512", "mod1024", "mod2048" ]
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      private_key = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9=\n/+ _.@-]{1,16384}$"
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Key Rings (List - Object)
                
                Elements:
                - name (required)
                - description
                - certificate
                - modulus
                - ca_certificate
                - private_key
                "%
                | optional,
              ldap
                | {
                  group_map_rules
                    | predicates.contract_from_predicate
                    (predicates.allOf
                    [
                      predicates.isType '"Array",
                      predicates.arrays.arrayOf
                      (predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.required [ "name" ],
                        predicates.records.record
                        {
                          description = predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.strings.pattern
                                "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                              ],
                          group_dn = predicates.isType '"String",
                          name = predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.strings.pattern
                                "^[a-zA-Z0-9_.:-]{1,64}$"
                              ],
                          security_domains = predicates.allOf
                              [
                                predicates.isType '"Array",
                                predicates.arrays.arrayOf
                                (predicates.allOf
                                [
                                  predicates.isType 'Record,
                                  predicates.records.required [ "name" ],
                                  predicates.records.record
                                  {
                                    name = predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.strings.pattern
                                          "^[a-zA-Z0-9_.:-]{1,31}$"
                                        ],
                                    roles = predicates.allOf
                                        [
                                          predicates.isType '"Array",
                                          predicates.arrays.arrayOf
                                          (predicates.allOf
                                          [
                                            predicates.isType 'Record,
                                            predicates.records.required
                                            [ "name" ],
                                            predicates.records.record
                                            {
                                              name = predicates.allOf
                                                  [
                                                    predicates.isType '"String",
                                                    predicates.strings.pattern
                                                    "^[a-zA-Z0-9_.-]{1,31}$"
                                                  ],
                                              privilege_type = predicates.allOf
                                                  [
                                                    predicates.isType '"String",
                                                    predicates.enum
                                                    [ "write", "read" ]
                                                  ],
                                            }
                                            {  }
                                            false
                                            predicates.never
                                          ])
                                        ],
                                  }
                                  {  }
                                  false
                                  predicates.never
                                ])
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ])
                    ])
                    | doc m%"
                    Group Map Rules (List - Object)
                    
                    Elements:
                    - name (required)
                    - description
                    - group_dn
                    - security_domains
                    "%
                    | optional,
                  group_maps
                    | predicates.contract_from_predicate
                    (predicates.allOf
                    [
                      predicates.isType '"Array",
                      predicates.arrays.arrayOf
                      (predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.required [ "name" ],
                        predicates.records.record
                        {
                          name = predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.strings.pattern
                                "^[a-zA-Z0-9_.:-]{1,64}$"
                              ],
                          rules = predicates.allOf
                              [
                                predicates.isType '"Array",
                                predicates.arrays.arrayOf
                                (predicates.allOf
                                [
                                  predicates.isType 'Record,
                                  predicates.records.required [ "name" ],
                                  predicates.records.record
                                  {
                                    name = predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.strings.pattern
                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                        ],
                                  }
                                  {  }
                                  false
                                  predicates.never
                                ])
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ])
                    ])
                    | doc m%"
                    Group Maps (List - Object)
                    
                    Elements:
                    - name (required)
                    - rules
                    "%
                    | optional,
                  providers
                    | predicates.contract_from_predicate
                    (predicates.allOf
                    [
                      predicates.isType '"Array",
                      predicates.arrays.arrayOf
                      (predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.required [ "hostname_ip" ],
                        predicates.records.record
                        {
                          attribute = predicates.isType '"String",
                          base_dn = predicates.isType '"String",
                          bind_dn = predicates.isType '"String",
                          description = predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.strings.pattern
                                "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                              ],
                          enable_ssl = predicates.isType '"Bool",
                          filter = predicates.isType '"String",
                          hostname_ip = predicates.anyOf
                              [
                                predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9:][a-zA-Z0-9.:-]{0,254}$"
                                ],
                                predicates.isType '"String"
                              ],
                          mgmt_epg = predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.enum [ "inb", "oob" ]
                              ],
                          monitoring_password = predicates.isType '"String",
                          monitoring_username = predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.strings.pattern
                                "^[a-zA-Z0-9][a-zA-Z0-9_.@-]{0,31}$"
                              ],
                          password = predicates.isType '"String",
                          port = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 65535
                              ],
                          retries = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 5
                              ],
                          server_monitoring = predicates.isType '"Bool",
                          ssl_validation_level = predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.enum [ "permissive", "strict" ]
                              ],
                          timeout = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 60,
                                predicates.numbers.minimum 5
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ])
                    ])
                    | doc m%"
                    Providers (List - Object)
                    
                    Elements:
                    - hostname_ip (required)
                    - description
                    - port
                    - bind_dn
                    - base_dn
                    - password
                    - timeout
                    - retries
                    - enable_ssl
                    - filter
                    - attribute
                    - ssl_validation_level
                    - mgmt_epg
                    - server_monitoring
                    - monitoring_username
                    - monitoring_password
                    "%
                    | optional,
                }
                | doc m%"
                Ldap (Object)
                
                Elements:
                - providers
                - group_map_rules
                - group_maps
                "%
                | optional,
              login_domains
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name", "realm" ],
                    predicates.records.record
                    {
                      auth_choice = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "CiscoAVPair", "LdapGroupMap" ]
                          ],
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      ldap_group_map = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,31}$"
                          ],
                      ldap_providers = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "hostname_ip" ],
                              predicates.records.record
                              {
                                hostname_ip = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9:][a-zA-Z0-9.:-]{0,254}$"
                                      ],
                                      predicates.isType '"String"
                                    ],
                                "priority" = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 16
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      realm = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "local", "tacacs", "ldap" ]
                          ],
                      tacacs_providers = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "hostname_ip" ],
                              predicates.records.record
                              {
                                hostname_ip = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9:][a-zA-Z0-9.:-]{0,254}$"
                                      ],
                                      predicates.isType '"String"
                                    ],
                                "priority" = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 16
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Login Domains (List - Object)
                
                Elements:
                - name (required)
                - realm (required)
                - description
                - auth_choice
                - ldap_group_map
                - tacacs_providers
                - ldap_providers
                "%
                | optional,
              remote_user_login_policy
                | std.enum.TagOrString
                | [| 'no-login, 'assign-default-role |]
                | doc m%"
                Remote User Login Policy (String)
                - Default value: no-login
                - Allowed values: assign-default-role, no-login
                "%
                | optional,
              tacacs_providers
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "hostname_ip" ],
                    predicates.records.record
                    {
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      expected_state = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.record
                            {
                              maximum_critical_faults = predicates.isType
                                  'Integer,
                              maximum_major_faults = predicates.isType 'Integer,
                              maximum_minor_faults = predicates.isType 'Integer,
                              minimum_health = predicates.allOf
                                  [
                                    predicates.isType 'Integer,
                                    predicates.numbers.maximum 100
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      hostname_ip = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9:][a-zA-Z0-9.:-]{0,254}$"
                            ],
                            predicates.isType '"String"
                          ],
                      key = predicates.isType '"String",
                      mgmt_epg = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "inb", "oob" ]
                          ],
                      monitoring = predicates.isType '"Bool",
                      monitoring_password = predicates.isType '"String",
                      monitoring_username = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9][a-zA-Z0-9_.@-]{0,31}$"
                          ],
                      port = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 65535
                          ],
                      protocol = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "pap", "chap", "mschap" ]
                          ],
                      retries = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 5
                          ],
                      timeout = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 60
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Tacacs Providers (List - Object)
                
                Elements:
                - hostname_ip (required)
                - description
                - port
                - protocol
                - key
                - timeout
                - retries
                - mgmt_epg
                - monitoring
                - monitoring_username
                - monitoring_password
                - expected_state
                "%
                | optional,
              users
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "password", "username" ],
                    predicates.records.record
                    {
                      certificate_name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.maxLength 128,
                            predicates.strings.minLength 1
                          ],
                      certificates = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "data", "name" ],
                              predicates.records.record
                              {
                                data = predicates.isType '"String",
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      domains = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                roles = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.-]{1,31}$"
                                              ],
                                          privilege_type = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [ "write", "read" ]
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      email = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^(?!.{64,})[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+$"
                          ],
                      expire_date = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "never" ]
                            ],
                            predicates.isType '"String"
                          ],
                      expires = predicates.isType '"Bool",
                      first_name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.maxLength 32,
                            predicates.strings.minLength 1
                          ],
                      last_name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.maxLength 32,
                            predicates.strings.minLength 1
                          ],
                      password = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.maxLength 256,
                            predicates.strings.minLength 1
                          ],
                      phone = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.maxLength 16,
                            predicates.strings.minLength 1
                          ],
                      ssh_keys = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "data", "name" ],
                              predicates.records.record
                              {
                                data = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9=\n/+ _.@-]{1,16384}$"
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      status = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "active", "inactive", "blocked" ]
                          ],
                      username = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.-]{1,31}$"
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Users (List - Object)
                
                Elements:
                - username (required)
                - password (required)
                - first_name
                - last_name
                - phone
                - email
                - certificate_name
                - description
                - status
                - expires
                - expire_date
                - domains
                - certificates
                - ssh_keys
                "%
                | optional,
            }
            | doc m%"
            AAA (Object)
            
            Elements:
            - remote_user_login_policy
            - default_fallback_check
            - default_realm
            - default_login_domain
            - console_realm
            - console_login_domain
            - tacacs_providers
            - users
            - login_domains
            - ca_certificates
            - key_rings
            - ldap
            "%
            | optional,
          apic_conn_pref
            | std.enum.TagOrString
            | [| 'ooband, 'inband |]
            | doc m%"
            APIC Conn Pref (String)
            - Default value: inband
            - Allowed values: inband, ooband
            "%
            | optional,
          banners
            | {
              apic_cli_banner
                | String
                | doc m%"
                APIC CLI Banner (String)
                "%
                | optional,
              apic_gui_alias
                | String
                | doc m%"
                APIC GUI Alias (String)
                "%
                | optional,
              apic_gui_banner_message
                | String
                | doc m%"
                APIC GUI Banner Message (String)
                "%
                | optional,
              apic_gui_banner_url
                | String
                | doc m%"
                APIC GUI Banner Url (String)
                "%
                | optional,
              switch_cli_banner
                | String
                | doc m%"
                Switch CLI Banner (String)
                "%
                | optional,
            }
            | doc m%"
            Banners (Object)
            
            Elements:
            - apic_gui_alias
            - apic_gui_banner_url
            - apic_gui_banner_message
            - apic_cli_banner
            - switch_cli_banner
            "%
            | optional,
          config_exports
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  description = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern
                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                      ],
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  format = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.enum [ "json", "xml" ]
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  remote_location = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  scheduler = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  snapshot = predicates.isType '"Bool",
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Config Exports (List - Object)
            
            Elements:
            - name (required)
            - description
            - format
            - remote_location
            - scheduler
            - snapshot
            - expected_state
            "%
            | optional,
          config_passphrase
            | predicates.contract_from_predicate
            (predicates.allOf
            [ predicates.isType '"String", predicates.strings.maxLength 32 ])
            | doc m%"
            Config Passphrase (String)
            - Maximum length: 32
            "%
            | optional,
          coop_group_policy
            | std.enum.TagOrString
            | [| 'strict, 'compatible |]
            | doc m%"
            COOP Group Policy (String)
            - Default value: strict
            - Allowed values: compatible, strict
            "%
            | optional,
          date_time_format
            | {
              display_format
                | std.enum.TagOrString
                | [| 'utc, 'local |]
                | doc m%"
                Display Format (String)
                - Default value: local
                - Allowed values: local, utc
                "%
                | optional,
              show_offset
                | Bool
                | doc m%"
                Show Offset (Boolean)
                - Default value: true
                "%
                | optional,
              timezone
                | String
                | doc m%"
                Timezone (String)
                - Default value: p0_UTC
                "%
                | optional,
            }
            | doc m%"
            Date Time Format (Object)
            
            Elements:
            - display_format
            - timezone
            - show_offset
            "%
            | optional,
          dns_policies
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  domains = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "name" ],
                          predicates.records.record
                          {
                            "default" = predicates.isType '"Bool",
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                  mgmt_epg = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.enum [ "inb", "oob" ]
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  providers = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "ip" ],
                          predicates.records.record
                          {
                            ip = predicates.isType '"String",
                            preferred = predicates.isType '"Bool",
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            DNS Policies (List - Object)
            
            Elements:
            - name (required)
            - mgmt_epg
            - providers
            - domains
            "%
            | optional,
          ep_loop_protection
            | {
              action
                | std.enum.TagOrString
                | [| 'port-disable, 'bd-learn-disable |]
                | doc m%"
                Action (String)
                - Default value: bd-learn-disable
                - Allowed values: bd-learn-disable, port-disable
                "%
                | optional,
              admin_state
                | Bool
                | doc m%"
                Admin State (Boolean)
                - Default value: false
                "%
                | optional,
              detection_interval
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 300,
                  predicates.numbers.minimum 30
                ])
                | doc m%"
                Detection Interval (Integer)
                - Default value: 60
                - Minimum value: 30
                - Maximum value: 300
                "%
                | optional,
              detection_multiplier
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 255,
                  predicates.numbers.minimum 1
                ])
                | doc m%"
                Detection Multiplier (Integer)
                - Default value: 4
                - Minimum value: 1
                - Maximum value: 255
                "%
                | optional,
            }
            | doc m%"
            EP Loop Protection (Object)
            
            Elements:
            - admin_state
            - detection_interval
            - detection_multiplier
            - action
            "%
            | optional,
          err_disabled_recovery
            | {
              bpdu_guard
                | Bool
                | doc m%"
                BPDU Guard (Boolean)
                - Default value: false
                "%
                | optional,
              ep_move
                | Bool
                | doc m%"
                EP Move (Boolean)
                - Default value: false
                "%
                | optional,
              interval
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 65535,
                  predicates.numbers.minimum 30
                ])
                | doc m%"
                Interval (Integer)
                - Default value: 300
                - Minimum value: 30
                - Maximum value: 65535
                "%
                | optional,
              mcp_loop
                | Bool
                | doc m%"
                MCP Loop (Boolean)
                - Default value: false
                "%
                | optional,
            }
            | doc m%"
            Err Disabled Recovery (Object)
            
            Elements:
            - interval
            - mcp_loop
            - ep_move
            - bpdu_guard
            "%
            | optional,
          external_connectivity_policy
            | {
              bgp_password
                | String
                | doc m%"
                BGP Password (String)
                "%
                | optional,
              expected_state
                | {
                  maximum_critical_faults
                    | std.number.Integer
                    | doc m%"
                    Maximum Critical Faults (Integer)
                    "%
                    | optional,
                  maximum_major_faults
                    | std.number.Integer
                    | doc m%"
                    Maximum Major Faults (Integer)
                    "%
                    | optional,
                  maximum_minor_faults
                    | std.number.Integer
                    | doc m%"
                    Maximum Minor Faults (Integer)
                    "%
                    | optional,
                  minimum_health
                    | predicates.contract_from_predicate
                    (predicates.allOf
                    [
                      predicates.isType 'Integer,
                      predicates.numbers.maximum 100
                    ])
                    | doc m%"
                    Minimum Health (Integer)
                    - Maximum value: 100
                    "%
                    | optional,
                }
                | doc m%"
                Expected State (Object)
                
                Elements:
                - minimum_health
                - maximum_critical_faults
                - maximum_major_faults
                - maximum_minor_faults
                "%
                | optional,
              fabric_id
                | predicates.contract_from_predicate
                (predicates.allOf
                [ predicates.isType 'Integer, predicates.numbers.maximum 1000 ])
                | doc m%"
                Fabric ID (Integer)
                - Default value: 1
                - Maximum value: 1000
                "%
                | optional,
              name
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"String",
                  predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                ])
                | doc m%"
                Name (String)
                "%,
              route_target
                | String
                | doc m%"
                Route Target (String)
                - Default value: extended:as2-nn4:5:16
                "%
                | optional,
              routing_profiles
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      subnets = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.isType '"String")
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Routing Profiles (List - Object)
                
                Elements:
                - name (required)
                - description
                - subnets
                "%
                | optional,
              site_id
                | predicates.contract_from_predicate
                (predicates.allOf
                [ predicates.isType 'Integer, predicates.numbers.maximum 1000 ])
                | doc m%"
                Site ID (Integer)
                - Default value: 1
                - Maximum value: 1000
                "%
                | optional,
            }
            | doc m%"
            External Connectivity Policy (Object)
            
            Elements:
            - name (required)
            - fabric_id
            - site_id
            - bgp_password
            - route_target
            - routing_profiles
            - expected_state
            "%
            | optional,
          fabric_bgp_as
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType 'Integer,
              predicates.numbers.maximum 4294967295,
              predicates.numbers.minimum 1
            ])
            | doc m%"
            Fabric BGP AS (Integer)
            - Minimum value: 1
            - Maximum value: 4294967295
            "%
            | optional,
          fabric_bgp_ext_rr
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Integer,
                predicates.numbers.maximum 4000,
                predicates.numbers.minimum 1
              ])
            ])
            | doc m%"
            Fabric BGP EXT RR (List - Integer)
            "%
            | optional,
          fabric_bgp_rr
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Integer,
                predicates.numbers.maximum 4000,
                predicates.numbers.minimum 1
              ])
            ])
            | doc m%"
            Fabric BGP RR (List - Integer)
            "%
            | optional,
          fabric_isis_bfd
            | Bool
            | doc m%"
            Fabric ISIS BFD (Boolean)
            - Default value: true
            "%
            | optional,
          fabric_isis_redistribute_metric
            | std.number.Integer
            | doc m%"
            Fabric ISIS Redistribute Metric (Integer)
            - Default value: 60
            "%
            | optional,
          geolocation
            | {
              sites
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      buildings = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                floors = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          description = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                              ],
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          rooms = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [ "name" ],
                                                  predicates.records.record
                                                  {
                                                    description =
                                                      predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                        ],
                                                    name = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    rows = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"Array",
                                                          predicates.arrays.arrayOf
                                                          (predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Record,
                                                            predicates.records.required
                                                            [ "name" ],
                                                            predicates.records.record
                                                            {
                                                              description =
                                                                predicates.allOf
                                                                  [
                                                                    predicates.isType
                                                                    '"String",
                                                                    predicates.strings.pattern
                                                                    "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                                  ],
                                                              name =
                                                                predicates.allOf
                                                                  [
                                                                    predicates.isType
                                                                    '"String",
                                                                    predicates.strings.pattern
                                                                    "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                  ],
                                                              racks =
                                                                predicates.allOf
                                                                  [
                                                                    predicates.isType
                                                                    '"Array",
                                                                    predicates.arrays.arrayOf
                                                                    (predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Record,
                                                                      predicates.records.required
                                                                      [
                                                                        "name"
                                                                      ],
                                                                      predicates.records.record
                                                                      {
                                                                        description =
                                                                          predicates.allOf
                                                                            [
                                                                              predicates.isType
                                                                              '"String",
                                                                              predicates.strings.pattern
                                                                              "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                                            ],
                                                                        name =
                                                                          predicates.allOf
                                                                            [
                                                                              predicates.isType
                                                                              '"String",
                                                                              predicates.strings.pattern
                                                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                            ],
                                                                        nodes =
                                                                          predicates.allOf
                                                                            [
                                                                              predicates.isType
                                                                              '"Array",
                                                                              predicates.arrays.arrayOf
                                                                              (predicates.allOf
                                                                              [
                                                                                predicates.isType
                                                                                'Integer,
                                                                                predicates.numbers.maximum
                                                                                4000,
                                                                                predicates.numbers.minimum
                                                                                1
                                                                              ])
                                                                            ],
                                                                      }
                                                                      {  }
                                                                      false
                                                                      predicates.never
                                                                    ])
                                                                  ],
                                                            }
                                                            {  }
                                                            false
                                                            predicates.never
                                                          ])
                                                        ],
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ])
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Sites (List - Object)
                
                Elements:
                - name (required)
                - description
                - buildings
                "%
                | optional,
            }
            | doc m%"
            Geolocation (Object)
            
            Elements:
            - sites
            "%
            | optional,
          global_settings
            | {
              disable_remote_endpoint_learn
                | Bool
                | doc m%"
                Disable Remote Endpoint Learn (Boolean)
                - Default value: false
                "%
                | optional,
              domain_validation
                | Bool
                | doc m%"
                Domain Validation (Boolean)
                - Default value: true
                "%
                | optional,
              enforce_subnet_check
                | Bool
                | doc m%"
                Enforce Subnet Check (Boolean)
                - Default value: true
                "%
                | optional,
              opflex_authentication
                | Bool
                | doc m%"
                Opflex Authentication (Boolean)
                - Default value: false
                "%
                | optional,
              overlapping_vlan_validation
                | Bool
                | doc m%"
                Overlapping Vlan Validation (Boolean)
                - Default value: true
                "%
                | optional,
              reallocate_gipo
                | Bool
                | doc m%"
                Reallocate Gipo (Boolean)
                - Default value: false
                "%
                | optional,
              remote_leaf_direct
                | Bool
                | doc m%"
                Remote Leaf Direct (Boolean)
                - Default value: true
                "%
                | optional,
            }
            | doc m%"
            Global Settings (Object)
            
            Elements:
            - domain_validation
            - enforce_subnet_check
            - opflex_authentication
            - disable_remote_endpoint_learn
            - overlapping_vlan_validation
            - remote_leaf_direct
            - reallocate_gipo
            "%
            | optional,
          ignore_acked_faults
            | Bool
            | doc m%"
            Ignore Acked Faults (Boolean)
            - Default value: false
            "%
            | optional,
          infra_dscp_translation_policy
            | {
              admin_state
                | Bool
                | doc m%"
                Admin State (Boolean)
                - Default value: false
                "%
                | optional,
              control_plane
                | predicates.contract_from_predicate
                (predicates.anyOf
                [
                  predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.enum
                    [
                      "CS0",
                      "CS1",
                      "AF11",
                      "AF12",
                      "AF13",
                      "CS2",
                      "AF21",
                      "AF22",
                      "AF23",
                      "CS3",
                      "AF31",
                      "AF32",
                      "AF33",
                      "CS4",
                      "AF41",
                      "AF42",
                      "AF43",
                      "CS5",
                      "VA",
                      "EF",
                      "CS6",
                      "CS7"
                    ]
                  ],
                  predicates.allOf
                  [ predicates.isType 'Integer, predicates.numbers.maximum 63 ]
                ])
                | doc m%"
                Control Plane (String, Integer)
                - Default value: CS7
                "%
                | optional,
              level_1
                | predicates.contract_from_predicate
                (predicates.anyOf
                [
                  predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.enum
                    [
                      "CS0",
                      "CS1",
                      "AF11",
                      "AF12",
                      "AF13",
                      "CS2",
                      "AF21",
                      "AF22",
                      "AF23",
                      "CS3",
                      "AF31",
                      "AF32",
                      "AF33",
                      "CS4",
                      "AF41",
                      "AF42",
                      "AF43",
                      "CS5",
                      "VA",
                      "EF",
                      "CS6",
                      "CS7"
                    ]
                  ],
                  predicates.allOf
                  [ predicates.isType 'Integer, predicates.numbers.maximum 63 ]
                ])
                | doc m%"
                Level 1 (String, Integer)
                - Default value: EF
                "%
                | optional,
              level_2
                | predicates.contract_from_predicate
                (predicates.anyOf
                [
                  predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.enum
                    [
                      "CS0",
                      "CS1",
                      "AF11",
                      "AF12",
                      "AF13",
                      "CS2",
                      "AF21",
                      "AF22",
                      "AF23",
                      "CS3",
                      "AF31",
                      "AF32",
                      "AF33",
                      "CS4",
                      "AF41",
                      "AF42",
                      "AF43",
                      "CS5",
                      "VA",
                      "EF",
                      "CS6",
                      "CS7"
                    ]
                  ],
                  predicates.allOf
                  [ predicates.isType 'Integer, predicates.numbers.maximum 63 ]
                ])
                | doc m%"
                Level 2 (String, Integer)
                - Default value: CS3
                "%
                | optional,
              level_3
                | predicates.contract_from_predicate
                (predicates.anyOf
                [
                  predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.enum
                    [
                      "CS0",
                      "CS1",
                      "AF11",
                      "AF12",
                      "AF13",
                      "CS2",
                      "AF21",
                      "AF22",
                      "AF23",
                      "CS3",
                      "AF31",
                      "AF32",
                      "AF33",
                      "CS4",
                      "AF41",
                      "AF42",
                      "AF43",
                      "CS5",
                      "VA",
                      "EF",
                      "CS6",
                      "CS7"
                    ]
                  ],
                  predicates.allOf
                  [ predicates.isType 'Integer, predicates.numbers.maximum 63 ]
                ])
                | doc m%"
                Level 3 (String, Integer)
                - Default value: CS0
                "%
                | optional,
              level_4
                | predicates.contract_from_predicate
                (predicates.anyOf
                [
                  predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.enum
                    [
                      "CS0",
                      "CS1",
                      "AF11",
                      "AF12",
                      "AF13",
                      "CS2",
                      "AF21",
                      "AF22",
                      "AF23",
                      "CS3",
                      "AF31",
                      "AF32",
                      "AF33",
                      "CS4",
                      "AF41",
                      "AF42",
                      "AF43",
                      "CS5",
                      "VA",
                      "EF",
                      "CS6",
                      "CS7"
                    ]
                  ],
                  predicates.allOf
                  [ predicates.isType 'Integer, predicates.numbers.maximum 63 ]
                ])
                | doc m%"
                Level 4 (String, Integer)
                - Default value: AF11
                "%
                | optional,
              level_5
                | predicates.contract_from_predicate
                (predicates.anyOf
                [
                  predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.enum
                    [
                      "CS0",
                      "CS1",
                      "AF11",
                      "AF12",
                      "AF13",
                      "CS2",
                      "AF21",
                      "AF22",
                      "AF23",
                      "CS3",
                      "AF31",
                      "AF32",
                      "AF33",
                      "CS4",
                      "AF41",
                      "AF42",
                      "AF43",
                      "CS5",
                      "VA",
                      "EF",
                      "CS6",
                      "CS7"
                    ]
                  ],
                  predicates.allOf
                  [ predicates.isType 'Integer, predicates.numbers.maximum 63 ]
                ])
                | doc m%"
                Level 5 (String, Integer)
                - Default value: AF21
                "%
                | optional,
              level_6
                | predicates.contract_from_predicate
                (predicates.anyOf
                [
                  predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.enum
                    [
                      "CS0",
                      "CS1",
                      "AF11",
                      "AF12",
                      "AF13",
                      "CS2",
                      "AF21",
                      "AF22",
                      "AF23",
                      "CS3",
                      "AF31",
                      "AF32",
                      "AF33",
                      "CS4",
                      "AF41",
                      "AF42",
                      "AF43",
                      "CS5",
                      "VA",
                      "EF",
                      "CS6",
                      "CS7"
                    ]
                  ],
                  predicates.allOf
                  [ predicates.isType 'Integer, predicates.numbers.maximum 63 ]
                ])
                | doc m%"
                Level 6 (String, Integer)
                - Default value: AF31
                "%
                | optional,
              policy_plane
                | predicates.contract_from_predicate
                (predicates.anyOf
                [
                  predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.enum
                    [
                      "CS0",
                      "CS1",
                      "AF11",
                      "AF12",
                      "AF13",
                      "CS2",
                      "AF21",
                      "AF22",
                      "AF23",
                      "CS3",
                      "AF31",
                      "AF32",
                      "AF33",
                      "CS4",
                      "AF41",
                      "AF42",
                      "AF43",
                      "CS5",
                      "VA",
                      "EF",
                      "CS6",
                      "CS7"
                    ]
                  ],
                  predicates.allOf
                  [ predicates.isType 'Integer, predicates.numbers.maximum 63 ]
                ])
                | doc m%"
                Policy Plane (String, Integer)
                - Default value: CS4
                "%
                | optional,
              span
                | predicates.contract_from_predicate
                (predicates.anyOf
                [
                  predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.enum
                    [
                      "CS0",
                      "CS1",
                      "AF11",
                      "AF12",
                      "AF13",
                      "CS2",
                      "AF21",
                      "AF22",
                      "AF23",
                      "CS3",
                      "AF31",
                      "AF32",
                      "AF33",
                      "CS4",
                      "AF41",
                      "AF42",
                      "AF43",
                      "CS5",
                      "VA",
                      "EF",
                      "CS6",
                      "CS7"
                    ]
                  ],
                  predicates.allOf
                  [ predicates.isType 'Integer, predicates.numbers.maximum 63 ]
                ])
                | doc m%"
                Span (String, Integer)
                - Default value: CS1
                "%
                | optional,
              traceroute
                | predicates.contract_from_predicate
                (predicates.anyOf
                [
                  predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.enum
                    [
                      "CS0",
                      "CS1",
                      "AF11",
                      "AF12",
                      "AF13",
                      "CS2",
                      "AF21",
                      "AF22",
                      "AF23",
                      "CS3",
                      "AF31",
                      "AF32",
                      "AF33",
                      "CS4",
                      "AF41",
                      "AF42",
                      "AF43",
                      "CS5",
                      "VA",
                      "EF",
                      "CS6",
                      "CS7"
                    ]
                  ],
                  predicates.allOf
                  [ predicates.isType 'Integer, predicates.numbers.maximum 63 ]
                ])
                | doc m%"
                Traceroute (String, Integer)
                - Default value: CS2
                "%
                | optional,
            }
            | doc m%"
            Infra DSCP Translation Policy (Object)
            
            Elements:
            - admin_state
            - control_plane
            - policy_plane
            - span
            - traceroute
            - level_1
            - level_2
            - level_3
            - level_4
            - level_5
            - level_6
            "%
            | optional,
          ip_aging
            | Bool
            | doc m%"
            IP Aging (Boolean)
            - Default value: true
            "%
            | optional,
          l2_mtu_policies
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  port_mtu_size = predicates.allOf
                      [
                        predicates.isType 'Integer,
                        predicates.numbers.maximum 9216
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            L2 MTU Policies (List - Object)
            
            Elements:
            - name (required)
            - port_mtu_size
            "%
            | optional,
          l2_port_mtu
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType 'Integer,
              predicates.numbers.maximum 9216,
              predicates.numbers.minimum 576
            ])
            | doc m%"
            L2 Port MTU (Integer)
            - Default value: 9000
            - Minimum value: 576
            - Maximum value: 9216
            "%
            | optional,
          leaf_interface_profile_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Leaf Interface Profile Name (String)
            - Default value: LEAF\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          leaf_interface_profiles
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Leaf Interface Profiles (List - Object)
            
            Elements:
            - name (required)
            - expected_state
            "%
            | optional,
          leaf_switch_policy_groups
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  node_control_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  psu_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Leaf Switch Policy Groups (List - Object)
            
            Elements:
            - name (required)
            - psu_policy
            - node_control_policy
            "%
            | optional,
          leaf_switch_profile_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Leaf Switch Profile Name (String)
            - Default value: LEAF\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          leaf_switch_profiles
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  interface_profiles = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType '"String",
                          predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                        ])
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  selectors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "name" ],
                          predicates.records.record
                          {
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            node_blocks = predicates.allOf
                                [
                                  predicates.isType '"Array",
                                  predicates.arrays.arrayOf
                                  (predicates.allOf
                                  [
                                    predicates.isType 'Record,
                                    predicates.records.required
                                    [ "from", "name" ],
                                    predicates.records.record
                                    {
                                      from = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 4000,
                                            predicates.numbers.minimum 1
                                          ],
                                      name = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                          ],
                                      to = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 4000,
                                            predicates.numbers.minimum 1
                                          ],
                                    }
                                    {  }
                                    false
                                    predicates.never
                                  ])
                                ],
                            policy = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Leaf Switch Profiles (List - Object)
            
            Elements:
            - name (required)
            - selectors
            - interface_profiles
            - expected_state
            "%
            | optional,
          leaf_switch_selector_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Leaf Switch Selector Name (String)
            - Default value: LEAF\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          monitoring
            | {
              snmp_traps
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      destinations = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required
                              [ "community", "hostname_ip" ],
                              predicates.records.record
                              {
                                community = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.maxLength 32,
                                      predicates.strings.minLength 1
                                    ],
                                hostname_ip = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9:][a-zA-Z0-9.:-]{0,254}$"
                                      ],
                                      predicates.isType '"String"
                                    ],
                                mgmt_epg = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "inb", "oob" ]
                                    ],
                                port = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535,
                                      predicates.numbers.minimum 1
                                    ],
                                security = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [ "noauth", "auth", "priv" ]
                                    ],
                                version = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "v1", "v2c", "v3" ]
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                SNMP Traps (List - Object)
                
                Elements:
                - name (required)
                - description
                - destinations
                "%
                | optional,
              syslogs
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      admin_state = predicates.isType '"Bool",
                      audit = predicates.isType '"Bool",
                      console_admin_state = predicates.isType '"Bool",
                      console_severity = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum
                            [
                              "emergencies",
                              "alerts",
                              "critical",
                              "errors",
                              "warnings",
                              "notifications",
                              "information",
                              "debugging"
                            ]
                          ],
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      destinations = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "hostname_ip" ],
                              predicates.records.record
                              {
                                admin_state = predicates.isType '"Bool",
                                facility = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [
                                        "local0",
                                        "local1",
                                        "local2",
                                        "local3",
                                        "local4",
                                        "local5",
                                        "local6",
                                        "local7"
                                      ]
                                    ],
                                hostname_ip = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9:][a-zA-Z0-9.:-]{0,254}$"
                                      ],
                                      predicates.isType '"String"
                                    ],
                                mgmt_epg = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "inb", "oob" ]
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                port = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535,
                                      predicates.numbers.minimum 1
                                    ],
                                protocol = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "udp", "tcp", "ssl" ]
                                    ],
                                severity = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [
                                        "emergencies",
                                        "alerts",
                                        "critical",
                                        "errors",
                                        "warnings",
                                        "notifications",
                                        "information",
                                        "debugging"
                                      ]
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      events = predicates.isType '"Bool",
                      faults = predicates.isType '"Bool",
                      format = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "aci", "nxos" ]
                          ],
                      local_admin_state = predicates.isType '"Bool",
                      local_severity = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum
                            [
                              "emergencies",
                              "alerts",
                              "critical",
                              "errors",
                              "warnings",
                              "notifications",
                              "information",
                              "debugging"
                            ]
                          ],
                      minimum_severity = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum
                            [
                              "emergencies",
                              "alerts",
                              "critical",
                              "errors",
                              "warnings",
                              "notifications",
                              "information",
                              "debugging"
                            ]
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      session = predicates.isType '"Bool",
                      show_millisecond = predicates.isType '"Bool",
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Syslogs (List - Object)
                
                Elements:
                - name (required)
                - description
                - audit
                - events
                - faults
                - session
                - minimum_severity
                - admin_state
                - format
                - show_millisecond
                - local_admin_state
                - local_severity
                - console_admin_state
                - console_severity
                - destinations
                "%
                | optional,
            }
            | doc m%"
            Monitoring (Object)
            
            Elements:
            - snmp_traps
            - syslogs
            "%
            | optional,
          pod_policies
            | {
              date_time_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record
                    {
                      apic_ntp_server_master_mode = predicates.isType '"Bool",
                      apic_ntp_server_master_stratum = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 14,
                            predicates.numbers.minimum 1
                          ],
                      apic_ntp_server_state = predicates.isType '"Bool",
                      expected_state = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.record
                            {
                              maximum_critical_faults = predicates.isType
                                  'Integer,
                              maximum_major_faults = predicates.isType 'Integer,
                              maximum_minor_faults = predicates.isType 'Integer,
                              minimum_health = predicates.allOf
                                  [
                                    predicates.isType 'Integer,
                                    predicates.numbers.maximum 100
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      ntp_admin_state = predicates.isType '"Bool",
                      ntp_auth_state = predicates.isType '"Bool",
                      ntp_keys = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required
                              [ "auth_type", "id", "key", "trusted" ],
                              predicates.records.record
                              {
                                auth_type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "md5", "sha1" ]
                                    ],
                                id = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535,
                                      predicates.numbers.minimum 1
                                    ],
                                key = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.maxLength 40
                                    ],
                                trusted = predicates.isType '"Bool",
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      ntp_servers = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "hostname_ip" ],
                              predicates.records.record
                              {
                                auth_key_id = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535,
                                      predicates.numbers.minimum 1
                                    ],
                                hostname_ip = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9:][a-zA-Z0-9.:-]{0,254}$"
                                      ],
                                      predicates.isType '"String"
                                    ],
                                mgmt_epg = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "inb", "oob" ]
                                    ],
                                preferred = predicates.isType '"Bool",
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Date Time Policies (List - Object)
                
                Elements:
                - name
                - ntp_admin_state
                - ntp_auth_state
                - apic_ntp_server_state
                - apic_ntp_server_master_mode
                - apic_ntp_server_master_stratum
                - ntp_servers
                - ntp_keys
                - expected_state
                "%
                | optional,
              management_access_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      alias = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      http = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.record
                            {
                              admin_state = predicates.isType '"Bool",
                              port = predicates.allOf
                                  [
                                    predicates.isType 'Integer,
                                    predicates.numbers.maximum 65535,
                                    predicates.numbers.minimum 1
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      https = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.record
                            {
                              admin_state = predicates.isType '"Bool",
                              client_cert_auth_state = predicates.isType
                                  '"Bool",
                              dh = predicates.allOf
                                  [
                                    predicates.isType '"String",
                                    predicates.enum [ "1024", "2048", "4096" ]
                                  ],
                              key_ring = predicates.allOf
                                  [
                                    predicates.isType '"String",
                                    predicates.strings.pattern
                                    "^[a-zA-Z0-9_.:-]{1,64}$"
                                  ],
                              port = predicates.allOf
                                  [
                                    predicates.isType 'Integer,
                                    predicates.numbers.maximum 65535,
                                    predicates.numbers.minimum 1
                                  ],
                              tlsv1 = predicates.isType '"Bool",
                              tlsv1_1 = predicates.isType '"Bool",
                              tlsv1_2 = predicates.isType '"Bool",
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      ssh = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.record
                            {
                              admin_state = predicates.isType '"Bool",
                              aes128_ctr = predicates.isType '"Bool",
                              aes128_gcm = predicates.isType '"Bool",
                              aes192_ctr = predicates.isType '"Bool",
                              aes256_ctr = predicates.isType '"Bool",
                              chacha = predicates.isType '"Bool",
                              hmac_sha1 = predicates.isType '"Bool",
                              hmac_sha2_256 = predicates.isType '"Bool",
                              hmac_sha2_512 = predicates.isType '"Bool",
                              password_auth = predicates.isType '"Bool",
                              port = predicates.allOf
                                  [
                                    predicates.isType 'Integer,
                                    predicates.numbers.maximum 65535,
                                    predicates.numbers.minimum 1
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      telnet = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.record
                            {
                              admin_state = predicates.isType '"Bool",
                              port = predicates.allOf
                                  [
                                    predicates.isType 'Integer,
                                    predicates.numbers.maximum 65535,
                                    predicates.numbers.minimum 1
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Management Access Policies (List - Object)
                
                Elements:
                - name (required)
                - description
                - alias
                - ssh
                - telnet
                - https
                - http
                "%
                | optional,
              snmp_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      admin_state = predicates.isType '"Bool",
                      clients = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required
                              [ "mgmt_epg", "name" ],
                              predicates.records.record
                              {
                                entries = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "ip", "name" ],
                                        predicates.records.record
                                        {
                                          ip = predicates.isType '"String",
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                mgmt_epg = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "inb", "oob" ]
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      communities = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.maxLength 32
                            ])
                          ],
                      contact = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.maxLength 255
                          ],
                      location = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.maxLength 512
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      trap_forwarders = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                ip = predicates.isType '"String",
                                port = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      users = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required
                              [ "authorization_key", "name" ],
                              predicates.records.record
                              {
                                authorization_key = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.maxLength 130,
                                      predicates.strings.minLength 8
                                    ],
                                authorization_type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [
                                        "hmac-md5-96",
                                        "hmac-sha1-96",
                                        "hmac-sha2-224",
                                        "hmac-sha2-256",
                                        "hmac-sha2-384",
                                        "hmac-sha2-512"
                                      ]
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                privacy_key = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.maxLength 130,
                                      predicates.strings.minLength 8
                                    ],
                                privacy_type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [ "none", "des", "aes-128" ]
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                SNMP Policies (List - Object)
                
                Elements:
                - name (required)
                - admin_state
                - location
                - contact
                - users
                - communities
                - trap_forwarders
                - clients
                "%
                | optional,
            }
            | doc m%"
            Pod Policies (Object)
            
            Elements:
            - date_time_policies
            - snmp_policies
            - management_access_policies
            "%
            | optional,
          pod_policy_groups
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  date_time_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  management_access_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  snmp_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Pod Policy Groups (List - Object)
            
            Elements:
            - name (required)
            - snmp_policy
            - date_time_policy
            - management_access_policy
            "%
            | optional,
          pod_profile_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Pod Profile Name (String)
            - Default value: POD\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          pod_profile_pod_selector_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Pod Profile Pod Selector Name (String)
            - Default value: POD\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          pod_profiles
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  selectors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "name" ],
                          predicates.records.record
                          {
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            pod_blocks = predicates.allOf
                                [
                                  predicates.isType '"Array",
                                  predicates.arrays.arrayOf
                                  (predicates.allOf
                                  [
                                    predicates.isType 'Record,
                                    predicates.records.required
                                    [ "from", "name" ],
                                    predicates.records.record
                                    {
                                      from = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 255,
                                            predicates.numbers.minimum 1
                                          ],
                                      name = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                          ],
                                      to = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 255,
                                            predicates.numbers.minimum 1
                                          ],
                                    }
                                    {  }
                                    false
                                    predicates.never
                                  ])
                                ],
                            policy = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            type = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.enum [ "all", "range" ]
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Pod Profiles (List - Object)
            
            Elements:
            - name (required)
            - selectors
            - expected_state
            "%
            | optional,
          port_tracking
            | {
              admin_state
                | Bool
                | doc m%"
                Admin State (Boolean)
                - Default value: true
                "%
                | optional,
              delay
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 300,
                  predicates.numbers.minimum 1
                ])
                | doc m%"
                Delay (Integer)
                - Default value: 120
                - Minimum value: 1
                - Maximum value: 300
                "%
                | optional,
              min_links
                | predicates.contract_from_predicate
                (predicates.allOf
                [ predicates.isType 'Integer, predicates.numbers.maximum 48 ])
                | doc m%"
                Min Links (Integer)
                - Maximum value: 48
                "%
                | optional,
            }
            | doc m%"
            Port Tracking (Object)
            
            Elements:
            - admin_state
            - delay
            - min_links
            "%
            | optional,
          ptp
            | {
              admin_state
                | Bool
                | doc m%"
                Admin State (Boolean)
                - Default value: false
                "%
                | optional,
              announce_interval
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 4,
                  predicates.numbers.minimum (-3)
                ])
                | doc m%"
                Announce Interval (Integer)
                - Default value: 1
                - Minimum value: -3
                - Maximum value: 4
                "%
                | optional,
              announce_timeout
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 10,
                  predicates.numbers.minimum 2
                ])
                | doc m%"
                Announce Timeout (Integer)
                - Default value: 3
                - Minimum value: 2
                - Maximum value: 10
                "%
                | optional,
              delay_interval
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 5,
                  predicates.numbers.minimum (-7)
                ])
                | doc m%"
                Delay Interval (Integer)
                - Default value: -2
                - Minimum value: -7
                - Maximum value: 5
                "%
                | optional,
              global_domain
                | predicates.contract_from_predicate
                (predicates.allOf
                [ predicates.isType 'Integer, predicates.numbers.maximum 128 ])
                | doc m%"
                Global Domain (Integer)
                - Maximum value: 128
                "%
                | optional,
              profile
                | std.enum.TagOrString
                | [| 'telecom_full_path, 'smpte, '"default", 'aes67 |]
                | doc m%"
                Profile (String)
                - Default value: aes67
                - Allowed values: aes67, default, smpte, telecom_full_path
                "%
                | optional,
              sync_interval
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 1,
                  predicates.numbers.minimum (-7)
                ])
                | doc m%"
                Sync Interval (Integer)
                - Default value: -3
                - Minimum value: -7
                - Maximum value: 1
                "%
                | optional,
            }
            | doc m%"
            PTP (Object)
            
            Elements:
            - admin_state
            - global_domain
            - profile
            - announce_interval
            - announce_timeout
            - sync_interval
            - delay_interval
            "%
            | optional,
          remote_locations
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "hostname_ip", "name", "protocol", "username" ],
                predicates.records.record
                {
                  auth_type = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.enum [ "password", "ssh_keys" ]
                      ],
                  description = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern
                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                      ],
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  hostname_ip = predicates.anyOf
                      [
                        predicates.allOf
                        [
                          predicates.isType '"String",
                          predicates.strings.pattern
                          "^[a-zA-Z0-9:][a-zA-Z0-9.:-]{0,254}$"
                        ],
                        predicates.isType '"String"
                      ],
                  mgmt_epg = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.enum [ "inb", "oob" ]
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  password = predicates.isType '"String",
                  path = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.maxLength 512
                      ],
                  port = predicates.allOf
                      [
                        predicates.isType 'Integer,
                        predicates.numbers.maximum 65535
                      ],
                  protocol = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.enum [ "ftp", "sftp", "scp" ]
                      ],
                  ssh_passphrase = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.maxLength 512,
                        predicates.strings.minLength 1
                      ],
                  ssh_private_key = predicates.isType '"String",
                  ssh_public_key = predicates.isType '"String",
                  username = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern
                        "^[a-zA-Z0-9][a-zA-Z0-9_.@\\\\-]{0,31}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Remote Locations (List - Object)
            
            Elements:
            - name (required)
            - description
            - hostname_ip (required)
            - protocol (required)
            - path
            - port
            - auth_type
            - username (required)
            - password
            - ssh_public_key
            - ssh_private_key
            - ssh_passphrase
            - mgmt_epg
            - expected_state
            "%
            | optional,
          rogue_ep_control
            | {
              admin_state
                | Bool
                | doc m%"
                Admin State (Boolean)
                - Default value: true
                "%
                | optional,
              detection_interval
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 3600,
                  predicates.numbers.minimum 30
                ])
                | doc m%"
                Detection Interval (Integer)
                - Default value: 30
                - Minimum value: 30
                - Maximum value: 3600
                "%
                | optional,
              detection_multiplier
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 65535,
                  predicates.numbers.minimum 2
                ])
                | doc m%"
                Detection Multiplier (Integer)
                - Default value: 10
                - Minimum value: 2
                - Maximum value: 65535
                "%
                | optional,
              hold_interval
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 3600,
                  predicates.numbers.minimum 300
                ])
                | doc m%"
                Hold Interval (Integer)
                - Default value: 1800
                - Minimum value: 300
                - Maximum value: 3600
                "%
                | optional,
            }
            | doc m%"
            Rogue EP Control (Object)
            
            Elements:
            - admin_state
            - detection_interval
            - detection_multiplier
            - hold_interval
            "%
            | optional,
          schedulers
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  description = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern
                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  recurring_windows = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "name" ],
                          predicates.records.record
                          {
                            day = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.enum
                                  [
                                    "every-day",
                                    "odd-day",
                                    "even-day",
                                    "Monday",
                                    "Tuesday",
                                    "Wednesday",
                                    "Thursday",
                                    "Friday",
                                    "Saturday",
                                    "Sunday"
                                  ]
                                ],
                            hour = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 23
                                ],
                            minute = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 59
                                ],
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Schedulers (List - Object)
            
            Elements:
            - name (required)
            - description
            - recurring_windows
            "%
            | optional,
          smart_licensing
            | {
              mode
                | std.enum.TagOrString
                | [|
                  'transport-gateway,
                  'satellite,
                  'proxy,
                  'plr,
                  'offline,
                  'smart-licensing,
                  'cslu
                |]
                | doc m%"
                Mode (String)
                - Default value: smart-licensing
                - Allowed values: cslu, smart-licensing, offline, plr, proxy, satellite, transport-gateway
                "%
                | optional,
              proxy
                | {
                  hostname_ip
                    | predicates.contract_from_predicate
                    (predicates.anyOf
                    [
                      predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern
                        "^[a-zA-Z0-9:\\[][a-zA-Z0-9.:-\\]]{0,254}$"
                      ],
                      predicates.isType '"String"
                    ])
                    | doc m%"
                    Hostname IP (String, String)
                    "%
                    | optional,
                  port
                    | predicates.contract_from_predicate
                    (predicates.allOf
                    [
                      predicates.isType 'Integer,
                      predicates.numbers.maximum 65535
                    ])
                    | doc m%"
                    Port (Integer)
                    - Default value: 443
                    - Maximum value: 65535
                    "%
                    | optional,
                }
                | doc m%"
                Proxy (Object)
                
                Elements:
                - hostname_ip
                - port
                "%
                | optional,
              registration_token
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"String",
                  predicates.strings.maxLength 512,
                  predicates.strings.minLength 1
                ])
                | doc m%"
                Registration Token (String)
                - Minimum length: 1
                - Maximum length: 512
                "%
                | optional,
              url
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"String",
                  predicates.strings.maxLength 512,
                  predicates.strings.minLength 1
                ])
                | doc m%"
                Url (String)
                - Default value: https://tools.cisco.com/its/service/oddce/services/DDCEService
                - Minimum length: 1
                - Maximum length: 512
                "%
                | optional,
            }
            | doc m%"
            Smart Licensing (Object)
            
            Elements:
            - mode
            - registration_token
            - url
            - proxy
            "%
            | optional,
          span
            | {
              destination_groups
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      application_profile = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      dscp = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum
                              [
                                "unspecified",
                                "CS0",
                                "CS1",
                                "AF11",
                                "AF12",
                                "AF13",
                                "CS2",
                                "AF21",
                                "AF22",
                                "AF23",
                                "CS3",
                                "AF31",
                                "AF32",
                                "AF33",
                                "CS4",
                                "AF41",
                                "AF42",
                                "AF43",
                                "CS5",
                                "VA",
                                "EF",
                                "CS6",
                                "CS7"
                              ]
                            ],
                            predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 63
                            ]
                          ],
                      endpoint_group = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      enforce_version = predicates.isType '"Bool",
                      expected_state = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.record
                            {
                              maximum_critical_faults = predicates.isType
                                  'Integer,
                              maximum_major_faults = predicates.isType 'Integer,
                              maximum_minor_faults = predicates.isType 'Integer,
                              minimum_health = predicates.allOf
                                  [
                                    predicates.isType 'Integer,
                                    predicates.numbers.maximum 100
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      flow_id = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 1023,
                            predicates.numbers.minimum 1
                          ],
                      ip = predicates.isType '"String",
                      mtu = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 9216,
                            predicates.numbers.minimum 64
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      source_prefix = predicates.isType '"String",
                      tenant = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      ttl = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 255,
                            predicates.numbers.minimum 1
                          ],
                      version = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ 1, 2 ]
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Destination Groups (List - Object)
                
                Elements:
                - name (required)
                - description
                - ip
                - source_prefix
                - dscp
                - flow_id
                - mtu
                - ttl
                - version
                - enforce_version
                - tenant
                - application_profile
                - endpoint_group
                - expected_state
                "%
                | optional,
              source_groups
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "destination", "name" ],
                    predicates.records.record
                    {
                      admin_state = predicates.isType '"Bool",
                      description = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern
                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                          ],
                      destination = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.required [ "name" ],
                            predicates.records.record
                            {
                              description = predicates.allOf
                                  [
                                    predicates.isType '"String",
                                    predicates.strings.pattern
                                    "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                  ],
                              name = predicates.allOf
                                  [
                                    predicates.isType '"String",
                                    predicates.strings.pattern
                                    "^[a-zA-Z0-9_.:-]{1,64}$"
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      expected_state = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.record
                            {
                              maximum_critical_faults = predicates.isType
                                  'Integer,
                              maximum_major_faults = predicates.isType 'Integer,
                              maximum_minor_faults = predicates.isType 'Integer,
                              minimum_health = predicates.allOf
                                  [
                                    predicates.isType 'Integer,
                                    predicates.numbers.maximum 100
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      sources = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                bridge_domain = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                direction = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "in", "out", "both" ]
                                    ],
                                fabric_paths = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "node_id", "port" ],
                                        predicates.records.record
                                        {
                                          module = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 9,
                                                predicates.numbers.minimum 1
                                              ],
                                          node_id = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 4000,
                                                predicates.numbers.minimum 1
                                              ],
                                          pod_id = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 255,
                                                predicates.numbers.minimum 1
                                              ],
                                          port = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 127,
                                                predicates.numbers.minimum 1
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                span_drop = predicates.isType '"Bool",
                                tenant = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                vrf = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Source Groups (List - Object)
                
                Elements:
                - name (required)
                - description
                - admin_state
                - sources
                - destination (required)
                - expected_state
                "%
                | optional,
            }
            | doc m%"
            Span (Object)
            
            Elements:
            - source_groups
            - destination_groups
            "%
            | optional,
          spine_interface_profile_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Spine Interface Profile Name (String)
            - Default value: SPINE\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          spine_interface_profiles
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  selectors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "name" ],
                          predicates.records.record
                          {
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            port_blocks = predicates.allOf
                                [
                                  predicates.isType '"Array",
                                  predicates.arrays.arrayOf
                                  (predicates.allOf
                                  [
                                    predicates.isType 'Record,
                                    predicates.records.required
                                    [ "from_port", "name" ],
                                    predicates.records.record
                                    {
                                      from_module = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 9,
                                            predicates.numbers.minimum 1
                                          ],
                                      from_port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 127,
                                            predicates.numbers.minimum 1
                                          ],
                                      name = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                          ],
                                      to_module = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 9,
                                            predicates.numbers.minimum 1
                                          ],
                                      to_port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 127,
                                            predicates.numbers.minimum 1
                                          ],
                                    }
                                    {  }
                                    false
                                    predicates.never
                                  ])
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Spine Interface Profiles (List - Object)
            
            Elements:
            - name (required)
            - selectors
            - expected_state
            "%
            | optional,
          spine_switch_policy_groups
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  node_control_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  psu_policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Spine Switch Policy Groups (List - Object)
            
            Elements:
            - name (required)
            - psu_policy
            - node_control_policy
            "%
            | optional,
          spine_switch_profile_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Spine Switch Profile Name (String)
            - Default value: SPINE\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          spine_switch_profiles
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  interface_profiles = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType '"String",
                          predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                        ])
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  selectors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "name" ],
                          predicates.records.record
                          {
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            node_blocks = predicates.allOf
                                [
                                  predicates.isType '"Array",
                                  predicates.arrays.arrayOf
                                  (predicates.allOf
                                  [
                                    predicates.isType 'Record,
                                    predicates.records.required
                                    [ "from", "name" ],
                                    predicates.records.record
                                    {
                                      from = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 4000,
                                            predicates.numbers.minimum 1
                                          ],
                                      name = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                          ],
                                      to = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 4000,
                                            predicates.numbers.minimum 1
                                          ],
                                    }
                                    {  }
                                    false
                                    predicates.never
                                  ])
                                ],
                            policy = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Spine Switch Profiles (List - Object)
            
            Elements:
            - name (required)
            - selectors
            - interface_profiles
            - expected_state
            "%
            | optional,
          spine_switch_selector_name
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.maxLength 64,
              predicates.strings.minLength 1
            ])
            | doc m%"
            Spine Switch Selector Name (String)
            - Default value: SPINE\g<id>
            - Minimum length: 1
            - Maximum length: 64
            "%
            | optional,
          switch_policies
            | {
              node_control_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "name" ],
                    predicates.records.record
                    {
                      dom = predicates.isType '"Bool",
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      telemetry = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum
                            [ "netflow", "telemetry", "analytics" ]
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Node Control Policies (List - Object)
                
                Elements:
                - name (required)
                - dom
                - telemetry
                "%
                | optional,
              psu_policies
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "admin_state", "name" ],
                    predicates.records.record
                    {
                      admin_state = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "combined", "nnred", "n1red" ]
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                PSU Policies (List - Object)
                
                Elements:
                - name (required)
                - admin_state (required)
                "%
                | optional,
            }
            | doc m%"
            Switch Policies (Object)
            
            Elements:
            - psu_policies
            - node_control_policies
            "%
            | optional,
          system_performance
            | {
              admin_state
                | Bool
                | doc m%"
                Admin State (Boolean)
                - Default value: false
                "%
                | optional,
              calculation_window
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 300,
                  predicates.numbers.minimum 30
                ])
                | doc m%"
                Calculation Window (Integer)
                frequency in UI calculation_window in API
                - Default value: 300
                - Minimum value: 30
                - Maximum value: 300
                "%
                | optional,
              response_threshold
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 8500,
                  predicates.numbers.minimum 40
                ])
                | doc m%"
                Response Threshold (Integer)
                - Default value: 8500
                - Minimum value: 40
                - Maximum value: 8500
                "%
                | optional,
              top_slowest_requests
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 10,
                  predicates.numbers.minimum 1
                ])
                | doc m%"
                Top Slowest Requests (Integer)
                top slowest in UI in API is topNRequests
                - Default value: 5
                - Minimum value: 1
                - Maximum value: 10
                "%
                | optional,
            }
            | doc m%"
            System Performance (Object)
            
            Elements:
            - admin_state
            - response_threshold
            - top_slowest_requests
            - calculation_window
            "%
            | optional,
          use_infra_gipo
            | Bool
            | doc m%"
            Use Infra Gipo (Boolean)
            - Default value: false
            "%
            | optional,
          vmware_vmm_domains
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  access_mode = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.enum [ "read-only", "read-write" ]
                      ],
                  credential_policies = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required
                          [ "name", "password", "username" ],
                          predicates.records.record
                          {
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            password = predicates.isType '"String",
                            username = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                  delimiter = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern
                        "^[^a-zA-Z0-9;>\"-*`,-.;\\[\\]/\\\\{}:?\\s&<]$"
                      ],
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  security_domains = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType '"String",
                          predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                        ])
                      ],
                  tag_collection = predicates.isType '"Bool",
                  uplinks = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "id", "name" ],
                          predicates.records.record
                          {
                            id = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 32,
                                  predicates.numbers.minimum 1
                                ],
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                  vcenters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required
                          [
                            "credential_policy",
                            "datacenter",
                            "hostname_ip",
                            "name"
                          ],
                          predicates.records.record
                          {
                            credential_policy = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            datacenter = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.maxLength 512,
                                  predicates.strings.minLength 1
                                ],
                            dvs_version = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.enum
                                  [
                                    "unmanaged",
                                    "5.1",
                                    "5.5",
                                    "6.0",
                                    "6.5",
                                    "6.6",
                                    "7.0"
                                  ]
                                ],
                            hostname_ip = predicates.anyOf
                                [
                                  predicates.allOf
                                  [
                                    predicates.isType '"String",
                                    predicates.strings.pattern
                                    "^[a-zA-Z0-9:][a-zA-Z0-9.:-]{0,254}$"
                                  ],
                                  predicates.isType '"String"
                                ],
                            mgmt_epg = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.enum [ "inb", "oob" ]
                                ],
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            statistics = predicates.isType '"Bool",
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                  vlan_pool = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  vswitch = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          cdp_policy = predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.strings.pattern
                                "^[a-zA-Z0-9_.:-]{1,64}$"
                              ],
                          enhanced_lags = predicates.allOf
                              [
                                predicates.isType '"Array",
                                predicates.arrays.arrayOf
                                (predicates.allOf
                                [
                                  predicates.isType 'Record,
                                  predicates.records.required [ "name" ],
                                  predicates.records.record
                                  {
                                    lb_mode = predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.enum
                                          [
                                            "dst-ip",
                                            "dst-ip-l4port",
                                            "dst-ip-vlan",
                                            "dst-ip-l4port-vlan",
                                            "dst-mac",
                                            "dst-l4port",
                                            "src-ip",
                                            "src-ip-l4port",
                                            "src-ip-vlan",
                                            "src-ip-l4port-vlan",
                                            "src-mac",
                                            "src-l4port",
                                            "src-dst-ip",
                                            "src-dst-ip-l4port",
                                            "src-dst-ip-vlan",
                                            "src-dst-ip-l4port-vlan",
                                            "src-dst-mac",
                                            "src-dst-l4port",
                                            "src-port-id",
                                            "vlan"
                                          ]
                                        ],
                                    mode = predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.enum
                                          [ "active", "passive" ]
                                        ],
                                    name = predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.strings.pattern
                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                        ],
                                    num_links = predicates.allOf
                                        [
                                          predicates.isType 'Integer,
                                          predicates.numbers.maximum 8,
                                          predicates.numbers.minimum 2
                                        ],
                                  }
                                  {  }
                                  false
                                  predicates.never
                                ])
                              ],
                          lldp_policy = predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.strings.pattern
                                "^[a-zA-Z0-9_.:-]{1,64}$"
                              ],
                          mtu_policy = predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.strings.pattern
                                "^[a-zA-Z0-9_.:-]{1,64}$"
                              ],
                          port_channel_policy = predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.strings.pattern
                                "^[a-zA-Z0-9_.:-]{1,64}$"
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Vmware VMM Domains (List - Object)
            
            Elements:
            - name (required)
            - access_mode
            - delimiter
            - tag_collection
            - vlan_pool
            - security_domains
            - vswitch
            - credential_policies
            - vcenters
            - uplinks
            - expected_state
            "%
            | optional,
        }
        | doc m%"
        Fabric Policies (Object)
        
        Elements:
        - leaf_switch_profile_name
        - leaf_switch_selector_name
        - leaf_interface_profile_name
        - spine_switch_profile_name
        - spine_switch_selector_name
        - spine_interface_profile_name
        - pod_profile_name
        - pod_profile_pod_selector_name
        - config_passphrase
        - apic_conn_pref
        - banners
        - ep_loop_protection
        - rogue_ep_control
        - global_settings
        - port_tracking
        - ptp
        - ip_aging
        - ignore_acked_faults
        - use_infra_gipo
        - coop_group_policy
        - l2_port_mtu
        - fabric_isis_redistribute_metric
        - fabric_isis_bfd
        - fabric_bgp_as
        - fabric_bgp_rr
        - fabric_bgp_ext_rr
        - date_time_format
        - dns_policies
        - err_disabled_recovery
        - pod_policies
        - pod_policy_groups
        - pod_profiles
        - switch_policies
        - leaf_switch_policy_groups
        - spine_switch_policy_groups
        - leaf_switch_profiles
        - spine_switch_profiles
        - leaf_interface_profiles
        - spine_interface_profiles
        - external_connectivity_policy
        - infra_dscp_translation_policy
        - vmware_vmm_domains
        - aaa
        - geolocation
        - remote_locations
        - schedulers
        - config_exports
        - monitoring
        - span
        - smart_licensing
        - l2_mtu_policies
        - system_performance
        "%
        | optional,
      interface_policies
        | {
          nodes
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "id" ],
                predicates.records.record
                {
                  fexes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "id" ],
                          predicates.records.record
                          {
                            id = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 199,
                                  predicates.numbers.minimum 101
                                ],
                            interfaces = predicates.allOf
                                [
                                  predicates.isType '"Array",
                                  predicates.arrays.arrayOf
                                  (predicates.allOf
                                  [
                                    predicates.isType 'Record,
                                    predicates.records.required [ "port" ],
                                    predicates.records.record
                                    {
                                      description = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                          ],
                                      expected_state = predicates.allOf
                                          [
                                            predicates.isType 'Record,
                                            predicates.records.record
                                            {
                                              lldp_neighbor = predicates.isType
                                                  '"String",
                                            }
                                            {  }
                                            false
                                            predicates.never
                                          ],
                                      module = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 9,
                                            predicates.numbers.minimum 1
                                          ],
                                      policy_group = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                          ],
                                      port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 127,
                                            predicates.numbers.minimum 1
                                          ],
                                    }
                                    {  }
                                    false
                                    predicates.never
                                  ])
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                  id = predicates.allOf
                      [
                        predicates.isType 'Integer,
                        predicates.numbers.maximum 4000,
                        predicates.numbers.minimum 1
                      ],
                  interfaces = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "port" ],
                          predicates.records.record
                          {
                            description = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                ],
                            expected_state = predicates.allOf
                                [
                                  predicates.isType 'Record,
                                  predicates.records.record
                                  {
                                    lldp_neighbor = predicates.isType '"String",
                                  }
                                  {  }
                                  false
                                  predicates.never
                                ],
                            fex_id = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 199,
                                  predicates.numbers.minimum 101
                                ],
                            module = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 9,
                                  predicates.numbers.minimum 1
                                ],
                            policy_group = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            port = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 127,
                                  predicates.numbers.minimum 1
                                ],
                            sub_ports = predicates.allOf
                                [
                                  predicates.isType '"Array",
                                  predicates.arrays.arrayOf
                                  (predicates.allOf
                                  [
                                    predicates.isType 'Record,
                                    predicates.records.required [ "port" ],
                                    predicates.records.record
                                    {
                                      description = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                          ],
                                      expected_state = predicates.allOf
                                          [
                                            predicates.isType 'Record,
                                            predicates.records.record
                                            {
                                              lldp_neighbor = predicates.isType
                                                  '"String",
                                            }
                                            {  }
                                            false
                                            predicates.never
                                          ],
                                      fex_id = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 199,
                                            predicates.numbers.minimum 101
                                          ],
                                      module = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 9,
                                            predicates.numbers.minimum 1
                                          ],
                                      policy_group = predicates.allOf
                                          [
                                            predicates.isType '"String",
                                            predicates.strings.pattern
                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                          ],
                                      port = predicates.allOf
                                          [
                                            predicates.isType 'Integer,
                                            predicates.numbers.maximum 127,
                                            predicates.numbers.minimum 1
                                          ],
                                    }
                                    {  }
                                    false
                                    predicates.never
                                  ])
                                ],
                            type = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.enum [ "uplink", "downlink" ]
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Nodes (List - Object)
            
            Elements:
            - id (required)
            - interfaces
            - fexes
            "%
            | optional,
        }
        | doc m%"
        Interface Policies (Object)
        
        Elements:
        - nodes
        "%
        | optional,
      nae_assurance_group
        | String
        | doc m%"
        NAE Assurance Group (String)
        "%
        | optional,
      node_policies
        | {
          expected_state
            | {
              nodes_status
                | std.enum.TagOrString
                | [| 'undiscovered, 'unknown, 'disabled, 'inactive, 'active |]
                | doc m%"
                Nodes Status (String)
                - Allowed values: active, inactive, disabled, unknown, undiscovered
                "%
                | optional,
            }
            | doc m%"
            Expected State (Object)
            
            Elements:
            - nodes_status
            "%
            | optional,
          inb_endpoint_group
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
            ])
            | doc m%"
            INB Endpoint Group (String)
            - Default value: default
            "%
            | optional,
          nodes
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "id", "role" ],
                predicates.records.record
                {
                  access_policy_group = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          psu_count = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 10,
                                predicates.numbers.minimum 1
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  fabric_policy_group = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  id = predicates.allOf
                      [
                        predicates.isType 'Integer,
                        predicates.numbers.maximum 4000,
                        predicates.numbers.minimum 1
                      ],
                  inb_address = predicates.isType '"String",
                  inb_gateway = predicates.isType '"String",
                  inb_v6_address = predicates.isType '"String",
                  inb_v6_gateway = predicates.isType '"String",
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  oob_address = predicates.isType '"String",
                  oob_gateway = predicates.isType '"String",
                  oob_v6_address = predicates.isType '"String",
                  oob_v6_gateway = predicates.isType '"String",
                  pod = predicates.allOf
                      [
                        predicates.isType 'Integer,
                        predicates.numbers.maximum 255
                      ],
                  remote_pool_id = predicates.allOf
                      [
                        predicates.isType 'Integer,
                        predicates.numbers.maximum 255,
                        predicates.numbers.minimum 1
                      ],
                  role = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.enum [ "leaf", "spine", "apic" ]
                      ],
                  serial_number = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,16}$"
                      ],
                  type = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.enum
                        [ "tier-2-leaf", "remote-leaf-wan", "virtual" ]
                      ],
                  update_group = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Nodes (List - Object)
            
            Elements:
            - id (required)
            - pod
            - role (required)
            - type
            - serial_number
            - name
            - oob_address
            - oob_gateway
            - oob_v6_address
            - oob_v6_gateway
            - inb_address
            - inb_gateway
            - inb_v6_address
            - inb_v6_gateway
            - update_group
            - fabric_policy_group
            - access_policy_group
            - remote_pool_id
            - expected_state
            "%
            | optional,
          oob_endpoint_group
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"String",
              predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
            ])
            | doc m%"
            OOB Endpoint Group (String)
            - Default value: default
            "%
            | optional,
          update_groups
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  scheduler = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Update Groups (List - Object)
            
            Elements:
            - name (required)
            - scheduler
            "%
            | optional,
          vpc_groups
            | {
              groups
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType '"Array",
                  predicates.arrays.arrayOf
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required
                    [ "id", "switch_1", "switch_2" ],
                    predicates.records.record
                    {
                      id = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 1000,
                            predicates.numbers.minimum 1
                          ],
                      name = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      policy = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                          ],
                      switch_1 = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 16000,
                            predicates.numbers.minimum 1
                          ],
                      switch_2 = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 16000,
                            predicates.numbers.minimum 1
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ])
                ])
                | doc m%"
                Groups (List - Object)
                
                Elements:
                - id (required)
                - name
                - switch_1 (required)
                - switch_2 (required)
                - policy
                "%
                | optional,
              mode
                | std.enum.TagOrString
                | [| 'reciprocal, 'consecutive, 'explicit |]
                | doc m%"
                Mode (String)
                - Default value: explicit
                - Allowed values: explicit, consecutive, reciprocal
                "%
                | optional,
            }
            | doc m%"
            vPC Groups (Object)
            
            Elements:
            - mode
            - groups
            "%
            | optional,
        }
        | doc m%"
        Node Policies (Object)
        
        Elements:
        - inb_endpoint_group
        - oob_endpoint_group
        - update_groups
        - vpc_groups
        - nodes
        - expected_state
        "%
        | optional,
      pod_policies
        | {
          pods
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "id" ],
                predicates.records.record
                {
                  data_plane_tep = predicates.isType '"String",
                  expected_state = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record
                        {
                          maximum_critical_faults = predicates.isType 'Integer,
                          maximum_major_faults = predicates.isType 'Integer,
                          maximum_minor_faults = predicates.isType 'Integer,
                          minimum_health = predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 100
                              ],
                        }
                        {  }
                        false
                        predicates.never
                      ],
                  external_tep_pools = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required
                          [ "prefix", "reserved_address_count" ],
                          predicates.records.record
                          {
                            prefix = predicates.isType '"String",
                            reserved_address_count = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 4294967295,
                                  predicates.numbers.minimum 1
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                  id = predicates.allOf
                      [
                        predicates.isType 'Integer,
                        predicates.numbers.maximum 255,
                        predicates.numbers.minimum 1
                      ],
                  policy = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  remote_pools = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "id", "remote_pool" ],
                          predicates.records.record
                          {
                            id = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.maximum 255,
                                  predicates.numbers.minimum 1
                                ],
                            remote_pool = predicates.isType '"String",
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                  tep_pool = predicates.isType '"String",
                  unicast_tep = predicates.isType '"String",
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            Pods (List - Object)
            
            Elements:
            - id (required)
            - tep_pool
            - data_plane_tep
            - unicast_tep
            - policy
            - external_tep_pools
            - remote_pools
            - expected_state
            "%
            | optional,
        }
        | doc m%"
        Pod Policies (Object)
        
        Elements:
        - pods
        "%
        | optional,
      tenants
        | predicates.contract_from_predicate
        (predicates.allOf
        [
          predicates.isType '"Array",
          predicates.arrays.arrayOf
          (predicates.allOf
          [
            predicates.isType 'Record,
            predicates.records.required [ "name" ],
            predicates.records.record
            {
              alias = predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                  ],
              application_profiles = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "name" ],
                      predicates.records.record
                      {
                        alias = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        description = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                            ],
                        endpoint_groups = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required
                                [ "bridge_domain", "name" ],
                                predicates.records.record
                                {
                                  alias = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  bridge_domain = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  contracts = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.record
                                        {
                                          consumers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                          imported_consumers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                          intra_epgs = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                          providers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                  custom_qos_policy = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  description = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                      ],
                                  expected_state = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.record
                                        {
                                          maximum_critical_faults =
                                            predicates.isType 'Integer,
                                          maximum_major_faults =
                                            predicates.isType 'Integer,
                                          maximum_minor_faults =
                                            predicates.isType 'Integer,
                                          minimum_health = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 100
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                  flood_in_encap = predicates.isType '"Bool",
                                  intra_epg_isolation = predicates.isType
                                      '"Bool",
                                  l4l7_address_pools = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "gateway_address", "name" ],
                                          predicates.records.record
                                          {
                                            from = predicates.isType '"String",
                                            gateway_address = predicates.isType
                                                '"String",
                                            name = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            to = predicates.isType '"String",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  l4l7_virtual_ips = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required [ "ip" ],
                                          predicates.records.record
                                          {
                                            description = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                ],
                                            ip = predicates.isType '"String",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  physical_domains = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.strings.pattern
                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                        ])
                                      ],
                                  preferred_group = predicates.isType '"Bool",
                                  proxy_arp = predicates.isType '"Bool",
                                  qos_class = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [
                                          "level1",
                                          "level2",
                                          "level3",
                                          "level4",
                                          "level5",
                                          "level6",
                                          "unspecified"
                                        ]
                                      ],
                                  static_endpoints = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "mac", "type" ],
                                          predicates.records.record
                                          {
                                            additional_ips = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.isType '"String")
                                                ],
                                            alias = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            channel = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            ip = predicates.isType '"String",
                                            mac = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$"
                                                ],
                                            module = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 9,
                                                  predicates.numbers.minimum 1
                                                ],
                                            name = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            node2_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4000,
                                                  predicates.numbers.minimum 1
                                                ],
                                            node_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4000,
                                                  predicates.numbers.minimum 1
                                                ],
                                            pod_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  255,
                                                  predicates.numbers.minimum 1
                                                ],
                                            port = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  127,
                                                  predicates.numbers.minimum 1
                                                ],
                                            type = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "silent-host",
                                                    "tep",
                                                    "vep"
                                                  ]
                                                ],
                                            vlan = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4096,
                                                  predicates.numbers.minimum 1
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  static_leafs = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "node_id", "vlan" ],
                                          predicates.records.record
                                          {
                                            deployment_immediacy =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "immediate", "lazy" ]
                                                ],
                                            mode = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "regular",
                                                    "native",
                                                    "untagged"
                                                  ]
                                                ],
                                            node_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4000,
                                                  predicates.numbers.minimum 1
                                                ],
                                            pod_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  255,
                                                  predicates.numbers.minimum 1
                                                ],
                                            vlan = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4096,
                                                  predicates.numbers.minimum 1
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  static_ports = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "vlan" ],
                                          predicates.records.record
                                          {
                                            channel = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            deployment_immediacy =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "immediate", "lazy" ]
                                                ],
                                            fex_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  199,
                                                  predicates.numbers.minimum 101
                                                ],
                                            mode = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "regular",
                                                    "native",
                                                    "untagged"
                                                  ]
                                                ],
                                            module = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 9,
                                                  predicates.numbers.minimum 1
                                                ],
                                            node2_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4000,
                                                  predicates.numbers.minimum 1
                                                ],
                                            node_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4000,
                                                  predicates.numbers.minimum 1
                                                ],
                                            pod_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  255,
                                                  predicates.numbers.minimum 1
                                                ],
                                            port = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  127,
                                                  predicates.numbers.minimum 1
                                                ],
                                            sub_port = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 16,
                                                  predicates.numbers.minimum 1
                                                ],
                                            vlan = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4096,
                                                  predicates.numbers.minimum 1
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  subnets = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required [ "ip" ],
                                          predicates.records.record
                                          {
                                            anycast_mac = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$"
                                                ],
                                            description = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                ],
                                            igmp_querier = predicates.isType
                                                '"Bool",
                                            ip = predicates.isType '"String",
                                            ip_pools = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType 'Record,
                                                    predicates.records.required
                                                    [ "name" ],
                                                    predicates.records.record
                                                    {
                                                      dns_search_suffix =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                      dns_server =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                      dns_suffix =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                      end_ip = predicates.isType
                                                          '"String",
                                                      name = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                      start_ip =
                                                        predicates.isType
                                                          '"String",
                                                      wins_server =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                    }
                                                    {  }
                                                    false
                                                    predicates.never
                                                  ])
                                                ],
                                            nd_ra_prefix = predicates.isType
                                                '"Bool",
                                            nd_ra_prefix_policy =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            next_hop_ip = predicates.isType
                                                '"String",
                                            nlb_group = predicates.isType
                                                '"String",
                                            nlb_mac = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$"
                                                ],
                                            nlb_mode = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "mode-mcast-igmp",
                                                    "mode-uc",
                                                    "mode-mcast-static"
                                                  ]
                                                ],
                                            no_default_gateway =
                                              predicates.isType '"Bool",
                                            private = predicates.isType '"Bool",
                                            public = predicates.isType '"Bool",
                                            shared = predicates.isType '"Bool",
                                            virtual = predicates.isType '"Bool",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  tags = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.strings.pattern
                                          "^[a-zA-Z0-9_.-]{1,64}$"
                                        ])
                                      ],
                                  trust_control_policy = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  vmware_vmm_domains = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "name" ],
                                          predicates.records.record
                                          {
                                            active_uplinks_order =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^(\\d+(,\\d+)*)?$"
                                                ],
                                            allow_promiscuous = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "reject", "accept" ]
                                                ],
                                            delimiter = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[^a-zA-Z0-9;>\"-*`,-.;\\[\\]/\\\\{}:?\\s&<]$"
                                                ],
                                            deployment_immediacy =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "immediate", "lazy" ]
                                                ],
                                            elag = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            forged_transmits = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "reject", "accept" ]
                                                ],
                                            mac_changes = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "reject", "accept" ]
                                                ],
                                            name = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            netflow = predicates.isType '"Bool",
                                            primary_vlan = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4096,
                                                  predicates.numbers.minimum 1
                                                ],
                                            resolution_immediacy =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "immediate",
                                                    "lazy",
                                                    "pre-provision"
                                                  ]
                                                ],
                                            secondary_vlan = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4096,
                                                  predicates.numbers.minimum 1
                                                ],
                                            standby_uplinks = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^(\\d+(,\\d+)*)?$"
                                                ],
                                            u_segmentation = predicates.isType
                                                '"Bool",
                                            vlan = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4096,
                                                  predicates.numbers.minimum 1
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        endpoint_security_groups = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name", "vrf" ],
                                predicates.records.record
                                {
                                  contracts = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.record
                                        {
                                          consumers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                          imported_consumers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                          intra_esgs = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                          masters = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [ "endpoint_security_group" ],
                                                  predicates.records.record
                                                  {
                                                    application_profile =
                                                      predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    endpoint_security_group =
                                                      predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ])
                                              ],
                                          providers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                  description = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                      ],
                                  epg_selectors = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "endpoint_group" ],
                                          predicates.records.record
                                          {
                                            application_profile =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            description = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                ],
                                            endpoint_group = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  expected_state = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.record
                                        {
                                          maximum_critical_faults =
                                            predicates.isType 'Integer,
                                          maximum_major_faults =
                                            predicates.isType 'Integer,
                                          maximum_minor_faults =
                                            predicates.isType 'Integer,
                                          minimum_health = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 100
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                  intra_esg_isolation = predicates.isType
                                      '"Bool",
                                  ip_subnet_selectors = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "value" ],
                                          predicates.records.record
                                          {
                                            description = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                ],
                                            value = predicates.isType '"String",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  preferred_group = predicates.isType '"Bool",
                                  shutdown = predicates.isType '"Bool",
                                  tag_selectors = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "key", "value" ],
                                          predicates.records.record
                                          {
                                            description = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                ],
                                            key = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            operator = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "contains",
                                                    "equals",
                                                    "regex"
                                                  ]
                                                ],
                                            value = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.,:^$\\[\\](){}|+*-]{1,128}$"
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  vrf = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        expected_state = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                maximum_critical_faults = predicates.isType
                                    'Integer,
                                maximum_major_faults = predicates.isType
                                    'Integer,
                                maximum_minor_faults = predicates.isType
                                    'Integer,
                                minimum_health = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        managed = predicates.isType '"Bool",
                        name = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              bridge_domains = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "name", "vrf" ],
                      predicates.records.record
                      {
                        advertise_host_routes = predicates.isType '"Bool",
                        alias = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        arp_flooding = predicates.isType '"Bool",
                        clear_remote_mac_entries = predicates.isType '"Bool",
                        description = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                            ],
                        dhcp_labels = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required
                                [ "dhcp_relay_policy" ],
                                predicates.records.record
                                {
                                  dhcp_option_policy = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  dhcp_relay_policy = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        ep_move_detection = predicates.isType '"Bool",
                        expected_state = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                maximum_critical_faults = predicates.isType
                                    'Integer,
                                maximum_major_faults = predicates.isType
                                    'Integer,
                                maximum_minor_faults = predicates.isType
                                    'Integer,
                                minimum_health = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        igmp_interface_policy = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        igmp_snooping_policy = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        ip_dataplane_learning = predicates.isType '"Bool",
                        l3_multicast = predicates.isType '"Bool",
                        l3outs = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.strings.pattern
                                "^[a-zA-Z0-9_.:-]{1,64}$"
                              ])
                            ],
                        limit_ip_learn_to_subnets = predicates.isType '"Bool",
                        mac = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$"
                            ],
                        multi_destination_flooding = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum
                              [ "bd-flood", "encap-flood", "drop" ]
                            ],
                        name = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        subnets = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "ip" ],
                                predicates.records.record
                                {
                                  description = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                      ],
                                  igmp_querier = predicates.isType '"Bool",
                                  ip = predicates.isType '"String",
                                  nd_ra_prefix = predicates.isType '"Bool",
                                  nd_ra_prefix_policy = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  no_default_gateway = predicates.isType
                                      '"Bool",
                                  primary_ip = predicates.isType '"Bool",
                                  private = predicates.isType '"Bool",
                                  public = predicates.isType '"Bool",
                                  shared = predicates.isType '"Bool",
                                  virtual = predicates.isType '"Bool",
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        unicast_routing = predicates.isType '"Bool",
                        unknown_ipv4_multicast = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "flood", "opt-flood" ]
                            ],
                        unknown_ipv6_multicast = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "flood", "opt-flood" ]
                            ],
                        unknown_unicast = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "flood", "proxy" ]
                            ],
                        virtual_mac = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$"
                            ],
                        vrf = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              contracts = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "name" ],
                      predicates.records.record
                      {
                        alias = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        description = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                            ],
                        expected_state = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                maximum_critical_faults = predicates.isType
                                    'Integer,
                                maximum_major_faults = predicates.isType
                                    'Integer,
                                maximum_minor_faults = predicates.isType
                                    'Integer,
                                minimum_health = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        name = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        qos_class = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum
                              [
                                "level1",
                                "level2",
                                "level3",
                                "level4",
                                "level5",
                                "level6",
                                "unspecified"
                              ]
                            ],
                        scope = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum
                              [
                                "application-profile",
                                "tenant",
                                "context",
                                "global"
                              ]
                            ],
                        subjects = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name" ],
                                predicates.records.record
                                {
                                  alias = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  description = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                      ],
                                  filters = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "filter" ],
                                          predicates.records.record
                                          {
                                            action = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "permit", "deny" ]
                                                ],
                                            filter = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            log = predicates.isType '"Bool",
                                            no_stats = predicates.isType
                                                '"Bool",
                                            "priority" = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "default",
                                                    "level1",
                                                    "level2",
                                                    "level3"
                                                  ]
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  qos_class = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [
                                          "level1",
                                          "level2",
                                          "level3",
                                          "level4",
                                          "level5",
                                          "level6",
                                          "unspecified"
                                        ]
                                      ],
                                  service_graph = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  target_dscp = predicates.anyOf
                                      [
                                        predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.enum
                                          [
                                            "CS0",
                                            "CS1",
                                            "AF11",
                                            "AF12",
                                            "AF13",
                                            "CS2",
                                            "AF21",
                                            "AF22",
                                            "AF23",
                                            "CS3",
                                            "AF31",
                                            "AF32",
                                            "AF33",
                                            "CS4",
                                            "AF41",
                                            "AF42",
                                            "AF43",
                                            "CS5",
                                            "VA",
                                            "EF",
                                            "CS6",
                                            "CS7",
                                            "unspecified"
                                          ]
                                        ],
                                        predicates.allOf
                                        [
                                          predicates.isType 'Integer,
                                          predicates.numbers.maximum 63
                                        ]
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        target_dscp = predicates.anyOf
                            [
                              predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.enum
                                [
                                  "CS0",
                                  "CS1",
                                  "AF11",
                                  "AF12",
                                  "AF13",
                                  "CS2",
                                  "AF21",
                                  "AF22",
                                  "AF23",
                                  "CS3",
                                  "AF31",
                                  "AF32",
                                  "AF33",
                                  "CS4",
                                  "AF41",
                                  "AF42",
                                  "AF43",
                                  "CS5",
                                  "VA",
                                  "EF",
                                  "CS6",
                                  "CS7",
                                  "unspecified"
                                ]
                              ],
                              predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 63
                              ]
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              description = predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.strings.pattern
                    "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                  ],
              expected_state = predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record
                    {
                      maximum_critical_faults = predicates.isType 'Integer,
                      maximum_major_faults = predicates.isType 'Integer,
                      maximum_minor_faults = predicates.isType 'Integer,
                      minimum_health = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 100
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ],
              ext_mgmt_instances = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "name" ],
                      predicates.records.record
                      {
                        expected_state = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                maximum_critical_faults = predicates.isType
                                    'Integer,
                                maximum_major_faults = predicates.isType
                                    'Integer,
                                maximum_minor_faults = predicates.isType
                                    'Integer,
                                minimum_health = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        name = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        oob_contracts = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                consumers = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ])
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        subnets = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.isType '"String")
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              filters = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "name" ],
                      predicates.records.record
                      {
                        alias = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        description = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                            ],
                        entries = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name" ],
                                predicates.records.record
                                {
                                  alias = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  destination_from_port = predicates.anyOf
                                      [
                                        predicates.allOf
                                        [
                                          predicates.isType 'Integer,
                                          predicates.numbers.maximum 65535
                                        ],
                                        predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.enum
                                          [
                                            "unspecified",
                                            "ftpData",
                                            "smtp",
                                            "dns",
                                            "http",
                                            "pop3",
                                            "https",
                                            "rtsp",
                                            "ssh"
                                          ]
                                        ]
                                      ],
                                  destination_to_port = predicates.anyOf
                                      [
                                        predicates.allOf
                                        [
                                          predicates.isType 'Integer,
                                          predicates.numbers.maximum 65535
                                        ],
                                        predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.enum
                                          [
                                            "unspecified",
                                            "ftpData",
                                            "smtp",
                                            "dns",
                                            "http",
                                            "pop3",
                                            "https",
                                            "rtsp",
                                            "ssh"
                                          ]
                                        ]
                                      ],
                                  ethertype = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [
                                          "unspecified",
                                          "ipv4",
                                          "trill",
                                          "arp",
                                          "ipv6",
                                          "mpls_ucast",
                                          "mac_security",
                                          "fcoe",
                                          "ip"
                                        ]
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  protocol = predicates.anyOf
                                      [
                                        predicates.allOf
                                        [
                                          predicates.isType 'Integer,
                                          predicates.numbers.maximum 255
                                        ],
                                        predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.enum
                                          [
                                            "unspecified",
                                            "icmp",
                                            "igmp",
                                            "tcp",
                                            "egp",
                                            "igp",
                                            "udp",
                                            "icmpv6",
                                            "eigrp",
                                            "ospfigp",
                                            "pim",
                                            "l2tp"
                                          ]
                                        ]
                                      ],
                                  source_from_port = predicates.anyOf
                                      [
                                        predicates.allOf
                                        [
                                          predicates.isType 'Integer,
                                          predicates.numbers.maximum 65535
                                        ],
                                        predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.enum
                                          [
                                            "unspecified",
                                            "ftpData",
                                            "smtp",
                                            "dns",
                                            "http",
                                            "pop3",
                                            "https",
                                            "rtsp",
                                            "ssh"
                                          ]
                                        ]
                                      ],
                                  source_to_port = predicates.anyOf
                                      [
                                        predicates.allOf
                                        [
                                          predicates.isType 'Integer,
                                          predicates.numbers.maximum 65535
                                        ],
                                        predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.enum
                                          [
                                            "unspecified",
                                            "ftpData",
                                            "smtp",
                                            "dns",
                                            "http",
                                            "pop3",
                                            "https",
                                            "rtsp",
                                            "ssh"
                                          ]
                                        ]
                                      ],
                                  stateful = predicates.isType '"Bool",
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        name = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              imported_contracts = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required
                      [ "contract", "name", "tenant" ],
                      predicates.records.record
                      {
                        contract = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        name = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        tenant = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              inb_endpoint_groups = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required
                      [ "bridge_domain", "name", "vlan" ],
                      predicates.records.record
                      {
                        bridge_domain = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        contracts = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                consumers = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ])
                                    ],
                                imported_consumers = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ])
                                    ],
                                providers = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ])
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        expected_state = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                maximum_critical_faults = predicates.isType
                                    'Integer,
                                maximum_major_faults = predicates.isType
                                    'Integer,
                                maximum_minor_faults = predicates.isType
                                    'Integer,
                                minimum_health = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        name = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        static_routes = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.isType '"String")
                            ],
                        vlan = predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 4096,
                              predicates.numbers.minimum 1
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              l3outs = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "domain", "name", "vrf" ],
                      predicates.records.record
                      {
                        alias = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        bfd_policy = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        bgp_peers = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required
                                [ "ip", "remote_as" ],
                                predicates.records.record
                                {
                                  admin_state = predicates.isType '"Bool",
                                  allow_self_as = predicates.isType '"Bool",
                                  allowed_self_as_count = predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 10,
                                        predicates.numbers.minimum 1
                                      ],
                                  as_override = predicates.isType '"Bool",
                                  as_propagate = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [
                                          "none",
                                          "no-prepend",
                                          "replace-as",
                                          "dual-as"
                                        ]
                                      ],
                                  bfd = predicates.isType '"Bool",
                                  description = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                      ],
                                  disable_connected_check = predicates.isType
                                      '"Bool",
                                  disable_peer_as_check = predicates.isType
                                      '"Bool",
                                  export_route_control = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  import_route_control = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  ip = predicates.isType '"String",
                                  local_as = predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 4294967295
                                      ],
                                  multicast_address_family = predicates.isType
                                      '"Bool",
                                  next_hop_self = predicates.isType '"Bool",
                                  password = predicates.isType '"String",
                                  peer_prefix_policy = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  remote_as = predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 4294967295
                                      ],
                                  remove_all_private_as = predicates.isType
                                      '"Bool",
                                  remove_private_as = predicates.isType '"Bool",
                                  replace_private_as_with_local_as =
                                    predicates.isType '"Bool",
                                  send_community = predicates.isType '"Bool",
                                  send_ext_community = predicates.isType
                                      '"Bool",
                                  ttl = predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 255,
                                        predicates.numbers.minimum 1
                                      ],
                                  unicast_address_family = predicates.isType
                                      '"Bool",
                                  weight = predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 65535
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        custom_qos_policy = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        dampening_ipv4_route_map = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        dampening_ipv6_route_map = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        default_route_leak_policy = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                always = predicates.isType '"Bool",
                                context_scope = predicates.isType '"Bool",
                                criteria = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "only", "in-addition" ]
                                    ],
                                outside_scope = predicates.isType '"Bool",
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        description = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                            ],
                        domain = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        expected_state = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                learned_prefixes = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "prefix" ],
                                        predicates.records.record
                                        {
                                          administrative_distance =
                                            predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 255,
                                                predicates.numbers.minimum 1
                                              ],
                                          learned_node_ids = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4000,
                                                  predicates.numbers.minimum 1
                                                ])
                                              ],
                                          prefix = predicates.isType '"String",
                                          route_type = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [ "internal", "external" ]
                                              ],
                                          source_protocol = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [ "bgp", "ospf", "eigrp" ]
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                maximum_critical_faults = predicates.isType
                                    'Integer,
                                maximum_major_faults = predicates.isType
                                    'Integer,
                                maximum_minor_faults = predicates.isType
                                    'Integer,
                                minimum_health = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        export_route_control_enforcement = predicates.isType
                            '"Bool",
                        export_route_map = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                contexts = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          action = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [ "permit", "deny" ]
                                              ],
                                          description = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                              ],
                                          match_rule = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          order = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 9
                                              ],
                                          set_rule = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "combinable", "global" ]
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        external_endpoint_groups = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name" ],
                                predicates.records.record
                                {
                                  alias = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  contracts = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.record
                                        {
                                          consumers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                          imported_consumers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                          providers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                  description = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                      ],
                                  expected_state = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.record
                                        {
                                          maximum_critical_faults =
                                            predicates.isType 'Integer,
                                          maximum_major_faults =
                                            predicates.isType 'Integer,
                                          maximum_minor_faults =
                                            predicates.isType 'Integer,
                                          minimum_health = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 100
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  preferred_group = predicates.isType '"Bool",
                                  qos_class = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [
                                          "level1",
                                          "level2",
                                          "level3",
                                          "level4",
                                          "level5",
                                          "level6",
                                          "unspecified"
                                        ]
                                      ],
                                  subnets = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "prefix" ],
                                          predicates.records.record
                                          {
                                            aggregate_export_route_control =
                                              predicates.isType '"Bool",
                                            aggregate_import_route_control =
                                              predicates.isType '"Bool",
                                            aggregate_shared_route_control =
                                              predicates.isType '"Bool",
                                            bgp_route_summarization =
                                              predicates.isType '"Bool",
                                            export_route_control =
                                              predicates.isType '"Bool",
                                            import_route_control =
                                              predicates.isType '"Bool",
                                            import_security = predicates.isType
                                                '"Bool",
                                            name = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            prefix = predicates.isType
                                                '"String",
                                            shared_route_control =
                                              predicates.isType '"Bool",
                                            shared_security = predicates.isType
                                                '"Bool",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  target_dscp = predicates.anyOf
                                      [
                                        predicates.allOf
                                        [
                                          predicates.isType '"String",
                                          predicates.enum
                                          [
                                            "CS0",
                                            "CS1",
                                            "AF11",
                                            "AF12",
                                            "AF13",
                                            "CS2",
                                            "AF21",
                                            "AF22",
                                            "AF23",
                                            "CS3",
                                            "AF31",
                                            "AF32",
                                            "AF33",
                                            "CS4",
                                            "AF41",
                                            "AF42",
                                            "AF43",
                                            "CS5",
                                            "VA",
                                            "EF",
                                            "CS6",
                                            "CS7",
                                            "unspecified"
                                          ]
                                        ],
                                        predicates.allOf
                                        [
                                          predicates.isType 'Integer,
                                          predicates.numbers.maximum 63
                                        ]
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        igmp_interface_policy = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        import_route_control_enforcement = predicates.isType
                            '"Bool",
                        import_route_map = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                contexts = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          action = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [ "permit", "deny" ]
                                              ],
                                          description = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                              ],
                                          match_rule = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          order = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 9
                                              ],
                                          set_rule = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "combinable", "global" ]
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        interleak_route_map = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        l3_multicast_ipv4 = predicates.isType '"Bool",
                        multipod = predicates.isType '"Bool",
                        name = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        node_profiles = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name" ],
                                predicates.records.record
                                {
                                  bgp_peers = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "ip", "remote_as" ],
                                          predicates.records.record
                                          {
                                            admin_state = predicates.isType
                                                '"Bool",
                                            allow_self_as = predicates.isType
                                                '"Bool",
                                            allowed_self_as_count =
                                              predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 10,
                                                  predicates.numbers.minimum 1
                                                ],
                                            as_override = predicates.isType
                                                '"Bool",
                                            as_propagate = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "none",
                                                    "no-prepend",
                                                    "replace-as",
                                                    "dual-as"
                                                  ]
                                                ],
                                            bfd = predicates.isType '"Bool",
                                            description = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                ],
                                            disable_connected_check =
                                              predicates.isType '"Bool",
                                            disable_peer_as_check =
                                              predicates.isType '"Bool",
                                            export_route_control =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            import_route_control =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            ip = predicates.isType '"String",
                                            local_as = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4294967295
                                                ],
                                            multicast_address_family =
                                              predicates.isType '"Bool",
                                            next_hop_self = predicates.isType
                                                '"Bool",
                                            password = predicates.isType
                                                '"String",
                                            peer_prefix_policy =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            remote_as = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4294967295
                                                ],
                                            remove_all_private_as =
                                              predicates.isType '"Bool",
                                            remove_private_as =
                                              predicates.isType '"Bool",
                                            replace_private_as_with_local_as =
                                              predicates.isType '"Bool",
                                            send_community = predicates.isType
                                                '"Bool",
                                            send_ext_community =
                                              predicates.isType '"Bool",
                                            ttl = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  255,
                                                  predicates.numbers.minimum 1
                                                ],
                                            unicast_address_family =
                                              predicates.isType '"Bool",
                                            weight = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  65535
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  interface_profiles = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "name" ],
                                          predicates.records.record
                                          {
                                            bfd_policy = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            custom_qos_policy = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            igmp_interface_policy =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            interfaces = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType 'Record,
                                                    predicates.records.record
                                                    {
                                                      autostate =
                                                        predicates.isType
                                                          '"Bool",
                                                      bgp_peers =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"Array",
                                                            predicates.arrays.arrayOf
                                                            (predicates.allOf
                                                            [
                                                              predicates.isType
                                                              'Record,
                                                              predicates.records.required
                                                              [
                                                                "ip",
                                                                "remote_as"
                                                              ],
                                                              predicates.records.record
                                                              {
                                                                admin_state =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                allow_self_as =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                allowed_self_as_count =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      10,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                as_override =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                as_propagate =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.enum
                                                                      [
                                                                        "none",
                                                                        "no-prepend",
                                                                        "replace-as",
                                                                        "dual-as"
                                                                      ]
                                                                    ],
                                                                bfd =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                description =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.strings.pattern
                                                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                                    ],
                                                                disable_connected_check =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                disable_peer_as_check =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                export_route_control =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.strings.pattern
                                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                    ],
                                                                import_route_control =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.strings.pattern
                                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                    ],
                                                                ip =
                                                                  predicates.isType
                                                                    '"String",
                                                                local_as =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      4294967295
                                                                    ],
                                                                multicast_address_family =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                next_hop_self =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                password =
                                                                  predicates.isType
                                                                    '"String",
                                                                peer_prefix_policy =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.strings.pattern
                                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                    ],
                                                                remote_as =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      4294967295
                                                                    ],
                                                                remove_all_private_as =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                remove_private_as =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                replace_private_as_with_local_as =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                send_community =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                send_ext_community =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                ttl =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      255,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                unicast_address_family =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                weight =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      65535
                                                                    ],
                                                              }
                                                              {  }
                                                              false
                                                              predicates.never
                                                            ])
                                                          ],
                                                      channel = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                      description =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                          ],
                                                      expected_state =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Record,
                                                            predicates.records.record
                                                            {
                                                              bfd_neighbors =
                                                                predicates.allOf
                                                                  [
                                                                    predicates.isType
                                                                    '"Array",
                                                                    predicates.arrays.arrayOf
                                                                    (predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Record,
                                                                      predicates.records.required
                                                                      [ "ip" ],
                                                                      predicates.records.record
                                                                      {
                                                                        ip =
                                                                          predicates.isType
                                                                            '"String",
                                                                      }
                                                                      {  }
                                                                      false
                                                                      predicates.never
                                                                    ])
                                                                  ],
                                                              ospf_neighbors =
                                                                predicates.allOf
                                                                  [
                                                                    predicates.isType
                                                                    '"Array",
                                                                    predicates.arrays.arrayOf
                                                                    (predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Record,
                                                                      predicates.records.required
                                                                      [ "ip" ],
                                                                      predicates.records.record
                                                                      {
                                                                        ip =
                                                                          predicates.isType
                                                                            '"String",
                                                                        state =
                                                                          predicates.allOf
                                                                            [
                                                                              predicates.isType
                                                                              '"String",
                                                                              predicates.enum
                                                                              [
                                                                                "full",
                                                                                "down"
                                                                              ]
                                                                            ],
                                                                      }
                                                                      {  }
                                                                      false
                                                                      predicates.never
                                                                    ])
                                                                  ],
                                                            }
                                                            {  }
                                                            false
                                                            predicates.never
                                                          ],
                                                      floating_svi =
                                                        predicates.isType
                                                          '"Bool",
                                                      ip = predicates.isType
                                                          '"String",
                                                      ip_a = predicates.isType
                                                          '"String",
                                                      ip_b = predicates.isType
                                                          '"String",
                                                      ip_shared =
                                                        predicates.isType
                                                          '"String",
                                                      mac = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$"
                                                          ],
                                                      mode = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.enum
                                                            [
                                                              "regular",
                                                              "native",
                                                              "untagged"
                                                            ]
                                                          ],
                                                      module = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            9,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                      mtu = predicates.anyOf
                                                          [
                                                            predicates.allOf
                                                            [
                                                              predicates.isType
                                                              '"String",
                                                              predicates.enum
                                                              [ "inherit" ]
                                                            ],
                                                            predicates.allOf
                                                            [
                                                              predicates.isType
                                                              'Integer,
                                                              predicates.numbers.maximum
                                                              9216,
                                                              predicates.numbers.minimum
                                                              576
                                                            ]
                                                          ],
                                                      multipod_direct =
                                                        predicates.isType
                                                          '"Bool",
                                                      node2_id =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            4000,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                      node_id = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            4000,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                      paths = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"Array",
                                                            predicates.arrays.arrayOf
                                                            (predicates.allOf
                                                            [
                                                              predicates.isType
                                                              'Record,
                                                              predicates.records.required
                                                              [ "floating_ip" ],
                                                              predicates.records.record
                                                              {
                                                                elag =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.strings.pattern
                                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                    ],
                                                                floating_ip =
                                                                  predicates.isType
                                                                    '"String",
                                                                physical_domain =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.strings.pattern
                                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                    ],
                                                                vmware_vmm_domain =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.strings.pattern
                                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                    ],
                                                              }
                                                              {  }
                                                              false
                                                              predicates.never
                                                            ])
                                                          ],
                                                      pod_id = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            255,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                      port = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            127,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                      svi = predicates.isType
                                                          '"Bool",
                                                      vlan = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            4096,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                    }
                                                    {  }
                                                    false
                                                    predicates.never
                                                  ])
                                                ],
                                            name = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            ospf = predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.record
                                                  {
                                                    auth_key = predicates.isType
                                                        '"String",
                                                    auth_key_id =
                                                      predicates.allOf
                                                        [
                                                          predicates.isType
                                                          'Integer,
                                                          predicates.numbers.maximum
                                                          255,
                                                          predicates.numbers.minimum
                                                          1
                                                        ],
                                                    auth_type = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.enum
                                                          [
                                                            "none",
                                                            "simple",
                                                            "md5"
                                                          ]
                                                        ],
                                                    ospf_interface_profile_name =
                                                      predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    policy = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ],
                                            pim_policy = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            qos_class = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "level1",
                                                    "level2",
                                                    "level3",
                                                    "level4",
                                                    "level5",
                                                    "level6",
                                                    "unspecified"
                                                  ]
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  nodes = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "node_id", "router_id" ],
                                          predicates.records.record
                                          {
                                            loopback = predicates.isType
                                                '"String",
                                            node_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4000,
                                                  predicates.numbers.minimum 1
                                                ],
                                            pod_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  255,
                                                  predicates.numbers.minimum 1
                                                ],
                                            router_id = predicates.isType
                                                '"String",
                                            router_id_as_loopback =
                                              predicates.isType '"Bool",
                                            static_routes = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType 'Record,
                                                    predicates.records.required
                                                    [ "prefix" ],
                                                    predicates.records.record
                                                    {
                                                      bfd = predicates.isType
                                                          '"Bool",
                                                      description =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                          ],
                                                      next_hops =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"Array",
                                                            predicates.arrays.arrayOf
                                                            (predicates.allOf
                                                            [
                                                              predicates.isType
                                                              'Record,
                                                              predicates.records.required
                                                              [ "ip" ],
                                                              predicates.records.record
                                                              {
                                                                ip =
                                                                  predicates.isType
                                                                    '"String",
                                                                preference =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      255,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                type =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.enum
                                                                      [
                                                                        "prefix",
                                                                        "none"
                                                                      ]
                                                                    ],
                                                              }
                                                              {  }
                                                              false
                                                              predicates.never
                                                            ])
                                                          ],
                                                      preference =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            255,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                      prefix = predicates.isType
                                                          '"String",
                                                    }
                                                    {  }
                                                    false
                                                    predicates.never
                                                  ])
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        nodes = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required
                                [ "node_id", "router_id" ],
                                predicates.records.record
                                {
                                  interfaces = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.record
                                          {
                                            autostate = predicates.isType
                                                '"Bool",
                                            bgp_peers = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType 'Record,
                                                    predicates.records.required
                                                    [ "ip", "remote_as" ],
                                                    predicates.records.record
                                                    {
                                                      admin_state =
                                                        predicates.isType
                                                          '"Bool",
                                                      allow_self_as =
                                                        predicates.isType
                                                          '"Bool",
                                                      allowed_self_as_count =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            10,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                      as_override =
                                                        predicates.isType
                                                          '"Bool",
                                                      as_propagate =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.enum
                                                            [
                                                              "none",
                                                              "no-prepend",
                                                              "replace-as",
                                                              "dual-as"
                                                            ]
                                                          ],
                                                      bfd = predicates.isType
                                                          '"Bool",
                                                      description =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                          ],
                                                      disable_connected_check =
                                                        predicates.isType
                                                          '"Bool",
                                                      disable_peer_as_check =
                                                        predicates.isType
                                                          '"Bool",
                                                      export_route_control =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                      import_route_control =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                      ip = predicates.isType
                                                          '"String",
                                                      local_as =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            4294967295
                                                          ],
                                                      multicast_address_family =
                                                        predicates.isType
                                                          '"Bool",
                                                      next_hop_self =
                                                        predicates.isType
                                                          '"Bool",
                                                      password =
                                                        predicates.isType
                                                          '"String",
                                                      peer_prefix_policy =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                      remote_as =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            4294967295
                                                          ],
                                                      remove_all_private_as =
                                                        predicates.isType
                                                          '"Bool",
                                                      remove_private_as =
                                                        predicates.isType
                                                          '"Bool",
                                                      replace_private_as_with_local_as =
                                                        predicates.isType
                                                          '"Bool",
                                                      send_community =
                                                        predicates.isType
                                                          '"Bool",
                                                      send_ext_community =
                                                        predicates.isType
                                                          '"Bool",
                                                      ttl = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            255,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                      unicast_address_family =
                                                        predicates.isType
                                                          '"Bool",
                                                      weight = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            65535
                                                          ],
                                                    }
                                                    {  }
                                                    false
                                                    predicates.never
                                                  ])
                                                ],
                                            channel = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            description = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                ],
                                            expected_state = predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.record
                                                  {
                                                    bfd_neighbors =
                                                      predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"Array",
                                                          predicates.arrays.arrayOf
                                                          (predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Record,
                                                            predicates.records.required
                                                            [ "ip" ],
                                                            predicates.records.record
                                                            {
                                                              ip =
                                                                predicates.isType
                                                                  '"String",
                                                            }
                                                            {  }
                                                            false
                                                            predicates.never
                                                          ])
                                                        ],
                                                    ospf_neighbors =
                                                      predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"Array",
                                                          predicates.arrays.arrayOf
                                                          (predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Record,
                                                            predicates.records.required
                                                            [ "ip" ],
                                                            predicates.records.record
                                                            {
                                                              ip =
                                                                predicates.isType
                                                                  '"String",
                                                              state =
                                                                predicates.allOf
                                                                  [
                                                                    predicates.isType
                                                                    '"String",
                                                                    predicates.enum
                                                                    [
                                                                      "full",
                                                                      "down"
                                                                    ]
                                                                  ],
                                                            }
                                                            {  }
                                                            false
                                                            predicates.never
                                                          ])
                                                        ],
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ],
                                            floating_svi = predicates.isType
                                                '"Bool",
                                            ip = predicates.isType '"String",
                                            ip_a = predicates.isType '"String",
                                            ip_b = predicates.isType '"String",
                                            ip_shared = predicates.isType
                                                '"String",
                                            mac = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$"
                                                ],
                                            mode = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "regular",
                                                    "native",
                                                    "untagged"
                                                  ]
                                                ],
                                            module = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 9,
                                                  predicates.numbers.minimum 1
                                                ],
                                            mtu = predicates.anyOf
                                                [
                                                  predicates.allOf
                                                  [
                                                    predicates.isType '"String",
                                                    predicates.enum
                                                    [ "inherit" ]
                                                  ],
                                                  predicates.allOf
                                                  [
                                                    predicates.isType 'Integer,
                                                    predicates.numbers.maximum
                                                    9216,
                                                    predicates.numbers.minimum
                                                    576
                                                  ]
                                                ],
                                            multipod_direct = predicates.isType
                                                '"Bool",
                                            node2_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4000,
                                                  predicates.numbers.minimum 1
                                                ],
                                            node_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4000,
                                                  predicates.numbers.minimum 1
                                                ],
                                            paths = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType 'Record,
                                                    predicates.records.required
                                                    [ "floating_ip" ],
                                                    predicates.records.record
                                                    {
                                                      elag = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                      floating_ip =
                                                        predicates.isType
                                                          '"String",
                                                      physical_domain =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                      vmware_vmm_domain =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                    }
                                                    {  }
                                                    false
                                                    predicates.never
                                                  ])
                                                ],
                                            port = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  127,
                                                  predicates.numbers.minimum 1
                                                ],
                                            svi = predicates.isType '"Bool",
                                            vlan = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4096,
                                                  predicates.numbers.minimum 1
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  loopback = predicates.isType '"String",
                                  node_id = predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 4000,
                                        predicates.numbers.minimum 1
                                      ],
                                  pod_id = predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 255,
                                        predicates.numbers.minimum 1
                                      ],
                                  router_id = predicates.isType '"String",
                                  router_id_as_loopback = predicates.isType
                                      '"Bool",
                                  static_routes = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "prefix" ],
                                          predicates.records.record
                                          {
                                            bfd = predicates.isType '"Bool",
                                            description = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                ],
                                            next_hops = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType 'Record,
                                                    predicates.records.required
                                                    [ "ip" ],
                                                    predicates.records.record
                                                    {
                                                      ip = predicates.isType
                                                          '"String",
                                                      preference =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            255,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                      type = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.enum
                                                            [ "prefix", "none" ]
                                                          ],
                                                    }
                                                    {  }
                                                    false
                                                    predicates.never
                                                  ])
                                                ],
                                            preference = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  255,
                                                  predicates.numbers.minimum 1
                                                ],
                                            prefix = predicates.isType
                                                '"String",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        ospf = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "area" ],
                              predicates.records.record
                              {
                                area = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 4294967295
                                      ],
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum [ "backbone" ]
                                      ],
                                      predicates.isType '"String"
                                    ],
                                area_cost = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 16777215,
                                      predicates.numbers.minimum 1
                                    ],
                                area_type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [ "regular", "stub", "nssa" ]
                                    ],
                                auth_key = predicates.isType '"String",
                                auth_key_id = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 255,
                                      predicates.numbers.minimum 1
                                    ],
                                auth_type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [ "none", "simple", "md5" ]
                                    ],
                                ospf_interface_profile_name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                policy = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        pim_policy = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        qos_class = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum
                              [
                                "level1",
                                "level2",
                                "level3",
                                "level4",
                                "level5",
                                "level6",
                                "unspecified"
                              ]
                            ],
                        redistribution_route_maps = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "route_map" ],
                                predicates.records.record
                                {
                                  route_map = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  source = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [ "direct", "attached-host", "static" ]
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        remote_leaf = predicates.isType '"Bool",
                        target_dscp = predicates.anyOf
                            [
                              predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.enum
                                [
                                  "CS0",
                                  "CS1",
                                  "AF11",
                                  "AF12",
                                  "AF13",
                                  "CS2",
                                  "AF21",
                                  "AF22",
                                  "AF23",
                                  "CS3",
                                  "AF31",
                                  "AF32",
                                  "AF33",
                                  "CS4",
                                  "AF41",
                                  "AF42",
                                  "AF43",
                                  "CS5",
                                  "VA",
                                  "EF",
                                  "CS6",
                                  "CS7",
                                  "unspecified"
                                ]
                              ],
                              predicates.allOf
                              [
                                predicates.isType 'Integer,
                                predicates.numbers.maximum 63
                              ]
                            ],
                        vrf = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              managed = predicates.isType '"Bool",
              name = predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                  ],
              oob_contracts = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "name" ],
                      predicates.records.record
                      {
                        alias = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        description = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                            ],
                        expected_state = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                maximum_critical_faults = predicates.isType
                                    'Integer,
                                maximum_major_faults = predicates.isType
                                    'Integer,
                                maximum_minor_faults = predicates.isType
                                    'Integer,
                                minimum_health = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        name = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        scope = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum
                              [
                                "application-profile",
                                "tenant",
                                "context",
                                "global"
                              ]
                            ],
                        subjects = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name" ],
                                predicates.records.record
                                {
                                  alias = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  description = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                      ],
                                  filters = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "filter" ],
                                          predicates.records.record
                                          {
                                            filter = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  service_graph = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              oob_endpoint_groups = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "name" ],
                      predicates.records.record
                      {
                        expected_state = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                maximum_critical_faults = predicates.isType
                                    'Integer,
                                maximum_major_faults = predicates.isType
                                    'Integer,
                                maximum_minor_faults = predicates.isType
                                    'Integer,
                                minimum_health = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        name = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        oob_contracts = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                providers = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ])
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        static_routes = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.isType '"String")
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              policies = predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record
                    {
                      bfd_interface_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                detection_multiplier = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 50,
                                      predicates.numbers.minimum 1
                                    ],
                                echo_admin_state = predicates.isType '"Bool",
                                echo_rx_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 999,
                                      predicates.numbers.minimum 50
                                    ],
                                min_rx_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 999,
                                      predicates.numbers.minimum 50
                                    ],
                                min_tx_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 999,
                                      predicates.numbers.minimum 50
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                subinterface_optimization = predicates.isType
                                    '"Bool",
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      bfd_multihop_node_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                detection_multiplier = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 50,
                                      predicates.numbers.minimum 1
                                    ],
                                min_rx_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 999,
                                      predicates.numbers.minimum 250
                                    ],
                                min_tx_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 999,
                                      predicates.numbers.minimum 250
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      bgp_address_family_context_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                ebgp_distance = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 255,
                                      predicates.numbers.minimum 1
                                    ],
                                ebgp_max_ecmp = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 64,
                                      predicates.numbers.minimum 1
                                    ],
                                enable_host_route_leak = predicates.isType
                                    '"Bool",
                                ibgp_distance = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 255,
                                      predicates.numbers.minimum 1
                                    ],
                                ibgp_max_ecmp = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 64,
                                      predicates.numbers.minimum 1
                                    ],
                                local_distance = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 255,
                                      predicates.numbers.minimum 1
                                    ],
                                local_max_ecmp = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 16
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      bgp_best_path_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                control_type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [ "default", "multi-path-relax" ]
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      bgp_peer_prefix_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                action = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [ "reject", "log", "shut", "restart" ]
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                max_prefixes = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 300000,
                                      predicates.numbers.minimum 1
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                restart_time = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535,
                                      predicates.numbers.minimum 1
                                    ],
                                threshold = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100,
                                      predicates.numbers.minimum 1
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      bgp_timer_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                graceful_restart_helper = predicates.isType
                                    '"Bool",
                                hold_interval = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 3600,
                                        predicates.numbers.minimum 3
                                      ],
                                      predicates.isType 'Integer
                                    ],
                                keepalive_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 3600
                                    ],
                                maximum_as_limit = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 2000
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                stale_interval = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 3600,
                                        predicates.numbers.minimum 1
                                      ],
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum [ "default" ]
                                      ]
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      dhcp_option_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                options = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          data = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,64}$"
                                              ],
                                          id = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 255,
                                                predicates.numbers.minimum 1
                                              ],
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      dhcp_relay_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                providers = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "ip" ],
                                        predicates.records.record
                                        {
                                          application_profile = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          endpoint_group = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          external_endpoint_group =
                                            predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          ip = predicates.isType '"String",
                                          l3out = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          tenant = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          type = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [ "epg", "external_epg" ]
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      igmp_interface_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                allow_v3_asm = predicates.isType '"Bool",
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                expected_state = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.record
                                      {
                                        maximum_critical_faults =
                                          predicates.isType 'Integer,
                                        maximum_major_faults = predicates.isType
                                            'Integer,
                                        maximum_minor_faults = predicates.isType
                                            'Integer,
                                        minimum_health = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 100
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                fast_leave = predicates.isType '"Bool",
                                grp_timeout = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535,
                                      predicates.numbers.minimum 3
                                    ],
                                last_member_count = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 5,
                                      predicates.numbers.minimum 1
                                    ],
                                last_member_response_time = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 25,
                                      predicates.numbers.minimum 1
                                    ],
                                max_mcast_entries = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 4294967295,
                                        predicates.numbers.minimum 1
                                      ],
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum [ "unlimited" ]
                                      ]
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                querier_timeout = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 255,
                                      predicates.numbers.minimum 1
                                    ],
                                query_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 18000,
                                      predicates.numbers.minimum 1
                                    ],
                                query_response_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 25,
                                      predicates.numbers.minimum 1
                                    ],
                                report_link_local_groups = predicates.isType
                                    '"Bool",
                                report_policy_multicast_route_map =
                                  predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                reserved_mcast_entries = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 4294967295
                                      ],
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum [ "undefined" ]
                                      ]
                                    ],
                                robustness_variable = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 7,
                                      predicates.numbers.minimum 1
                                    ],
                                startup_query_count = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 10,
                                      predicates.numbers.minimum 1
                                    ],
                                startup_query_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 18000,
                                      predicates.numbers.minimum 1
                                    ],
                                state_limit_multicast_route_map =
                                  predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                static_report_multicast_route_map =
                                  predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                version = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "v2", "v3" ]
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      igmp_snooping_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                admin_state = predicates.isType '"Bool",
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                expected_state = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.record
                                      {
                                        maximum_critical_faults =
                                          predicates.isType 'Integer,
                                        maximum_major_faults = predicates.isType
                                            'Integer,
                                        maximum_minor_faults = predicates.isType
                                            'Integer,
                                        minimum_health = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 100
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                fast_leave = predicates.isType '"Bool",
                                last_member_query_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 25,
                                      predicates.numbers.minimum 1
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                querier = predicates.isType '"Bool",
                                query_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 18000,
                                      predicates.numbers.minimum 1
                                    ],
                                query_response_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 25,
                                      predicates.numbers.minimum 1
                                    ],
                                start_query_count = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 10,
                                      predicates.numbers.minimum 1
                                    ],
                                start_query_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 18000,
                                      predicates.numbers.minimum 1
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      ip_sla_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                expected_state = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.record
                                      {
                                        maximum_critical_faults =
                                          predicates.isType 'Integer,
                                        maximum_major_faults = predicates.isType
                                            'Integer,
                                        maximum_minor_faults = predicates.isType
                                            'Integer,
                                        minimum_health = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 100
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                frequency = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 300,
                                      predicates.numbers.minimum 1
                                    ],
                                multiplier = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100,
                                      predicates.numbers.minimum 1
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                port = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535,
                                      predicates.numbers.minimum 1
                                    ],
                                sla_type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [ "icmp", "tcp", "l2ping" ]
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      match_rules = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                community_terms = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          description = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                              ],
                                          factors = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [ "community" ],
                                                  predicates.records.record
                                                  {
                                                    community =
                                                      predicates.isType
                                                        '"String",
                                                    description =
                                                      predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                        ],
                                                    scope = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.enum
                                                          [
                                                            "transitive",
                                                            "non-transitive"
                                                          ]
                                                        ],
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ])
                                              ],
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                prefixes = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "ip" ],
                                        predicates.records.record
                                        {
                                          aggregate = predicates.isType '"Bool",
                                          description = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                              ],
                                          from_length = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 128
                                              ],
                                          ip = predicates.isType '"String",
                                          to_length = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 128
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                regex_community_terms = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "name", "regex" ],
                                        predicates.records.record
                                        {
                                          description = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                              ],
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          regex = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.maxLength 64
                                              ],
                                          type = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [ "regular", "extended" ]
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      mpls_custom_qos_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                alias = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                egress_rules = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "dscp_from", "dscp_to" ],
                                        predicates.records.record
                                        {
                                          cos_target = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "unspecified" ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 7
                                                ]
                                              ],
                                          dscp_from = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "unspecified",
                                                    "CS0",
                                                    "CS1",
                                                    "AF11",
                                                    "AF12",
                                                    "AF13",
                                                    "CS2",
                                                    "AF21",
                                                    "AF22",
                                                    "AF23",
                                                    "CS3",
                                                    "AF31",
                                                    "AF32",
                                                    "AF33",
                                                    "CS4",
                                                    "AF41",
                                                    "AF42",
                                                    "AF43",
                                                    "CS5",
                                                    "VA",
                                                    "EF",
                                                    "CS6",
                                                    "CS7"
                                                  ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 63
                                                ]
                                              ],
                                          dscp_to = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "unspecified",
                                                    "CS0",
                                                    "CS1",
                                                    "AF11",
                                                    "AF12",
                                                    "AF13",
                                                    "CS2",
                                                    "AF21",
                                                    "AF22",
                                                    "AF23",
                                                    "CS3",
                                                    "AF31",
                                                    "AF32",
                                                    "AF33",
                                                    "CS4",
                                                    "AF41",
                                                    "AF42",
                                                    "AF43",
                                                    "CS5",
                                                    "VA",
                                                    "EF",
                                                    "CS6",
                                                    "CS7"
                                                  ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 63
                                                ]
                                              ],
                                          exp_target = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "unspecified" ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 7
                                                ]
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                ingress_rules = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "exp_from", "exp_to" ],
                                        predicates.records.record
                                        {
                                          cos_target = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "unspecified" ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 7
                                                ]
                                              ],
                                          dscp_target = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "unspecified",
                                                    "CS0",
                                                    "CS1",
                                                    "AF11",
                                                    "AF12",
                                                    "AF13",
                                                    "CS2",
                                                    "AF21",
                                                    "AF22",
                                                    "AF23",
                                                    "CS3",
                                                    "AF31",
                                                    "AF32",
                                                    "AF33",
                                                    "CS4",
                                                    "AF41",
                                                    "AF42",
                                                    "AF43",
                                                    "CS5",
                                                    "VA",
                                                    "EF",
                                                    "CS6",
                                                    "CS7"
                                                  ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 63
                                                ]
                                              ],
                                          exp_from = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "unspecified" ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 7
                                                ]
                                              ],
                                          exp_to = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "unspecified" ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 7
                                                ]
                                              ],
                                          "priority" = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [
                                                  "unspecified",
                                                  "level1",
                                                  "level2",
                                                  "level3",
                                                  "level4",
                                                  "level5",
                                                  "level6",
                                                  "level7"
                                                ]
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      multicast_route_maps = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                entries = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "order" ],
                                        predicates.records.record
                                        {
                                          action = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [ "permit", "deny" ]
                                              ],
                                          group_ip = predicates.isType
                                              '"String",
                                          order = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 9999
                                              ],
                                          rp_ip = predicates.isType '"String",
                                          source_ip = predicates.isType
                                              '"String",
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                expected_state = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.record
                                      {
                                        maximum_critical_faults =
                                          predicates.isType 'Integer,
                                        maximum_major_faults = predicates.isType
                                            'Integer,
                                        maximum_minor_faults = predicates.isType
                                            'Integer,
                                        minimum_health = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 100
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      nd_ra_prefix_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                auto_configuration = predicates.isType '"Bool",
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                on_link = predicates.isType '"Bool",
                                preferred_lifetime = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 4294967295
                                    ],
                                router_address = predicates.isType '"Bool",
                                valid_lifetime = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 4294967295
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      ospf_interface_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                advertise_subnet = predicates.isType '"Bool",
                                bfd = predicates.isType '"Bool",
                                cost = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535
                                    ],
                                dead_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535,
                                      predicates.numbers.minimum 1
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                hello_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535,
                                      predicates.numbers.minimum 1
                                    ],
                                lsa_retransmit_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535,
                                      predicates.numbers.minimum 1
                                    ],
                                lsa_transmit_delay = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 450,
                                      predicates.numbers.minimum 1
                                    ],
                                mtu_ignore = predicates.isType '"Bool",
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                network_type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "p2p", "bcast" ]
                                    ],
                                passive_interface = predicates.isType '"Bool",
                                "priority" = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 255
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      ospf_timer_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                distance = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 255,
                                      predicates.numbers.minimum 1
                                    ],
                                graceful_restart = predicates.isType '"Bool",
                                lsa_arrival_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 600000,
                                      predicates.numbers.minimum 1
                                    ],
                                lsa_group_pacing_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 1800,
                                      predicates.numbers.minimum 1
                                    ],
                                lsa_hold_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 30000,
                                      predicates.numbers.minimum 1
                                    ],
                                lsa_max_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 30000,
                                      predicates.numbers.minimum 1
                                    ],
                                lsa_start_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 5000,
                                      predicates.numbers.minimum 1
                                    ],
                                max_ecmp = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 64,
                                      predicates.numbers.minimum 1
                                    ],
                                max_lsa_action = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "reject", "log" ]
                                    ],
                                max_lsa_num = predicates.isType 'Integer,
                                max_lsa_reset_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 1800,
                                      predicates.numbers.minimum 1
                                    ],
                                max_lsa_sleep_count = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 30000,
                                      predicates.numbers.minimum 50
                                    ],
                                max_lsa_sleep_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 30000,
                                      predicates.numbers.minimum 50
                                    ],
                                max_lsa_threshold = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100,
                                      predicates.numbers.minimum 1
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                prefix_suppression = predicates.isType '"Bool",
                                reference_bandwidth = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 4000000,
                                      predicates.numbers.minimum 1
                                    ],
                                router_id_lookup = predicates.isType '"Bool",
                                spf_hold_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 600000,
                                      predicates.numbers.minimum 1
                                    ],
                                spf_init_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 600000,
                                      predicates.numbers.minimum 1
                                    ],
                                spf_max_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 600000,
                                      predicates.numbers.minimum 1
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      pim_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                auth_key = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.maxLength 130,
                                      predicates.strings.minLength 1
                                    ],
                                auth_type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "none", "ah-md5" ]
                                    ],
                                designated_router_delay = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535,
                                      predicates.numbers.minimum 1
                                    ],
                                designated_router_priority = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 4294967295,
                                      predicates.numbers.minimum 1
                                    ],
                                hello_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 18724286,
                                      predicates.numbers.minimum 1
                                    ],
                                join_prune_filter_policy_in = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                join_prune_filter_policy_out = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                join_prune_interval = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65520,
                                      predicates.numbers.minimum 60
                                    ],
                                mcast_dom_boundary = predicates.isType '"Bool",
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                neighbor_filter_policy = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                passive = predicates.isType '"Bool",
                                strict_rfc = predicates.isType '"Bool",
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      qos = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                alias = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                dot1p_classifiers = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "dot1p_from", "dot1p_to" ],
                                        predicates.records.record
                                        {
                                          cos_target = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "unspecified" ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 7
                                                ]
                                              ],
                                          dot1p_from = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "unspecified" ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 7
                                                ]
                                              ],
                                          dot1p_to = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "unspecified" ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 7
                                                ]
                                              ],
                                          dscp_target = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "unspecified",
                                                    "CS0",
                                                    "CS1",
                                                    "AF11",
                                                    "AF12",
                                                    "AF13",
                                                    "CS2",
                                                    "AF21",
                                                    "AF22",
                                                    "AF23",
                                                    "CS3",
                                                    "AF31",
                                                    "AF32",
                                                    "AF33",
                                                    "CS4",
                                                    "AF41",
                                                    "AF42",
                                                    "AF43",
                                                    "CS5",
                                                    "VA",
                                                    "EF",
                                                    "CS6",
                                                    "CS7"
                                                  ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 63
                                                ]
                                              ],
                                          "priority" = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [
                                                  "unspecified",
                                                  "level1",
                                                  "level2",
                                                  "level3",
                                                  "level4",
                                                  "level5",
                                                  "level6",
                                                  "level7"
                                                ]
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                dscp_priority_maps = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "dscp_from", "dscp_to" ],
                                        predicates.records.record
                                        {
                                          cos_target = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "unspecified" ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 7
                                                ]
                                              ],
                                          dscp_from = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "unspecified",
                                                    "CS0",
                                                    "CS1",
                                                    "AF11",
                                                    "AF12",
                                                    "AF13",
                                                    "CS2",
                                                    "AF21",
                                                    "AF22",
                                                    "AF23",
                                                    "CS3",
                                                    "AF31",
                                                    "AF32",
                                                    "AF33",
                                                    "CS4",
                                                    "AF41",
                                                    "AF42",
                                                    "AF43",
                                                    "CS5",
                                                    "VA",
                                                    "EF",
                                                    "CS6",
                                                    "CS7"
                                                  ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 63
                                                ]
                                              ],
                                          dscp_target = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "unspecified",
                                                    "CS0",
                                                    "CS1",
                                                    "AF11",
                                                    "AF12",
                                                    "AF13",
                                                    "CS2",
                                                    "AF21",
                                                    "AF22",
                                                    "AF23",
                                                    "CS3",
                                                    "AF31",
                                                    "AF32",
                                                    "AF33",
                                                    "CS4",
                                                    "AF41",
                                                    "AF42",
                                                    "AF43",
                                                    "CS5",
                                                    "VA",
                                                    "EF",
                                                    "CS6",
                                                    "CS7"
                                                  ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 63
                                                ]
                                              ],
                                          dscp_to = predicates.anyOf
                                              [
                                                predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "unspecified",
                                                    "CS0",
                                                    "CS1",
                                                    "AF11",
                                                    "AF12",
                                                    "AF13",
                                                    "CS2",
                                                    "AF21",
                                                    "AF22",
                                                    "AF23",
                                                    "CS3",
                                                    "AF31",
                                                    "AF32",
                                                    "AF33",
                                                    "CS4",
                                                    "AF41",
                                                    "AF42",
                                                    "AF43",
                                                    "CS5",
                                                    "VA",
                                                    "EF",
                                                    "CS6",
                                                    "CS7"
                                                  ]
                                                ],
                                                predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 63
                                                ]
                                              ],
                                          "priority" = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [
                                                  "unspecified",
                                                  "level1",
                                                  "level2",
                                                  "level3",
                                                  "level4",
                                                  "level5",
                                                  "level6",
                                                  "level7"
                                                ]
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      route_control_route_maps = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                contexts = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          action = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [ "deny", "permit" ]
                                              ],
                                          description = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                              ],
                                          match_rules = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.isType '"String")
                                              ],
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          order = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 9
                                              ],
                                          set_rule = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      route_tag_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                tag = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 4294967295
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      set_rules = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                additional_communities = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "community" ],
                                        predicates.records.record
                                        {
                                          community = predicates.isType
                                              '"String",
                                          description = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                community = predicates.isType '"String",
                                community_mode = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "append", "replace" ]
                                    ],
                                dampening = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.record
                                      {
                                        half_life = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 60,
                                              predicates.numbers.minimum 1
                                            ],
                                        max_suppress_time = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 255,
                                              predicates.numbers.minimum 1
                                            ],
                                        reuse_limit = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 20000,
                                              predicates.numbers.minimum 1
                                            ],
                                        suppress_limit = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 20000,
                                              predicates.numbers.minimum 1
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                metric = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 4294967295
                                    ],
                                metric_type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [ "ospf-type1", "ospf-type2" ]
                                    ],
                                multipath = predicates.isType '"Bool",
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                next_hop = predicates.isType '"String",
                                next_hop_propagation = predicates.isType
                                    '"Bool",
                                preference = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 4294967295
                                    ],
                                set_as_path = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.record
                                      {
                                        asn = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 65535
                                            ],
                                        count = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 10
                                            ],
                                        criteria = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.enum
                                              [ "prepend", "prepend-last-as" ]
                                            ],
                                        order = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 31
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                tag = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 4294967295
                                    ],
                                weight = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      span = predicates.allOf
                          [
                            predicates.isType 'Record,
                            predicates.records.record
                            {
                              destination_groups = predicates.allOf
                                  [
                                    predicates.isType '"Array",
                                    predicates.arrays.arrayOf
                                    (predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.required
                                      [
                                        "application_profile",
                                        "endpoint_group",
                                        "ip",
                                        "name",
                                        "source_prefix"
                                      ],
                                      predicates.records.record
                                      {
                                        application_profile = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                        description = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                            ],
                                        dscp = predicates.anyOf
                                            [
                                              predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.enum
                                                [
                                                  "CS0",
                                                  "CS1",
                                                  "AF11",
                                                  "AF12",
                                                  "AF13",
                                                  "CS2",
                                                  "AF21",
                                                  "AF22",
                                                  "AF23",
                                                  "CS3",
                                                  "AF31",
                                                  "AF32",
                                                  "AF33",
                                                  "CS4",
                                                  "AF41",
                                                  "AF42",
                                                  "AF43",
                                                  "CS5",
                                                  "VA",
                                                  "EF",
                                                  "CS6",
                                                  "CS7"
                                                ]
                                              ],
                                              predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 63
                                              ]
                                            ],
                                        endpoint_group = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                        enforce_version = predicates.isType
                                            '"Bool",
                                        expected_state = predicates.allOf
                                            [
                                              predicates.isType 'Record,
                                              predicates.records.record
                                              {
                                                maximum_critical_faults =
                                                  predicates.isType 'Integer,
                                                maximum_major_faults =
                                                  predicates.isType 'Integer,
                                                maximum_minor_faults =
                                                  predicates.isType 'Integer,
                                                minimum_health =
                                                  predicates.allOf
                                                    [
                                                      predicates.isType
                                                      'Integer,
                                                      predicates.numbers.maximum
                                                      100
                                                    ],
                                              }
                                              {  }
                                              false
                                              predicates.never
                                            ],
                                        flow_id = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 1023,
                                              predicates.numbers.minimum 1
                                            ],
                                        ip = predicates.isType '"String",
                                        mtu = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 9216,
                                              predicates.numbers.minimum 64
                                            ],
                                        name = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                        source_prefix = predicates.isType
                                            '"String",
                                        tenant = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                        ttl = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 255,
                                              predicates.numbers.minimum 1
                                            ],
                                        version = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 2,
                                              predicates.numbers.minimum 1
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ])
                                  ],
                              source_groups = predicates.allOf
                                  [
                                    predicates.isType '"Array",
                                    predicates.arrays.arrayOf
                                    (predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.required
                                      [ "destination", "name" ],
                                      predicates.records.record
                                      {
                                        admin_state = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.enum
                                              [
                                                "enabled",
                                                "disabled",
                                                "l2ping"
                                              ]
                                            ],
                                        description = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                            ],
                                        destination = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                        expected_state = predicates.allOf
                                            [
                                              predicates.isType 'Record,
                                              predicates.records.record
                                              {
                                                maximum_critical_faults =
                                                  predicates.isType 'Integer,
                                                maximum_major_faults =
                                                  predicates.isType 'Integer,
                                                maximum_minor_faults =
                                                  predicates.isType 'Integer,
                                                minimum_health =
                                                  predicates.allOf
                                                    [
                                                      predicates.isType
                                                      'Integer,
                                                      predicates.numbers.maximum
                                                      100
                                                    ],
                                              }
                                              {  }
                                              false
                                              predicates.never
                                            ],
                                        name = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                        sources = predicates.allOf
                                            [
                                              predicates.isType '"Array",
                                              predicates.arrays.arrayOf
                                              (predicates.allOf
                                              [
                                                predicates.isType 'Record,
                                                predicates.records.required
                                                [ "name" ],
                                                predicates.records.record
                                                {
                                                  application_profile =
                                                    predicates.allOf
                                                      [
                                                        predicates.isType
                                                        '"String",
                                                        predicates.strings.pattern
                                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                                      ],
                                                  description = predicates.allOf
                                                      [
                                                        predicates.isType
                                                        '"String",
                                                        predicates.strings.pattern
                                                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                      ],
                                                  direction = predicates.allOf
                                                      [
                                                        predicates.isType
                                                        '"String",
                                                        predicates.enum
                                                        [ "in", "both", "out" ]
                                                      ],
                                                  endpoint_group =
                                                    predicates.allOf
                                                      [
                                                        predicates.isType
                                                        '"String",
                                                        predicates.strings.pattern
                                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                                      ],
                                                  name = predicates.allOf
                                                      [
                                                        predicates.isType
                                                        '"String",
                                                        predicates.strings.pattern
                                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                                      ],
                                                }
                                                {  }
                                                false
                                                predicates.never
                                              ])
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ])
                                  ],
                            }
                            {  }
                            false
                            predicates.never
                          ],
                      trust_control_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                arp = predicates.isType '"Bool",
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                dhcp_v4_server = predicates.isType '"Bool",
                                dhcp_v6_server = predicates.isType '"Bool",
                                ipv6_router = predicates.isType '"Bool",
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                nd = predicates.isType '"Bool",
                                ra = predicates.isType '"Bool",
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ],
              security_domains = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType '"String",
                      predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                    ])
                  ],
              services = predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record
                    {
                      device_selection_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required
                              [
                                "consumer",
                                "contract",
                                "provider",
                                "service_graph_template"
                              ],
                              predicates.records.record
                              {
                                consumer = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.required
                                      [ "logical_interface" ],
                                      predicates.records.record
                                      {
                                        bridge_domain = predicates.allOf
                                            [
                                              predicates.isType 'Record,
                                              predicates.records.required
                                              [ "name" ],
                                              predicates.records.record
                                              {
                                                name = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                                tenant = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                              }
                                              {  }
                                              false
                                              predicates.never
                                            ],
                                        custom_qos_policy = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                        external_endpoint_group =
                                          predicates.allOf
                                            [
                                              predicates.isType 'Record,
                                              predicates.records.required
                                              [ "l3out", "name" ],
                                              predicates.records.record
                                              {
                                                l3out = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                                name = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                                redistribute = predicates.allOf
                                                    [
                                                      predicates.isType 'Record,
                                                      predicates.records.record
                                                      {
                                                        bgp = predicates.isType
                                                            '"Bool",
                                                        connected =
                                                          predicates.isType
                                                            '"Bool",
                                                        ospf = predicates.isType
                                                            '"Bool",
                                                        static =
                                                          predicates.isType
                                                            '"Bool",
                                                      }
                                                      {  }
                                                      false
                                                      predicates.never
                                                    ],
                                                tenant = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                              }
                                              {  }
                                              false
                                              predicates.never
                                            ],
                                        l3_destination = predicates.isType
                                            '"Bool",
                                        logical_interface = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                        permit_logging = predicates.isType
                                            '"Bool",
                                        redirect_policy = predicates.allOf
                                            [
                                              predicates.isType 'Record,
                                              predicates.records.required
                                              [ "name" ],
                                              predicates.records.record
                                              {
                                                name = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                                tenant = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                              }
                                              {  }
                                              false
                                              predicates.never
                                            ],
                                        service_epg_policy = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                contract = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                expected_state = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.record
                                      {
                                        maximum_critical_faults =
                                          predicates.isType 'Integer,
                                        maximum_major_faults = predicates.isType
                                            'Integer,
                                        maximum_minor_faults = predicates.isType
                                            'Integer,
                                        minimum_health = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 100
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                provider = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.required
                                      [ "logical_interface" ],
                                      predicates.records.record
                                      {
                                        bridge_domain = predicates.allOf
                                            [
                                              predicates.isType 'Record,
                                              predicates.records.required
                                              [ "name" ],
                                              predicates.records.record
                                              {
                                                name = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                                tenant = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                              }
                                              {  }
                                              false
                                              predicates.never
                                            ],
                                        custom_qos_policy = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                        external_endpoint_group =
                                          predicates.allOf
                                            [
                                              predicates.isType 'Record,
                                              predicates.records.required
                                              [ "l3out", "name" ],
                                              predicates.records.record
                                              {
                                                l3out = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                                name = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                                redistribute = predicates.allOf
                                                    [
                                                      predicates.isType 'Record,
                                                      predicates.records.record
                                                      {
                                                        bgp = predicates.isType
                                                            '"Bool",
                                                        connected =
                                                          predicates.isType
                                                            '"Bool",
                                                        ospf = predicates.isType
                                                            '"Bool",
                                                        static =
                                                          predicates.isType
                                                            '"Bool",
                                                      }
                                                      {  }
                                                      false
                                                      predicates.never
                                                    ],
                                                tenant = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                              }
                                              {  }
                                              false
                                              predicates.never
                                            ],
                                        l3_destination = predicates.isType
                                            '"Bool",
                                        logical_interface = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                        permit_logging = predicates.isType
                                            '"Bool",
                                        redirect_policy = predicates.allOf
                                            [
                                              predicates.isType 'Record,
                                              predicates.records.required
                                              [ "name" ],
                                              predicates.records.record
                                              {
                                                name = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                                tenant = predicates.allOf
                                                    [
                                                      predicates.isType
                                                      '"String",
                                                      predicates.strings.pattern
                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                    ],
                                              }
                                              {  }
                                              false
                                              predicates.never
                                            ],
                                        service_epg_policy = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                service_graph_template = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      l4l7_devices = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                alias = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                concrete_devices = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          alias = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          interfaces = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [ "name" ],
                                                  predicates.records.record
                                                  {
                                                    alias = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    channel = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    fex_id = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          'Integer,
                                                          predicates.numbers.maximum
                                                          199,
                                                          predicates.numbers.minimum
                                                          101
                                                        ],
                                                    module = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          'Integer,
                                                          predicates.numbers.maximum
                                                          9,
                                                          predicates.numbers.minimum
                                                          1
                                                        ],
                                                    name = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    node2_id = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          'Integer,
                                                          predicates.numbers.maximum
                                                          4000,
                                                          predicates.numbers.minimum
                                                          1
                                                        ],
                                                    node_id = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          'Integer,
                                                          predicates.numbers.maximum
                                                          4000,
                                                          predicates.numbers.minimum
                                                          1
                                                        ],
                                                    pod_id = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          'Integer,
                                                          predicates.numbers.maximum
                                                          255,
                                                          predicates.numbers.minimum
                                                          1
                                                        ],
                                                    port = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          'Integer,
                                                          predicates.numbers.maximum
                                                          127,
                                                          predicates.numbers.minimum
                                                          1
                                                        ],
                                                    vnic_name = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{0,128}$"
                                                        ],
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ])
                                              ],
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          vcenter_name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.maxLength 512
                                              ],
                                          vm_name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.maxLength 512
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                context_aware = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [ "single-Context", "multi-Context" ]
                                    ],
                                copy_device = predicates.isType '"Bool",
                                expected_state = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.record
                                      {
                                        maximum_critical_faults =
                                          predicates.isType 'Integer,
                                        maximum_major_faults = predicates.isType
                                            'Integer,
                                        maximum_minor_faults = predicates.isType
                                            'Integer,
                                        minimum_health = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 100
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                function = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [
                                        "None",
                                        "GoTo",
                                        "GoThrough",
                                        "L2",
                                        "L1"
                                      ]
                                    ],
                                logical_interfaces = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          alias = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          concrete_interfaces = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [
                                                    "device",
                                                    "interface_name"
                                                  ],
                                                  predicates.records.record
                                                  {
                                                    device = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    interface_name =
                                                      predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ])
                                              ],
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,16}$"
                                              ],
                                          vlan = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 4096,
                                                predicates.numbers.minimum 1
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                managed = predicates.isType '"Bool",
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                physical_domain = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                promiscuous_mode = predicates.isType '"Bool",
                                service_type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [
                                        "ADC",
                                        "FW",
                                        "OTHERS",
                                        "COPY",
                                        "NATIVELB"
                                      ]
                                    ],
                                trunking = predicates.isType '"Bool",
                                type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [ "PHYSICAL", "VIRTUAL", "CLOUD" ]
                                    ],
                                vmware_vmm_domain = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      redirect_backup_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                expected_state = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.record
                                      {
                                        maximum_critical_faults =
                                          predicates.isType 'Integer,
                                        maximum_major_faults = predicates.isType
                                            'Integer,
                                        maximum_minor_faults = predicates.isType
                                            'Integer,
                                        minimum_health = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 100
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                l3_destinations = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "ip", "mac" ],
                                        predicates.records.record
                                        {
                                          description = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                              ],
                                          destination_name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          ip = predicates.isType '"String",
                                          ip_2 = predicates.isType '"String",
                                          mac = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$"
                                              ],
                                          redirect_health_group =
                                            predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      redirect_health_groups = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                expected_state = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.record
                                      {
                                        maximum_critical_faults =
                                          predicates.isType 'Integer,
                                        maximum_major_faults = predicates.isType
                                            'Integer,
                                        maximum_minor_faults = predicates.isType
                                            'Integer,
                                        minimum_health = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 100
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      redirect_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                alias = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                anycast = predicates.isType '"Bool",
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                expected_state = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.record
                                      {
                                        maximum_critical_faults =
                                          predicates.isType 'Integer,
                                        maximum_major_faults = predicates.isType
                                            'Integer,
                                        maximum_minor_faults = predicates.isType
                                            'Integer,
                                        minimum_health = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 100
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                hashing = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [ "sip-dip-prototype", "sip", "dip" ]
                                    ],
                                ip_sla_policy = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                l3_destinations = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "ip", "mac" ],
                                        predicates.records.record
                                        {
                                          description = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                              ],
                                          ip = predicates.isType '"String",
                                          ip_2 = predicates.isType '"String",
                                          mac = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$"
                                              ],
                                          pod = predicates.allOf
                                              [
                                                predicates.isType 'Integer,
                                                predicates.numbers.maximum 255,
                                                predicates.numbers.minimum 1
                                              ],
                                          redirect_health_group =
                                            predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                max_threshold = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100
                                    ],
                                min_threshold = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                pod_aware = predicates.isType '"Bool",
                                redirect_backup_policy = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                resilient_hashing = predicates.isType '"Bool",
                                threshold = predicates.isType '"Bool",
                                threshold_down_action = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [ "permit", "deny", "bypass" ]
                                    ],
                                type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum [ "L3", "L2", "L1" ]
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      service_epg_policies = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "name" ],
                              predicates.records.record
                              {
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                preferred_group = predicates.isType '"Bool",
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                      service_graph_templates = predicates.allOf
                          [
                            predicates.isType '"Array",
                            predicates.arrays.arrayOf
                            (predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.required [ "device", "name" ],
                              predicates.records.record
                              {
                                alias = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                description = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                    ],
                                device = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.required [ "name" ],
                                      predicates.records.record
                                      {
                                        name = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                        tenant = predicates.allOf
                                            [
                                              predicates.isType '"String",
                                              predicates.strings.pattern
                                              "^[a-zA-Z0-9_.:-]{1,64}$"
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                expected_state = predicates.allOf
                                    [
                                      predicates.isType 'Record,
                                      predicates.records.record
                                      {
                                        maximum_critical_faults =
                                          predicates.isType 'Integer,
                                        maximum_major_faults = predicates.isType
                                            'Integer,
                                        maximum_minor_faults = predicates.isType
                                            'Integer,
                                        minimum_health = predicates.allOf
                                            [
                                              predicates.isType 'Integer,
                                              predicates.numbers.maximum 100
                                            ],
                                      }
                                      {  }
                                      false
                                      predicates.never
                                    ],
                                name = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                redirect = predicates.isType '"Bool",
                                share_encapsulation = predicates.isType '"Bool",
                                template_type = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.enum
                                      [
                                        "FW_TRANS",
                                        "FW_ROUTED",
                                        "ADC_ONE_ARM",
                                        "ADC_TWO_ARM",
                                        "OTHER",
                                        "CLOUD_NATIVE_LB",
                                        "CLOUD_VENDOR_LB",
                                        "CLOUD_NATIVE_FW",
                                        "CLOUD_VENDOR_FW"
                                      ]
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ])
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ],
              sr_mpls_l3outs = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "name" ],
                      predicates.records.record
                      {
                        alias = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        description = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                            ],
                        domain = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        external_endpoint_groups = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name" ],
                                predicates.records.record
                                {
                                  alias = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  contracts = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.record
                                        {
                                          consumers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                          imported_consumers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                          providers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ])
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                  description = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  preferred_group = predicates.isType '"Bool",
                                  subnets = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "prefix" ],
                                          predicates.records.record
                                          {
                                            aggregate_shared_route_control =
                                              predicates.isType '"Bool",
                                            name = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            prefix = predicates.isType
                                                '"String",
                                            route_leaking = predicates.isType
                                                '"Bool",
                                            security = predicates.isType
                                                '"Bool",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        inbound_route_map = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        name = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        node_profiles = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name" ],
                                predicates.records.record
                                {
                                  bfd_multihop_node_policy = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  evpn_connectivity = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "ip", "remote_as" ],
                                          predicates.records.record
                                          {
                                            admin_state = predicates.isType
                                                '"Bool",
                                            allow_self_as = predicates.isType
                                                '"Bool",
                                            as_propagate = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "none",
                                                    "no-prepend",
                                                    "replace-as",
                                                    "dual-as"
                                                  ]
                                                ],
                                            bfd = predicates.isType '"Bool",
                                            description = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                ],
                                            disable_peer_as_check =
                                              predicates.isType '"Bool",
                                            ip = predicates.isType '"String",
                                            local_as = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4294967295
                                                ],
                                            password = predicates.isType
                                                '"String",
                                            peer_prefix_policy =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            remote_as = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4294967295
                                                ],
                                            ttl = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  255,
                                                  predicates.numbers.minimum 1
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  interface_profiles = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "name" ],
                                          predicates.records.record
                                          {
                                            bfd_policy = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            description = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                ],
                                            interfaces = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType 'Record,
                                                    predicates.records.record
                                                    {
                                                      bgp_peers =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"Array",
                                                            predicates.arrays.arrayOf
                                                            (predicates.allOf
                                                            [
                                                              predicates.isType
                                                              'Record,
                                                              predicates.records.required
                                                              [
                                                                "ip",
                                                                "remote_as"
                                                              ],
                                                              predicates.records.record
                                                              {
                                                                admin_state =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                allow_self_as =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                bfd =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                description =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.strings.pattern
                                                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                                    ],
                                                                ip =
                                                                  predicates.isType
                                                                    '"String",
                                                                local_as =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      4294967295
                                                                    ],
                                                                password =
                                                                  predicates.isType
                                                                    '"String",
                                                                peer_prefix_policy =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.strings.pattern
                                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                    ],
                                                                remote_as =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      4294967295
                                                                    ],
                                                                send_community =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                send_ext_community =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                unicast_address_family =
                                                                  predicates.isType
                                                                    '"Bool",
                                                              }
                                                              {  }
                                                              false
                                                              predicates.never
                                                            ])
                                                          ],
                                                      channel = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                      description =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                          ],
                                                      ip = predicates.isType
                                                          '"String",
                                                      mac = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$"
                                                          ],
                                                      module = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            9,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                      mtu = predicates.anyOf
                                                          [
                                                            predicates.allOf
                                                            [
                                                              predicates.isType
                                                              '"String",
                                                              predicates.enum
                                                              [ "inherit" ]
                                                            ],
                                                            predicates.allOf
                                                            [
                                                              predicates.isType
                                                              'Integer,
                                                              predicates.numbers.maximum
                                                              9216,
                                                              predicates.numbers.minimum
                                                              576
                                                            ]
                                                          ],
                                                      node_id = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            4000,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                      pod_id = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            255,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                      port = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            127,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                      vlan = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Integer,
                                                            predicates.numbers.maximum
                                                            4096,
                                                            predicates.numbers.minimum
                                                            1
                                                          ],
                                                    }
                                                    {  }
                                                    false
                                                    predicates.never
                                                  ])
                                                ],
                                            name = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  mpls_custom_qos_policy = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  nodes = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [
                                            "bgp_evpn_loopback",
                                            "mpls_transport_loopback",
                                            "node_id",
                                            "segment_id_index"
                                          ],
                                          predicates.records.record
                                          {
                                            bgp_evpn_loopback =
                                              predicates.isType '"String",
                                            mpls_transport_loopback =
                                              predicates.isType '"String",
                                            node_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4000,
                                                  predicates.numbers.minimum 1
                                                ],
                                            pod_id = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  255,
                                                  predicates.numbers.minimum 1
                                                ],
                                            router_id = predicates.isType
                                                '"String",
                                            segment_id_index = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  4294967295
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        outbound_route_map = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        sr_mpls_infra_l3out = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        transport_data_plane = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "sr_mpls", "mpls" ]
                            ],
                        vrf = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              vrfs = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "name" ],
                      predicates.records.record
                      {
                        alias = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        bgp = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                ipv4_address_family_context_policy =
                                  predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                ipv4_export_route_target = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                ipv4_import_route_target = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                ipv6_address_family_context_policy =
                                  predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                ipv6_export_route_target = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                ipv6_import_route_target = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                timer_policy = predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        contracts = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                consumers = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ])
                                    ],
                                imported_consumers = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ])
                                    ],
                                providers = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ])
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        data_plane_learning = predicates.isType '"Bool",
                        description = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                            ],
                        dns_labels = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType '"String",
                                predicates.strings.pattern
                                "^[a-zA-Z0-9_.:-]{1,64}$"
                              ])
                            ],
                        enforcement_direction = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "ingress", "egress" ]
                            ],
                        enforcement_preference = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "enforced", "unenforced" ]
                            ],
                        expected_state = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                maximum_critical_faults = predicates.isType
                                    'Integer,
                                maximum_major_faults = predicates.isType
                                    'Integer,
                                maximum_minor_faults = predicates.isType
                                    'Integer,
                                minimum_health = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 100
                                    ],
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        leaked_external_prefixes = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "prefix" ],
                                predicates.records.record
                                {
                                  destinations = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "tenant", "vrf" ],
                                          predicates.records.record
                                          {
                                            description = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                ],
                                            tenant = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            vrf = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  from_prefix_length = predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 128,
                                        predicates.numbers.minimum 1
                                      ],
                                  prefix = predicates.isType '"String",
                                  to_prefix_length = predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 128,
                                        predicates.numbers.minimum 1
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        leaked_internal_prefixes = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "prefix" ],
                                predicates.records.record
                                {
                                  destinations = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "tenant", "vrf" ],
                                          predicates.records.record
                                          {
                                            description = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,128}$"
                                                ],
                                            public = predicates.isType '"Bool",
                                            tenant = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            vrf = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  prefix = predicates.isType '"String",
                                  public = predicates.isType '"Bool",
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        name = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        pim = predicates.allOf
                            [
                              predicates.isType 'Record,
                              predicates.records.record
                              {
                                asm_sg_expiry = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 604801,
                                        predicates.numbers.minimum 180
                                      ],
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum [ "default-timeout" ]
                                      ]
                                    ],
                                asm_sg_expiry_multicast_route_map =
                                  predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                asm_shared_range_multicast_route_map =
                                  predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                asm_traffic_registry_max_rate = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 65535,
                                      predicates.numbers.minimum 1
                                    ],
                                asm_traffic_registry_source_ip =
                                  predicates.isType '"String",
                                auto_rp_filter_multicast_route_map =
                                  predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                auto_rp_forward_updates = predicates.isType
                                    '"Bool",
                                auto_rp_listen_updates = predicates.isType
                                    '"Bool",
                                bsr_filter_multicast_route_map =
                                  predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                bsr_forward_updates = predicates.isType '"Bool",
                                bsr_listen_updates = predicates.isType '"Bool",
                                fabric_rps = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "ip" ],
                                        predicates.records.record
                                        {
                                          ip = predicates.isType '"String",
                                          multicast_route_map = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                fast_convergence = predicates.isType '"Bool",
                                igmp_context_ssm_translate_policies =
                                  predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "group_prefix", "source_address" ],
                                        predicates.records.record
                                        {
                                          group_prefix = predicates.isType
                                              '"String",
                                          source_address = predicates.isType
                                              '"String",
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                inter_vrf_policies = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "tenant", "vrf" ],
                                        predicates.records.record
                                        {
                                          multicast_route_map = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          tenant = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          vrf = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                max_multicast_entries = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 4294967295,
                                        predicates.numbers.minimum 1
                                      ],
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum [ "unlimited" ]
                                      ]
                                    ],
                                mtu = predicates.allOf
                                    [
                                      predicates.isType 'Integer,
                                      predicates.numbers.maximum 9300,
                                      predicates.numbers.minimum 1
                                    ],
                                reserved_multicast_entries = predicates.anyOf
                                    [
                                      predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 4294967295
                                      ],
                                      predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum [ "undefined" ]
                                      ]
                                    ],
                                resource_policy_multicast_route_map =
                                  predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                ssm_group_range_multicast_route_map =
                                  predicates.allOf
                                    [
                                      predicates.isType '"String",
                                      predicates.strings.pattern
                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                    ],
                                static_rps = predicates.allOf
                                    [
                                      predicates.isType '"Array",
                                      predicates.arrays.arrayOf
                                      (predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "ip" ],
                                        predicates.records.record
                                        {
                                          ip = predicates.isType '"String",
                                          multicast_route_map = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ])
                                    ],
                                strict_rfc = predicates.isType '"Bool",
                              }
                              {  }
                              false
                              predicates.never
                            ],
                        preferred_group = predicates.isType '"Bool",
                        transit_route_tag_policy = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
            }
            {  }
            false
            predicates.never
          ])
        ])
        | doc m%"
        Tenants (List - Object)
        
        Elements:
        - name (required)
        - managed
        - alias
        - description
        - vrfs
        - bridge_domains
        - application_profiles
        - inb_endpoint_groups
        - oob_endpoint_groups
        - ext_mgmt_instances
        - l3outs
        - sr_mpls_l3outs
        - filters
        - contracts
        - oob_contracts
        - imported_contracts
        - policies
        - services
        - security_domains
        - expected_state
        "%
        | optional,
      version
        | String
        | doc m%"
        Version (String)
        - Default value: 5.2.1g
        "%
        | optional,
    }
    | doc m%"
    APIC (Object)
    
    Elements:
    - version
    - bootstrap
    - fabric_policies
    - access_policies
    - pod_policies
    - node_policies
    - interface_policies
    - tenants
    - auto_generate_switch_pod_profiles
    - auto_generate_pod_profiles
    - auto_generate_fabric_leaf_switch_interface_profiles
    - auto_generate_fabric_spine_switch_interface_profiles
    - auto_generate_access_leaf_switch_interface_profiles
    - auto_generate_access_spine_switch_interface_profiles
    - nae_assurance_group
    - expected_state
    "%
    | optional,
  defaults
    | predicates.contract_from_predicate predicates.always
    | doc m%"
    Defaults ()
    "%
    | optional,
  modules
    | predicates.contract_from_predicate predicates.always
    | doc m%"
    Modules ()
    "%
    | optional,
  ndo
    | {
      fabric_connectivity
        | {
          bgp
            | {
              graceful_restart
                | Bool
                | doc m%"
                Graceful Restart (Boolean)
                - Default value: true
                "%
                | optional,
              hold_interval
                | predicates.contract_from_predicate
                (predicates.allOf
                [ predicates.isType 'Integer, predicates.numbers.maximum 3600 ])
                | doc m%"
                Hold Interval (Integer)
                - Default value: 180
                - Maximum value: 3600
                "%
                | optional,
              keepalive_interval
                | predicates.contract_from_predicate
                (predicates.allOf
                [ predicates.isType 'Integer, predicates.numbers.maximum 3600 ])
                | doc m%"
                Keepalive Interval (Integer)
                - Default value: 60
                - Maximum value: 3600
                "%
                | optional,
              max_as
                | predicates.contract_from_predicate
                (predicates.allOf
                [ predicates.isType 'Integer, predicates.numbers.maximum 2000 ])
                | doc m%"
                Max AS (Integer)
                - Maximum value: 2000
                "%
                | optional,
              peering_type
                | std.enum.TagOrString
                | [| 'route-reflector, 'full-mesh |]
                | doc m%"
                Peering Type (String)
                - Default value: full-mesh
                - Allowed values: full-mesh, route-reflector
                "%
                | optional,
              stale_interval
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 3600,
                  predicates.numbers.minimum 1
                ])
                | doc m%"
                Stale Interval (Integer)
                - Default value: 300
                - Minimum value: 1
                - Maximum value: 3600
                "%
                | optional,
              ttl
                | predicates.contract_from_predicate
                (predicates.allOf
                [
                  predicates.isType 'Integer,
                  predicates.numbers.maximum 255,
                  predicates.numbers.minimum 1
                ])
                | doc m%"
                TTL (Integer)
                - Default value: 16
                - Minimum value: 1
                - Maximum value: 255
                "%
                | optional,
            }
            | doc m%"
            BGP (Object)
            
            Elements:
            - peering_type
            - ttl
            - max_as
            - keepalive_interval
            - hold_interval
            - stale_interval
            - graceful_restart
            "%
            | optional,
        }
        | doc m%"
        Fabric Connectivity (Object)
        
        Elements:
        - bgp
        "%
        | optional,
      policies
        | {
          dhcp_options
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "tenant" ],
                predicates.records.record
                {
                  description = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern
                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,64}$"
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  options = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required [ "data", "id", "name" ],
                          predicates.records.record
                          {
                            data = predicates.isType '"String",
                            id = predicates.allOf
                                [
                                  predicates.isType 'Integer,
                                  predicates.numbers.minimum 1
                                ],
                            name = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                  tenant = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            DHCP Options (List - Object)
            
            Elements:
            - name (required)
            - description
            - tenant (required)
            - options
            "%
            | optional,
          dhcp_relays
            | predicates.contract_from_predicate
            (predicates.allOf
            [
              predicates.isType '"Array",
              predicates.arrays.arrayOf
              (predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "tenant" ],
                predicates.records.record
                {
                  description = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern
                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,64}$"
                      ],
                  name = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                  providers = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        (predicates.allOf
                        [
                          predicates.isType 'Record,
                          predicates.records.required
                          [ "ip", "schema", "template", "tenant" ],
                          predicates.records.record
                          {
                            application_profile = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            endpoint_group = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            external_endpoint_group = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                            ip = predicates.isType '"String",
                            schema = predicates.isType '"String",
                            template = predicates.isType '"String",
                            tenant = predicates.allOf
                                [
                                  predicates.isType '"String",
                                  predicates.strings.pattern
                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                ],
                          }
                          {  }
                          false
                          predicates.never
                        ])
                      ],
                  tenant = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                      ],
                }
                {  }
                false
                predicates.never
              ])
            ])
            | doc m%"
            DHCP Relays (List - Object)
            
            Elements:
            - name (required)
            - description
            - tenant (required)
            - providers
            "%
            | optional,
        }
        | doc m%"
        Policies (Object)
        
        Elements:
        - dhcp_relays
        - dhcp_options
        "%
        | optional,
      remote_locations
        | predicates.contract_from_predicate
        (predicates.allOf
        [
          predicates.isType '"Array",
          predicates.arrays.arrayOf
          (predicates.allOf
          [
            predicates.isType 'Record,
            predicates.records.required [ "hostname_ip", "name" ],
            predicates.records.record
            {
              authentication = predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.enum [ "password", "sshKey" ]
                  ],
              description = predicates.isType '"String",
              hostname_ip = predicates.isType '"String",
              name = predicates.isType '"String",
              passphrase = predicates.anyOf
                  [ predicates.isType '"String", predicates.isType 'Null ],
              password = predicates.anyOf
                  [ predicates.isType '"String", predicates.isType 'Null ],
              path = predicates.isType '"String",
              port = predicates.allOf
                  [
                    predicates.isType 'Integer,
                    predicates.numbers.maximum 65535
                  ],
              protocol = predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.enum [ "scp", "sftp" ]
                  ],
              ssh_key = predicates.anyOf
                  [ predicates.isType '"String", predicates.isType 'Null ],
              username = predicates.isType '"String",
            }
            {  }
            false
            predicates.never
          ])
        ])
        | doc m%"
        Remote Locations (List - Object)
        
        Elements:
        - name (required)
        - description
        - hostname_ip (required)
        - port
        - protocol
        - path
        - authentication
        - username
        - password
        - ssh_key
        - passphrase
        "%
        | optional,
      schemas
        | predicates.contract_from_predicate
        (predicates.allOf
        [
          predicates.isType '"Array",
          predicates.arrays.arrayOf
          (predicates.allOf
          [
            predicates.isType 'Record,
            predicates.records.required [ "name" ],
            predicates.records.record
            {
              name = predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                  ],
              templates = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "name", "tenant" ],
                      predicates.records.record
                      {
                        application_profiles = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name" ],
                                predicates.records.record
                                {
                                  endpoint_groups = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "name" ],
                                          predicates.records.record
                                          {
                                            bridge_domain = predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [ "name" ],
                                                  predicates.records.record
                                                  {
                                                    name = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    schema = predicates.isType
                                                        '"String",
                                                    template = predicates.isType
                                                        '"String",
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ],
                                            contracts = predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.record
                                                  {
                                                    consumers = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"Array",
                                                          predicates.arrays.arrayOf
                                                          (predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Record,
                                                            predicates.records.required
                                                            [ "name" ],
                                                            predicates.records.record
                                                            {
                                                              name =
                                                                predicates.allOf
                                                                  [
                                                                    predicates.isType
                                                                    '"String",
                                                                    predicates.strings.pattern
                                                                    "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                  ],
                                                              schema =
                                                                predicates.isType
                                                                  '"String",
                                                              template =
                                                                predicates.isType
                                                                  '"String",
                                                            }
                                                            {  }
                                                            false
                                                            predicates.never
                                                          ])
                                                        ],
                                                    providers = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"Array",
                                                          predicates.arrays.arrayOf
                                                          (predicates.allOf
                                                          [
                                                            predicates.isType
                                                            'Record,
                                                            predicates.records.required
                                                            [ "name" ],
                                                            predicates.records.record
                                                            {
                                                              name =
                                                                predicates.allOf
                                                                  [
                                                                    predicates.isType
                                                                    '"String",
                                                                    predicates.strings.pattern
                                                                    "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                  ],
                                                              schema =
                                                                predicates.isType
                                                                  '"String",
                                                              template =
                                                                predicates.isType
                                                                  '"String",
                                                            }
                                                            {  }
                                                            false
                                                            predicates.never
                                                          ])
                                                        ],
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ],
                                            intra_epg_isolation =
                                              predicates.isType '"Bool",
                                            name = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            preferred_group = predicates.isType
                                                '"Bool",
                                            proxy_arp = predicates.isType
                                                '"Bool",
                                            sites = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType 'Record,
                                                    predicates.records.required
                                                    [ "name" ],
                                                    predicates.records.record
                                                    {
                                                      name = predicates.isType
                                                          '"String",
                                                      physical_domains =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"Array",
                                                            predicates.arrays.arrayOf
                                                            (predicates.allOf
                                                            [
                                                              predicates.isType
                                                              'Record,
                                                              predicates.records.required
                                                              [ "name" ],
                                                              predicates.records.record
                                                              {
                                                                deployment_immediacy =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.enum
                                                                      [
                                                                        "immediate",
                                                                        "lazy"
                                                                      ]
                                                                    ],
                                                                name =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.strings.pattern
                                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                    ],
                                                                resolution_immediacy =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.enum
                                                                      [
                                                                        "immediate",
                                                                        "lazy",
                                                                        "pre-provision"
                                                                      ]
                                                                    ],
                                                              }
                                                              {  }
                                                              false
                                                              predicates.never
                                                            ])
                                                          ],
                                                      selectors =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"Array",
                                                            predicates.arrays.arrayOf
                                                            (predicates.allOf
                                                            [
                                                              predicates.isType
                                                              'Record,
                                                              predicates.records.required
                                                              [ "name" ],
                                                              predicates.records.record
                                                              {
                                                                expressions =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"Array",
                                                                      predicates.arrays.arrayOf
                                                                      (predicates.allOf
                                                                      [
                                                                        predicates.isType
                                                                        'Record,
                                                                        predicates.records.required
                                                                        [
                                                                          "key",
                                                                          "operator",
                                                                          "value"
                                                                        ],
                                                                        predicates.records.record
                                                                        {
                                                                          key =
                                                                            predicates.allOf
                                                                              [
                                                                                predicates.isType
                                                                                '"String",
                                                                                predicates.enum
                                                                                [
                                                                                  "ipAddress",
                                                                                  "region"
                                                                                ]
                                                                              ],
                                                                          operator =
                                                                            predicates.allOf
                                                                              [
                                                                                predicates.isType
                                                                                '"String",
                                                                                predicates.enum
                                                                                [
                                                                                  "equals",
                                                                                  "notEquals"
                                                                                ]
                                                                              ],
                                                                          value =
                                                                            predicates.isType
                                                                              '"String",
                                                                        }
                                                                        {  }
                                                                        false
                                                                        predicates.never
                                                                      ])
                                                                    ],
                                                                name =
                                                                  predicates.isType
                                                                    '"String",
                                                              }
                                                              {  }
                                                              false
                                                              predicates.never
                                                            ])
                                                          ],
                                                      static_leafs =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"Array",
                                                            predicates.arrays.arrayOf
                                                            (predicates.allOf
                                                            [
                                                              predicates.isType
                                                              'Record,
                                                              predicates.records.required
                                                              [
                                                                "node",
                                                                "vlan"
                                                              ],
                                                              predicates.records.record
                                                              {
                                                                node =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      4000,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                pod =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      255,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                vlan =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      4096,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                              }
                                                              {  }
                                                              false
                                                              predicates.never
                                                            ])
                                                          ],
                                                      static_ports =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"Array",
                                                            predicates.arrays.arrayOf
                                                            (predicates.allOf
                                                            [
                                                              predicates.isType
                                                              'Record,
                                                              predicates.records.required
                                                              [ "vlan" ],
                                                              predicates.records.record
                                                              {
                                                                channel =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.strings.pattern
                                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                    ],
                                                                deployment_immediacy =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.enum
                                                                      [
                                                                        "immediate",
                                                                        "lazy"
                                                                      ]
                                                                    ],
                                                                fex =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      199,
                                                                      predicates.numbers.minimum
                                                                      101
                                                                    ],
                                                                mode =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.enum
                                                                      [
                                                                        "regular",
                                                                        "native",
                                                                        "untagged"
                                                                      ]
                                                                    ],
                                                                module =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      9,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                node =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      4000,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                node_1 =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      4000,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                node_2 =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      4000,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                pod =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      255,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                port =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      127,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                sub_port =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      16,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                type =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.enum
                                                                      [
                                                                        "port",
                                                                        "vpc",
                                                                        "pc"
                                                                      ]
                                                                    ],
                                                                useg_vlan =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      4096,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                vlan =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      4096,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                              }
                                                              {  }
                                                              false
                                                              predicates.never
                                                            ])
                                                          ],
                                                      subnets = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"Array",
                                                            predicates.arrays.arrayOf
                                                            (predicates.allOf
                                                            [
                                                              predicates.isType
                                                              'Record,
                                                              predicates.records.required
                                                              [ "ip" ],
                                                              predicates.records.record
                                                              {
                                                                description =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.strings.pattern
                                                                      "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,64}$"
                                                                    ],
                                                                ip =
                                                                  predicates.isType
                                                                    '"String",
                                                                no_default_gateway =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                primary =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                scope =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.enum
                                                                      [
                                                                        "private",
                                                                        "public"
                                                                      ]
                                                                    ],
                                                                shared =
                                                                  predicates.isType
                                                                    '"Bool",
                                                              }
                                                              {  }
                                                              false
                                                              predicates.never
                                                            ])
                                                          ],
                                                      vmware_vmm_domains =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"Array",
                                                            predicates.arrays.arrayOf
                                                            (predicates.allOf
                                                            [
                                                              predicates.isType
                                                              'Record,
                                                              predicates.records.required
                                                              [ "name" ],
                                                              predicates.records.record
                                                              {
                                                                deployment_immediacy =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.enum
                                                                      [
                                                                        "immediate",
                                                                        "lazy"
                                                                      ]
                                                                    ],
                                                                name =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.strings.pattern
                                                                      "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                    ],
                                                                resolution_immediacy =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.enum
                                                                      [
                                                                        "immediate",
                                                                        "lazy",
                                                                        "pre-provision"
                                                                      ]
                                                                    ],
                                                                u_segmentation =
                                                                  predicates.isType
                                                                    '"Bool",
                                                                useg_vlan =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      4096,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                vlan =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      'Integer,
                                                                      predicates.numbers.maximum
                                                                      4096,
                                                                      predicates.numbers.minimum
                                                                      1
                                                                    ],
                                                                vlan_mode =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"String",
                                                                      predicates.enum
                                                                      [
                                                                        "static",
                                                                        "dynamic"
                                                                      ]
                                                                    ],
                                                              }
                                                              {  }
                                                              false
                                                              predicates.never
                                                            ])
                                                          ],
                                                    }
                                                    {  }
                                                    false
                                                    predicates.never
                                                  ])
                                                ],
                                            subnets = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType 'Record,
                                                    predicates.records.required
                                                    [ "ip" ],
                                                    predicates.records.record
                                                    {
                                                      ip = predicates.isType
                                                          '"String",
                                                      no_default_gateway =
                                                        predicates.isType
                                                          '"Bool",
                                                      primary =
                                                        predicates.isType
                                                          '"Bool",
                                                      scope = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.enum
                                                            [
                                                              "private",
                                                              "public"
                                                            ]
                                                          ],
                                                      shared = predicates.isType
                                                          '"Bool",
                                                    }
                                                    {  }
                                                    false
                                                    predicates.never
                                                  ])
                                                ],
                                            useg = predicates.isType '"Bool",
                                            vrf = predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [ "name" ],
                                                  predicates.records.record
                                                  {
                                                    name = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    schema = predicates.isType
                                                        '"String",
                                                    template = predicates.isType
                                                        '"String",
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        bridge_domains = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name", "vrf" ],
                                predicates.records.record
                                {
                                  arp_flooding = predicates.isType '"Bool",
                                  dhcp_option_policy = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  dhcp_policies = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "dhcp_relay_policy" ],
                                          predicates.records.record
                                          {
                                            dhcp_option_policy =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            dhcp_relay_policy = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  dhcp_relay_policy = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  intersite_bum_traffic = predicates.isType
                                      '"Bool",
                                  l2_stretch = predicates.isType '"Bool",
                                  l2_unknown_unicast = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum [ "proxy", "flood" ]
                                      ],
                                  l3_multicast = predicates.isType '"Bool",
                                  multi_destination_flooding = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [ "bd-flood", "encap-flood", "drop" ]
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  optimize_wan_bandwidth = predicates.isType
                                      '"Bool",
                                  sites = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "name" ],
                                          predicates.records.record
                                          {
                                            advertise_host_routes =
                                              predicates.isType '"Bool",
                                            l3outs = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType '"String",
                                                    predicates.strings.pattern
                                                    "^[a-zA-Z0-9_.:-]{1,64}$"
                                                  ])
                                                ],
                                            mac = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$"
                                                ],
                                            name = predicates.isType '"String",
                                            subnets = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType 'Record,
                                                    predicates.records.required
                                                    [ "ip" ],
                                                    predicates.records.record
                                                    {
                                                      ip = predicates.isType
                                                          '"String",
                                                      primary =
                                                        predicates.isType
                                                          '"Bool",
                                                      querier =
                                                        predicates.isType
                                                          '"Bool",
                                                      scope = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.enum
                                                            [
                                                              "private",
                                                              "public"
                                                            ]
                                                          ],
                                                      shared = predicates.isType
                                                          '"Bool",
                                                    }
                                                    {  }
                                                    false
                                                    predicates.never
                                                  ])
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  subnets = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required [ "ip" ],
                                          predicates.records.record
                                          {
                                            ip = predicates.isType '"String",
                                            primary = predicates.isType '"Bool",
                                            querier = predicates.isType '"Bool",
                                            scope = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "private", "public" ]
                                                ],
                                            shared = predicates.isType '"Bool",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  unicast_routing = predicates.isType '"Bool",
                                  unknown_ipv4_multicast = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum [ "flood", "opt-flood" ]
                                      ],
                                  unknown_ipv6_multicast = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum [ "flood", "opt-flood" ]
                                      ],
                                  virtual_mac = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^([0-9A-Fa-f]{2}[:]){5}([0-9A-Fa-f]{2})$"
                                      ],
                                  vrf = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          schema = predicates.isType '"String",
                                          template = predicates.isType
                                              '"String",
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        contracts = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name" ],
                                predicates.records.record
                                {
                                  consumer_to_provider_filters =
                                    predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "name" ],
                                          predicates.records.record
                                          {
                                            log = predicates.isType '"Bool",
                                            name = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            schema = predicates.isType
                                                '"String",
                                            template = predicates.isType
                                                '"String",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  filters = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "name" ],
                                          predicates.records.record
                                          {
                                            log = predicates.isType '"Bool",
                                            name = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            schema = predicates.isType
                                                '"String",
                                            template = predicates.isType
                                                '"String",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  provider_to_consumer_filters =
                                    predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "name" ],
                                          predicates.records.record
                                          {
                                            log = predicates.isType '"Bool",
                                            name = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            schema = predicates.isType
                                                '"String",
                                            template = predicates.isType
                                                '"String",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  scope = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [
                                          "application-profile",
                                          "tenant",
                                          "context",
                                          "global"
                                        ]
                                      ],
                                  service_graph = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required
                                        [ "name", "nodes" ],
                                        predicates.records.record
                                        {
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          nodes = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [
                                                    "consumer",
                                                    "name",
                                                    "provider"
                                                  ],
                                                  predicates.records.record
                                                  {
                                                    consumer = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          'Record,
                                                          predicates.records.required
                                                          [
                                                            "bridge_domain",
                                                            "sites"
                                                          ],
                                                          predicates.records.record
                                                          {
                                                            bridge_domain =
                                                              predicates.allOf
                                                                [
                                                                  predicates.isType
                                                                  '"String",
                                                                  predicates.strings.pattern
                                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                ],
                                                            schema =
                                                              predicates.isType
                                                                '"String",
                                                            sites =
                                                              predicates.allOf
                                                                [
                                                                  predicates.isType
                                                                  '"Array",
                                                                  predicates.arrays.arrayOf
                                                                  (predicates.allOf
                                                                  [
                                                                    predicates.isType
                                                                    'Record,
                                                                    predicates.records.required
                                                                    [
                                                                      "device",
                                                                      "logical_interface",
                                                                      "name",
                                                                      "redirect_policy"
                                                                    ],
                                                                    predicates.records.record
                                                                    {
                                                                      device =
                                                                        predicates.allOf
                                                                          [
                                                                            predicates.isType
                                                                            '"String",
                                                                            predicates.strings.pattern
                                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                          ],
                                                                      logical_interface =
                                                                        predicates.allOf
                                                                          [
                                                                            predicates.isType
                                                                            '"String",
                                                                            predicates.strings.pattern
                                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                          ],
                                                                      name =
                                                                        predicates.isType
                                                                          '"String",
                                                                      redirect_policy =
                                                                        predicates.allOf
                                                                          [
                                                                            predicates.isType
                                                                            '"String",
                                                                            predicates.strings.pattern
                                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                          ],
                                                                      tenant =
                                                                        predicates.allOf
                                                                          [
                                                                            predicates.isType
                                                                            '"String",
                                                                            predicates.strings.pattern
                                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                          ],
                                                                    }
                                                                    {  }
                                                                    false
                                                                    predicates.never
                                                                  ])
                                                                ],
                                                            template =
                                                              predicates.isType
                                                                '"String",
                                                          }
                                                          {  }
                                                          false
                                                          predicates.never
                                                        ],
                                                    name = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    provider = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          'Record,
                                                          predicates.records.required
                                                          [
                                                            "bridge_domain",
                                                            "sites"
                                                          ],
                                                          predicates.records.record
                                                          {
                                                            bridge_domain =
                                                              predicates.allOf
                                                                [
                                                                  predicates.isType
                                                                  '"String",
                                                                  predicates.strings.pattern
                                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                ],
                                                            schema =
                                                              predicates.isType
                                                                '"String",
                                                            sites =
                                                              predicates.allOf
                                                                [
                                                                  predicates.isType
                                                                  '"Array",
                                                                  predicates.arrays.arrayOf
                                                                  (predicates.allOf
                                                                  [
                                                                    predicates.isType
                                                                    'Record,
                                                                    predicates.records.required
                                                                    [
                                                                      "device",
                                                                      "logical_interface",
                                                                      "name",
                                                                      "redirect_policy"
                                                                    ],
                                                                    predicates.records.record
                                                                    {
                                                                      device =
                                                                        predicates.allOf
                                                                          [
                                                                            predicates.isType
                                                                            '"String",
                                                                            predicates.strings.pattern
                                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                          ],
                                                                      logical_interface =
                                                                        predicates.allOf
                                                                          [
                                                                            predicates.isType
                                                                            '"String",
                                                                            predicates.strings.pattern
                                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                          ],
                                                                      name =
                                                                        predicates.isType
                                                                          '"String",
                                                                      redirect_policy =
                                                                        predicates.allOf
                                                                          [
                                                                            predicates.isType
                                                                            '"String",
                                                                            predicates.strings.pattern
                                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                          ],
                                                                      tenant =
                                                                        predicates.allOf
                                                                          [
                                                                            predicates.isType
                                                                            '"String",
                                                                            predicates.strings.pattern
                                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                                          ],
                                                                    }
                                                                    {  }
                                                                    false
                                                                    predicates.never
                                                                  ])
                                                                ],
                                                            template =
                                                              predicates.isType
                                                                '"String",
                                                          }
                                                          {  }
                                                          false
                                                          predicates.never
                                                        ],
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ])
                                              ],
                                          schema = predicates.isType '"String",
                                          template = predicates.isType
                                              '"String",
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                  type = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum [ "bothWay", "oneWay" ]
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        external_endpoint_groups = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name", "vrf" ],
                                predicates.records.record
                                {
                                  application_profile = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          schema = predicates.isType '"String",
                                          template = predicates.isType
                                              '"String",
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                  contracts = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.record
                                        {
                                          consumers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [ "name" ],
                                                  predicates.records.record
                                                  {
                                                    name = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    schema = predicates.isType
                                                        '"String",
                                                    template = predicates.isType
                                                        '"String",
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ])
                                              ],
                                          providers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [ "name" ],
                                                  predicates.records.record
                                                  {
                                                    name = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    schema = predicates.isType
                                                        '"String",
                                                    template = predicates.isType
                                                        '"String",
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ])
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                  l3out = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          schema = predicates.isType '"String",
                                          template = predicates.isType
                                              '"String",
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  preferred_group = predicates.isType '"Bool",
                                  selectors = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "ips", "name" ],
                                          predicates.records.record
                                          {
                                            ips = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.isType '"String")
                                                ],
                                            name = predicates.isType '"String",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  sites = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "name" ],
                                          predicates.records.record
                                          {
                                            l3out = predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [ "name" ],
                                                  predicates.records.record
                                                  {
                                                    name = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    schema = predicates.isType
                                                        '"String",
                                                    template = predicates.isType
                                                        '"String",
                                                    tenant = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ],
                                            name = predicates.isType '"String",
                                            route_reachability =
                                              predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [ "internet", "site-ext" ]
                                                ],
                                            selectors = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType 'Record,
                                                    predicates.records.required
                                                    [ "ips", "name" ],
                                                    predicates.records.record
                                                    {
                                                      ips = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"Array",
                                                            predicates.arrays.arrayOf
                                                            (predicates.isType
                                                            '"String")
                                                          ],
                                                      name = predicates.isType
                                                          '"String",
                                                    }
                                                    {  }
                                                    false
                                                    predicates.never
                                                  ])
                                                ],
                                            tenant = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  subnets = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "prefix" ],
                                          predicates.records.record
                                          {
                                            aggregate_export = predicates.isType
                                                '"Bool",
                                            aggregate_import = predicates.isType
                                                '"Bool",
                                            aggregate_shared = predicates.isType
                                                '"Bool",
                                            export_route_control =
                                              predicates.isType '"Bool",
                                            import_route_control =
                                              predicates.isType '"Bool",
                                            import_security = predicates.isType
                                                '"Bool",
                                            prefix = predicates.isType
                                                '"String",
                                            shared_route_control =
                                              predicates.isType '"Bool",
                                            shared_security = predicates.isType
                                                '"Bool",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  type = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.enum
                                        [ "on-premise", "cloud" ]
                                      ],
                                  vrf = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          schema = predicates.isType '"String",
                                          template = predicates.isType
                                              '"String",
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        filters = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name" ],
                                predicates.records.record
                                {
                                  entries = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "name" ],
                                          predicates.records.record
                                          {
                                            description = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,64}$"
                                                ],
                                            destination_from_port =
                                              predicates.anyOf
                                                [
                                                  predicates.allOf
                                                  [
                                                    predicates.isType 'Integer,
                                                    predicates.numbers.maximum
                                                    65535
                                                  ],
                                                  predicates.allOf
                                                  [
                                                    predicates.isType '"String",
                                                    predicates.enum
                                                    [
                                                      "unspecified",
                                                      "ftpData",
                                                      "smtp",
                                                      "dns",
                                                      "http",
                                                      "pop3",
                                                      "https",
                                                      "rtsp",
                                                      "ssh"
                                                    ]
                                                  ]
                                                ],
                                            destination_to_port =
                                              predicates.anyOf
                                                [
                                                  predicates.allOf
                                                  [
                                                    predicates.isType 'Integer,
                                                    predicates.numbers.maximum
                                                    65535
                                                  ],
                                                  predicates.allOf
                                                  [
                                                    predicates.isType '"String",
                                                    predicates.enum
                                                    [
                                                      "unspecified",
                                                      "ftpData",
                                                      "smtp",
                                                      "dns",
                                                      "http",
                                                      "pop3",
                                                      "https",
                                                      "rtsp",
                                                      "ssh"
                                                    ]
                                                  ]
                                                ],
                                            ethertype = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "unspecified",
                                                    "ipv4",
                                                    "trill",
                                                    "arp",
                                                    "ipv6",
                                                    "mpls_ucast",
                                                    "mac_security",
                                                    "fcoe",
                                                    "ip"
                                                  ]
                                                ],
                                            name = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            protocol = predicates.anyOf
                                                [
                                                  predicates.allOf
                                                  [
                                                    predicates.isType 'Integer,
                                                    predicates.numbers.maximum
                                                    255
                                                  ],
                                                  predicates.allOf
                                                  [
                                                    predicates.isType '"String",
                                                    predicates.enum
                                                    [
                                                      "unspecified",
                                                      "icmp",
                                                      "igmp",
                                                      "tcp",
                                                      "egp",
                                                      "igp",
                                                      "udp",
                                                      "icmpv6",
                                                      "eigrp",
                                                      "ospfigp",
                                                      "pim",
                                                      "l2tp"
                                                    ]
                                                  ]
                                                ],
                                            source_from_port = predicates.anyOf
                                                [
                                                  predicates.allOf
                                                  [
                                                    predicates.isType 'Integer,
                                                    predicates.numbers.maximum
                                                    65535
                                                  ],
                                                  predicates.allOf
                                                  [
                                                    predicates.isType '"String",
                                                    predicates.enum
                                                    [
                                                      "unspecified",
                                                      "ftpData",
                                                      "smtp",
                                                      "dns",
                                                      "http",
                                                      "pop3",
                                                      "https",
                                                      "rtsp",
                                                      "ssh"
                                                    ]
                                                  ]
                                                ],
                                            source_to_port = predicates.anyOf
                                                [
                                                  predicates.allOf
                                                  [
                                                    predicates.isType 'Integer,
                                                    predicates.numbers.maximum
                                                    65535
                                                  ],
                                                  predicates.allOf
                                                  [
                                                    predicates.isType '"String",
                                                    predicates.enum
                                                    [
                                                      "unspecified",
                                                      "ftpData",
                                                      "smtp",
                                                      "dns",
                                                      "http",
                                                      "pop3",
                                                      "https",
                                                      "rtsp",
                                                      "ssh"
                                                    ]
                                                  ]
                                                ],
                                            stateful = predicates.isType
                                                '"Bool",
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        l3outs = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name", "vrf" ],
                                predicates.records.record
                                {
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  vrf = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.required [ "name" ],
                                        predicates.records.record
                                        {
                                          name = predicates.allOf
                                              [
                                                predicates.isType '"String",
                                                predicates.strings.pattern
                                                "^[a-zA-Z0-9_.:-]{1,64}$"
                                              ],
                                          schema = predicates.isType '"String",
                                          template = predicates.isType
                                              '"String",
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        name = predicates.isType '"String",
                        service_graphs = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name", "nodes" ],
                                predicates.records.record
                                {
                                  description = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,64}$"
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  nodes = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "name", "sites" ],
                                          predicates.records.record
                                          {
                                            index = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 3,
                                                  predicates.numbers.minimum 1
                                                ],
                                            name = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.strings.pattern
                                                  "^[a-zA-Z0-9_.:-]{1,64}$"
                                                ],
                                            sites = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType 'Record,
                                                    predicates.records.required
                                                    [ "device", "name" ],
                                                    predicates.records.record
                                                    {
                                                      device = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                      name = predicates.isType
                                                          '"String",
                                                      tenant = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                    }
                                                    {  }
                                                    false
                                                    predicates.never
                                                  ])
                                                ],
                                            type = predicates.allOf
                                                [
                                                  predicates.isType '"String",
                                                  predicates.enum
                                                  [
                                                    "firewall",
                                                    "load-balancer",
                                                    "other"
                                                  ]
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        sites = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.isType '"String")
                            ],
                        tenant = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        vrfs = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "name" ],
                                predicates.records.record
                                {
                                  contracts = predicates.allOf
                                      [
                                        predicates.isType 'Record,
                                        predicates.records.record
                                        {
                                          consumers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [ "name" ],
                                                  predicates.records.record
                                                  {
                                                    name = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    schema = predicates.isType
                                                        '"String",
                                                    template = predicates.isType
                                                        '"String",
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ])
                                              ],
                                          providers = predicates.allOf
                                              [
                                                predicates.isType '"Array",
                                                predicates.arrays.arrayOf
                                                (predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [ "name" ],
                                                  predicates.records.record
                                                  {
                                                    name = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                    schema = predicates.isType
                                                        '"String",
                                                    template = predicates.isType
                                                        '"String",
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ])
                                              ],
                                        }
                                        {  }
                                        false
                                        predicates.never
                                      ],
                                  data_plane_learning = predicates.isType
                                      '"Bool",
                                  l3_multicast = predicates.isType '"Bool",
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                  preferred_group = predicates.isType '"Bool",
                                  sites = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "name" ],
                                          predicates.records.record
                                          {
                                            name = predicates.isType '"String",
                                            regions = predicates.allOf
                                                [
                                                  predicates.isType '"Array",
                                                  predicates.arrays.arrayOf
                                                  (predicates.allOf
                                                  [
                                                    predicates.isType 'Record,
                                                    predicates.records.required
                                                    [ "name" ],
                                                    predicates.records.record
                                                    {
                                                      cidrs = predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"Array",
                                                            predicates.arrays.arrayOf
                                                            (predicates.allOf
                                                            [
                                                              predicates.isType
                                                              'Record,
                                                              predicates.records.required
                                                              [ "ip" ],
                                                              predicates.records.record
                                                              {
                                                                ip =
                                                                  predicates.isType
                                                                    '"String",
                                                                subnets =
                                                                  predicates.allOf
                                                                    [
                                                                      predicates.isType
                                                                      '"Array",
                                                                      predicates.arrays.arrayOf
                                                                      (predicates.allOf
                                                                      [
                                                                        predicates.isType
                                                                        'Record,
                                                                        predicates.records.required
                                                                        [
                                                                          "ip"
                                                                        ],
                                                                        predicates.records.record
                                                                        {
                                                                          ip =
                                                                            predicates.isType
                                                                              '"String",
                                                                          name =
                                                                            predicates.isType
                                                                              '"String",
                                                                          zone =
                                                                            predicates.isType
                                                                              '"String",
                                                                        }
                                                                        {  }
                                                                        false
                                                                        predicates.never
                                                                      ])
                                                                    ],
                                                              }
                                                              {  }
                                                              false
                                                              predicates.never
                                                            ])
                                                          ],
                                                      hub_network =
                                                        predicates.isType
                                                          '"Bool",
                                                      hub_network_name =
                                                        predicates.isType
                                                          '"String",
                                                      hub_network_tenant =
                                                        predicates.allOf
                                                          [
                                                            predicates.isType
                                                            '"String",
                                                            predicates.strings.pattern
                                                            "^[a-zA-Z0-9_.:-]{1,64}$"
                                                          ],
                                                      name = predicates.isType
                                                          '"String",
                                                      vpn_gateway =
                                                        predicates.isType
                                                          '"Bool",
                                                    }
                                                    {  }
                                                    false
                                                    predicates.never
                                                  ])
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  vzany = predicates.isType '"Bool",
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
            }
            {  }
            false
            predicates.never
          ])
        ])
        | doc m%"
        Schemas (List - Object)
        
        Elements:
        - name (required)
        - templates
        "%
        | optional,
      sites
        | predicates.contract_from_predicate
        (predicates.allOf
        [
          predicates.isType '"Array",
          predicates.arrays.arrayOf
          (predicates.allOf
          [
            predicates.isType 'Record,
            predicates.records.required [ "apic_urls", "name" ],
            predicates.records.record
            {
              apic_urls = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ],
              bgp = predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record
                    {
                      as = predicates.allOf
                          [
                            predicates.isType 'Integer,
                            predicates.numbers.maximum 4294967295,
                            predicates.numbers.minimum 1
                          ],
                      password = predicates.anyOf
                          [
                            predicates.isType '"String",
                            predicates.isType 'Null
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ],
              id = predicates.allOf
                  [ predicates.isType 'Integer, predicates.numbers.minimum 1 ],
              location = predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.required [ "lat", "long" ],
                    predicates.records.record
                    {
                      lat = predicates.isType '"String",
                      long = predicates.isType '"String",
                    }
                    {  }
                    false
                    predicates.never
                  ],
              multicast_tep = predicates.isType '"String",
              multisite = predicates.isType '"Bool",
              name = predicates.isType '"String",
              ospf = predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record
                    {
                      area_id = predicates.anyOf
                          [
                            predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 4294967295
                            ],
                            predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "backbone" ]
                            ],
                            predicates.isType '"String"
                          ],
                      area_type = predicates.allOf
                          [
                            predicates.isType '"String",
                            predicates.enum [ "regular", "stub", "nssa" ]
                          ],
                    }
                    {  }
                    false
                    predicates.never
                  ],
              ospf_policies = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "name" ],
                      predicates.records.record
                      {
                        advertise_subnet = predicates.isType '"Bool",
                        bfd = predicates.isType '"Bool",
                        dead_interval = predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 65535,
                              predicates.numbers.minimum 1
                            ],
                        hello_interval = predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 65535,
                              predicates.numbers.minimum 1
                            ],
                        interface_cost = predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 65535
                            ],
                        mtu_ignore = predicates.isType '"Bool",
                        name = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        network_type = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.enum [ "point-to-point", "broadcast" ]
                            ],
                        passive_interface = predicates.isType '"Bool",
                        "priority" = predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 255
                            ],
                        retransmit_delay = predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 450,
                              predicates.numbers.minimum 1
                            ],
                        retransmit_interval = predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 65535,
                              predicates.numbers.minimum 1
                            ],
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              password = predicates.anyOf
                  [ predicates.isType '"String", predicates.isType 'Null ],
              pods = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "id" ],
                      predicates.records.record
                      {
                        id = predicates.allOf
                            [
                              predicates.isType 'Integer,
                              predicates.numbers.maximum 255,
                              predicates.numbers.minimum 1
                            ],
                        spines = predicates.allOf
                            [
                              predicates.isType '"Array",
                              predicates.arrays.arrayOf
                              (predicates.allOf
                              [
                                predicates.isType 'Record,
                                predicates.records.required [ "id", "name" ],
                                predicates.records.record
                                {
                                  bgp_peering = predicates.isType '"Bool",
                                  bgp_route_reflector = predicates.isType
                                      '"Bool",
                                  control_plane_tep = predicates.isType
                                      '"String",
                                  id = predicates.allOf
                                      [
                                        predicates.isType 'Integer,
                                        predicates.numbers.maximum 4000,
                                        predicates.numbers.minimum 1
                                      ],
                                  interfaces = predicates.allOf
                                      [
                                        predicates.isType '"Array",
                                        predicates.arrays.arrayOf
                                        (predicates.allOf
                                        [
                                          predicates.isType 'Record,
                                          predicates.records.required
                                          [ "ip", "port" ],
                                          predicates.records.record
                                          {
                                            ip = predicates.isType '"String",
                                            module = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum 9,
                                                  predicates.numbers.minimum 1
                                                ],
                                            mtu = predicates.anyOf
                                                [
                                                  predicates.allOf
                                                  [
                                                    predicates.isType '"String",
                                                    predicates.enum
                                                    [ "inherit" ]
                                                  ],
                                                  predicates.allOf
                                                  [
                                                    predicates.isType 'Integer,
                                                    predicates.numbers.maximum
                                                    9216,
                                                    predicates.numbers.minimum
                                                    576
                                                  ]
                                                ],
                                            ospf = predicates.allOf
                                                [
                                                  predicates.isType 'Record,
                                                  predicates.records.required
                                                  [ "policy" ],
                                                  predicates.records.record
                                                  {
                                                    authentication_key =
                                                      predicates.anyOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.isType
                                                          'Null
                                                        ],
                                                    authentication_key_id =
                                                      predicates.allOf
                                                        [
                                                          predicates.isType
                                                          'Integer,
                                                          predicates.numbers.maximum
                                                          255,
                                                          predicates.numbers.minimum
                                                          1
                                                        ],
                                                    authentication_type =
                                                      predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.enum
                                                          [
                                                            "none",
                                                            "simple",
                                                            "md5"
                                                          ]
                                                        ],
                                                    policy = predicates.allOf
                                                        [
                                                          predicates.isType
                                                          '"String",
                                                          predicates.strings.pattern
                                                          "^[a-zA-Z0-9_.:-]{1,64}$"
                                                        ],
                                                  }
                                                  {  }
                                                  false
                                                  predicates.never
                                                ],
                                            port = predicates.allOf
                                                [
                                                  predicates.isType 'Integer,
                                                  predicates.numbers.maximum
                                                  127,
                                                  predicates.numbers.minimum 1
                                                ],
                                          }
                                          {  }
                                          false
                                          predicates.never
                                        ])
                                      ],
                                  name = predicates.allOf
                                      [
                                        predicates.isType '"String",
                                        predicates.strings.pattern
                                        "^[a-zA-Z0-9_.:-]{1,64}$"
                                      ],
                                }
                                {  }
                                false
                                predicates.never
                              ])
                            ],
                        unicast_tep = predicates.isType '"String",
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              routed_domain = predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                  ],
              username = predicates.isType '"String",
            }
            {  }
            false
            predicates.never
          ])
        ])
        | doc m%"
        Sites (List - Object)
        
        Elements:
        - name (required)
        - apic_urls (required)
        - username
        - password
        - id
        - location
        - multisite
        - multicast_tep
        - bgp
        - ospf
        - routed_domain
        - ospf_policies
        - pods
        "%
        | optional,
      system_config
        | {
          banner
            | {
              alias
                | String
                | doc m%"
                Alias (String)
                "%
                | optional,
              message
                | String
                | doc m%"
                Message (String)
                "%
                | optional,
              state
                | std.enum.TagOrString
                | [| 'inactive, 'active |]
                | doc m%"
                State (String)
                - Default value: active
                - Allowed values: active, inactive
                "%
                | optional,
              type
                | std.enum.TagOrString
                | [| 'critical, 'warning, 'informational |]
                | doc m%"
                Type (String)
                - Default value: informational
                - Allowed values: informational, warning, critical
                "%
                | optional,
            }
            | doc m%"
            Banner (Object)
            
            Elements:
            - alias
            - type
            - message
            - state
            "%
            | optional,
        }
        | doc m%"
        System Config (Object)
        
        Elements:
        - banner
        "%
        | optional,
      tenants
        | predicates.contract_from_predicate
        (predicates.allOf
        [
          predicates.isType '"Array",
          predicates.arrays.arrayOf
          (predicates.allOf
          [
            predicates.isType 'Record,
            predicates.records.required [ "name" ],
            predicates.records.record
            {
              description = predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.strings.pattern
                    "^[a-zA-Z0-9\\\\!#$%()*,-./:;@ _{|}~?&+]{1,64}$"
                  ],
              name = predicates.allOf
                  [
                    predicates.isType '"String",
                    predicates.strings.pattern "^[a-zA-Z0-9_.:-]{1,64}$"
                  ],
              orchestrator_only = predicates.isType '"Bool",
              sites = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "name" ],
                      predicates.records.record
                      {
                        azure_shared_tenant = predicates.allOf
                            [
                              predicates.isType '"String",
                              predicates.strings.pattern
                              "^[a-zA-Z0-9_.:-]{1,64}$"
                            ],
                        azure_subscription_id = predicates.isType '"String",
                        name = predicates.isType '"String",
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
              users = predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    (predicates.allOf
                    [
                      predicates.isType 'Record,
                      predicates.records.required [ "name" ],
                      predicates.records.record
                      {
                        domain = predicates.isType '"String",
                        name = predicates.isType '"String",
                      }
                      {  }
                      false
                      predicates.never
                    ])
                  ],
            }
            {  }
            false
            predicates.never
          ])
        ])
        | doc m%"
        Tenants (List - Object)
        
        Elements:
        - name (required)
        - description
        - sites
        - users
        - orchestrator_only
        "%
        | optional,
      version
        | String
        | doc m%"
        Version (String)
        - Default value: 3.7.2h
        "%
        | optional,
    }
    | doc m%"
    NDO (Object)
    
    Elements:
    - version
    - system_config
    - remote_locations
    - sites
    - fabric_connectivity
    - tenants
    - policies
    - schemas
    "%
    | optional,
}