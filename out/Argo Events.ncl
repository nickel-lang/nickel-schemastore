# DO NOT EDIT
# This file was automatically generated using json-schema-to-nickel
let predicates =
{
    allOf
      : Array (Dyn -> { success: Bool, error: String }) -> Dyn -> {
        success: Bool,
        error: String
      }
      | doc m%"
      `allOf preds` succeeds if all of the predicates in `preds` succeed
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.1]
      "%
      = fun preds x => std.array.fold_right
          (fun pred acc => let result = pred x in
            if !result.success then result else acc)
          { error = "", success = true, }
          preds,
    always : Dyn -> { success: Bool, error: String }
      = std.function.const { error = "", success = true, },
    anyOf
      : Array (Dyn -> { success: Bool, error: String }) -> Dyn -> {
        success: Bool,
        error: String
      }
      | doc m%"
      `anyOf preds` succeeds if at least one of the predicates in `preds` succeeds
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.2]
      "%
      = fun preds x => (fun result => if result.success then
            { error = "", success = true, }
            else
            {
              error = m%"
                  anyOf: none of the options matched%{std.string.join "\n"
                  result.errors}
                  "%,
              success = false,
            })
          (std.array.fold_right
          (fun pred acc => let result = pred x in
            if result.success || acc.success then
            { errors = [  ], success = true, }
            else
            {
              errors = [
                      m%"
                      - %{result.error}
                      "%
                    ] @
                    acc.errors,
              success = false,
            })
          { errors = [  ], success = false, }
          preds),
    arrays = {
          additionalItems
            : (Dyn -> { success: Bool, error: String }) -> Number -> Dyn -> {
              success: Bool,
              error: String
            }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.2]
            "%
            = fun pred start x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (let x  | Array Dyn = x in
                let value_length = std.array.length x in
                if start >= value_length then
                { error = "", success = true, }
                else
                (arrayOf pred ((std.array.slice start value_length x) | Dyn))),
          arrayOf
            : (Dyn -> { success: Bool, error: String }) -> Dyn -> {
              success: Bool,
              error: String
            }
            | doc m%"
            Apply a predicate to all elements of an array, succeeding if all
            applications succeed. If the value isn't an array, fail.
            "%
            = fun pred x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (let x  | Array Dyn = x in
                std.array.fold_right
                (fun x acc => let result = pred x in
                  if !result.success then result else acc)
                { error = "", success = true, }
                x),
          contains
            : (Dyn -> { success: Bool, error: String }) -> Dyn -> {
              success: Bool,
              error: String
            }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.6]
            "%
            = fun pred x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (let x  | Array Dyn = x in
                (fun result => if result.success then
                  { error = "", success = true, }
                  else
                  {
                    error = m%"
                        contains: no elements matched%{std.string.join "\n"
                        result.errors}
                        "%,
                    success = false,
                  })
                (std.array.fold_right
                (fun x acc => let result = pred x in
                  if result.success || acc.success then
                  { errors = [  ], success = true, }
                  else
                  {
                    errors = [
                            m%"
                            - %{result.error}
                            "%
                          ] @
                          acc.errors,
                    success = false,
                  })
                { errors = [  ], success = false, }
                x)),
          items
            : Array (Dyn -> { success: Bool, error: String }) -> Dyn -> {
              success: Bool,
              error: String
            }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.1]
            "%
            = fun preds x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (let x  | Array Dyn = x in
                let length_to_check =
                std.number.min (std.array.length preds) (std.array.length x)
                in
                
                std.array.fold_right
                (fun i acc => let result =
                  std.array.at i preds (std.array.at i x)
                  in
                  
                  if !result.success then result else acc)
                { error = "", success = true, }
                (std.array.range 0 length_to_check)),
          maxItems
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            `maxItems n x` fails if `x` is an array of length strictly greater than `n` and succeeds otherwise.
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.3]
            "%
            = fun n x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (if (std.array.length (x | Array Dyn)) > n then
                {
                    error = m%"
                        array is longer than %{std.string.from_number n} items
                        "%,
                    success = false,
                  }
                else
                { error = "", success = true, }),
          minItems
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            `minItems n x` fails if `x` is an array of length strictly smaller than `n` and succeeds otherwise.
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.4]
            "%
            = fun n x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (if (std.array.length (x | Array Dyn)) < n then
                {
                    error = m%"
                        array is shorter than %{std.string.from_number n} items
                        "%,
                    success = false,
                  }
                else
                { error = "", success = true, }),
          uniqueItems
            : Dyn -> { success: Bool, error: String }
            | doc m%"
            Succeeds for any array if its elements are pairwise distinct.
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4.5]
            "%
            = let find_duplicate 
                : Array Dyn -> {
                  has_duplicate: Bool,
                  duplicate: Dyn,
                  seen: { _ : Bool }
                } =
              std.array.fold_right
                (fun elt acc => if acc.has_duplicate then acc else
                  (let index = std.serialize 'Json elt in
                  if std.record.has_field index acc.seen then
                  { duplicate = elt, has_duplicate = true, seen = acc.seen, }
                  else
                  {
                    duplicate = null,
                    has_duplicate = false,
                    seen = std.record.insert index true acc.seen,
                  }))
                { duplicate = null, has_duplicate = false, seen = {  }, }
              in
              
              fun x => if !(std.is_array x) then
                { error = "", success = true, }
                else
                (let {has_duplicate  | Dyn, duplicate  | Dyn, ..} =
                find_duplicate (x | Array Dyn)
                in
                
                if has_duplicate then
                {
                    error = m%"
                        duplicate found: %{std.serialize 'Json duplicate}
                        "%,
                    success = false,
                  }
                else
                { error = "", success = true, }),
        },
    const
      : Dyn -> Dyn -> { success: Bool, error: String }
      | doc m%"
      `const value x` succeeds if and only if `x` is equalt to `value`
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.1.3]
      "%
      = fun value x => if x == value then { error = "", success = true, } else
          {
            error = m%"
                expected %{std.serialize 'Json value}
                "%,
            success = false,
          },
    contract_from_predicate
      : (Dyn -> { success: Bool, error: String }) -> Dyn -> Dyn -> Dyn
      = fun predicate label value => let {success  | Dyn, error  | Dyn} =
          predicate value
          in
          
          if success then value else
          ((std.contract.blame_with_message error label) | Dyn),
    enum
      : Array Dyn -> Dyn -> { success: Bool, error: String }
      | doc m%"
      `enum values x` succeeds if and only if `x` is equal to one of the elements of `values`.
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.1.2]
      "%
      = let checkEqual =
        fun input variant => (input == variant) ||
            ((std.is_enum input) &&
            (((std.string.from_enum input) == variant) | Bool))
        in
        
        fun values x => std.array.fold_right
          (fun value acc => if checkEqual x value then
            { error = "", success = true, }
            else
            acc)
          {
            error = m%"
                expected one of %{std.serialize 'Json (values | Dyn)}
                "%,
            success = false,
          }
          values,
    from_simple_predicate
      : String -> (Dyn -> Bool) -> Dyn -> { success: Bool, error: String }
      | doc m%"
      Convert a simple boolean predicate into a predicate supporting error messages
      "%
      = fun error' pred x => { error = error', success = pred x, },
    ifThenElse
      : (Dyn -> { success: Bool, error: String }) -> (Dyn -> {
        success: Bool,
        error: String
      }) -> (Dyn -> { success: Bool, error: String }) -> Dyn -> {
        success: Bool,
        error: String
      }
      | doc m%"
      `ifThenElse i t e` first checks if the predicate `i` succeeds. If it does, it's equivalent to `t`, otherwise it's equivalent to `e`.
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.6]
      "%
      = fun i t e x => let {success  | Dyn, ..} = i x in
          if success then t x else (e x),
    isType
      : [| '"Array", '"Bool", 'Integer, 'Null, '"Number", 'Record, '"String" |]
      -> Dyn -> { success: Bool, error: String }
      = fun t => (match {'Integer => from_simple_predicate "expected an integer"
            (fun x => (std.is_number x) &&
              (std.number.is_integer (x | Number))),
            'Null => from_simple_predicate "expected `null`"
            (fun x => x == null),
            _ => from_simple_predicate
            m%"
            value is not of type %{std.string.from_enum t}
            "%
            (fun x => (std.typeof x) == t)
          })
          t,
    never : Dyn -> { success: Bool, error: String }
      = std.function.const { error = "never", success = false, },
    not
      : (Dyn -> { success: Bool, error: String }) -> Dyn -> {
        success: Bool,
        error: String
      }
      | doc m%"
      `not pred` succeeds if and only if `pred` fails
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.4]
      "%
      = fun pred x => let result = pred x in
          if result.success then
          {
              error = "Inverted predicate succeeded unexpectedly",
              success = false,
            }
          else
          { error = "", success = true, },
    numbers = {
          exclusiveMaximum
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.3]
            "%
            = fun limit x => if !(std.is_number x) then
                { error = "", success = true, }
                else
                (if (x | Number) < limit then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected an exclusive maximum of %{std.string.from_number
                      limit}
                      "%,
                  success = false,
                }),
          exclusiveMinimum
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.5]
            "%
            = fun limit x => if !(std.is_number x) then
                { error = "", success = true, }
                else
                (if (x | Number) > limit then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected an exclusive minimum of %{std.string.from_number
                      limit}
                      "%,
                  success = false,
                }),
          maximum
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.2]
            "%
            = fun limit x => if !(std.is_number x) then
                { error = "", success = true, }
                else
                (if (x | Number) <= limit then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected a maximum of %{std.string.from_number limit}
                      "%,
                  success = false,
                }),
          minimum
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.4]
            "%
            = fun limit x => if !(std.is_number x) then
                { error = "", success = true, }
                else
                (if (x | Number) >= limit then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected a minimum of %{std.string.from_number limit}
                      "%,
                  success = false,
                }),
          multipleOf
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.2.1]
            "%
            = fun mult x => if !(std.is_number x) then
                { error = "", success = true, }
                else
                (if std.number.is_integer ((x | Number) / mult) then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected a multiple of %{std.string.from_number mult}
                      "%,
                  success = false,
                }),
        },
    oneOf
      : Array (Dyn -> { success: Bool, error: String }) -> Dyn -> {
        success: Bool,
        error: String
      }
      | doc m%"
      `oneOf preds` succeeds if precisely one of the predicates in `preds` succeeds
      Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7.3]
      "%
      = fun preds x => let count_true 
            : Array { success: Bool, error: String } -> Number =
          fun results => std.array.fold_left
              (fun n b => if b.success then n + 1 else n)
              0
              results
          in
          
          let results = std.array.map (fun pred => pred x) preds in
          let count = count_true results in
          if count == 0 then
          let errors =
            std.array.map
              (fun result => m%"
                - %{result.error}
                "%)
              results
            in
            
            {
              error = m%"
                  oneOf: none of the options matched%{std.string.join "\n"
                  errors}
                  "%,
              success = false,
            }
          else
          (if count > 1 then
          {
              error = "oneOf: more than one of the options matched",
              success = false,
            }
          else
          { error = "", success = true, }),
    records = {
          dependencies
            : { _ : Dyn } -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.7]
            "%
            = let mustHaveFields 
                : Array String -> { _ : Dyn } -> {
                  success: Bool,
                  error: String
                } =
              fun fields x => std.array.fold_right
                  (fun field acc => if !(std.record.has_field field x) then
                    {
                        error = m%"
                            expected field `%{field}`
                            "%,
                        success = false,
                      }
                    else
                    acc)
                  { error = "", success = true, }
                  fields
              in
              
              fun deps x => if !(std.is_record x) then
                { error = "", success = true, }
                else
                (let x  | { _ : Dyn } = x in
                std.array.fold_right
                (fun {field  | Dyn, value  | Dyn} => fun acc =>
                  if !(std.record.has_field field x) then acc else
                    (let result =
                    if std.is_array value then
                      mustHaveFields (value | Array String) x
                      else
                      (let pred  | Dyn -> { success: Bool, error: String } =
                      value
                      in
                      
                      pred (x | Dyn))
                    in
                    
                    if !result.success then
                    {
                        error = m%"
                            dependency of `%{field}` failed: %{result.error}
                            "%,
                        success = false,
                      }
                    else
                    acc))
                { error = "", success = true, }
                (std.record.to_array deps)),
          maxProperties
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            `maxProperties n x` fails if `x` is a record containing stricly more than `n` fields.
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.1]
            "%
            = fun n x => if !(std.is_record x) then
                { error = "", success = true, }
                else
                (if (std.record.length (x | { _ : Dyn })) > n then
                {
                    error = m%"
                        record contains more than %{std.string.from_number
                        n} fields
                        "%,
                    success = false,
                  }
                else
                { error = "", success = true, }),
          minProperties
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            `minProperties n x` fails if `x` is a record containing stricly less than `n` fields.
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.1]
            "%
            = fun n x => if !(std.is_record x) then
                { error = "", success = true, }
                else
                (if (std.record.length (x | { _ : Dyn })) < n then
                {
                    error = m%"
                        record contains fewer than %{std.string.from_number
                        n} fields
                        "%,
                    success = false,
                  }
                else
                { error = "", success = true, }),
          propertyNames
            : (Dyn -> { success: Bool, error: String }) -> Dyn -> {
              success: Bool,
              error: String
            }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.8]
            "%
            = fun pred x => if !(std.is_record x) then
                { error = "", success = true, }
                else
                (std.array.fold_right
                (fun field acc => let result = pred (field | Dyn) in
                  if !result.success then
                  {
                      error = m%"
                          field `%{field}` did not validate against `propertyNames` schema
                          "%,
                      success = false,
                    }
                  else
                  acc)
                { error = "", success = true, }
                (std.record.fields (x | { _ : Dyn }))),
          record
            : { _ : Dyn -> { success: Bool, error: String } } -> { _ : Dyn -> {
              success: Bool,
              error: String
            } } -> Bool -> (Dyn -> { success: Bool, error: String }) -> Dyn -> {
              success: Bool,
              error: String
            }
            | doc m%"
            `record properties patternProperties additionalAllowed
            additionalProperties x` is a combination of the `properties`,
            `patternProperties` and `additionalProperties` validation keywords in
            JSON schema.
            
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5]
            "%
            =
            fun properties patternProperties additionalAllowed additionalProperties x =>
              if !(std.is_record x) then { error = "", success = true, } else
                (let x  | { _ : Dyn } = x in
                let check_properties 
                  : { success: Bool, error: String, checked: { _ : Bool } } =
                std.array.fold_right
                  (fun {field  | Dyn, value  | Dyn} => fun acc =>
                    if !(std.record.has_field field x) then acc else
                      (let result = value x."%{field}" in
                      if !result.success then
                      {
                          checked : { _ : Bool }
                            = {  },
                          error = m%"
                              field `%{field}` didn't validate: %{result.error}
                              "%,
                          success = false,
                        }
                      else
                      {
                        checked = std.record.insert field true acc.checked,
                        error = acc.error,
                        success = acc.success,
                      }))
                  { checked = {  }, error = "", success = true, }
                  (std.record.to_array properties)
                in
                
                let matching_fields  : String -> { _ : Dyn } =
                fun pattern => let matcher = std.string.is_match pattern in
                    std.array.fold_left
                    (fun acc => fun {field  | Dyn, value  | Dyn} => if matcher
                        field then
                        std.record.insert field value acc
                        else
                        acc)
                    {  }
                    (std.record.to_array x)
                in
                
                let check_pattern_properties 
                  : { success: Bool, error: String, checked: { _ : Bool } } =
                std.array.fold_right
                  (fun {field  | Dyn = pattern, value  | Dyn = pred} =>
                  fun acc => let result =
                      std.array.fold_right
                        (fun {field  | Dyn, value  | Dyn} => fun acc =>
                          let result = pred value in
                            if !result.success then
                            {
                                checked : { _ : Bool }
                                  = {  },
                                error = m%"
                                    field `%{field}` didn't validate: %{result.error}
                                    "%,
                                success = false,
                              }
                            else
                            {
                              checked = std.record.insert field true
                                  acc.checked,
                              error = acc.error,
                              success = acc.success,
                            })
                        {
                          checked : { _ : Bool }
                            = {  },
                          error = "",
                          success = true,
                        }
                        (std.record.to_array (matching_fields pattern))
                      in
                      
                      if !result.success then result else
                      {
                        checked = std.array.fold_left
                            (fun r field => if !(std.record.has_field field
                              r) then
                              std.record.insert field true r
                              else
                              r)
                            acc.checked
                            (std.record.fields result.checked),
                        error = acc.error,
                        success = acc.success,
                      })
                  { checked : { _ : Bool } = {  }, error = "", success = true, }
                  (std.record.to_array patternProperties)
                in
                
                let remaining_fields =
                std.array.fold_left
                  (fun acc field => if !(std.record.has_field field acc) then
                    acc
                    else
                    (std.record.remove field acc))
                  x
                  ((std.record.fields check_properties.checked) @
                    (std.record.fields check_pattern_properties.checked))
                in
                
                let check_additional_properties 
                  : { success: Bool, error: String } =
                if (!additionalAllowed) &&
                  (!(std.record.is_empty remaining_fields)) then
                  {
                      error = m%"
                          extra fields %{std.serialize 'Json
                          ((std.record.fields remaining_fields) | Dyn)}
                          "%,
                      success = false,
                    }
                  else
                  (std.array.fold_right
                  (fun {field  | Dyn, value  | Dyn} => fun acc => let result =
                      additionalProperties value
                      in
                      
                      if !result.success then
                      {
                          error = m%"
                              field `%{field}` didn't validate: %{result.error}
                              "%,
                          success = false,
                        }
                      else
                      acc)
                  { error = "", success = true, }
                  (std.record.to_array remaining_fields))
                in
                
                if !check_properties.success then
                { error = check_properties.error, success = false, }
                else
                (if !check_pattern_properties.success then
                { error = check_pattern_properties.error, success = false, }
                else
                check_additional_properties)),
          required
            : Array String -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5.3]
            "%
            = fun fields x => if !(std.is_record x) then
                { error = "", success = true, }
                else
                (std.array.fold_right
                (fun field acc => if !(std.record.has_field field
                  (x | { _ : Dyn })) then
                  {
                      error = m%"
                          missing required field %{field}
                          "%,
                      success = false,
                    }
                  else
                  acc)
                { error = "", success = true, }
                fields),
        },
    strings = {
          maxLength
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.3.1]
            "%
            = fun limit x => if !(std.is_string x) then
                { error = "", success = true, }
                else
                (if (std.string.length (x | String)) <= limit then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected a string of length no larger than %{std.string.from_number
                      limit}
                      "%,
                  success = false,
                }),
          minLength
            : Number -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.3.2]
            "%
            = fun limit x => if !(std.is_string x) then
                { error = "", success = true, }
                else
                (if (std.string.length (x | String)) >= limit then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected a string of length no smaller than %{std.string.from_number
                      limit}
                      "%,
                  success = false,
                }),
          pattern
            : String -> Dyn -> { success: Bool, error: String }
            | doc m%"
            Cf. [https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.3.3]
            "%
            = fun pattern x => if !(std.is_string x) then
                { error = "", success = true, }
                else
                (if std.string.is_match pattern (x | String) then
                { error = "", success = true, }
                else
                {
                  error = m%"
                      expected a string matching the pattern `%{pattern}`
                      "%,
                  success = false,
                }),
        },
  }
in

let rec definitions =
{
    contract = {
          "io.argoproj.common.Amount"
            | doc m%"
            Amount represent a numeric amount.
            "%
            = Number,
          "io.argoproj.common.Backoff"
            | doc m%"
            Backoff for an operation
            "%
            = {
                duration
                  | definitions.contract."io.argoproj.common.Int64OrString"
                  | doc m%"
                  The initial duration in nanoseconds or strings like "1s", "3m"
                  "%
                  | optional,
                factor
                  | definitions.contract."io.argoproj.common.Amount"
                  | doc m%"
                  Duration is multiplied by factor each iteration
                  "%
                  | optional,
                jitter
                  | definitions.contract."io.argoproj.common.Amount"
                  | doc m%"
                  The amount of jitter applied each iteration
                  "%
                  | optional,
                steps
                  | std.number.Integer
                  | doc m%"
                  Exit with error after this many steps
                  "%
                  | optional,
                ..
              },
          "io.argoproj.common.BasicAuth"
            | doc m%"
            BasicAuth contains the reference to K8s secrets that holds the username and password
            "%
            = {
                password
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Password refers to the Kubernetes secret that holds the password required for basic auth.
                  "%
                  | optional,
                username
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Username refers to the Kubernetes secret that holds the username required for basic auth.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.common.Condition"
            | doc m%"
            Condition contains details about resource state
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  Human-readable message indicating details about last transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. For example, "ImageNotFound"
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  Condition status, True, False or Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  Condition type.
                  "%,
                ..
              },
          "io.argoproj.common.Int64OrString" =
            predicates.contract_from_predicate
              definitions.predicate."io.argoproj.common.Int64OrString",
          "io.argoproj.common.Metadata"
            | doc m%"
            Metadata holds the annotations and labels of an event source pod
            "%
            = {
                annotations
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | optional,
                labels
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | optional,
                ..
              },
          "io.argoproj.common.Resource"
            | doc m%"
            Resource represent arbitrary structured data.
            "%
            = {  .. },
          "io.argoproj.common.S3Artifact"
            | doc m%"
            S3Artifact contains information about an S3 connection and bucket
            "%
            = {
                accessKey
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector",
                bucket | definitions.contract."io.argoproj.common.S3Bucket",
                endpoint | String,
                events
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | optional,
                filter
                  | definitions.contract."io.argoproj.common.S3Filter"
                  | optional,
                insecure | Bool | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | optional,
                region | String | optional,
                secretKey
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector",
                ..
              },
          "io.argoproj.common.S3Bucket"
            | doc m%"
            S3Bucket contains information to describe an S3 Bucket
            "%
            = { key | String | optional, name | String, .. },
          "io.argoproj.common.S3Filter"
            | doc m%"
            S3Filter represents filters to apply to bucket notifications for specifying constraints on objects
            "%
            = { prefix | String, suffix | String, .. },
          "io.argoproj.common.SASLConfig"
            | doc m%"
            SASLConfig refers to SASL configuration for a client
            "%
            = {
                mechanism
                  | String
                  | doc m%"
                  SASLMechanism is the name of the enabled SASL mechanism. Possible values: OAUTHBEARER, PLAIN (defaults to PLAIN).
                  "%
                  | optional,
                passwordSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Password for SASL/PLAIN authentication
                  "%
                  | optional,
                userSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  User is the authentication identity (authcid) to present for SASL/PLAIN or SASL/SCRAM authentication
                  "%
                  | optional,
                ..
              },
          "io.argoproj.common.SchemaRegistryConfig"
            | doc m%"
            SchemaRegistryConfig refers to configuration for a client
            "%
            = {
                auth
                  | definitions.contract."io.argoproj.common.BasicAuth"
                  | doc m%"
                  SchemaRegistry - basic authentication
                  "%
                  | optional,
                schemaId
                  | std.number.Integer
                  | doc m%"
                  Schema ID
                  "%,
                url
                  | String
                  | doc m%"
                  Schema Registry URL.
                  "%,
                ..
              },
          "io.argoproj.common.SecureHeader"
            | doc m%"
            SecureHeader refers to HTTP Headers with auth tokens as values
            "%
            = {
                name | String | optional,
                valueFrom
                  | definitions.contract."io.argoproj.common.ValueFromSource"
                  | doc m%"
                  Values can be read from either secrets or configmaps
                  "%
                  | optional,
                ..
              },
          "io.argoproj.common.Status"
            | doc m%"
            Status is a common structure which can be used for Status field.
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.common.Condition"
                  ])
                  | doc m%"
                  Conditions are the latest available observations of a resource's current state.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.common.TLSConfig"
            | doc m%"
            TLSConfig refers to TLS configuration for a client.
            "%
            = {
                caCertSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  CACertSecret refers to the secret that contains the CA cert
                  "%
                  | optional,
                clientCertSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  ClientCertSecret refers to the secret that contains the client cert
                  "%
                  | optional,
                clientKeySecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  ClientKeySecret refers to the secret that contains the client key
                  "%
                  | optional,
                insecureSkipVerify
                  | Bool
                  | doc m%"
                  If true, skips creation of TLSConfig with certs and creates an empty TLSConfig. (Defaults to false)
                  "%
                  | optional,
                ..
              },
          "io.argoproj.common.ValueFromSource"
            | doc m%"
            ValueFromSource allows you to reference keys from either a Configmap or Secret
            "%
            = {
                configMapKeyRef
                  | definitions.contract."io.k8s.api.core.v1.ConfigMapKeySelector"
                  | optional,
                secretKeyRef
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | optional,
                ..
              },
          "io.argoproj.eventbus.v1alpha1.BusConfig"
            | doc m%"
            BusConfig has the finalized configuration for EventBus
            "%
            = {
                jetstream
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.JetStreamConfig"
                  | optional,
                kafka
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.KafkaBus"
                  | optional,
                nats
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.NATSConfig"
                  | optional,
                ..
              },
          "io.argoproj.eventbus.v1alpha1.ContainerTemplate"
            | doc m%"
            ContainerTemplate defines customized spec for a container
            "%
            = {
                imagePullPolicy | String | optional,
                resources
                  | definitions.contract."io.k8s.api.core.v1.ResourceRequirements"
                  | optional,
                securityContext
                  | definitions.contract."io.k8s.api.core.v1.SecurityContext"
                  | optional,
                ..
              },
          "io.argoproj.eventbus.v1alpha1.EventBus"
            | doc m%"
            EventBus is the definition of a eventbus resource
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.argoproj.eventbus.v1alpha1.EventBus",
          "io.argoproj.eventbus.v1alpha1.EventBusList"
            | doc m%"
            EventBusList is the list of eventbus resources
            "%
            = {
                apiVersion
                  | String
                  | doc m%"
                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                  "%
                  | optional,
                items
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.EventBus"
                  ]),
                kind
                  | String
                  | doc m%"
                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                  "%
                  | optional,
                metadata
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                ..
              },
          "io.argoproj.eventbus.v1alpha1.EventBusSpec"
            | doc m%"
            EventBusSpec refers to specification of eventbus resource
            "%
            = {
                jetstream
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.JetStreamBus"
                  | optional,
                kafka
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.KafkaBus"
                  | doc m%"
                  Kafka eventbus
                  "%
                  | optional,
                nats
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.NATSBus"
                  | doc m%"
                  NATS eventbus
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventbus.v1alpha1.EventBusStatus"
            | doc m%"
            EventBusStatus holds the status of the eventbus resource
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.common.Condition"
                  ])
                  | doc m%"
                  Conditions are the latest available observations of a resource's current state.
                  "%
                  | optional,
                config
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.BusConfig"
                  | doc m%"
                  Config holds the fininalized configuration of EventBus
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventbus.v1alpha1.JetStreamBus"
            | doc m%"
            JetStreamBus holds the JetStream EventBus information
            "%
            = {
                affinity
                  | definitions.contract."io.k8s.api.core.v1.Affinity"
                  | doc m%"
                  The pod's scheduling constraints More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
                  "%
                  | optional,
                containerTemplate
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                  | doc m%"
                  ContainerTemplate contains customized spec for Nats JetStream container
                  "%
                  | optional,
                imagePullSecrets
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.LocalObjectReference"
                  ])
                  | doc m%"
                  ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
                  "%
                  | optional,
                maxPayload
                  | String
                  | doc m%"
                  Maximum number of bytes in a message payload, 0 means unlimited. Defaults to 1MB
                  "%
                  | optional,
                metadata
                  | definitions.contract."io.argoproj.common.Metadata"
                  | doc m%"
                  Metadata sets the pods's metadata, i.e. annotations and labels
                  "%
                  | optional,
                metricsContainerTemplate
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                  | doc m%"
                  MetricsContainerTemplate contains customized spec for metrics container
                  "%
                  | optional,
                nodeSelector
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
                  "%
                  | optional,
                persistence
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.PersistenceStrategy"
                  | optional,
                "priority"
                  | std.number.Integer
                  | doc m%"
                  The priority value. Various system components use this field to find the priority of the Redis pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
                  "%
                  | optional,
                priorityClassName
                  | String
                  | doc m%"
                  If specified, indicates the Redis pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
                  "%
                  | optional,
                reloaderContainerTemplate
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                  | doc m%"
                  ReloaderContainerTemplate contains customized spec for config reloader container
                  "%
                  | optional,
                replicas
                  | std.number.Integer
                  | doc m%"
                  Redis StatefulSet size
                  "%
                  | optional,
                securityContext
                  | definitions.contract."io.k8s.api.core.v1.PodSecurityContext"
                  | doc m%"
                  SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
                  "%
                  | optional,
                serviceAccountName
                  | String
                  | doc m%"
                  ServiceAccountName to apply to the StatefulSet
                  "%
                  | optional,
                settings
                  | String
                  | doc m%"
                  JetStream configuration, if not specified, global settings in controller-config will be used. See https://docs.nats.io/running-a-nats-service/configuration#jetstream. Only configure "max_memory_store" or "max_file_store", do not set "store_dir" as it has been hardcoded.
                  "%
                  | optional,
                startArgs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Optional arguments to start nats-server. For example, "-D" to enable debugging output, "-DV" to enable debugging and tracing. Check https://docs.nats.io/ for all the available arguments.
                  "%
                  | optional,
                streamConfig
                  | String
                  | doc m%"
                  Optional configuration for the streams to be created in this JetStream service, if specified, it will be merged with the default configuration in controller-config. It accepts a YAML format configuration, available fields include, "maxBytes", "maxMsgs", "maxAge" (e.g. 72h), "replicas" (1, 3, 5), "duplicates" (e.g. 5m).
                  "%
                  | optional,
                tolerations
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Toleration"
                  ])
                  | doc m%"
                  If specified, the pod's tolerations.
                  "%
                  | optional,
                version
                  | String
                  | doc m%"
                  JetStream version, such as "2.7.3"
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventbus.v1alpha1.JetStreamConfig" = {
                accessSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Secret for auth
                  "%
                  | optional,
                streamConfig | String | optional,
                url
                  | String
                  | doc m%"
                  JetStream (Nats) URL
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventbus.v1alpha1.KafkaBus"
            | doc m%"
            KafkaBus holds the KafkaBus EventBus information
            "%
            = {
                consumerGroup
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.KafkaConsumerGroup"
                  | doc m%"
                  Consumer group for kafka client
                  "%
                  | optional,
                sasl
                  | definitions.contract."io.argoproj.common.SASLConfig"
                  | doc m%"
                  SASL configuration for the kafka client
                  "%
                  | optional,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the kafka client.
                  "%
                  | optional,
                topic
                  | String
                  | doc m%"
                  Topic name, defaults to {namespace_name}-{eventbus_name}
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  URL to kafka cluster, multiple URLs separated by comma
                  "%
                  | optional,
                version
                  | String
                  | doc m%"
                  Kafka version, sarama defaults to the oldest supported stable version
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventbus.v1alpha1.KafkaConsumerGroup" = {
                groupName
                  | String
                  | doc m%"
                  Consumer group name, defaults to {namespace_name}-{sensor_name}
                  "%
                  | optional,
                rebalanceStrategy
                  | String
                  | doc m%"
                  Rebalance strategy can be one of: sticky, roundrobin, range. Range is the default.
                  "%
                  | optional,
                startOldest
                  | Bool
                  | doc m%"
                  When starting up a new group do we want to start from the oldest event (true) or the newest event (false), defaults to false
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventbus.v1alpha1.NATSBus"
            | doc m%"
            NATSBus holds the NATS eventbus information
            "%
            = {
                exotic
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.NATSConfig"
                  | doc m%"
                  Exotic holds an exotic NATS config
                  "%
                  | optional,
                native
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.NativeStrategy"
                  | doc m%"
                  Native means to bring up a native NATS service
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventbus.v1alpha1.NATSConfig"
            | doc m%"
            NATSConfig holds the config of NATS
            "%
            = {
                accessSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Secret for auth
                  "%
                  | optional,
                auth
                  | String
                  | doc m%"
                  Auth strategy, default to AuthStrategyNone
                  "%
                  | optional,
                clusterID
                  | String
                  | doc m%"
                  Cluster ID for nats streaming
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  NATS streaming url
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventbus.v1alpha1.NativeStrategy"
            | doc m%"
            NativeStrategy indicates to install a native NATS service
            "%
            = {
                affinity
                  | definitions.contract."io.k8s.api.core.v1.Affinity"
                  | doc m%"
                  The pod's scheduling constraints More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
                  "%
                  | optional,
                auth | String | optional,
                containerTemplate
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                  | doc m%"
                  ContainerTemplate contains customized spec for NATS container
                  "%
                  | optional,
                imagePullSecrets
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.LocalObjectReference"
                  ])
                  | doc m%"
                  ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
                  "%
                  | optional,
                maxAge
                  | String
                  | doc m%"
                  Max Age of existing messages, i.e. "72h", “4h35m”
                  "%
                  | optional,
                maxBytes
                  | String
                  | doc m%"
                  Total size of messages per channel, 0 means unlimited. Defaults to 1GB
                  "%
                  | optional,
                maxMsgs
                  | std.number.Integer
                  | doc m%"
                  Maximum number of messages per channel, 0 means unlimited. Defaults to 1000000
                  "%
                  | optional,
                maxPayload
                  | String
                  | doc m%"
                  Maximum number of bytes in a message payload, 0 means unlimited. Defaults to 1MB
                  "%
                  | optional,
                maxSubs
                  | std.number.Integer
                  | doc m%"
                  Maximum number of subscriptions per channel, 0 means unlimited. Defaults to 1000
                  "%
                  | optional,
                metadata
                  | definitions.contract."io.argoproj.common.Metadata"
                  | doc m%"
                  Metadata sets the pods's metadata, i.e. annotations and labels
                  "%
                  | optional,
                metricsContainerTemplate
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.ContainerTemplate"
                  | doc m%"
                  MetricsContainerTemplate contains customized spec for metrics container
                  "%
                  | optional,
                nodeSelector
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
                  "%
                  | optional,
                persistence
                  | definitions.contract."io.argoproj.eventbus.v1alpha1.PersistenceStrategy"
                  | optional,
                "priority"
                  | std.number.Integer
                  | doc m%"
                  The priority value. Various system components use this field to find the priority of the EventSource pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
                  "%
                  | optional,
                priorityClassName
                  | String
                  | doc m%"
                  If specified, indicates the EventSource pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
                  "%
                  | optional,
                raftCommitTimeout
                  | String
                  | doc m%"
                  Specifies the time without an Apply() operation before sending an heartbeat to ensure timely commit, i.e. "72h", “4h35m”. Defaults to 100ms
                  "%
                  | optional,
                raftElectionTimeout
                  | String
                  | doc m%"
                  Specifies the time in candidate state without a leader before attempting an election, i.e. "72h", “4h35m”. Defaults to 2s
                  "%
                  | optional,
                raftHeartbeatTimeout
                  | String
                  | doc m%"
                  Specifies the time in follower state without a leader before attempting an election, i.e. "72h", “4h35m”. Defaults to 2s
                  "%
                  | optional,
                raftLeaseTimeout
                  | String
                  | doc m%"
                  Specifies how long a leader waits without being able to contact a quorum of nodes before stepping down as leader, i.e. "72h", “4h35m”. Defaults to 1s
                  "%
                  | optional,
                replicas
                  | std.number.Integer
                  | doc m%"
                  Size is the NATS StatefulSet size
                  "%
                  | optional,
                securityContext
                  | definitions.contract."io.k8s.api.core.v1.PodSecurityContext"
                  | doc m%"
                  SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
                  "%
                  | optional,
                serviceAccountName
                  | String
                  | doc m%"
                  ServiceAccountName to apply to NATS StatefulSet
                  "%
                  | optional,
                tolerations
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Toleration"
                  ])
                  | doc m%"
                  If specified, the pod's tolerations.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventbus.v1alpha1.PersistenceStrategy"
            | doc m%"
            PersistenceStrategy defines the strategy of persistence
            "%
            = {
                accessMode
                  | String
                  | doc m%"
                  Available access modes such as ReadWriteOnce, ReadWriteMany https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
                  "%
                  | optional,
                storageClassName
                  | String
                  | doc m%"
                  Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                  "%
                  | optional,
                volumeSize
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  Volume size, e.g. 10Gi
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.AMQPConsumeConfig"
            | doc m%"
            AMQPConsumeConfig holds the configuration to immediately starts delivering queued messages
            "%
            = {
                autoAck
                  | Bool
                  | doc m%"
                  AutoAck when true, the server will acknowledge deliveries to this consumer prior to writing the delivery to the network
                  "%
                  | optional,
                consumerTag
                  | String
                  | doc m%"
                  ConsumerTag is the identity of the consumer included in every delivery
                  "%
                  | optional,
                exclusive
                  | Bool
                  | doc m%"
                  Exclusive when true, the server will ensure that this is the sole consumer from this queue
                  "%
                  | optional,
                noLocal
                  | Bool
                  | doc m%"
                  NoLocal flag is not supported by RabbitMQ
                  "%
                  | optional,
                noWait
                  | Bool
                  | doc m%"
                  NowWait when true, do not wait for the server to confirm the request and immediately begin deliveries
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.AMQPEventSource"
            | doc m%"
            AMQPEventSource refers to an event-source for AMQP stream events
            "%
            = {
                auth
                  | definitions.contract."io.argoproj.common.BasicAuth"
                  | doc m%"
                  Auth hosts secret selectors for username and password
                  "%
                  | optional,
                connectionBackoff
                  | definitions.contract."io.argoproj.common.Backoff"
                  | doc m%"
                  Backoff holds parameters applied to connection.
                  "%
                  | optional,
                consume
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.AMQPConsumeConfig"
                  | doc m%"
                  Consume holds the configuration to immediately starts delivering queued messages For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.Consume
                  "%
                  | optional,
                exchangeDeclare
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.AMQPExchangeDeclareConfig"
                  | doc m%"
                  ExchangeDeclare holds the configuration for the exchange on the server For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.ExchangeDeclare
                  "%
                  | optional,
                exchangeName
                  | String
                  | doc m%"
                  ExchangeName is the exchange name For more information, visit https://www.rabbitmq.com/tutorials/amqp-concepts.html
                  "%,
                exchangeType
                  | String
                  | doc m%"
                  ExchangeType is rabbitmq exchange type
                  "%,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                jsonBody
                  | Bool
                  | doc m%"
                  JSONBody specifies that all event body payload coming from this source will be JSON
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                queueBind
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.AMQPQueueBindConfig"
                  | doc m%"
                  QueueBind holds the configuration that binds an exchange to a queue so that publishings to the exchange will be routed to the queue when the publishing routing key matches the binding routing key For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.QueueBind
                  "%
                  | optional,
                queueDeclare
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.AMQPQueueDeclareConfig"
                  | doc m%"
                  QueueDeclare holds the configuration of a queue to hold messages and deliver to consumers. Declaring creates a queue if it doesn't already exist, or ensures that an existing queue matches the same parameters For more information, visit https://pkg.go.dev/github.com/rabbitmq/amqp091-go#Channel.QueueDeclare
                  "%
                  | optional,
                routingKey
                  | String
                  | doc m%"
                  Routing key for bindings
                  "%,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the amqp client.
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  URL for rabbitmq service
                  "%
                  | optional,
                urlSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  URLSecret is secret reference for rabbitmq service URL
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.AMQPExchangeDeclareConfig"
            | doc m%"
            AMQPExchangeDeclareConfig holds the configuration for the exchange on the server
            "%
            = {
                autoDelete
                  | Bool
                  | doc m%"
                  AutoDelete removes the exchange when no bindings are active
                  "%
                  | optional,
                durable
                  | Bool
                  | doc m%"
                  Durable keeps the exchange also after the server restarts
                  "%
                  | optional,
                internal
                  | Bool
                  | doc m%"
                  Internal when true does not accept publishings
                  "%
                  | optional,
                noWait
                  | Bool
                  | doc m%"
                  NowWait when true does not wait for a confirmation from the server
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.AMQPQueueBindConfig"
            | doc m%"
            AMQPQueueBindConfig holds the configuration that binds an exchange to a queue so that publishings to the exchange will be routed to the queue when the publishing routing key matches the binding routing key
            "%
            = {
                noWait
                  | Bool
                  | doc m%"
                  NowWait false and the queue could not be bound, the channel will be closed with an error
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.AMQPQueueDeclareConfig"
            | doc m%"
            AMQPQueueDeclareConfig holds the configuration of a queue to hold messages and deliver to consumers. Declaring creates a queue if it doesn't already exist, or ensures that an existing queue matches the same parameters
            "%
            = {
                arguments
                  | String
                  | doc m%"
                  Arguments of a queue (also known as "x-arguments") used for optional features and plugins
                  "%
                  | optional,
                autoDelete
                  | Bool
                  | doc m%"
                  AutoDelete removes the queue when no consumers are active
                  "%
                  | optional,
                durable
                  | Bool
                  | doc m%"
                  Durable keeps the queue also after the server restarts
                  "%
                  | optional,
                exclusive
                  | Bool
                  | doc m%"
                  Exclusive sets the queues to be accessible only by the connection that declares them and will be deleted wgen the connection closes
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name of the queue. If empty the server auto-generates a unique name for this queue
                  "%
                  | optional,
                noWait
                  | Bool
                  | doc m%"
                  NowWait when true, the queue assumes to be declared on the server
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.AzureEventsHubEventSource"
            | doc m%"
            AzureEventsHubEventSource describes the event source for azure events hub More info at https://docs.microsoft.com/en-us/azure/event-hubs/
            "%
            = {
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                fqdn
                  | String
                  | doc m%"
                  FQDN of the EventHubs namespace you created More info at https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string
                  "%,
                hubName
                  | String
                  | doc m%"
                  Event Hub path/name
                  "%,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                sharedAccessKey
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  SharedAccessKey is the generated value of the key
                  "%
                  | optional,
                sharedAccessKeyName
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  SharedAccessKeyName is the name you chose for your application's SAS keys
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.AzureQueueStorageEventSource"
            | doc m%"
            AzureQueueStorageEventSource describes the event source for azure queue storage more info at https://learn.microsoft.com/en-us/azure/storage/queues/
            "%
            = {
                connectionString
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  ConnectionString is the connection string to access Azure Queue Storage. If this fields is not provided it will try to access via Azure AD with StorageAccountName.
                  "%
                  | optional,
                decodeMessage
                  | Bool
                  | doc m%"
                  DecodeMessage specifies if all the messages should be base64 decoded. If set to true the decoding is done before the evaluation of JSONBody
                  "%
                  | optional,
                dlq
                  | Bool
                  | doc m%"
                  DLQ specifies if a dead-letter queue is configured for messages that can't be processed successfully. If set to true, messages with invalid payload won't be acknowledged to allow to forward them farther to the dead-letter queue. The default value is false.
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                jsonBody
                  | Bool
                  | doc m%"
                  JSONBody specifies that all event body payload coming from this source will be JSON
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                queueName
                  | String
                  | doc m%"
                  QueueName is the name of the queue
                  "%,
                storageAccountName
                  | String
                  | doc m%"
                  StorageAccountName is the name of the storage account where the queue is. This field is necessary to access via Azure AD (managed identity) and it is ignored if ConnectionString is set.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.AzureServiceBusEventSource"
            | doc m%"
            AzureServiceBusEventSource describes the event source for azure service bus More info at https://docs.microsoft.com/en-us/azure/service-bus-messaging/
            "%
            = {
                connectionString
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  ConnectionString is the connection string for the Azure Service Bus. If this fields is not provided it will try to access via Azure AD with DefaultAzureCredential and FullyQualifiedNamespace.
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                fullyQualifiedNamespace
                  | String
                  | doc m%"
                  FullyQualifiedNamespace is the Service Bus namespace name (ex: myservicebus.servicebus.windows.net). This field is necessary to access via Azure AD (managed identity) and it is ignored if ConnectionString is set.
                  "%
                  | optional,
                jsonBody
                  | Bool
                  | doc m%"
                  JSONBody specifies that all event body payload coming from this source will be JSON
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                queueName
                  | String
                  | doc m%"
                  QueueName is the name of the Azure Service Bus Queue
                  "%,
                subscriptionName
                  | String
                  | doc m%"
                  SubscriptionName is the name of the Azure Service Bus Topic Subscription
                  "%,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the service bus client
                  "%
                  | optional,
                topicName
                  | String
                  | doc m%"
                  TopicName is the name of the Azure Service Bus Topic
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.BitbucketAuth"
            | doc m%"
            BitbucketAuth holds the different auth strategies for connecting to Bitbucket
            "%
            = {
                basic
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.BitbucketBasicAuth"
                  | doc m%"
                  Basic is BasicAuth auth strategy.
                  "%
                  | optional,
                oauthToken
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  OAuthToken refers to the K8s secret that holds the OAuth Bearer token.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.BitbucketBasicAuth"
            | doc m%"
            BasicAuth holds the information required to authenticate user via basic auth mechanism
            "%
            = {
                password
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Password refers to the K8s secret that holds the password.
                  "%,
                username
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Username refers to the K8s secret that holds the username.
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.BitbucketEventSource"
            | doc m%"
            BitbucketEventSource describes the event source for Bitbucket
            "%
            = {
                auth
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.BitbucketAuth"
                  | doc m%"
                  Auth information required to connect to Bitbucket.
                  "%,
                deleteHookOnFinish
                  | Bool
                  | doc m%"
                  DeleteHookOnFinish determines whether to delete the defined Bitbucket hook once the event source is stopped.
                  "%
                  | optional,
                events
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Events this webhook is subscribed to.
                  "%,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will be passed along the event payload.
                  "%
                  | optional,
                owner
                  | String
                  | doc m%"
                  DeprecatedOwner is the owner of the repository. Deprecated: use Repositories instead. Will be unsupported in v1.9
                  "%
                  | optional,
                projectKey
                  | String
                  | doc m%"
                  DeprecatedProjectKey is the key of the project to which the repository relates Deprecated: use Repositories instead. Will be unsupported in v1.9
                  "%
                  | optional,
                repositories
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.BitbucketRepository"
                  ])
                  | doc m%"
                  Repositories holds a list of repositories for which integration needs to set up
                  "%
                  | optional,
                repositorySlug
                  | String
                  | doc m%"
                  DeprecatedRepositorySlug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL Deprecated: use Repositories instead. Will be unsupported in v1.9
                  "%
                  | optional,
                webhook
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.WebhookContext"
                  | doc m%"
                  Webhook refers to the configuration required to run an http server
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.BitbucketRepository" = {
                owner
                  | String
                  | doc m%"
                  Owner is the owner of the repository
                  "%,
                repositorySlug
                  | String
                  | doc m%"
                  RepositorySlug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.BitbucketServerEventSource"
            | doc m%"
            BitbucketServerEventSource refers to event-source related to Bitbucket Server events
            "%
            = {
                accessToken
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  AccessToken is reference to K8s secret which holds the bitbucket api access information
                  "%
                  | optional,
                bitbucketserverBaseURL
                  | String
                  | doc m%"
                  BitbucketServerBaseURL is the base URL for API requests to a custom endpoint
                  "%,
                deleteHookOnFinish
                  | Bool
                  | doc m%"
                  DeleteHookOnFinish determines whether to delete the Bitbucket Server hook for the project once the event source is stopped.
                  "%
                  | optional,
                events
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Events are bitbucket event to listen to. Refer https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html
                  "%,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                projectKey
                  | String
                  | doc m%"
                  DeprecatedProjectKey is the key of project for which integration needs to set up Deprecated: use Repositories instead. Will be unsupported in v1.8
                  "%
                  | optional,
                repositories
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.BitbucketServerRepository"
                  ])
                  | doc m%"
                  Repositories holds a list of repositories for which integration needs to set up
                  "%
                  | optional,
                repositorySlug
                  | String
                  | doc m%"
                  DeprecatedRepositorySlug is the slug of the repository for which integration needs to set up Deprecated: use Repositories instead. Will be unsupported in v1.8
                  "%
                  | optional,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the bitbucketserver client.
                  "%
                  | optional,
                webhook
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.WebhookContext"
                  | doc m%"
                  Webhook holds configuration to run a http server
                  "%
                  | optional,
                webhookSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  WebhookSecret is reference to K8s secret which holds the bitbucket webhook secret (for HMAC validation)
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.BitbucketServerRepository" = {
                projectKey
                  | String
                  | doc m%"
                  ProjectKey is the key of project for which integration needs to set up
                  "%,
                repositorySlug
                  | String
                  | doc m%"
                  RepositorySlug is the slug of the repository for which integration needs to set up
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.CalendarEventSource"
            | doc m%"
            CalendarEventSource describes a time based dependency. One of the fields (schedule, interval, or recurrence) must be passed. Schedule takes precedence over interval; interval takes precedence over recurrence
            "%
            = {
                exclusionDates
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  ExclusionDates defines the list of DATE-TIME exceptions for recurring events.
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                interval
                  | String
                  | doc m%"
                  Interval is a string that describes an interval duration, e.g. 1s, 30m, 2h...
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                persistence
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventPersistence"
                  | doc m%"
                  Persistence hold the configuration for event persistence
                  "%
                  | optional,
                schedule
                  | String
                  | doc m%"
                  Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron
                  "%
                  | optional,
                timezone
                  | String
                  | doc m%"
                  Timezone in which to run the schedule
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.CatchupConfiguration" = {
                enabled
                  | Bool
                  | doc m%"
                  Enabled enables to triggered the missed schedule when eventsource restarts
                  "%
                  | optional,
                maxDuration
                  | String
                  | doc m%"
                  MaxDuration holds max catchup duration
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.ConfigMapPersistence" = {
                createIfNotExist
                  | Bool
                  | doc m%"
                  CreateIfNotExist will create configmap if it doesn't exists
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name of the configmap
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.EmitterEventSource"
            | doc m%"
            EmitterEventSource describes the event source for emitter More info at https://emitter.io/develop/getting-started/
            "%
            = {
                broker
                  | String
                  | doc m%"
                  Broker URI to connect to.
                  "%,
                channelKey
                  | String
                  | doc m%"
                  ChannelKey refers to the channel key
                  "%,
                channelName
                  | String
                  | doc m%"
                  ChannelName refers to the channel name
                  "%,
                connectionBackoff
                  | definitions.contract."io.argoproj.common.Backoff"
                  | doc m%"
                  Backoff holds parameters applied to connection.
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                jsonBody
                  | Bool
                  | doc m%"
                  JSONBody specifies that all event body payload coming from this source will be JSON
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                password
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Password to use to connect to broker
                  "%
                  | optional,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the emitter client.
                  "%
                  | optional,
                username
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Username to use to connect to broker
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.EventPersistence" = {
                catchup
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.CatchupConfiguration"
                  | doc m%"
                  Catchup enables to triggered the missed schedule when eventsource restarts
                  "%
                  | optional,
                configMap
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.ConfigMapPersistence"
                  | doc m%"
                  ConfigMap holds configmap details for persistence
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.EventSource"
            | doc m%"
            EventSource is the definition of a eventsource resource
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSource",
          "io.argoproj.eventsource.v1alpha1.EventSourceFilter" = {
                expression | String | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.EventSourceList"
            | doc m%"
            EventSourceList is the list of eventsource resources
            "%
            = {
                apiVersion
                  | String
                  | doc m%"
                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                  "%
                  | optional,
                items
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSource"
                  ]),
                kind
                  | String
                  | doc m%"
                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                  "%
                  | optional,
                metadata
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                ..
              },
          "io.argoproj.eventsource.v1alpha1.EventSourceSpec"
            | doc m%"
            EventSourceSpec refers to specification of event-source resource
            "%
            = {
                amqp
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.AMQPEventSource"
                  ])
                  | doc m%"
                  AMQP event sources
                  "%
                  | optional,
                azureEventsHub
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.AzureEventsHubEventSource"
                  ])
                  | doc m%"
                  AzureEventsHub event sources
                  "%
                  | optional,
                azureQueueStorage
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.AzureQueueStorageEventSource"
                  ])
                  | doc m%"
                  AzureQueueStorage event source
                  "%
                  | optional,
                azureServiceBus
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.AzureServiceBusEventSource"
                  ])
                  | doc m%"
                  Azure Service Bus event source
                  "%
                  | optional,
                bitbucket
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.BitbucketEventSource"
                  ])
                  | doc m%"
                  Bitbucket event sources
                  "%
                  | optional,
                bitbucketserver
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.BitbucketServerEventSource"
                  ])
                  | doc m%"
                  Bitbucket Server event sources
                  "%
                  | optional,
                calendar
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.CalendarEventSource"
                  ])
                  | doc m%"
                  Calendar event sources
                  "%
                  | optional,
                emitter
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EmitterEventSource"
                  ])
                  | doc m%"
                  Emitter event source
                  "%
                  | optional,
                eventBusName
                  | String
                  | doc m%"
                  EventBusName references to a EventBus name. By default the value is "default"
                  "%
                  | optional,
                file
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.FileEventSource"
                  ])
                  | doc m%"
                  File event sources
                  "%
                  | optional,
                generic
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.GenericEventSource"
                  ])
                  | doc m%"
                  Generic event source
                  "%
                  | optional,
                gerrit
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.GerritEventSource"
                  ])
                  | doc m%"
                  Gerrit event source
                  "%
                  | optional,
                github
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.GithubEventSource"
                  ])
                  | doc m%"
                  Github event sources
                  "%
                  | optional,
                gitlab
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.GitlabEventSource"
                  ])
                  | doc m%"
                  Gitlab event sources
                  "%
                  | optional,
                hdfs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.HDFSEventSource"
                  ])
                  | doc m%"
                  HDFS event sources
                  "%
                  | optional,
                kafka
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.KafkaEventSource"
                  ])
                  | doc m%"
                  Kafka event sources
                  "%
                  | optional,
                minio
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.common.S3Artifact"
                  ])
                  | doc m%"
                  Minio event sources
                  "%
                  | optional,
                mqtt
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.MQTTEventSource"
                  ])
                  | doc m%"
                  MQTT event sources
                  "%
                  | optional,
                nats
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.NATSEventsSource"
                  ])
                  | doc m%"
                  NATS event sources
                  "%
                  | optional,
                nsq
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.NSQEventSource"
                  ])
                  | doc m%"
                  NSQ event source
                  "%
                  | optional,
                pubSub
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.PubSubEventSource"
                  ])
                  | doc m%"
                  PubSub event sources
                  "%
                  | optional,
                pulsar
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.PulsarEventSource"
                  ])
                  | doc m%"
                  Pulsar event source
                  "%
                  | optional,
                redis
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.RedisEventSource"
                  ])
                  | doc m%"
                  Redis event source
                  "%
                  | optional,
                redisStream
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.RedisStreamEventSource"
                  ])
                  | doc m%"
                  Redis stream source
                  "%
                  | optional,
                replicas
                  | std.number.Integer
                  | doc m%"
                  Replicas is the event source deployment replicas
                  "%
                  | optional,
                resource
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.ResourceEventSource"
                  ])
                  | doc m%"
                  Resource event sources
                  "%
                  | optional,
                service
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.Service"
                  | doc m%"
                  Service is the specifications of the service to expose the event source
                  "%
                  | optional,
                sftp
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.SFTPEventSource"
                  ])
                  | doc m%"
                  SFTP event sources
                  "%
                  | optional,
                slack
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.SlackEventSource"
                  ])
                  | doc m%"
                  Slack event sources
                  "%
                  | optional,
                sns
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.SNSEventSource"
                  ])
                  | doc m%"
                  SNS event sources
                  "%
                  | optional,
                sqs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.SQSEventSource"
                  ])
                  | doc m%"
                  SQS event sources
                  "%
                  | optional,
                storageGrid
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.StorageGridEventSource"
                  ])
                  | doc m%"
                  StorageGrid event sources
                  "%
                  | optional,
                stripe
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.StripeEventSource"
                  ])
                  | doc m%"
                  Stripe event sources
                  "%
                  | optional,
                template
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.Template"
                  | doc m%"
                  Template is the pod specification for the event source
                  "%
                  | optional,
                webhook
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.WebhookEventSource"
                  ])
                  | doc m%"
                  Webhook event sources
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.EventSourceStatus"
            | doc m%"
            EventSourceStatus holds the status of the event-source resource
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.common.Condition"
                  ])
                  | doc m%"
                  Conditions are the latest available observations of a resource's current state.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.FileEventSource"
            | doc m%"
            FileEventSource describes an event-source for file related events.
            "%
            = {
                eventType
                  | String
                  | doc m%"
                  Type of file operations to watch Refer https://github.com/fsnotify/fsnotify/blob/master/fsnotify.go for more information
                  "%,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                polling
                  | Bool
                  | doc m%"
                  Use polling instead of inotify
                  "%
                  | optional,
                watchPathConfig
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.WatchPathConfig"
                  | doc m%"
                  WatchPathConfig contains configuration about the file path to watch
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.GenericEventSource"
            | doc m%"
            GenericEventSource refers to a generic event source. It can be used to implement a custom event source.
            "%
            = {
                authSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  AuthSecret holds a secret selector that contains a bearer token for authentication
                  "%
                  | optional,
                config
                  | String
                  | doc m%"
                  Config is the event source configuration
                  "%,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                insecure
                  | Bool
                  | doc m%"
                  Insecure determines the type of connection.
                  "%
                  | optional,
                jsonBody
                  | Bool
                  | doc m%"
                  JSONBody specifies that all event body payload coming from this source will be JSON
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  URL of the gRPC server that implements the event source.
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.GerritEventSource"
            | doc m%"
            GerritEventSource refers to event-source related to gerrit events
            "%
            = {
                auth
                  | definitions.contract."io.argoproj.common.BasicAuth"
                  | doc m%"
                  Auth hosts secret selectors for username and password
                  "%
                  | optional,
                deleteHookOnFinish
                  | Bool
                  | doc m%"
                  DeleteHookOnFinish determines whether to delete the Gerrit hook for the project once the event source is stopped.
                  "%
                  | optional,
                events
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Events are gerrit event to listen to. Refer https://gerrit-review.googlesource.com/Documentation/cmd-stream-events.html#events
                  "%,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                gerritBaseURL
                  | String
                  | doc m%"
                  GerritBaseURL is the base URL for API requests to a custom endpoint
                  "%,
                hookName
                  | String
                  | doc m%"
                  HookName is the name of the webhook
                  "%,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                projects
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  List of project namespace paths like "whynowy/test".
                  "%
                  | optional,
                sslVerify
                  | Bool
                  | doc m%"
                  SslVerify to enable ssl verification
                  "%
                  | optional,
                webhook
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.WebhookContext"
                  | doc m%"
                  Webhook holds configuration to run a http server
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.GithubAppCreds" = {
                appID
                  | std.number.Integer
                  | doc m%"
                  AppID refers to the GitHub App ID for the application you created
                  "%,
                installationID
                  | std.number.Integer
                  | doc m%"
                  InstallationID refers to the Installation ID of the GitHub app you created and installed
                  "%,
                privateKey
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  PrivateKey refers to a K8s secret containing the GitHub app private key
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.GithubEventSource"
            | doc m%"
            GithubEventSource refers to event-source for github related events
            "%
            = {
                active
                  | Bool
                  | doc m%"
                  Active refers to status of the webhook for event deliveries. https://developer.github.com/webhooks/creating/#active
                  "%
                  | optional,
                apiToken
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  APIToken refers to a K8s secret containing github api token
                  "%
                  | optional,
                contentType
                  | String
                  | doc m%"
                  ContentType of the event delivery
                  "%
                  | optional,
                deleteHookOnFinish
                  | Bool
                  | doc m%"
                  DeleteHookOnFinish determines whether to delete the GitHub hook for the repository once the event source is stopped.
                  "%
                  | optional,
                events
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Events refer to Github events to which the event source will subscribe
                  "%,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                githubApp
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.GithubAppCreds"
                  | doc m%"
                  GitHubApp holds the GitHub app credentials
                  "%
                  | optional,
                githubBaseURL
                  | String
                  | doc m%"
                  GitHub base URL (for GitHub Enterprise)
                  "%
                  | optional,
                githubUploadURL
                  | String
                  | doc m%"
                  GitHub upload URL (for GitHub Enterprise)
                  "%
                  | optional,
                id
                  | std.number.Integer
                  | doc m%"
                  Id is the webhook's id Deprecated: This is not used at all, will be removed in v1.6
                  "%
                  | optional,
                insecure
                  | Bool
                  | doc m%"
                  Insecure tls verification
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                organizations
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Organizations holds the names of organizations (used for organization level webhooks). Not required if Repositories is set.
                  "%
                  | optional,
                owner
                  | String
                  | doc m%"
                  DeprecatedOwner refers to GitHub owner name i.e. argoproj Deprecated: use Repositories instead. Will be unsupported in v 1.6
                  "%
                  | optional,
                repositories
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.OwnedRepositories"
                  ])
                  | doc m%"
                  Repositories holds the information of repositories, which uses repo owner as the key, and list of repo names as the value. Not required if Organizations is set.
                  "%
                  | optional,
                repository
                  | String
                  | doc m%"
                  DeprecatedRepository refers to GitHub repo name i.e. argo-events Deprecated: use Repositories instead. Will be unsupported in v 1.6
                  "%
                  | optional,
                webhook
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.WebhookContext"
                  | doc m%"
                  Webhook refers to the configuration required to run a http server
                  "%
                  | optional,
                webhookSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  WebhookSecret refers to K8s secret containing GitHub webhook secret https://developer.github.com/webhooks/securing/
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.GitlabEventSource"
            | doc m%"
            GitlabEventSource refers to event-source related to Gitlab events
            "%
            = {
                accessToken
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  AccessToken references to k8 secret which holds the gitlab api access information
                  "%
                  | optional,
                deleteHookOnFinish
                  | Bool
                  | doc m%"
                  DeleteHookOnFinish determines whether to delete the GitLab hook for the project once the event source is stopped.
                  "%
                  | optional,
                enableSSLVerification
                  | Bool
                  | doc m%"
                  EnableSSLVerification to enable ssl verification
                  "%
                  | optional,
                events
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Events are gitlab event to listen to. Refer https://github.com/xanzy/go-gitlab/blob/bf34eca5d13a9f4c3f501d8a97b8ac226d55e4d9/projects.go#L794.
                  "%,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                gitlabBaseURL
                  | String
                  | doc m%"
                  GitlabBaseURL is the base URL for API requests to a custom endpoint
                  "%,
                groups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  List of group IDs or group name like "test". Group level hook available in Premium and Ultimate Gitlab.
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                projectID
                  | String
                  | doc m%"
                  DeprecatedProjectID is the id of project for which integration needs to setup Deprecated: use Projects instead. Will be unsupported in v 1.7
                  "%
                  | optional,
                projects
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  List of project IDs or project namespace paths like "whynowy/test". Projects and groups cannot be empty at the same time.
                  "%
                  | optional,
                secretToken
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  SecretToken references to k8 secret which holds the Secret Token used by webhook config
                  "%
                  | optional,
                webhook
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.WebhookContext"
                  | doc m%"
                  Webhook holds configuration to run a http server
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.HDFSEventSource"
            | doc m%"
            HDFSEventSource refers to event-source for HDFS related events
            "%
            = {
                addresses
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ]),
                checkInterval
                  | String
                  | doc m%"
                  CheckInterval is a string that describes an interval duration to check the directory state, e.g. 1s, 30m, 2h... (defaults to 1m)
                  "%
                  | optional,
                directory
                  | String
                  | doc m%"
                  Directory to watch for events
                  "%,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                hdfsUser
                  | String
                  | doc m%"
                  HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.
                  "%
                  | optional,
                krbCCacheSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  KrbCCacheSecret is the secret selector for Kerberos ccache Either ccache or keytab can be set to use Kerberos.
                  "%
                  | optional,
                krbConfigConfigMap
                  | definitions.contract."io.k8s.api.core.v1.ConfigMapKeySelector"
                  | doc m%"
                  KrbConfig is the configmap selector for Kerberos config as string It must be set if either ccache or keytab is used.
                  "%
                  | optional,
                krbKeytabSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  KrbKeytabSecret is the secret selector for Kerberos keytab Either ccache or keytab can be set to use Kerberos.
                  "%
                  | optional,
                krbRealm
                  | String
                  | doc m%"
                  KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.
                  "%
                  | optional,
                krbServicePrincipalName
                  | String
                  | doc m%"
                  KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.
                  "%
                  | optional,
                krbUsername
                  | String
                  | doc m%"
                  KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                path
                  | String
                  | doc m%"
                  Path is relative path of object to watch with respect to the directory
                  "%
                  | optional,
                pathRegexp
                  | String
                  | doc m%"
                  PathRegexp is regexp of relative path of object to watch with respect to the directory
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  Type of file operations to watch
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.KafkaConsumerGroup" = {
                groupName
                  | String
                  | doc m%"
                  The name for the consumer group to use
                  "%,
                oldest
                  | Bool
                  | doc m%"
                  When starting up a new group do we want to start from the oldest event (true) or the newest event (false), defaults to false
                  "%
                  | optional,
                rebalanceStrategy
                  | String
                  | doc m%"
                  Rebalance strategy can be one of: sticky, roundrobin, range. Range is the default.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.KafkaEventSource"
            | doc m%"
            KafkaEventSource refers to event-source for Kafka related events
            "%
            = {
                config
                  | String
                  | doc m%"
                  Yaml format Sarama config for Kafka connection. It follows the struct of sarama.Config. See https://github.com/IBM/sarama/blob/main/config.go e.g.
                  
                  consumer:
                    fetch:
                      min: 1
                  net:
                    MaxOpenRequests: 5
                  "%
                  | optional,
                connectionBackoff
                  | definitions.contract."io.argoproj.common.Backoff"
                  | doc m%"
                  Backoff holds parameters applied to connection.
                  "%
                  | optional,
                consumerGroup
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.KafkaConsumerGroup"
                  | doc m%"
                  Consumer group for kafka client
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                jsonBody
                  | Bool
                  | doc m%"
                  JSONBody specifies that all event body payload coming from this source will be JSON
                  "%
                  | optional,
                limitEventsPerSecond
                  | std.number.Integer
                  | doc m%"
                  Sets a limit on how many events get read from kafka per second.
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                partition
                  | String
                  | doc m%"
                  Partition name
                  "%
                  | optional,
                sasl
                  | definitions.contract."io.argoproj.common.SASLConfig"
                  | doc m%"
                  SASL configuration for the kafka client
                  "%
                  | optional,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the kafka client.
                  "%
                  | optional,
                topic
                  | String
                  | doc m%"
                  Topic name
                  "%,
                url
                  | String
                  | doc m%"
                  URL to kafka cluster, multiple URLs separated by comma
                  "%,
                version
                  | String
                  | doc m%"
                  Specify what kafka version is being connected to enables certain features in sarama, defaults to 1.0.0
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.MQTTEventSource"
            | doc m%"
            MQTTEventSource refers to event-source for MQTT related events
            "%
            = {
                auth
                  | definitions.contract."io.argoproj.common.BasicAuth"
                  | doc m%"
                  Auth hosts secret selectors for username and password
                  "%
                  | optional,
                clientId
                  | String
                  | doc m%"
                  ClientID is the id of the client
                  "%,
                connectionBackoff
                  | definitions.contract."io.argoproj.common.Backoff"
                  | doc m%"
                  ConnectionBackoff holds backoff applied to connection.
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                jsonBody
                  | Bool
                  | doc m%"
                  JSONBody specifies that all event body payload coming from this source will be JSON
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the mqtt client.
                  "%
                  | optional,
                topic
                  | String
                  | doc m%"
                  Topic name
                  "%,
                url
                  | String
                  | doc m%"
                  URL to connect to broker
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.NATSAuth"
            | doc m%"
            NATSAuth refers to the auth info for NATS EventSource
            "%
            = {
                basic
                  | definitions.contract."io.argoproj.common.BasicAuth"
                  | doc m%"
                  Baisc auth with username and password
                  "%
                  | optional,
                credential
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  credential used to connect
                  "%
                  | optional,
                nkey
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  NKey used to connect
                  "%
                  | optional,
                token
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Token used to connect
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.NATSEventsSource"
            | doc m%"
            NATSEventsSource refers to event-source for NATS related events
            "%
            = {
                auth
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.NATSAuth"
                  | doc m%"
                  Auth information
                  "%
                  | optional,
                connectionBackoff
                  | definitions.contract."io.argoproj.common.Backoff"
                  | doc m%"
                  ConnectionBackoff holds backoff applied to connection.
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                jsonBody
                  | Bool
                  | doc m%"
                  JSONBody specifies that all event body payload coming from this source will be JSON
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                subject
                  | String
                  | doc m%"
                  Subject holds the name of the subject onto which messages are published
                  "%,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the nats client.
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  URL to connect to NATS cluster
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.NSQEventSource"
            | doc m%"
            NSQEventSource describes the event source for NSQ PubSub More info at https://godoc.org/github.com/nsqio/go-nsq
            "%
            = {
                channel
                  | String
                  | doc m%"
                  Channel used for subscription
                  "%,
                connectionBackoff
                  | definitions.contract."io.argoproj.common.Backoff"
                  | doc m%"
                  Backoff holds parameters applied to connection.
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                hostAddress
                  | String
                  | doc m%"
                  HostAddress is the address of the host for NSQ lookup
                  "%,
                jsonBody
                  | Bool
                  | doc m%"
                  JSONBody specifies that all event body payload coming from this source will be JSON
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the nsq client.
                  "%
                  | optional,
                topic
                  | String
                  | doc m%"
                  Topic to subscribe to.
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.OwnedRepositories" = {
                names
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Repository names
                  "%
                  | optional,
                owner
                  | String
                  | doc m%"
                  Organization or user name
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.PubSubEventSource"
            | doc m%"
            PubSubEventSource refers to event-source for GCP PubSub related events.
            "%
            = {
                credentialSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  CredentialSecret references to the secret that contains JSON credentials to access GCP. If it is missing, it implicitly uses Workload Identity to access. https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
                  "%
                  | optional,
                deleteSubscriptionOnFinish
                  | Bool
                  | doc m%"
                  DeleteSubscriptionOnFinish determines whether to delete the GCP PubSub subscription once the event source is stopped.
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                jsonBody
                  | Bool
                  | doc m%"
                  JSONBody specifies that all event body payload coming from this source will be JSON
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                projectID
                  | String
                  | doc m%"
                  ProjectID is GCP project ID for the subscription. Required if you run Argo Events outside of GKE/GCE. (otherwise, the default value is its project)
                  "%
                  | optional,
                subscriptionID
                  | String
                  | doc m%"
                  SubscriptionID is ID of subscription. Required if you use existing subscription. The default value will be auto generated hash based on this eventsource setting, so the subscription might be recreated every time you update the setting, which has a possibility of event loss.
                  "%
                  | optional,
                topic
                  | String
                  | doc m%"
                  Topic to which the subscription should belongs. Required if you want the eventsource to create a new subscription. If you specify this field along with an existing subscription, it will be verified whether it actually belongs to the specified topic.
                  "%
                  | optional,
                topicProjectID
                  | String
                  | doc m%"
                  TopicProjectID is GCP project ID for the topic. By default, it is same as ProjectID.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.PulsarEventSource"
            | doc m%"
            PulsarEventSource describes the event source for Apache Pulsar
            "%
            = {
                authAthenzParams
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Authentication athenz parameters for the pulsar client. Refer https://github.com/apache/pulsar-client-go/blob/master/pulsar/auth/athenz.go Either token or athenz can be set to use auth.
                  "%
                  | optional,
                authAthenzSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Authentication athenz privateKey secret for the pulsar client. AuthAthenzSecret must be set if AuthAthenzParams is used.
                  "%
                  | optional,
                authTokenSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Authentication token for the pulsar client. Either token or athenz can be set to use auth.
                  "%
                  | optional,
                connectionBackoff
                  | definitions.contract."io.argoproj.common.Backoff"
                  | doc m%"
                  Backoff holds parameters applied to connection.
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                jsonBody
                  | Bool
                  | doc m%"
                  JSONBody specifies that all event body payload coming from this source will be JSON
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the pulsar client.
                  "%
                  | optional,
                tlsAllowInsecureConnection
                  | Bool
                  | doc m%"
                  Whether the Pulsar client accept untrusted TLS certificate from broker.
                  "%
                  | optional,
                tlsTrustCertsSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Trusted TLS certificate secret.
                  "%
                  | optional,
                tlsValidateHostname
                  | Bool
                  | doc m%"
                  Whether the Pulsar client verify the validity of the host name from broker.
                  "%
                  | optional,
                topics
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Name of the topics to subscribe to.
                  "%,
                type
                  | String
                  | doc m%"
                  Type of the subscription. Only "exclusive" and "shared" is supported. Defaults to exclusive.
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  Configure the service URL for the Pulsar service.
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.RedisEventSource"
            | doc m%"
            RedisEventSource describes an event source for the Redis PubSub. More info at https://godoc.org/github.com/go-redis/redis#example-PubSub
            "%
            = {
                channels
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ]),
                db
                  | std.number.Integer
                  | doc m%"
                  DB to use. If not specified, default DB 0 will be used.
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                hostAddress
                  | String
                  | doc m%"
                  HostAddress refers to the address of the Redis host/server
                  "%,
                jsonBody
                  | Bool
                  | doc m%"
                  JSONBody specifies that all event body payload coming from this source will be JSON
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                namespace
                  | String
                  | doc m%"
                  Namespace to use to retrieve the password from. It should only be specified if password is declared
                  "%
                  | optional,
                password
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Password required for authentication if any.
                  "%
                  | optional,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the redis client.
                  "%
                  | optional,
                username
                  | String
                  | doc m%"
                  Username required for ACL style authentication if any.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.RedisStreamEventSource"
            | doc m%"
            RedisStreamEventSource describes an event source for Redis streams (https://redis.io/topics/streams-intro)
            "%
            = {
                consumerGroup
                  | String
                  | doc m%"
                  ConsumerGroup refers to the Redis stream consumer group that will be created on all redis streams. Messages are read through this group. Defaults to 'argo-events-cg'
                  "%
                  | optional,
                db
                  | std.number.Integer
                  | doc m%"
                  DB to use. If not specified, default DB 0 will be used.
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                hostAddress
                  | String
                  | doc m%"
                  HostAddress refers to the address of the Redis host/server (master instance)
                  "%,
                maxMsgCountPerRead
                  | std.number.Integer
                  | doc m%"
                  MaxMsgCountPerRead holds the maximum number of messages per stream that will be read in each XREADGROUP of all streams Example: if there are 2 streams and MaxMsgCountPerRead=10, then each XREADGROUP may read upto a total of 20 messages. Same as COUNT option in XREADGROUP(https://redis.io/topics/streams-intro). Defaults to 10
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                password
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Password required for authentication if any.
                  "%
                  | optional,
                streams
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Streams to look for entries. XREADGROUP is used on all streams using a single consumer group.
                  "%,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the redis client.
                  "%
                  | optional,
                username
                  | String
                  | doc m%"
                  Username required for ACL style authentication if any.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.ResourceEventSource"
            | doc m%"
            ResourceEventSource refers to a event-source for K8s resource related events.
            "%
            = {
                eventTypes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  EventTypes is the list of event type to watch. Possible values are - ADD, UPDATE and DELETE.
                  "%,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.ResourceFilter"
                  | doc m%"
                  Filter is applied on the metadata of the resource If you apply filter, then the internal event informer will only monitor objects that pass the filter.
                  "%
                  | optional,
                group | String,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                namespace
                  | String
                  | doc m%"
                  Namespace where resource is deployed
                  "%,
                resource | String,
                version | String,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.ResourceFilter"
            | doc m%"
            ResourceFilter contains K8s ObjectMeta information to further filter resource event objects
            "%
            = {
                afterStart
                  | Bool
                  | doc m%"
                  If the resource is created after the start time then the event is treated as valid.
                  "%
                  | optional,
                createdBy
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  If resource is created before the specified time then the event is treated as valid.
                  "%
                  | optional,
                fields
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.Selector"
                  ])
                  | doc m%"
                  Fields provide field filters similar to K8s field selector (see https://kubernetes.io/docs/concepts/overview/working-with-objects/field-selectors/). Unlike K8s field selector, it supports arbitrary fileds like "spec.serviceAccountName", and the value could be a string or a regex. Same as K8s field selector, operator "=", "==" and "!=" are supported.
                  "%
                  | optional,
                labels
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.Selector"
                  ])
                  | doc m%"
                  Labels provide listing options to K8s API to watch resource/s. Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/label-selectors/ for more info. Unlike K8s field selector, multiple values are passed as comma separated values instead of list of values. Eg: value: value1,value2. Same as K8s label selector, operator "=", "==", "!=", "exists", "!", "notin", "in", "gt" and "lt" are supported
                  "%
                  | optional,
                prefix
                  | String
                  | doc m%"
                  Prefix filter is applied on the resource name.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.SFTPEventSource"
            | doc m%"
            SFTPEventSource describes an event-source for sftp related events.
            "%
            = {
                address
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Address sftp address.
                  "%
                  | optional,
                eventType
                  | String
                  | doc m%"
                  Type of file operations to watch Refer https://github.com/fsnotify/fsnotify/blob/master/fsnotify.go for more information
                  "%,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                password
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Password required for authentication if any.
                  "%
                  | optional,
                pollIntervalDuration
                  | String
                  | doc m%"
                  PollIntervalDuration the interval at which to poll the SFTP server defaults to 10 seconds
                  "%
                  | optional,
                username
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Username required for authentication if any.
                  "%
                  | optional,
                watchPathConfig
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.WatchPathConfig"
                  | doc m%"
                  WatchPathConfig contains configuration about the file path to watch
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.SNSEventSource"
            | doc m%"
            SNSEventSource refers to event-source for AWS SNS related events
            "%
            = {
                accessKey
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  AccessKey refers K8s secret containing aws access key
                  "%
                  | optional,
                endpoint
                  | String
                  | doc m%"
                  Endpoint configures connection to a specific SNS endpoint instead of Amazons servers
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                region
                  | String
                  | doc m%"
                  Region is AWS region
                  "%,
                roleARN
                  | String
                  | doc m%"
                  RoleARN is the Amazon Resource Name (ARN) of the role to assume.
                  "%
                  | optional,
                secretKey
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  SecretKey refers K8s secret containing aws secret key
                  "%
                  | optional,
                topicArn
                  | String
                  | doc m%"
                  TopicArn
                  "%,
                validateSignature
                  | Bool
                  | doc m%"
                  ValidateSignature is boolean that can be set to true for SNS signature verification
                  "%
                  | optional,
                webhook
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.WebhookContext"
                  | doc m%"
                  Webhook configuration for http server
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.SQSEventSource"
            | doc m%"
            SQSEventSource refers to event-source for AWS SQS related events
            "%
            = {
                accessKey
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  AccessKey refers K8s secret containing aws access key
                  "%
                  | optional,
                dlq
                  | Bool
                  | doc m%"
                  DLQ specifies if a dead-letter queue is configured for messages that can't be processed successfully. If set to true, messages with invalid payload won't be acknowledged to allow to forward them farther to the dead-letter queue. The default value is false.
                  "%
                  | optional,
                endpoint
                  | String
                  | doc m%"
                  Endpoint configures connection to a specific SQS endpoint instead of Amazons servers
                  "%
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                jsonBody
                  | Bool
                  | doc m%"
                  JSONBody specifies that all event body payload coming from this source will be JSON
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                queue
                  | String
                  | doc m%"
                  Queue is AWS SQS queue to listen to for messages
                  "%,
                queueAccountId
                  | String
                  | doc m%"
                  QueueAccountID is the ID of the account that created the queue to monitor
                  "%
                  | optional,
                region
                  | String
                  | doc m%"
                  Region is AWS region
                  "%,
                roleARN
                  | String
                  | doc m%"
                  RoleARN is the Amazon Resource Name (ARN) of the role to assume.
                  "%
                  | optional,
                secretKey
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  SecretKey refers K8s secret containing aws secret key
                  "%
                  | optional,
                sessionToken
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  SessionToken refers to K8s secret containing AWS temporary credentials(STS) session token
                  "%
                  | optional,
                waitTimeSeconds
                  | std.number.Integer
                  | doc m%"
                  WaitTimeSeconds is The duration (in seconds) for which the call waits for a message to arrive in the queue before returning.
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.Selector"
            | doc m%"
            Selector represents conditional operation to select K8s objects.
            "%
            = {
                key
                  | String
                  | doc m%"
                  Key name
                  "%,
                operation
                  | String
                  | doc m%"
                  Supported operations like ==, != etc. Defaults to ==. Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors for more info.
                  "%
                  | optional,
                value
                  | String
                  | doc m%"
                  Value
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.Service"
            | doc m%"
            Service holds the service information eventsource exposes
            "%
            = {
                clusterIP
                  | String
                  | doc m%"
                  clusterIP is the IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are "None", empty string (""), or a valid IP address. "None" can be specified for headless services when proxying is not required. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                  "%
                  | optional,
                ports
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.ServicePort"
                  ])
                  | doc m%"
                  The list of ports that are exposed by this ClusterIP service.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.SlackEventSource"
            | doc m%"
            SlackEventSource refers to event-source for Slack related events
            "%
            = {
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                signingSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Slack App signing secret
                  "%
                  | optional,
                token
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Token for URL verification handshake
                  "%
                  | optional,
                webhook
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.WebhookContext"
                  | doc m%"
                  Webhook holds configuration for a REST endpoint
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.StorageGridEventSource"
            | doc m%"
            StorageGridEventSource refers to event-source for StorageGrid related events
            "%
            = {
                apiURL
                  | String
                  | doc m%"
                  APIURL is the url of the storagegrid api.
                  "%,
                authToken
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Auth token for storagegrid api
                  "%,
                bucket
                  | String
                  | doc m%"
                  Name of the bucket to register notifications for.
                  "%,
                events
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | optional,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.StorageGridFilter"
                  | doc m%"
                  Filter on object key which caused the notification.
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                region
                  | String
                  | doc m%"
                  S3 region. Defaults to us-east-1
                  "%
                  | optional,
                topicArn
                  | String
                  | doc m%"
                  TopicArn
                  "%,
                webhook
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.WebhookContext"
                  | doc m%"
                  Webhook holds configuration for a REST endpoint
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.StorageGridFilter"
            | doc m%"
            StorageGridFilter represents filters to apply to bucket notifications for specifying constraints on objects
            "%
            = { prefix | String, suffix | String, .. },
          "io.argoproj.eventsource.v1alpha1.StripeEventSource"
            | doc m%"
            StripeEventSource describes the event source for stripe webhook notifications More info at https://stripe.com/docs/webhooks
            "%
            = {
                apiKey
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  APIKey refers to K8s secret that holds Stripe API key. Used only if CreateWebhook is enabled.
                  "%
                  | optional,
                createWebhook
                  | Bool
                  | doc m%"
                  CreateWebhook if specified creates a new webhook programmatically.
                  "%
                  | optional,
                eventFilter
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  EventFilter describes the type of events to listen to. If not specified, all types of events will be processed. More info at https://stripe.com/docs/api/events/list
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                webhook
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.WebhookContext"
                  | doc m%"
                  Webhook holds configuration for a REST endpoint
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.Template"
            | doc m%"
            Template holds the information of an EventSource deployment template
            "%
            = {
                affinity
                  | definitions.contract."io.k8s.api.core.v1.Affinity"
                  | doc m%"
                  If specified, the pod's scheduling constraints
                  "%
                  | optional,
                container
                  | definitions.contract."io.k8s.api.core.v1.Container"
                  | doc m%"
                  Container is the main container image to run in the event source pod
                  "%
                  | optional,
                imagePullSecrets
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.LocalObjectReference"
                  ])
                  | doc m%"
                  ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
                  "%
                  | optional,
                metadata
                  | definitions.contract."io.argoproj.common.Metadata"
                  | doc m%"
                  Metadata sets the pods's metadata, i.e. annotations and labels
                  "%
                  | optional,
                nodeSelector
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
                  "%
                  | optional,
                "priority"
                  | std.number.Integer
                  | doc m%"
                  The priority value. Various system components use this field to find the priority of the EventSource pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
                  "%
                  | optional,
                priorityClassName
                  | String
                  | doc m%"
                  If specified, indicates the EventSource pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
                  "%
                  | optional,
                securityContext
                  | definitions.contract."io.k8s.api.core.v1.PodSecurityContext"
                  | doc m%"
                  SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
                  "%
                  | optional,
                serviceAccountName
                  | String
                  | doc m%"
                  ServiceAccountName is the name of the ServiceAccount to use to run event source pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
                  "%
                  | optional,
                tolerations
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Toleration"
                  ])
                  | doc m%"
                  If specified, the pod's tolerations.
                  "%
                  | optional,
                volumes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Volume"
                  ])
                  | doc m%"
                  Volumes is a list of volumes that can be mounted by containers in an eventsource.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.WatchPathConfig" = {
                directory
                  | String
                  | doc m%"
                  Directory to watch for events
                  "%,
                path
                  | String
                  | doc m%"
                  Path is relative path of object to watch with respect to the directory
                  "%
                  | optional,
                pathRegexp
                  | String
                  | doc m%"
                  PathRegexp is regexp of relative path of object to watch with respect to the directory
                  "%
                  | optional,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.WebhookContext"
            | doc m%"
            WebhookContext holds a general purpose REST API context
            "%
            = {
                authSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  AuthSecret holds a secret selector that contains a bearer token for authentication
                  "%
                  | optional,
                endpoint
                  | String
                  | doc m%"
                  REST API endpoint
                  "%,
                maxPayloadSize
                  | std.number.Integer
                  | doc m%"
                  MaxPayloadSize is the maximum webhook payload size that the server will accept. Requests exceeding that limit will be rejected with "request too large" response. Default value: 1048576 (1MB).
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                method
                  | String
                  | doc m%"
                  Method is HTTP request method that indicates the desired action to be performed for a given resource. See RFC7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content
                  "%,
                port
                  | String
                  | doc m%"
                  Port on which HTTP server is listening for incoming events.
                  "%,
                serverCertSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  ServerCertPath refers the file that contains the cert.
                  "%
                  | optional,
                serverKeySecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  ServerKeyPath refers the file that contains private key
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  URL is the url of the server.
                  "%,
                ..
              },
          "io.argoproj.eventsource.v1alpha1.WebhookEventSource"
            | doc m%"
            CalendarEventSource describes an HTTP based EventSource
            "%
            = {
                authSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  AuthSecret holds a secret selector that contains a bearer token for authentication
                  "%
                  | optional,
                endpoint
                  | String
                  | doc m%"
                  REST API endpoint
                  "%,
                filter
                  | definitions.contract."io.argoproj.eventsource.v1alpha1.EventSourceFilter"
                  | doc m%"
                  Filter
                  "%
                  | optional,
                maxPayloadSize
                  | std.number.Integer
                  | doc m%"
                  MaxPayloadSize is the maximum webhook payload size that the server will accept. Requests exceeding that limit will be rejected with "request too large" response. Default value: 1048576 (1MB).
                  "%
                  | optional,
                metadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Metadata holds the user defined metadata which will passed along the event payload.
                  "%
                  | optional,
                method
                  | String
                  | doc m%"
                  Method is HTTP request method that indicates the desired action to be performed for a given resource. See RFC7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content
                  "%,
                port
                  | String
                  | doc m%"
                  Port on which HTTP server is listening for incoming events.
                  "%,
                serverCertSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  ServerCertPath refers the file that contains the cert.
                  "%
                  | optional,
                serverKeySecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  ServerKeyPath refers the file that contains private key
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  URL is the url of the server.
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.AWSLambdaTrigger"
            | doc m%"
            AWSLambdaTrigger refers to specification of the trigger to invoke an AWS Lambda function
            "%
            = {
                accessKey
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  AccessKey refers K8s secret containing aws access key
                  "%
                  | optional,
                functionName
                  | String
                  | doc m%"
                  FunctionName refers to the name of the function to invoke.
                  "%,
                invocationType
                  | String
                  | doc m%"
                  Choose from the following options.
                  
                     * RequestResponse (default) - Invoke the function synchronously. Keep
                     the connection open until the function returns a response or times out.
                     The API response includes the function response and additional data.
                  
                     * Event - Invoke the function asynchronously. Send events that fail multiple
                     times to the function's dead-letter queue (if it's configured). The API
                     response only includes a status code.
                  
                     * DryRun - Validate parameter values and verify that the user or role
                     has permission to invoke the function.
                  "%
                  | optional,
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.
                  "%
                  | optional,
                payload
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Payload is the list of key-value extracted from an event payload to construct the request payload.
                  "%,
                region
                  | String
                  | doc m%"
                  Region is AWS region
                  "%,
                roleARN
                  | String
                  | doc m%"
                  RoleARN is the Amazon Resource Name (ARN) of the role to assume.
                  "%
                  | optional,
                secretKey
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  SecretKey refers K8s secret containing aws secret key
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.ArgoWorkflowTrigger"
            | doc m%"
            ArgoWorkflowTrigger is the trigger for the Argo Workflow
            "%
            = {
                args
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Args is the list of arguments to pass to the argo CLI
                  "%
                  | optional,
                operation
                  | String
                  | doc m%"
                  Operation refers to the type of operation performed on the argo workflow resource. Default value is Submit.
                  "%
                  | optional,
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Parameters is the list of parameters to pass to resolved Argo Workflow object
                  "%
                  | optional,
                source
                  | definitions.contract."io.argoproj.sensor.v1alpha1.ArtifactLocation"
                  | doc m%"
                  Source of the K8s resource file(s)
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.ArtifactLocation"
            | doc m%"
            ArtifactLocation describes the source location for an external artifact
            "%
            = {
                configmap
                  | definitions.contract."io.k8s.api.core.v1.ConfigMapKeySelector"
                  | doc m%"
                  Configmap that stores the artifact
                  "%
                  | optional,
                file
                  | definitions.contract."io.argoproj.sensor.v1alpha1.FileArtifact"
                  | doc m%"
                  File artifact is artifact stored in a file
                  "%
                  | optional,
                git
                  | definitions.contract."io.argoproj.sensor.v1alpha1.GitArtifact"
                  | doc m%"
                  Git repository hosting the artifact
                  "%
                  | optional,
                inline
                  | String
                  | doc m%"
                  Inline artifact is embedded in sensor spec as a string
                  "%
                  | optional,
                resource
                  | definitions.contract."io.argoproj.common.Resource"
                  | doc m%"
                  Resource is generic template for K8s resource
                  "%
                  | optional,
                s3
                  | definitions.contract."io.argoproj.common.S3Artifact"
                  | doc m%"
                  S3 compliant artifact
                  "%
                  | optional,
                url
                  | definitions.contract."io.argoproj.sensor.v1alpha1.URLArtifact"
                  | doc m%"
                  URL to fetch the artifact from
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.AzureEventHubsTrigger"
            | doc m%"
            AzureEventHubsTrigger refers to specification of the Azure Event Hubs Trigger
            "%
            = {
                fqdn
                  | String
                  | doc m%"
                  FQDN refers to the namespace dns of Azure Event Hubs to be used i.e. <namespace>.servicebus.windows.net
                  "%,
                hubName
                  | String
                  | doc m%"
                  HubName refers to the Azure Event Hub to send events to
                  "%,
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.
                  "%
                  | optional,
                payload
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Payload is the list of key-value extracted from an event payload to construct the request payload.
                  "%,
                sharedAccessKey
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  SharedAccessKey refers to a K8s secret containing the primary key for the
                  "%
                  | optional,
                sharedAccessKeyName
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  SharedAccessKeyName refers to the name of the Shared Access Key
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.AzureServiceBusTrigger" = {
                connectionString
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  ConnectionString is the connection string for the Azure Service Bus
                  "%
                  | optional,
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.
                  "%
                  | optional,
                payload
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Payload is the list of key-value extracted from an event payload to construct the request payload.
                  "%,
                queueName
                  | String
                  | doc m%"
                  QueueName is the name of the Azure Service Bus Queue
                  "%,
                subscriptionName
                  | String
                  | doc m%"
                  SubscriptionName is the name of the Azure Service Bus Topic Subscription
                  "%,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the service bus client
                  "%
                  | optional,
                topicName
                  | String
                  | doc m%"
                  TopicName is the name of the Azure Service Bus Topic
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.ConditionsResetByTime" = {
                cron
                  | String
                  | doc m%"
                  Cron is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron
                  "%
                  | optional,
                timezone | String | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.ConditionsResetCriteria" = {
                byTime
                  | definitions.contract."io.argoproj.sensor.v1alpha1.ConditionsResetByTime"
                  | doc m%"
                  Schedule is a cron-like expression. For reference, see: https://en.wikipedia.org/wiki/Cron
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.CustomTrigger"
            | doc m%"
            CustomTrigger refers to the specification of the custom trigger.
            "%
            = {
                certSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  CertSecret refers to the secret that contains cert for secure connection between sensor and custom trigger gRPC server.
                  "%
                  | optional,
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Parameters is the list of parameters that is applied to resolved custom trigger trigger object.
                  "%
                  | optional,
                payload
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Payload is the list of key-value extracted from an event payload to construct the request payload.
                  "%,
                secure
                  | Bool
                  | doc m%"
                  Secure refers to type of the connection between sensor to custom trigger gRPC
                  "%,
                serverNameOverride
                  | String
                  | doc m%"
                  ServerNameOverride for the secure connection between sensor and custom trigger gRPC server.
                  "%
                  | optional,
                serverURL
                  | String
                  | doc m%"
                  ServerURL is the url of the gRPC server that executes custom trigger
                  "%,
                spec
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Spec is the custom trigger resource specification that custom trigger gRPC server knows how to interpret.
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.DataFilter"
            | doc m%"
            DataFilter describes constraints and filters for event data Regular Expressions are purposefully not a feature as they are overkill for our uses here See Rob Pike's Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html
            "%
            = {
                comparator
                  | String
                  | doc m%"
                  Comparator compares the event data with a user given value. Can be ">=", ">", "=", "!=", "<", or "<=". Is optional, and if left blank treated as equality "=".
                  "%
                  | optional,
                path
                  | String
                  | doc m%"
                  Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
                  "%,
                template
                  | String
                  | doc m%"
                  Template is a go-template for extracting a string from the event's data. A Template is evaluated with provided path, type and value. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  Type contains the JSON type of the data
                  "%,
                value
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Value is the allowed string values for this key Booleans are passed using strconv.ParseBool() Numbers are parsed using as float64 using strconv.ParseFloat() Strings are taken as is Nils this value is ignored
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.EmailTrigger"
            | doc m%"
            EmailTrigger refers to the specification of the email notification trigger.
            "%
            = {
                body
                  | String
                  | doc m%"
                  Body refers to the body/content of the email send.
                  "%
                  | optional,
                from
                  | String
                  | doc m%"
                  From refers to the address from which the email is send from.
                  "%
                  | optional,
                host
                  | String
                  | doc m%"
                  Host refers to the smtp host url to which email is send.
                  "%
                  | optional,
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.
                  "%
                  | optional,
                port
                  | std.number.Integer
                  | doc m%"
                  Port refers to the smtp server port to which email is send. Defaults to 0.
                  "%
                  | optional,
                smtpPassword
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  SMTPPassword refers to the Kubernetes secret that holds the smtp password used to connect to smtp server.
                  "%
                  | optional,
                subject
                  | String
                  | doc m%"
                  Subject refers to the subject line for the email send.
                  "%
                  | optional,
                to
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  To refers to the email addresses to which the emails are send.
                  "%
                  | optional,
                username
                  | String
                  | doc m%"
                  Username refers to the username used to connect to the smtp server.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.Event"
            | doc m%"
            Event represents the cloudevent received from an event source.
            "%
            = {
                context
                  | definitions.contract."io.argoproj.sensor.v1alpha1.EventContext"
                  | optional,
                data | String,
                ..
              },
          "io.argoproj.sensor.v1alpha1.EventContext"
            | doc m%"
            EventContext holds the context of the cloudevent received from an event source.
            "%
            = {
                datacontenttype
                  | String
                  | doc m%"
                  DataContentType - A MIME (RFC2046) string describing the media type of `data`.
                  "%,
                id
                  | String
                  | doc m%"
                  ID of the event; must be non-empty and unique within the scope of the producer.
                  "%,
                source
                  | String
                  | doc m%"
                  Source - A URI describing the event producer.
                  "%,
                specversion
                  | String
                  | doc m%"
                  SpecVersion - The version of the CloudEvents specification used by the event.
                  "%,
                subject
                  | String
                  | doc m%"
                  Subject - The subject of the event in the context of the event producer
                  "%,
                time
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Time - A Timestamp when the event happened.
                  "%,
                type
                  | String
                  | doc m%"
                  Type - The type of the occurrence which has happened.
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.EventDependency"
            | doc m%"
            EventDependency describes a dependency
            "%
            = {
                eventName
                  | String
                  | doc m%"
                  EventName is the name of the event
                  "%,
                eventSourceName
                  | String
                  | doc m%"
                  EventSourceName is the name of EventSource that Sensor depends on
                  "%,
                filters
                  | definitions.contract."io.argoproj.sensor.v1alpha1.EventDependencyFilter"
                  | doc m%"
                  Filters and rules governing toleration of success and constraints on the context and data of an event
                  "%
                  | optional,
                filtersLogicalOperator
                  | String
                  | doc m%"
                  FiltersLogicalOperator defines how different filters are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name is a unique name of this dependency
                  "%,
                transform
                  | definitions.contract."io.argoproj.sensor.v1alpha1.EventDependencyTransformer"
                  | doc m%"
                  Transform transforms the event data
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.EventDependencyFilter"
            | doc m%"
            EventDependencyFilter defines filters and constraints for a event.
            "%
            = {
                context
                  | definitions.contract."io.argoproj.sensor.v1alpha1.EventContext"
                  | doc m%"
                  Context filter constraints
                  "%
                  | optional,
                data
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.DataFilter"
                  ])
                  | doc m%"
                  Data filter constraints with escalation
                  "%
                  | optional,
                dataLogicalOperator
                  | String
                  | doc m%"
                  DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).
                  "%
                  | optional,
                exprLogicalOperator
                  | String
                  | doc m%"
                  ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).
                  "%
                  | optional,
                exprs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.ExprFilter"
                  ])
                  | doc m%"
                  Exprs contains the list of expressions evaluated against the event payload.
                  "%
                  | optional,
                script
                  | String
                  | doc m%"
                  Script refers to a Lua script evaluated to determine the validity of an event.
                  "%
                  | optional,
                time
                  | definitions.contract."io.argoproj.sensor.v1alpha1.TimeFilter"
                  | doc m%"
                  Time filter on the event with escalation
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.EventDependencyTransformer"
            | doc m%"
            EventDependencyTransformer transforms the event
            "%
            = {
                jq
                  | String
                  | doc m%"
                  JQ holds the jq command applied for transformation
                  "%
                  | optional,
                script
                  | String
                  | doc m%"
                  Script refers to a Lua script used to transform the event
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.ExprFilter" = {
                expr
                  | String
                  | doc m%"
                  Expr refers to the expression that determines the outcome of the filter.
                  "%,
                fields
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.PayloadField"
                  ])
                  | doc m%"
                  Fields refers to set of keys that refer to the paths within event payload.
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.FileArtifact"
            | doc m%"
            FileArtifact contains information about an artifact in a filesystem
            "%
            = { path | String | optional, .. },
          "io.argoproj.sensor.v1alpha1.GitArtifact"
            | doc m%"
            GitArtifact contains information about an artifact stored in git
            "%
            = {
                branch
                  | String
                  | doc m%"
                  Branch to use to pull trigger resource
                  "%
                  | optional,
                cloneDirectory
                  | String
                  | doc m%"
                  Directory to clone the repository. We clone complete directory because GitArtifact is not limited to any specific Git service providers. Hence we don't use any specific git provider client.
                  "%,
                creds
                  | definitions.contract."io.argoproj.sensor.v1alpha1.GitCreds"
                  | doc m%"
                  Creds contain reference to git username and password
                  "%
                  | optional,
                filePath
                  | String
                  | doc m%"
                  Path to file that contains trigger resource definition
                  "%,
                insecureIgnoreHostKey
                  | Bool
                  | doc m%"
                  Whether to ignore host key
                  "%
                  | optional,
                ref
                  | String
                  | doc m%"
                  Ref to use to pull trigger resource. Will result in a shallow clone and fetch.
                  "%
                  | optional,
                remote
                  | definitions.contract."io.argoproj.sensor.v1alpha1.GitRemoteConfig"
                  | doc m%"
                  Remote to manage set of tracked repositories. Defaults to "origin". Refer https://git-scm.com/docs/git-remote
                  "%
                  | optional,
                sshKeySecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  SSHKeySecret refers to the secret that contains SSH key
                  "%
                  | optional,
                tag
                  | String
                  | doc m%"
                  Tag to use to pull trigger resource
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  Git URL
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.GitCreds"
            | doc m%"
            GitCreds contain reference to git username and password
            "%
            = {
                password
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | optional,
                username
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.GitRemoteConfig"
            | doc m%"
            GitRemoteConfig contains the configuration of a Git remote
            "%
            = {
                name
                  | String
                  | doc m%"
                  Name of the remote to fetch from.
                  "%,
                urls
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  URLs the URLs of a remote repository. It must be non-empty. Fetch will always use the first URL, while push will use all of them.
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.HTTPTrigger"
            | doc m%"
            HTTPTrigger is the trigger for the HTTP request
            "%
            = {
                basicAuth
                  | definitions.contract."io.argoproj.common.BasicAuth"
                  | doc m%"
                  BasicAuth configuration for the http request.
                  "%
                  | optional,
                headers
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Headers for the HTTP request.
                  "%
                  | optional,
                method
                  | String
                  | doc m%"
                  Method refers to the type of the HTTP request. Refer https://golang.org/src/net/http/method.go for more info. Default value is POST.
                  "%
                  | optional,
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Parameters is the list of key-value extracted from event's payload that are applied to the HTTP trigger resource.
                  "%
                  | optional,
                payload
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ]),
                secureHeaders
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.common.SecureHeader"
                  ])
                  | doc m%"
                  Secure Headers stored in Kubernetes Secrets for the HTTP requests.
                  "%
                  | optional,
                timeout
                  | std.number.Integer
                  | doc m%"
                  Timeout refers to the HTTP request timeout in seconds. Default value is 60 seconds.
                  "%
                  | optional,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the HTTP client.
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  URL refers to the URL to send HTTP request to.
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.K8SResourcePolicy"
            | doc m%"
            K8SResourcePolicy refers to the policy used to check the state of K8s based triggers using labels
            "%
            = {
                backoff
                  | definitions.contract."io.argoproj.common.Backoff"
                  | doc m%"
                  Backoff before checking resource state
                  "%,
                errorOnBackoffTimeout
                  | Bool
                  | doc m%"
                  ErrorOnBackoffTimeout determines whether sensor should transition to error state if the trigger policy is unable to determine the state of the resource
                  "%,
                labels
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Labels required to identify whether a resource is in success state
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.KafkaTrigger"
            | doc m%"
            KafkaTrigger refers to the specification of the Kafka trigger.
            "%
            = {
                compress
                  | Bool
                  | doc m%"
                  Compress determines whether to compress message or not. Defaults to false. If set to true, compresses message using snappy compression.
                  "%
                  | optional,
                flushFrequency
                  | std.number.Integer
                  | doc m%"
                  FlushFrequency refers to the frequency in milliseconds to flush batches. Defaults to 500 milliseconds.
                  "%
                  | optional,
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Parameters is the list of parameters that is applied to resolved Kafka trigger object.
                  "%
                  | optional,
                partition
                  | std.number.Integer
                  | doc m%"
                  DEPRECATED
                  "%
                  | optional,
                partitioningKey
                  | String
                  | doc m%"
                  The partitioning key for the messages put on the Kafka topic.
                  "%
                  | optional,
                payload
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Payload is the list of key-value extracted from an event payload to construct the request payload.
                  "%,
                requiredAcks
                  | std.number.Integer
                  | doc m%"
                  RequiredAcks used in producer to tell the broker how many replica acknowledgements Defaults to 1 (Only wait for the leader to ack).
                  "%
                  | optional,
                sasl
                  | definitions.contract."io.argoproj.common.SASLConfig"
                  | doc m%"
                  SASL configuration for the kafka client
                  "%
                  | optional,
                schemaRegistry
                  | definitions.contract."io.argoproj.common.SchemaRegistryConfig"
                  | doc m%"
                  Schema Registry configuration to producer message with avro format
                  "%
                  | optional,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the Kafka producer.
                  "%
                  | optional,
                topic
                  | String
                  | doc m%"
                  Name of the topic. More info at https://kafka.apache.org/documentation/#intro_topics
                  "%,
                url
                  | String
                  | doc m%"
                  URL of the Kafka broker, multiple URLs separated by comma.
                  "%,
                version
                  | String
                  | doc m%"
                  Specify what kafka version is being connected to enables certain features in sarama, defaults to 1.0.0
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.LogTrigger" = {
                intervalSeconds
                  | std.number.Integer
                  | doc m%"
                  Only print messages every interval. Useful to prevent logging too much data for busy events.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.NATSTrigger"
            | doc m%"
            NATSTrigger refers to the specification of the NATS trigger.
            "%
            = {
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | optional,
                payload
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ]),
                subject
                  | String
                  | doc m%"
                  Name of the subject to put message on.
                  "%,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the NATS producer.
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  URL of the NATS cluster.
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.OpenWhiskTrigger"
            | doc m%"
            OpenWhiskTrigger refers to the specification of the OpenWhisk trigger.
            "%
            = {
                actionName
                  | String
                  | doc m%"
                  Name of the action/function.
                  "%,
                authToken
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  AuthToken for authentication.
                  "%
                  | optional,
                host
                  | String
                  | doc m%"
                  Host URL of the OpenWhisk.
                  "%,
                namespace
                  | String
                  | doc m%"
                  Namespace for the action. Defaults to "_".
                  "%
                  | optional,
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.
                  "%
                  | optional,
                payload
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Payload is the list of key-value extracted from an event payload to construct the request payload.
                  "%,
                version
                  | String
                  | doc m%"
                  Version for the API. Defaults to v1.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.PayloadField"
            | doc m%"
            PayloadField binds a value at path within the event payload against a name.
            "%
            = {
                name
                  | String
                  | doc m%"
                  Name acts as key that holds the value at the path.
                  "%,
                path
                  | String
                  | doc m%"
                  Path is the JSONPath of the event's (JSON decoded) data key Path is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.PulsarTrigger"
            | doc m%"
            PulsarTrigger refers to the specification of the Pulsar trigger.
            "%
            = {
                authAthenzParams
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Authentication athenz parameters for the pulsar client. Refer https://github.com/apache/pulsar-client-go/blob/master/pulsar/auth/athenz.go Either token or athenz can be set to use auth.
                  "%
                  | optional,
                authAthenzSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Authentication athenz privateKey secret for the pulsar client. AuthAthenzSecret must be set if AuthAthenzParams is used.
                  "%
                  | optional,
                authTokenSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Authentication token for the pulsar client. Either token or athenz can be set to use auth.
                  "%
                  | optional,
                connectionBackoff
                  | definitions.contract."io.argoproj.common.Backoff"
                  | doc m%"
                  Backoff holds parameters applied to connection.
                  "%
                  | optional,
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Parameters is the list of parameters that is applied to resolved Kafka trigger object.
                  "%
                  | optional,
                payload
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Payload is the list of key-value extracted from an event payload to construct the request payload.
                  "%,
                tls
                  | definitions.contract."io.argoproj.common.TLSConfig"
                  | doc m%"
                  TLS configuration for the pulsar client.
                  "%
                  | optional,
                tlsAllowInsecureConnection
                  | Bool
                  | doc m%"
                  Whether the Pulsar client accept untrusted TLS certificate from broker.
                  "%
                  | optional,
                tlsTrustCertsSecret
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Trusted TLS certificate secret.
                  "%
                  | optional,
                tlsValidateHostname
                  | Bool
                  | doc m%"
                  Whether the Pulsar client verify the validity of the host name from broker.
                  "%
                  | optional,
                topic
                  | String
                  | doc m%"
                  Name of the topic. See https://pulsar.apache.org/docs/en/concepts-messaging/
                  "%,
                url
                  | String
                  | doc m%"
                  Configure the service URL for the Pulsar service.
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.RateLimit" = {
                requestsPerUnit | std.number.Integer | optional,
                unit
                  | String
                  | doc m%"
                  Defaults to Second
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.Sensor"
            | doc m%"
            Sensor is the definition of a sensor resource
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.argoproj.sensor.v1alpha1.Sensor",
          "io.argoproj.sensor.v1alpha1.SensorList"
            | doc m%"
            SensorList is the list of Sensor resources
            "%
            = {
                apiVersion
                  | String
                  | doc m%"
                  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
                  "%
                  | optional,
                items
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.Sensor"
                  ]),
                kind
                  | String
                  | doc m%"
                  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                  "%
                  | optional,
                metadata
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                ..
              },
          "io.argoproj.sensor.v1alpha1.SensorSpec"
            | doc m%"
            SensorSpec represents desired sensor state
            "%
            = {
                dependencies
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.EventDependency"
                  ])
                  | doc m%"
                  Dependencies is a list of the events that this sensor is dependent on.
                  "%,
                errorOnFailedRound
                  | Bool
                  | doc m%"
                  ErrorOnFailedRound if set to true, marks sensor state as `error` if the previous trigger round fails. Once sensor state is set to `error`, no further triggers will be processed.
                  "%
                  | optional,
                eventBusName
                  | String
                  | doc m%"
                  EventBusName references to a EventBus name. By default the value is "default"
                  "%
                  | optional,
                loggingFields
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  LoggingFields add additional key-value pairs when logging happens
                  "%
                  | optional,
                replicas
                  | std.number.Integer
                  | doc m%"
                  Replicas is the sensor deployment replicas
                  "%
                  | optional,
                revisionHistoryLimit
                  | std.number.Integer
                  | doc m%"
                  RevisionHistoryLimit specifies how many old deployment revisions to retain
                  "%
                  | optional,
                template
                  | definitions.contract."io.argoproj.sensor.v1alpha1.Template"
                  | doc m%"
                  Template is the pod specification for the sensor
                  "%
                  | optional,
                triggers
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.Trigger"
                  ])
                  | doc m%"
                  Triggers is a list of the things that this sensor evokes. These are the outputs from this sensor.
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.SensorStatus"
            | doc m%"
            SensorStatus contains information about the status of a sensor.
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.common.Condition"
                  ])
                  | doc m%"
                  Conditions are the latest available observations of a resource's current state.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.SlackSender" = {
                icon
                  | String
                  | doc m%"
                  Icon is the Slack application's icon, e.g. :robot_face: or https://example.com/image.png
                  "%
                  | optional,
                username
                  | String
                  | doc m%"
                  Username is the Slack application's username
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.SlackThread" = {
                broadcastMessageToChannel
                  | Bool
                  | doc m%"
                  BroadcastMessageToChannel allows to also broadcast the message from the thread to the channel
                  "%
                  | optional,
                messageAggregationKey
                  | String
                  | doc m%"
                  MessageAggregationKey allows to aggregate the messages to a thread by some key.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.SlackTrigger"
            | doc m%"
            SlackTrigger refers to the specification of the slack notification trigger.
            "%
            = {
                attachments
                  | String
                  | doc m%"
                  Attachments is a JSON format string that represents an array of Slack attachments according to the attachments API: https://api.slack.com/reference/messaging/attachments .
                  "%
                  | optional,
                blocks
                  | String
                  | doc m%"
                  Blocks is a JSON format string that represents an array of Slack blocks according to the blocks API: https://api.slack.com/reference/block-kit/blocks .
                  "%
                  | optional,
                channel
                  | String
                  | doc m%"
                  Channel refers to which Slack channel to send Slack message.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  Message refers to the message to send to the Slack channel.
                  "%
                  | optional,
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Parameters is the list of key-value extracted from event's payload that are applied to the trigger resource.
                  "%
                  | optional,
                sender
                  | definitions.contract."io.argoproj.sensor.v1alpha1.SlackSender"
                  | doc m%"
                  Sender refers to additional configuration of the Slack application that sends the message.
                  "%
                  | optional,
                slackToken
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  SlackToken refers to the Kubernetes secret that holds the slack token required to send messages.
                  "%
                  | optional,
                thread
                  | definitions.contract."io.argoproj.sensor.v1alpha1.SlackThread"
                  | doc m%"
                  Thread refers to additional options for sending messages to a Slack thread.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.StandardK8STrigger"
            | doc m%"
            StandardK8STrigger is the standard Kubernetes resource trigger
            "%
            = {
                liveObject
                  | Bool
                  | doc m%"
                  LiveObject specifies whether the resource should be directly fetched from K8s instead of being marshaled from the resource artifact. If set to true, the resource artifact must contain the information required to uniquely identify the resource in the cluster, that is, you must specify "apiVersion", "kind" as well as "name" and "namespace" meta data. Only valid for operation type `update`
                  "%
                  | optional,
                operation
                  | String
                  | doc m%"
                  Operation refers to the type of operation performed on the k8s resource. Default value is Create.
                  "%
                  | optional,
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Parameters is the list of parameters that is applied to resolved K8s trigger object.
                  "%
                  | optional,
                patchStrategy
                  | String
                  | doc m%"
                  PatchStrategy controls the K8s object patching strategy when the trigger operation is specified as patch. possible values: "application/json-patch+json" "application/merge-patch+json" "application/strategic-merge-patch+json" "application/apply-patch+yaml". Defaults to "application/merge-patch+json"
                  "%
                  | optional,
                source
                  | definitions.contract."io.argoproj.sensor.v1alpha1.ArtifactLocation"
                  | doc m%"
                  Source of the K8s resource file(s)
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.StatusPolicy"
            | doc m%"
            StatusPolicy refers to the policy used to check the state of the trigger using response status
            "%
            = {
                allow
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType 'Integer)
                  ]),
                ..
              },
          "io.argoproj.sensor.v1alpha1.Template"
            | doc m%"
            Template holds the information of a sensor deployment template
            "%
            = {
                affinity
                  | definitions.contract."io.k8s.api.core.v1.Affinity"
                  | doc m%"
                  If specified, the pod's scheduling constraints
                  "%
                  | optional,
                container
                  | definitions.contract."io.k8s.api.core.v1.Container"
                  | doc m%"
                  Container is the main container image to run in the sensor pod
                  "%
                  | optional,
                imagePullSecrets
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.LocalObjectReference"
                  ])
                  | doc m%"
                  ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
                  "%
                  | optional,
                metadata
                  | definitions.contract."io.argoproj.common.Metadata"
                  | doc m%"
                  Metadata sets the pods's metadata, i.e. annotations and labels
                  "%
                  | optional,
                nodeSelector
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
                  "%
                  | optional,
                "priority"
                  | std.number.Integer
                  | doc m%"
                  The priority value. Various system components use this field to find the priority of the EventSource pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
                  "%
                  | optional,
                priorityClassName
                  | String
                  | doc m%"
                  If specified, indicates the EventSource pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default. More info: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
                  "%
                  | optional,
                securityContext
                  | definitions.contract."io.k8s.api.core.v1.PodSecurityContext"
                  | doc m%"
                  SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
                  "%
                  | optional,
                serviceAccountName
                  | String
                  | doc m%"
                  ServiceAccountName is the name of the ServiceAccount to use to run sensor pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
                  "%
                  | optional,
                tolerations
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Toleration"
                  ])
                  | doc m%"
                  If specified, the pod's tolerations.
                  "%
                  | optional,
                volumes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Volume"
                  ])
                  | doc m%"
                  Volumes is a list of volumes that can be mounted by containers in a workflow.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.TimeFilter"
            | doc m%"
            TimeFilter describes a window in time. It filters out events that occur outside the time limits. In other words, only events that occur after Start and before Stop will pass this filter.
            "%
            = {
                start
                  | String
                  | doc m%"
                  Start is the beginning of a time window in UTC. Before this time, events for this dependency are ignored. Format is hh:mm:ss.
                  "%,
                stop
                  | String
                  | doc m%"
                  Stop is the end of a time window in UTC. After or equal to this time, events for this dependency are ignored and Format is hh:mm:ss. If it is smaller than Start, it is treated as next day of Start (e.g.: 22:00:00-01:00:00 means 22:00:00-25:00:00).
                  "%,
                ..
              },
          "io.argoproj.sensor.v1alpha1.Trigger"
            | doc m%"
            Trigger is an action taken, output produced, an event created, a message sent
            "%
            = {
                atLeastOnce
                  | Bool
                  | doc m%"
                  AtLeastOnce determines the trigger execution semantics. Defaults to false. Trigger execution will use at-most-once semantics. If set to true, Trigger execution will switch to at-least-once semantics.
                  "%
                  | optional,
                parameters
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                  ])
                  | doc m%"
                  Parameters is the list of parameters applied to the trigger template definition
                  "%
                  | optional,
                policy
                  | definitions.contract."io.argoproj.sensor.v1alpha1.TriggerPolicy"
                  | doc m%"
                  Policy to configure backoff and execution criteria for the trigger
                  "%
                  | optional,
                rateLimit
                  | definitions.contract."io.argoproj.sensor.v1alpha1.RateLimit"
                  | doc m%"
                  Rate limit, default unit is Second
                  "%
                  | optional,
                retryStrategy
                  | definitions.contract."io.argoproj.common.Backoff"
                  | doc m%"
                  Retry strategy, defaults to no retry
                  "%
                  | optional,
                template
                  | definitions.contract."io.argoproj.sensor.v1alpha1.TriggerTemplate"
                  | doc m%"
                  Template describes the trigger specification.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.TriggerParameter"
            | doc m%"
            TriggerParameter indicates a passed parameter to a service template
            "%
            = {
                dest
                  | String
                  | doc m%"
                  Dest is the JSONPath of a resource key. A path is a series of keys separated by a dot. The colon character can be escaped with '.' The -1 key can be used to append a value to an existing array. See https://github.com/tidwall/sjson#path-syntax for more information about how this is used.
                  "%,
                operation
                  | String
                  | doc m%"
                  Operation is what to do with the existing value at Dest, whether to 'prepend', 'overwrite', or 'append' it.
                  "%
                  | optional,
                src
                  | definitions.contract."io.argoproj.sensor.v1alpha1.TriggerParameterSource"
                  | doc m%"
                  Src contains a source reference to the value of the parameter from a dependency
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.TriggerParameterSource"
            | doc m%"
            TriggerParameterSource defines the source for a parameter from a event event
            "%
            = {
                contextKey
                  | String
                  | doc m%"
                  ContextKey is the JSONPath of the event's (JSON decoded) context key ContextKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
                  "%
                  | optional,
                contextTemplate
                  | String
                  | doc m%"
                  ContextTemplate is a go-template for extracting a string from the event's context. If a ContextTemplate is provided with a ContextKey, the template will be evaluated first and fallback to the ContextKey. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/
                  "%
                  | optional,
                dataKey
                  | String
                  | doc m%"
                  DataKey is the JSONPath of the event's (JSON decoded) data key DataKey is a series of keys separated by a dot. A key may contain wildcard characters '*' and '?'. To access an array value use the index as the key. The dot and wildcard characters can be escaped with '\'. See https://github.com/tidwall/gjson#path-syntax for more information on how to use this.
                  "%
                  | optional,
                dataTemplate
                  | String
                  | doc m%"
                  DataTemplate is a go-template for extracting a string from the event's data. If a DataTemplate is provided with a DataKey, the template will be evaluated first and fallback to the DataKey. The templating follows the standard go-template syntax as well as sprig's extra functions. See https://pkg.go.dev/text/template and https://masterminds.github.io/sprig/
                  "%
                  | optional,
                dependencyName
                  | String
                  | doc m%"
                  DependencyName refers to the name of the dependency. The event which is stored for this dependency is used as payload for the parameterization. Make sure to refer to one of the dependencies you have defined under Dependencies list.
                  "%,
                useRawData
                  | Bool
                  | doc m%"
                  UseRawData indicates if the value in an event at data key should be used without converting to string. When true, a number, boolean, json or string parameter may be extracted. When the field is unspecified, or explicitly false, the behavior is to turn the extracted field into a string. (e.g. when set to true, the parameter 123 will resolve to the numerical type, but when false, or not provided, the string "123" will be resolved)
                  "%
                  | optional,
                value
                  | String
                  | doc m%"
                  Value is the default literal value to use for this parameter source This is only used if the DataKey is invalid. If the DataKey is invalid and this is not defined, this param source will produce an error.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.TriggerPolicy"
            | doc m%"
            TriggerPolicy dictates the policy for the trigger retries
            "%
            = {
                k8s
                  | definitions.contract."io.argoproj.sensor.v1alpha1.K8SResourcePolicy"
                  | doc m%"
                  K8SResourcePolicy refers to the policy used to check the state of K8s based triggers using using labels
                  "%
                  | optional,
                status
                  | definitions.contract."io.argoproj.sensor.v1alpha1.StatusPolicy"
                  | doc m%"
                  Status refers to the policy used to check the state of the trigger using response status
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.TriggerTemplate"
            | doc m%"
            TriggerTemplate is the template that describes trigger specification.
            "%
            = {
                argoWorkflow
                  | definitions.contract."io.argoproj.sensor.v1alpha1.ArgoWorkflowTrigger"
                  | doc m%"
                  ArgoWorkflow refers to the trigger that can perform various operations on an Argo workflow.
                  "%
                  | optional,
                awsLambda
                  | definitions.contract."io.argoproj.sensor.v1alpha1.AWSLambdaTrigger"
                  | doc m%"
                  AWSLambda refers to the trigger designed to invoke AWS Lambda function with with on-the-fly constructable payload.
                  "%
                  | optional,
                azureEventHubs
                  | definitions.contract."io.argoproj.sensor.v1alpha1.AzureEventHubsTrigger"
                  | doc m%"
                  AzureEventHubs refers to the trigger send an event to an Azure Event Hub.
                  "%
                  | optional,
                azureServiceBus
                  | definitions.contract."io.argoproj.sensor.v1alpha1.AzureServiceBusTrigger"
                  | doc m%"
                  AzureServiceBus refers to the trigger designed to place messages on Azure Service Bus
                  "%
                  | optional,
                conditions
                  | String
                  | doc m%"
                  Conditions is the conditions to execute the trigger. For example: "(dep01 || dep02) && dep04"
                  "%
                  | optional,
                conditionsReset
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.argoproj.sensor.v1alpha1.ConditionsResetCriteria"
                  ])
                  | doc m%"
                  Criteria to reset the conditons
                  "%
                  | optional,
                custom
                  | definitions.contract."io.argoproj.sensor.v1alpha1.CustomTrigger"
                  | doc m%"
                  CustomTrigger refers to the trigger designed to connect to a gRPC trigger server and execute a custom trigger.
                  "%
                  | optional,
                email
                  | definitions.contract."io.argoproj.sensor.v1alpha1.EmailTrigger"
                  | doc m%"
                  Email refers to the trigger designed to send an email notification
                  "%
                  | optional,
                http
                  | definitions.contract."io.argoproj.sensor.v1alpha1.HTTPTrigger"
                  | doc m%"
                  HTTP refers to the trigger designed to dispatch a HTTP request with on-the-fly constructable payload.
                  "%
                  | optional,
                k8s
                  | definitions.contract."io.argoproj.sensor.v1alpha1.StandardK8STrigger"
                  | doc m%"
                  StandardK8STrigger refers to the trigger designed to create or update a generic Kubernetes resource.
                  "%
                  | optional,
                kafka
                  | definitions.contract."io.argoproj.sensor.v1alpha1.KafkaTrigger"
                  | doc m%"
                  Kafka refers to the trigger designed to place messages on Kafka topic.
                  "%
                  | optional,
                log
                  | definitions.contract."io.argoproj.sensor.v1alpha1.LogTrigger"
                  | doc m%"
                  Log refers to the trigger designed to invoke log the event.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name is a unique name of the action to take.
                  "%,
                nats
                  | definitions.contract."io.argoproj.sensor.v1alpha1.NATSTrigger"
                  | doc m%"
                  NATS refers to the trigger designed to place message on NATS subject.
                  "%
                  | optional,
                openWhisk
                  | definitions.contract."io.argoproj.sensor.v1alpha1.OpenWhiskTrigger"
                  | doc m%"
                  OpenWhisk refers to the trigger designed to invoke OpenWhisk action.
                  "%
                  | optional,
                pulsar
                  | definitions.contract."io.argoproj.sensor.v1alpha1.PulsarTrigger"
                  | doc m%"
                  Pulsar refers to the trigger designed to place messages on Pulsar topic.
                  "%
                  | optional,
                slack
                  | definitions.contract."io.argoproj.sensor.v1alpha1.SlackTrigger"
                  | doc m%"
                  Slack refers to the trigger designed to send slack notification message.
                  "%
                  | optional,
                ..
              },
          "io.argoproj.sensor.v1alpha1.URLArtifact"
            | doc m%"
            URLArtifact contains information about an artifact at an http endpoint.
            "%
            = {
                path
                  | String
                  | doc m%"
                  Path is the complete URL
                  "%,
                verifyCert
                  | Bool
                  | doc m%"
                  VerifyCert decides whether the connection is secure or not
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.admissionregistration.v1.MutatingWebhook"
            | doc m%"
            MutatingWebhook describes an admission webhook and the resources and operations it applies to.
            "%
            = {
                admissionReviewVersions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
                  "%,
                clientConfig
                  | definitions.contract."io.k8s.api.admissionregistration.v1.WebhookClientConfig"
                  | doc m%"
                  ClientConfig defines how to communicate with the hook. Required
                  "%,
                failurePolicy
                  | String
                  | doc m%"
                  FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
                  "%
                  | optional,
                matchPolicy
                  | String
                  | doc m%"
                  matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
                  
                  - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
                  
                  - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
                  
                  Defaults to "Equivalent"
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
                  "%,
                namespaceSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.
                  
                  For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
                    "matchExpressions": [
                      {
                        "key": "runlevel",
                        "operator": "NotIn",
                        "values": [
                          "0",
                          "1"
                        ]
                      }
                    ]
                  }
                  
                  If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
                    "matchExpressions": [
                      {
                        "key": "environment",
                        "operator": "In",
                        "values": [
                          "prod",
                          "staging"
                        ]
                      }
                    ]
                  }
                  
                  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
                  
                  Default to the empty LabelSelector, which matches everything.
                  "%
                  | optional,
                objectSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
                  "%
                  | optional,
                reinvocationPolicy
                  | String
                  | doc m%"
                  reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".
                  
                  Never: the webhook will not be called more than once in a single admission evaluation.
                  
                  IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.
                  
                  Defaults to "Never".
                  "%
                  | optional,
                rules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.admissionregistration.v1.RuleWithOperations"
                  ])
                  | doc m%"
                  Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
                  "%
                  | optional,
                sideEffects
                  | String
                  | doc m%"
                  SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
                  "%,
                timeoutSeconds
                  | std.number.Integer
                  | doc m%"
                  TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration"
            | doc m%"
            MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration",
          "io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList"
            | doc m%"
            MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList",
          "io.k8s.api.admissionregistration.v1.RuleWithOperations"
            | doc m%"
            RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.
            "%
            = {
                apiGroups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
                  "%
                  | optional,
                apiVersions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
                  "%
                  | optional,
                operations
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
                  "%
                  | optional,
                resources
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Resources is a list of resources this rule applies to.
                  
                  For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
                  
                  If wildcard is present, the validation rule will ensure resources do not overlap with each other.
                  
                  Depending on the enclosing object, subresources might not be allowed. Required.
                  "%
                  | optional,
                scope
                  | String
                  | doc m%"
                  scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.admissionregistration.v1.ServiceReference"
            | doc m%"
            ServiceReference holds a reference to Service.legacy.k8s.io
            "%
            = {
                name
                  | String
                  | doc m%"
                  `name` is the name of the service. Required
                  "%,
                namespace
                  | String
                  | doc m%"
                  `namespace` is the namespace of the service. Required
                  "%,
                path
                  | String
                  | doc m%"
                  `path` is an optional URL path which will be sent in any request to this service.
                  "%
                  | optional,
                port
                  | std.number.Integer
                  | doc m%"
                  If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.admissionregistration.v1.ValidatingWebhook"
            | doc m%"
            ValidatingWebhook describes an admission webhook and the resources and operations it applies to.
            "%
            = {
                admissionReviewVersions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
                  "%,
                clientConfig
                  | definitions.contract."io.k8s.api.admissionregistration.v1.WebhookClientConfig"
                  | doc m%"
                  ClientConfig defines how to communicate with the hook. Required
                  "%,
                failurePolicy
                  | String
                  | doc m%"
                  FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
                  "%
                  | optional,
                matchPolicy
                  | String
                  | doc m%"
                  matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
                  
                  - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
                  
                  - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
                  
                  Defaults to "Equivalent"
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
                  "%,
                namespaceSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.
                  
                  For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
                    "matchExpressions": [
                      {
                        "key": "runlevel",
                        "operator": "NotIn",
                        "values": [
                          "0",
                          "1"
                        ]
                      }
                    ]
                  }
                  
                  If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
                    "matchExpressions": [
                      {
                        "key": "environment",
                        "operator": "In",
                        "values": [
                          "prod",
                          "staging"
                        ]
                      }
                    ]
                  }
                  
                  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.
                  
                  Default to the empty LabelSelector, which matches everything.
                  "%
                  | optional,
                objectSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
                  "%
                  | optional,
                rules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.admissionregistration.v1.RuleWithOperations"
                  ])
                  | doc m%"
                  Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
                  "%
                  | optional,
                sideEffects
                  | String
                  | doc m%"
                  SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
                  "%,
                timeoutSeconds
                  | std.number.Integer
                  | doc m%"
                  TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration"
            | doc m%"
            ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration",
          "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList"
            | doc m%"
            ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList",
          "io.k8s.api.admissionregistration.v1.WebhookClientConfig"
            | doc m%"
            WebhookClientConfig contains the information to make a TLS connection with the webhook
            "%
            = {
                caBundle
                  | String
                  | doc m%"
                  `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
                  "%
                  | optional,
                service
                  | definitions.contract."io.k8s.api.admissionregistration.v1.ServiceReference"
                  | doc m%"
                  `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.
                  
                  If the webhook is running within the cluster, then you should use `service`.
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
                  
                  The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
                  
                  Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
                  
                  The scheme must be "https"; the URL must begin with "https://".
                  
                  A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
                  
                  Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.admissionregistration.v1beta1.MutatingWebhook"
            | doc m%"
            MutatingWebhook describes an admission webhook and the resources and operations it applies to.
            "%
            = {
                admissionReviewVersions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. Default to `['v1beta1']`.
                  "%
                  | optional,
                clientConfig
                  | definitions.contract."io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig"
                  | doc m%"
                  ClientConfig defines how to communicate with the hook. Required
                  "%,
                failurePolicy
                  | String
                  | doc m%"
                  FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.
                  "%
                  | optional,
                matchPolicy
                  | String
                  | doc m%"
                  matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
                  
                  - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
                  
                  - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
                  
                  Defaults to "Exact"
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
                  "%,
                namespaceSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.
                  
                  For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
                    "matchExpressions": [
                      {
                        "key": "runlevel",
                        "operator": "NotIn",
                        "values": [
                          "0",
                          "1"
                        ]
                      }
                    ]
                  }
                  
                  If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
                    "matchExpressions": [
                      {
                        "key": "environment",
                        "operator": "In",
                        "values": [
                          "prod",
                          "staging"
                        ]
                      }
                    ]
                  }
                  
                  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more examples of label selectors.
                  
                  Default to the empty LabelSelector, which matches everything.
                  "%
                  | optional,
                objectSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
                  "%
                  | optional,
                reinvocationPolicy
                  | String
                  | doc m%"
                  reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".
                  
                  Never: the webhook will not be called more than once in a single admission evaluation.
                  
                  IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.
                  
                  Defaults to "Never".
                  "%
                  | optional,
                rules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.admissionregistration.v1beta1.RuleWithOperations"
                  ])
                  | doc m%"
                  Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
                  "%
                  | optional,
                sideEffects
                  | String
                  | doc m%"
                  SideEffects states whether this webhook has side effects. Acceptable values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Defaults to Unknown.
                  "%
                  | optional,
                timeoutSeconds
                  | std.number.Integer
                  | doc m%"
                  TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 30 seconds.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
            | doc m%"
            MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 MutatingWebhookConfiguration instead.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration",
          "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList"
            | doc m%"
            MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList",
          "io.k8s.api.admissionregistration.v1beta1.RuleWithOperations"
            | doc m%"
            RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.
            "%
            = {
                apiGroups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  APIGroups is the API groups the resources belong to. '*' is all groups. If '*' is present, the length of the slice must be one. Required.
                  "%
                  | optional,
                apiVersions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  APIVersions is the API versions the resources belong to. '*' is all versions. If '*' is present, the length of the slice must be one. Required.
                  "%
                  | optional,
                operations
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
                  "%
                  | optional,
                resources
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Resources is a list of resources this rule applies to.
                  
                  For example: 'pods' means pods. 'pods/log' means the log subresource of pods. '*' means all resources, but not subresources. 'pods/*' means all subresources of pods. '*/scale' means all scale subresources. '*/*' means all resources and their subresources.
                  
                  If wildcard is present, the validation rule will ensure resources do not overlap with each other.
                  
                  Depending on the enclosing object, subresources might not be allowed. Required.
                  "%
                  | optional,
                scope
                  | String
                  | doc m%"
                  scope specifies the scope of this rule. Valid values are "Cluster", "Namespaced", and "*" "Cluster" means that only cluster-scoped resources will match this rule. Namespace API objects are cluster-scoped. "Namespaced" means that only namespaced resources will match this rule. "*" means that there are no scope restrictions. Subresources match the scope of their parent resource. Default is "*".
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.admissionregistration.v1beta1.ServiceReference"
            | doc m%"
            ServiceReference holds a reference to Service.legacy.k8s.io
            "%
            = {
                name
                  | String
                  | doc m%"
                  `name` is the name of the service. Required
                  "%,
                namespace
                  | String
                  | doc m%"
                  `namespace` is the namespace of the service. Required
                  "%,
                path
                  | String
                  | doc m%"
                  `path` is an optional URL path which will be sent in any request to this service.
                  "%
                  | optional,
                port
                  | std.number.Integer
                  | doc m%"
                  If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook"
            | doc m%"
            ValidatingWebhook describes an admission webhook and the resources and operations it applies to.
            "%
            = {
                admissionReviewVersions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy. Default to `['v1beta1']`.
                  "%
                  | optional,
                clientConfig
                  | definitions.contract."io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig"
                  | doc m%"
                  ClientConfig defines how to communicate with the hook. Required
                  "%,
                failurePolicy
                  | String
                  | doc m%"
                  FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Ignore.
                  "%
                  | optional,
                matchPolicy
                  | String
                  | doc m%"
                  matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
                  
                  - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
                  
                  - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
                  
                  Defaults to "Exact"
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
                  "%,
                namespaceSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  NamespaceSelector decides whether to run the webhook on an object based on whether the namespace for that object matches the selector. If the object itself is a namespace, the matching is performed on object.metadata.labels. If the object is another cluster scoped resource, it never skips the webhook.
                  
                  For example, to run the webhook on any objects whose namespace is not associated with "runlevel" of "0" or "1";  you will set the selector as follows: "namespaceSelector": {
                    "matchExpressions": [
                      {
                        "key": "runlevel",
                        "operator": "NotIn",
                        "values": [
                          "0",
                          "1"
                        ]
                      }
                    ]
                  }
                  
                  If instead you want to only run the webhook on any objects whose namespace is associated with the "environment" of "prod" or "staging"; you will set the selector as follows: "namespaceSelector": {
                    "matchExpressions": [
                      {
                        "key": "environment",
                        "operator": "In",
                        "values": [
                          "prod",
                          "staging"
                        ]
                      }
                    ]
                  }
                  
                  See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels for more examples of label selectors.
                  
                  Default to the empty LabelSelector, which matches everything.
                  "%
                  | optional,
                objectSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  ObjectSelector decides whether to run the webhook based on if the object has matching labels. objectSelector is evaluated against both the oldObject and newObject that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (oldObject in the case of create, or newObject in the case of delete) or an object that cannot have labels (like a DeploymentRollback or a PodProxyOptions object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty LabelSelector, which matches everything.
                  "%
                  | optional,
                rules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.admissionregistration.v1beta1.RuleWithOperations"
                  ])
                  | doc m%"
                  Rules describes what operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ Rule. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
                  "%
                  | optional,
                sideEffects
                  | String
                  | doc m%"
                  SideEffects states whether this webhook has side effects. Acceptable values are: Unknown, None, Some, NoneOnDryRun Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some. Defaults to Unknown.
                  "%
                  | optional,
                timeoutSeconds
                  | std.number.Integer
                  | doc m%"
                  TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 30 seconds.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
            | doc m%"
            ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 ValidatingWebhookConfiguration instead.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration",
          "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList"
            | doc m%"
            ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList",
          "io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig"
            | doc m%"
            WebhookClientConfig contains the information to make a TLS connection with the webhook
            "%
            = {
                caBundle
                  | String
                  | doc m%"
                  `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
                  "%
                  | optional,
                service
                  | definitions.contract."io.k8s.api.admissionregistration.v1beta1.ServiceReference"
                  | doc m%"
                  `service` is a reference to the service for this webhook. Either `service` or `url` must be specified.
                  
                  If the webhook is running within the cluster, then you should use `service`.
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
                  
                  The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
                  
                  Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
                  
                  The scheme must be "https"; the URL must begin with "https://".
                  
                  A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
                  
                  Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apiserverinternal.v1alpha1.ServerStorageVersion"
            | doc m%"
            An API server instance reports the version it can decode and the version it encodes objects to when persisting objects in the backend.
            "%
            = {
                apiServerID
                  | String
                  | doc m%"
                  The ID of the reporting API server.
                  "%
                  | optional,
                decodableVersions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  The API server can decode objects encoded in these versions. The encodingVersion must be included in the decodableVersions.
                  "%
                  | optional,
                encodingVersion
                  | String
                  | doc m%"
                  The API server encodes the object to this version when persisting it in the backend (e.g., etcd).
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apiserverinternal.v1alpha1.StorageVersion"
            | doc m%"
            
             Storage version of a specific resource.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.apiserverinternal.v1alpha1.StorageVersion",
          "io.k8s.api.apiserverinternal.v1alpha1.StorageVersionCondition"
            | doc m%"
            Describes the state of the storageVersion at a certain point.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  A human readable message indicating details about the transition.
                  "%
                  | optional,
                observedGeneration
                  | std.number.Integer
                  | doc m%"
                  If set, this represents the .metadata.generation that the condition was set based upon.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  The reason for the condition's last transition.
                  "%,
                status
                  | String
                  | doc m%"
                  Status of the condition, one of True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  Type of the condition.
                  "%,
                ..
              },
          "io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList"
            | doc m%"
            A list of StorageVersions.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList",
          "io.k8s.api.apiserverinternal.v1alpha1.StorageVersionSpec"
            | doc m%"
            StorageVersionSpec is an empty spec.
            "%
            = {  .. },
          "io.k8s.api.apiserverinternal.v1alpha1.StorageVersionStatus"
            | doc m%"
            API server instances report the versions they can decode and the version they encode objects to when persisting objects in the backend.
            "%
            = {
                commonEncodingVersion
                  | String
                  | doc m%"
                  If all API server instances agree on the same encoding storage version, then this field is set to that version. Otherwise this field is left empty. API servers should finish updating its storageVersionStatus entry before serving write operations, so that this field will be in sync with the reality.
                  "%
                  | optional,
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.apiserverinternal.v1alpha1.StorageVersionCondition"
                  ])
                  | doc m%"
                  The latest available observations of the storageVersion's state.
                  "%
                  | optional,
                storageVersions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.apiserverinternal.v1alpha1.ServerStorageVersion"
                  ])
                  | doc m%"
                  The reported versions per API server instance.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apps.v1.ControllerRevision"
            | doc m%"
            ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.apps.v1.ControllerRevision",
          "io.k8s.api.apps.v1.ControllerRevisionList"
            | doc m%"
            ControllerRevisionList is a resource containing a list of ControllerRevision objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.apps.v1.ControllerRevisionList",
          "io.k8s.api.apps.v1.DaemonSet"
            | doc m%"
            DaemonSet represents the configuration of a daemon set.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.apps.v1.DaemonSet",
          "io.k8s.api.apps.v1.DaemonSetCondition"
            | doc m%"
            DaemonSetCondition describes the state of a DaemonSet at a certain point.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  A human readable message indicating details about the transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  The reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  Status of the condition, one of True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  Type of DaemonSet condition.
                  "%,
                ..
              },
          "io.k8s.api.apps.v1.DaemonSetList"
            | doc m%"
            DaemonSetList is a collection of daemon sets.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.apps.v1.DaemonSetList",
          "io.k8s.api.apps.v1.DaemonSetSpec"
            | doc m%"
            DaemonSetSpec is the specification of a daemon set.
            "%
            = {
                minReadySeconds
                  | std.number.Integer
                  | doc m%"
                  The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
                  "%
                  | optional,
                revisionHistoryLimit
                  | std.number.Integer
                  | doc m%"
                  The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
                  "%
                  | optional,
                selector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
                  "%,
                template
                  | definitions.contract."io.k8s.api.core.v1.PodTemplateSpec"
                  | doc m%"
                  An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
                  "%,
                updateStrategy
                  | definitions.contract."io.k8s.api.apps.v1.DaemonSetUpdateStrategy"
                  | doc m%"
                  An update strategy to replace existing DaemonSet pods with new pods.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apps.v1.DaemonSetStatus"
            | doc m%"
            DaemonSetStatus represents the current status of a daemon set.
            "%
            = {
                collisionCount
                  | std.number.Integer
                  | doc m%"
                  Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
                  "%
                  | optional,
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.apps.v1.DaemonSetCondition"
                  ])
                  | doc m%"
                  Represents the latest available observations of a DaemonSet's current state.
                  "%
                  | optional,
                currentNumberScheduled
                  | std.number.Integer
                  | doc m%"
                  The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
                  "%,
                desiredNumberScheduled
                  | std.number.Integer
                  | doc m%"
                  The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
                  "%,
                numberAvailable
                  | std.number.Integer
                  | doc m%"
                  The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
                  "%
                  | optional,
                numberMisscheduled
                  | std.number.Integer
                  | doc m%"
                  The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
                  "%,
                numberReady
                  | std.number.Integer
                  | doc m%"
                  The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
                  "%,
                numberUnavailable
                  | std.number.Integer
                  | doc m%"
                  The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
                  "%
                  | optional,
                observedGeneration
                  | std.number.Integer
                  | doc m%"
                  The most recent generation observed by the daemon set controller.
                  "%
                  | optional,
                updatedNumberScheduled
                  | std.number.Integer
                  | doc m%"
                  The total number of nodes that are running updated daemon pod
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apps.v1.DaemonSetUpdateStrategy"
            | doc m%"
            DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
            "%
            = {
                rollingUpdate
                  | definitions.contract."io.k8s.api.apps.v1.RollingUpdateDaemonSet"
                  | doc m%"
                  Rolling update config params. Present only if type = "RollingUpdate".
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  Type of daemon set update. Can be "RollingUpdate" or "OnDelete". Default is RollingUpdate.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apps.v1.Deployment"
            | doc m%"
            Deployment enables declarative updates for Pods and ReplicaSets.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.apps.v1.Deployment",
          "io.k8s.api.apps.v1.DeploymentCondition"
            | doc m%"
            DeploymentCondition describes the state of a deployment at a certain point.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time the condition transitioned from one status to another.
                  "%
                  | optional,
                lastUpdateTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  The last time this condition was updated.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  A human readable message indicating details about the transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  The reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  Status of the condition, one of True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  Type of deployment condition.
                  "%,
                ..
              },
          "io.k8s.api.apps.v1.DeploymentList"
            | doc m%"
            DeploymentList is a list of Deployments.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.apps.v1.DeploymentList",
          "io.k8s.api.apps.v1.DeploymentSpec"
            | doc m%"
            DeploymentSpec is the specification of the desired behavior of the Deployment.
            "%
            = {
                minReadySeconds
                  | std.number.Integer
                  | doc m%"
                  Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
                  "%
                  | optional,
                paused
                  | Bool
                  | doc m%"
                  Indicates that the deployment is paused.
                  "%
                  | optional,
                progressDeadlineSeconds
                  | std.number.Integer
                  | doc m%"
                  The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Note that progress will not be estimated during the time a deployment is paused. Defaults to 600s.
                  "%
                  | optional,
                replicas
                  | std.number.Integer
                  | doc m%"
                  Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
                  "%
                  | optional,
                revisionHistoryLimit
                  | std.number.Integer
                  | doc m%"
                  The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
                  "%
                  | optional,
                selector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment. It must match the pod template's labels.
                  "%,
                strategy
                  | predicates.contract_from_predicate
                  definitions.predicate."io.k8s.api.apps.v1.DeploymentStrategy"
                  | doc m%"
                  The deployment strategy to use to replace existing pods with new ones.
                  "%
                  | optional,
                template
                  | definitions.contract."io.k8s.api.core.v1.PodTemplateSpec"
                  | doc m%"
                  Template describes the pods that will be created.
                  "%,
                ..
              },
          "io.k8s.api.apps.v1.DeploymentStatus"
            | doc m%"
            DeploymentStatus is the most recently observed status of the Deployment.
            "%
            = {
                availableReplicas
                  | std.number.Integer
                  | doc m%"
                  Total number of available pods (ready for at least minReadySeconds) targeted by this deployment.
                  "%
                  | optional,
                collisionCount
                  | std.number.Integer
                  | doc m%"
                  Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet.
                  "%
                  | optional,
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.apps.v1.DeploymentCondition"
                  ])
                  | doc m%"
                  Represents the latest available observations of a deployment's current state.
                  "%
                  | optional,
                observedGeneration
                  | std.number.Integer
                  | doc m%"
                  The generation observed by the deployment controller.
                  "%
                  | optional,
                readyReplicas
                  | std.number.Integer
                  | doc m%"
                  Total number of ready pods targeted by this deployment.
                  "%
                  | optional,
                replicas
                  | std.number.Integer
                  | doc m%"
                  Total number of non-terminated pods targeted by this deployment (their labels match the selector).
                  "%
                  | optional,
                unavailableReplicas
                  | std.number.Integer
                  | doc m%"
                  Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.
                  "%
                  | optional,
                updatedReplicas
                  | std.number.Integer
                  | doc m%"
                  Total number of non-terminated pods targeted by this deployment that have the desired template spec.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apps.v1.DeploymentStrategy"
            | doc m%"
            DeploymentStrategy describes how to replace existing pods with new ones.
            "%
            = {
                rollingUpdate
                  | definitions.contract."io.k8s.api.apps.v1.RollingUpdateDeployment"
                  | doc m%"
                  Rolling update config params. Present only if DeploymentStrategyType = RollingUpdate.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  Type of deployment. Can be "Recreate" or "RollingUpdate". Default is RollingUpdate.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apps.v1.ReplicaSet"
            | doc m%"
            ReplicaSet ensures that a specified number of pod replicas are running at any given time.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.apps.v1.ReplicaSet",
          "io.k8s.api.apps.v1.ReplicaSetCondition"
            | doc m%"
            ReplicaSetCondition describes the state of a replica set at a certain point.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  The last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  A human readable message indicating details about the transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  The reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  Status of the condition, one of True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  Type of replica set condition.
                  "%,
                ..
              },
          "io.k8s.api.apps.v1.ReplicaSetList"
            | doc m%"
            ReplicaSetList is a collection of ReplicaSets.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.apps.v1.ReplicaSetList",
          "io.k8s.api.apps.v1.ReplicaSetSpec"
            | doc m%"
            ReplicaSetSpec is the specification of a ReplicaSet.
            "%
            = {
                minReadySeconds
                  | std.number.Integer
                  | doc m%"
                  Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
                  "%
                  | optional,
                replicas
                  | std.number.Integer
                  | doc m%"
                  Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
                  "%
                  | optional,
                selector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  Selector is a label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
                  "%,
                template
                  | definitions.contract."io.k8s.api.core.v1.PodTemplateSpec"
                  | doc m%"
                  Template is the object that describes the pod that will be created if insufficient replicas are detected. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apps.v1.ReplicaSetStatus"
            | doc m%"
            ReplicaSetStatus represents the current status of a ReplicaSet.
            "%
            = {
                availableReplicas
                  | std.number.Integer
                  | doc m%"
                  The number of available replicas (ready for at least minReadySeconds) for this replica set.
                  "%
                  | optional,
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.apps.v1.ReplicaSetCondition"
                  ])
                  | doc m%"
                  Represents the latest available observations of a replica set's current state.
                  "%
                  | optional,
                fullyLabeledReplicas
                  | std.number.Integer
                  | doc m%"
                  The number of pods that have labels matching the labels of the pod template of the replicaset.
                  "%
                  | optional,
                observedGeneration
                  | std.number.Integer
                  | doc m%"
                  ObservedGeneration reflects the generation of the most recently observed ReplicaSet.
                  "%
                  | optional,
                readyReplicas
                  | std.number.Integer
                  | doc m%"
                  The number of ready replicas for this replica set.
                  "%
                  | optional,
                replicas
                  | std.number.Integer
                  | doc m%"
                  Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/#what-is-a-replicationcontroller
                  "%,
                ..
              },
          "io.k8s.api.apps.v1.RollingUpdateDaemonSet"
            | doc m%"
            Spec to control the desired behavior of daemon set rolling update.
            "%
            = {
                maxUnavailable
                  | definitions.contract."io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                  | doc m%"
                  The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of total number of DaemonSet pods at the start of the update (ex: 10%). Absolute number is calculated from percentage by rounding up. This cannot be 0. Default value is 1. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. status.desiredNumberScheduled) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apps.v1.RollingUpdateDeployment"
            | doc m%"
            Spec to control the desired behavior of rolling update.
            "%
            = {
                maxSurge
                  | definitions.contract."io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                  | doc m%"
                  The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.
                  "%
                  | optional,
                maxUnavailable
                  | definitions.contract."io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                  | doc m%"
                  The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy"
            | doc m%"
            RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
            "%
            = {
                partition
                  | std.number.Integer
                  | doc m%"
                  Partition indicates the ordinal at which the StatefulSet should be partitioned. Default value is 0.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apps.v1.StatefulSet"
            | doc m%"
            StatefulSet represents a set of pods with consistent identities. Identities are defined as:
             - Network: A single stable DNS and hostname.
             - Storage: As many VolumeClaims as requested.
            The StatefulSet guarantees that a given network identity will always map to the same storage identity.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.apps.v1.StatefulSet",
          "io.k8s.api.apps.v1.StatefulSetCondition"
            | doc m%"
            StatefulSetCondition describes the state of a statefulset at a certain point.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  A human readable message indicating details about the transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  The reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  Status of the condition, one of True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  Type of statefulset condition.
                  "%,
                ..
              },
          "io.k8s.api.apps.v1.StatefulSetList"
            | doc m%"
            StatefulSetList is a collection of StatefulSets.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.apps.v1.StatefulSetList",
          "io.k8s.api.apps.v1.StatefulSetSpec"
            | doc m%"
            A StatefulSetSpec is the specification of a StatefulSet.
            "%
            = {
                podManagementPolicy
                  | String
                  | doc m%"
                  podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
                  "%
                  | optional,
                replicas
                  | std.number.Integer
                  | doc m%"
                  replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
                  "%
                  | optional,
                revisionHistoryLimit
                  | std.number.Integer
                  | doc m%"
                  revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
                  "%
                  | optional,
                selector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  selector is a label query over pods that should match the replica count. It must match the pod template's labels. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
                  "%,
                serviceName
                  | String
                  | doc m%"
                  serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where "pod-specific-string" is managed by the StatefulSet controller.
                  "%,
                template
                  | definitions.contract."io.k8s.api.core.v1.PodTemplateSpec"
                  | doc m%"
                  template is the object that describes the pod that will be created if insufficient replicas are detected. Each pod stamped out by the StatefulSet will fulfill this Template, but have a unique identity from the rest of the StatefulSet.
                  "%,
                updateStrategy
                  | definitions.contract."io.k8s.api.apps.v1.StatefulSetUpdateStrategy"
                  | doc m%"
                  updateStrategy indicates the StatefulSetUpdateStrategy that will be employed to update Pods in the StatefulSet when a revision is made to Template.
                  "%
                  | optional,
                volumeClaimTemplates
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.PersistentVolumeClaim"
                  ])
                  | doc m%"
                  volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apps.v1.StatefulSetStatus"
            | doc m%"
            StatefulSetStatus represents the current state of a StatefulSet.
            "%
            = {
                collisionCount
                  | std.number.Integer
                  | doc m%"
                  collisionCount is the count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
                  "%
                  | optional,
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.apps.v1.StatefulSetCondition"
                  ])
                  | doc m%"
                  Represents the latest available observations of a statefulset's current state.
                  "%
                  | optional,
                currentReplicas
                  | std.number.Integer
                  | doc m%"
                  currentReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by currentRevision.
                  "%
                  | optional,
                currentRevision
                  | String
                  | doc m%"
                  currentRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,currentReplicas).
                  "%
                  | optional,
                observedGeneration
                  | std.number.Integer
                  | doc m%"
                  observedGeneration is the most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.
                  "%
                  | optional,
                readyReplicas
                  | std.number.Integer
                  | doc m%"
                  readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.
                  "%
                  | optional,
                replicas
                  | std.number.Integer
                  | doc m%"
                  replicas is the number of Pods created by the StatefulSet controller.
                  "%,
                updateRevision
                  | String
                  | doc m%"
                  updateRevision, if not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [replicas-updatedReplicas,replicas)
                  "%
                  | optional,
                updatedReplicas
                  | std.number.Integer
                  | doc m%"
                  updatedReplicas is the number of Pods created by the StatefulSet controller from the StatefulSet version indicated by updateRevision.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.apps.v1.StatefulSetUpdateStrategy"
            | doc m%"
            StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
            "%
            = {
                rollingUpdate
                  | definitions.contract."io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy"
                  | doc m%"
                  RollingUpdate is used to communicate parameters when Type is RollingUpdateStatefulSetStrategyType.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authentication.v1.BoundObjectReference"
            | doc m%"
            BoundObjectReference is a reference to an object that a token is bound to.
            "%
            = {
                apiVersion
                  | String
                  | doc m%"
                  API version of the referent.
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  Kind of the referent. Valid kinds are 'Pod' and 'Secret'.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name of the referent.
                  "%
                  | optional,
                uid
                  | String
                  | doc m%"
                  UID of the referent.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authentication.v1.TokenRequest"
            | doc m%"
            TokenRequest requests a token for a given service account.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.authentication.v1.TokenRequest",
          "io.k8s.api.authentication.v1.TokenRequestSpec"
            | doc m%"
            TokenRequestSpec contains client provided parameters of a token request.
            "%
            = {
                audiences
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Audiences are the intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of audiences of the token, and otherwise should reject the token. A token issued for multiple audiences may be used to authenticate against any of the audiences listed but implies a high degree of trust between the target audiences.
                  "%,
                boundObjectRef
                  | definitions.contract."io.k8s.api.authentication.v1.BoundObjectReference"
                  | doc m%"
                  BoundObjectRef is a reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. NOTE: The API server's TokenReview endpoint will validate the BoundObjectRef, but other audiences may not. Keep ExpirationSeconds small if you want prompt revocation.
                  "%
                  | optional,
                expirationSeconds
                  | std.number.Integer
                  | doc m%"
                  ExpirationSeconds is the requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the 'expiration' field in a response.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authentication.v1.TokenRequestStatus"
            | doc m%"
            TokenRequestStatus is the result of a token request.
            "%
            = {
                expirationTimestamp
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  ExpirationTimestamp is the time of expiration of the returned token.
                  "%,
                token
                  | String
                  | doc m%"
                  Token is the opaque bearer token.
                  "%,
                ..
              },
          "io.k8s.api.authentication.v1.TokenReview"
            | doc m%"
            TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.authentication.v1.TokenReview",
          "io.k8s.api.authentication.v1.TokenReviewSpec"
            | doc m%"
            TokenReviewSpec is a description of the token authentication request.
            "%
            = {
                audiences
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
                  "%
                  | optional,
                token
                  | String
                  | doc m%"
                  Token is the opaque bearer token.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authentication.v1.TokenReviewStatus"
            | doc m%"
            TokenReviewStatus is the result of the token authentication request.
            "%
            = {
                audiences
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
                  "%
                  | optional,
                authenticated
                  | Bool
                  | doc m%"
                  Authenticated indicates that the token was associated with a known user.
                  "%
                  | optional,
                error
                  | String
                  | doc m%"
                  Error indicates that the token couldn't be checked
                  "%
                  | optional,
                user
                  | definitions.contract."io.k8s.api.authentication.v1.UserInfo"
                  | doc m%"
                  User is the UserInfo associated with the provided token.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authentication.v1.UserInfo"
            | doc m%"
            UserInfo holds the information about the user needed to implement the user.Info interface.
            "%
            = {
                extra
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.allOf
                    [
                      predicates.isType '"Array",
                      predicates.arrays.arrayOf (predicates.isType '"String")
                    ])
                  ])
                  | doc m%"
                  Any additional information provided by the authenticator.
                  "%
                  | optional,
                groups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  The names of groups this user is a part of.
                  "%
                  | optional,
                uid
                  | String
                  | doc m%"
                  A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
                  "%
                  | optional,
                username
                  | String
                  | doc m%"
                  The name that uniquely identifies this user among all active users.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authentication.v1beta1.TokenReview"
            | doc m%"
            TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.authentication.v1beta1.TokenReview",
          "io.k8s.api.authentication.v1beta1.TokenReviewSpec"
            | doc m%"
            TokenReviewSpec is a description of the token authentication request.
            "%
            = {
                audiences
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Audiences is a list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the audience will default to the audience of the Kubernetes apiserver.
                  "%
                  | optional,
                token
                  | String
                  | doc m%"
                  Token is the opaque bearer token.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authentication.v1beta1.TokenReviewStatus"
            | doc m%"
            TokenReviewStatus is the result of the token authentication request.
            "%
            = {
                audiences
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Audiences are audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec audiences and the token's audiences. A client of the TokenReview API that sets the spec.audiences field should validate that a compatible audience identifier is returned in the status.audiences field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty status.audience field where status.authenticated is "true", the token is valid against the audience of the Kubernetes API server.
                  "%
                  | optional,
                authenticated
                  | Bool
                  | doc m%"
                  Authenticated indicates that the token was associated with a known user.
                  "%
                  | optional,
                error
                  | String
                  | doc m%"
                  Error indicates that the token couldn't be checked
                  "%
                  | optional,
                user
                  | definitions.contract."io.k8s.api.authentication.v1beta1.UserInfo"
                  | doc m%"
                  User is the UserInfo associated with the provided token.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authentication.v1beta1.UserInfo"
            | doc m%"
            UserInfo holds the information about the user needed to implement the user.Info interface.
            "%
            = {
                extra
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.allOf
                    [
                      predicates.isType '"Array",
                      predicates.arrays.arrayOf (predicates.isType '"String")
                    ])
                  ])
                  | doc m%"
                  Any additional information provided by the authenticator.
                  "%
                  | optional,
                groups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  The names of groups this user is a part of.
                  "%
                  | optional,
                uid
                  | String
                  | doc m%"
                  A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different UIDs.
                  "%
                  | optional,
                username
                  | String
                  | doc m%"
                  The name that uniquely identifies this user among all active users.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authorization.v1.LocalSubjectAccessReview"
            | doc m%"
            LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.authorization.v1.LocalSubjectAccessReview",
          "io.k8s.api.authorization.v1.NonResourceAttributes"
            | doc m%"
            NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
            "%
            = {
                path
                  | String
                  | doc m%"
                  Path is the URL path of the request
                  "%
                  | optional,
                verb
                  | String
                  | doc m%"
                  Verb is the standard HTTP verb
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authorization.v1.NonResourceRule"
            | doc m%"
            NonResourceRule holds information that describes a rule for the non-resource
            "%
            = {
                nonResourceURLs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
                  "%
                  | optional,
                verbs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
                  "%,
                ..
              },
          "io.k8s.api.authorization.v1.ResourceAttributes"
            | doc m%"
            ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
            "%
            = {
                group
                  | String
                  | doc m%"
                  Group is the API Group of the Resource.  "*" means all.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
                  "%
                  | optional,
                namespace
                  | String
                  | doc m%"
                  Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
                  "%
                  | optional,
                resource
                  | String
                  | doc m%"
                  Resource is one of the existing resource types.  "*" means all.
                  "%
                  | optional,
                subresource
                  | String
                  | doc m%"
                  Subresource is one of the existing resource types.  "" means none.
                  "%
                  | optional,
                verb
                  | String
                  | doc m%"
                  Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
                  "%
                  | optional,
                version
                  | String
                  | doc m%"
                  Version is the API Version of the Resource.  "*" means all.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authorization.v1.ResourceRule"
            | doc m%"
            ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
            "%
            = {
                apiGroups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
                  "%
                  | optional,
                resourceNames
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
                  "%
                  | optional,
                resources
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
                   "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
                  "%
                  | optional,
                verbs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
                  "%,
                ..
              },
          "io.k8s.api.authorization.v1.SelfSubjectAccessReview"
            | doc m%"
            SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.authorization.v1.SelfSubjectAccessReview",
          "io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec"
            | doc m%"
            SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
            "%
            = {
                nonResourceAttributes
                  | definitions.contract."io.k8s.api.authorization.v1.NonResourceAttributes"
                  | doc m%"
                  NonResourceAttributes describes information for a non-resource access request
                  "%
                  | optional,
                resourceAttributes
                  | definitions.contract."io.k8s.api.authorization.v1.ResourceAttributes"
                  | doc m%"
                  ResourceAuthorizationAttributes describes information for a resource access request
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authorization.v1.SelfSubjectRulesReview"
            | doc m%"
            SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.authorization.v1.SelfSubjectRulesReview",
          "io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec" = {
                namespace
                  | String
                  | doc m%"
                  Namespace to evaluate rules for. Required.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authorization.v1.SubjectAccessReview"
            | doc m%"
            SubjectAccessReview checks whether or not a user or group can perform an action.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.authorization.v1.SubjectAccessReview",
          "io.k8s.api.authorization.v1.SubjectAccessReviewSpec"
            | doc m%"
            SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
            "%
            = {
                extra
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.allOf
                    [
                      predicates.isType '"Array",
                      predicates.arrays.arrayOf (predicates.isType '"String")
                    ])
                  ])
                  | doc m%"
                  Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
                  "%
                  | optional,
                groups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Groups is the groups you're testing for.
                  "%
                  | optional,
                nonResourceAttributes
                  | definitions.contract."io.k8s.api.authorization.v1.NonResourceAttributes"
                  | doc m%"
                  NonResourceAttributes describes information for a non-resource access request
                  "%
                  | optional,
                resourceAttributes
                  | definitions.contract."io.k8s.api.authorization.v1.ResourceAttributes"
                  | doc m%"
                  ResourceAuthorizationAttributes describes information for a resource access request
                  "%
                  | optional,
                uid
                  | String
                  | doc m%"
                  UID information about the requesting user.
                  "%
                  | optional,
                user
                  | String
                  | doc m%"
                  User is the user you're testing for. If you specify "User" but not "Groups", then is it interpreted as "What if User were not a member of any groups
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
            | doc m%"
            SubjectAccessReviewStatus
            "%
            = {
                allowed
                  | Bool
                  | doc m%"
                  Allowed is required. True if the action would be allowed, false otherwise.
                  "%,
                denied
                  | Bool
                  | doc m%"
                  Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
                  "%
                  | optional,
                evaluationError
                  | String
                  | doc m%"
                  EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  Reason is optional.  It indicates why a request was allowed or denied.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authorization.v1.SubjectRulesReviewStatus"
            | doc m%"
            SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
            "%
            = {
                evaluationError
                  | String
                  | doc m%"
                  EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
                  "%
                  | optional,
                incomplete
                  | Bool
                  | doc m%"
                  Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
                  "%,
                nonResourceRules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.authorization.v1.NonResourceRule"
                  ])
                  | doc m%"
                  NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
                  "%,
                resourceRules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.authorization.v1.ResourceRule"
                  ])
                  | doc m%"
                  ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
                  "%,
                ..
              },
          "io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview"
            | doc m%"
            LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview",
          "io.k8s.api.authorization.v1beta1.NonResourceAttributes"
            | doc m%"
            NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
            "%
            = {
                path
                  | String
                  | doc m%"
                  Path is the URL path of the request
                  "%
                  | optional,
                verb
                  | String
                  | doc m%"
                  Verb is the standard HTTP verb
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authorization.v1beta1.NonResourceRule"
            | doc m%"
            NonResourceRule holds information that describes a rule for the non-resource
            "%
            = {
                nonResourceURLs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path.  "*" means all.
                  "%
                  | optional,
                verbs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Verb is a list of kubernetes non-resource API verbs, like: get, post, put, delete, patch, head, options.  "*" means all.
                  "%,
                ..
              },
          "io.k8s.api.authorization.v1beta1.ResourceAttributes"
            | doc m%"
            ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
            "%
            = {
                group
                  | String
                  | doc m%"
                  Group is the API Group of the Resource.  "*" means all.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name is the name of the resource being requested for a "get" or deleted for a "delete". "" (empty) means all.
                  "%
                  | optional,
                namespace
                  | String
                  | doc m%"
                  Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces "" (empty) is defaulted for LocalSubjectAccessReviews "" (empty) is empty for cluster-scoped resources "" (empty) means "all" for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
                  "%
                  | optional,
                resource
                  | String
                  | doc m%"
                  Resource is one of the existing resource types.  "*" means all.
                  "%
                  | optional,
                subresource
                  | String
                  | doc m%"
                  Subresource is one of the existing resource types.  "" means none.
                  "%
                  | optional,
                verb
                  | String
                  | doc m%"
                  Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  "*" means all.
                  "%
                  | optional,
                version
                  | String
                  | doc m%"
                  Version is the API Version of the Resource.  "*" means all.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authorization.v1beta1.ResourceRule"
            | doc m%"
            ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
            "%
            = {
                apiGroups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.  "*" means all.
                  "%
                  | optional,
                resourceNames
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.  "*" means all.
                  "%
                  | optional,
                resources
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Resources is a list of resources this rule applies to.  "*" means all in the specified apiGroups.
                   "*/foo" represents the subresource 'foo' for all resources in the specified apiGroups.
                  "%
                  | optional,
                verbs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Verb is a list of kubernetes resource API verbs, like: get, list, watch, create, update, delete, proxy.  "*" means all.
                  "%,
                ..
              },
          "io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview"
            | doc m%"
            SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview",
          "io.k8s.api.authorization.v1beta1.SelfSubjectAccessReviewSpec"
            | doc m%"
            SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
            "%
            = {
                nonResourceAttributes
                  | definitions.contract."io.k8s.api.authorization.v1beta1.NonResourceAttributes"
                  | doc m%"
                  NonResourceAttributes describes information for a non-resource access request
                  "%
                  | optional,
                resourceAttributes
                  | definitions.contract."io.k8s.api.authorization.v1beta1.ResourceAttributes"
                  | doc m%"
                  ResourceAuthorizationAttributes describes information for a resource access request
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview"
            | doc m%"
            SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview",
          "io.k8s.api.authorization.v1beta1.SelfSubjectRulesReviewSpec" = {
                namespace
                  | String
                  | doc m%"
                  Namespace to evaluate rules for. Required.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authorization.v1beta1.SubjectAccessReview"
            | doc m%"
            SubjectAccessReview checks whether or not a user or group can perform an action.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.authorization.v1beta1.SubjectAccessReview",
          "io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec"
            | doc m%"
            SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
            "%
            = {
                extra
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.allOf
                    [
                      predicates.isType '"Array",
                      predicates.arrays.arrayOf (predicates.isType '"String")
                    ])
                  ])
                  | doc m%"
                  Extra corresponds to the user.Info.GetExtra() method from the authenticator.  Since that is input to the authorizer it needs a reflection here.
                  "%
                  | optional,
                group
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Groups is the groups you're testing for.
                  "%
                  | optional,
                nonResourceAttributes
                  | definitions.contract."io.k8s.api.authorization.v1beta1.NonResourceAttributes"
                  | doc m%"
                  NonResourceAttributes describes information for a non-resource access request
                  "%
                  | optional,
                resourceAttributes
                  | definitions.contract."io.k8s.api.authorization.v1beta1.ResourceAttributes"
                  | doc m%"
                  ResourceAuthorizationAttributes describes information for a resource access request
                  "%
                  | optional,
                uid
                  | String
                  | doc m%"
                  UID information about the requesting user.
                  "%
                  | optional,
                user
                  | String
                  | doc m%"
                  User is the user you're testing for. If you specify "User" but not "Group", then is it interpreted as "What if User were not a member of any groups
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus"
            | doc m%"
            SubjectAccessReviewStatus
            "%
            = {
                allowed
                  | Bool
                  | doc m%"
                  Allowed is required. True if the action would be allowed, false otherwise.
                  "%,
                denied
                  | Bool
                  | doc m%"
                  Denied is optional. True if the action would be denied, otherwise false. If both allowed is false and denied is false, then the authorizer has no opinion on whether to authorize the action. Denied may not be true if Allowed is true.
                  "%
                  | optional,
                evaluationError
                  | String
                  | doc m%"
                  EvaluationError is an indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  Reason is optional.  It indicates why a request was allowed or denied.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.authorization.v1beta1.SubjectRulesReviewStatus"
            | doc m%"
            SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
            "%
            = {
                evaluationError
                  | String
                  | doc m%"
                  EvaluationError can appear in combination with Rules. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that ResourceRules and/or NonResourceRules may be incomplete.
                  "%
                  | optional,
                incomplete
                  | Bool
                  | doc m%"
                  Incomplete is true when the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.
                  "%,
                nonResourceRules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.authorization.v1beta1.NonResourceRule"
                  ])
                  | doc m%"
                  NonResourceRules is the list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
                  "%,
                resourceRules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.authorization.v1beta1.ResourceRule"
                  ])
                  | doc m%"
                  ResourceRules is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v1.CrossVersionObjectReference"
            | doc m%"
            CrossVersionObjectReference contains enough information to let you identify the referred resource.
            "%
            = {
                apiVersion
                  | String
                  | doc m%"
                  API version of the referent
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                  "%,
                name
                  | String
                  | doc m%"
                  Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
            | doc m%"
            configuration of a horizontal pod autoscaler.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler",
          "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList"
            | doc m%"
            list of horizontal pod autoscaler objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList",
          "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec"
            | doc m%"
            specification of a horizontal pod autoscaler.
            "%
            = {
                maxReplicas
                  | std.number.Integer
                  | doc m%"
                  upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than MinReplicas.
                  "%,
                minReplicas
                  | std.number.Integer
                  | doc m%"
                  minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
                  "%
                  | optional,
                scaleTargetRef
                  | definitions.contract."io.k8s.api.autoscaling.v1.CrossVersionObjectReference"
                  | doc m%"
                  reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource.
                  "%,
                targetCPUUtilizationPercentage
                  | std.number.Integer
                  | doc m%"
                  target average CPU utilization (represented as a percentage of requested CPU) over all the pods; if not specified the default autoscaling policy will be used.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus"
            | doc m%"
            current status of a horizontal pod autoscaler
            "%
            = {
                currentCPUUtilizationPercentage
                  | std.number.Integer
                  | doc m%"
                  current average CPU utilization over all pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.
                  "%
                  | optional,
                currentReplicas
                  | std.number.Integer
                  | doc m%"
                  current number of replicas of pods managed by this autoscaler.
                  "%,
                desiredReplicas
                  | std.number.Integer
                  | doc m%"
                  desired number of replicas of pods managed by this autoscaler.
                  "%,
                lastScaleTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  last time the HorizontalPodAutoscaler scaled the number of pods; used by the autoscaler to control how often the number of pods is changed.
                  "%
                  | optional,
                observedGeneration
                  | std.number.Integer
                  | doc m%"
                  most recent generation observed by this autoscaler.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v1.Scale"
            | doc m%"
            Scale represents a scaling request for a resource.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.autoscaling.v1.Scale",
          "io.k8s.api.autoscaling.v1.ScaleSpec"
            | doc m%"
            ScaleSpec describes the attributes of a scale subresource.
            "%
            = {
                replicas
                  | std.number.Integer
                  | doc m%"
                  desired number of instances for the scaled object.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v1.ScaleStatus"
            | doc m%"
            ScaleStatus represents the current status of a scale subresource.
            "%
            = {
                replicas
                  | std.number.Integer
                  | doc m%"
                  actual number of observed instances of the scaled object.
                  "%,
                selector
                  | String
                  | doc m%"
                  label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax. More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricSource"
            | doc m%"
            ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
            "%
            = {
                container
                  | String
                  | doc m%"
                  container is the name of the container in the pods of the scaling target
                  "%,
                name
                  | String
                  | doc m%"
                  name is the name of the resource in question.
                  "%,
                targetAverageUtilization
                  | std.number.Integer
                  | doc m%"
                  targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
                  "%
                  | optional,
                targetAverageValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricStatus"
            | doc m%"
            ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
            "%
            = {
                container
                  | String
                  | doc m%"
                  container is the name of the container in the pods of the scaling target
                  "%,
                currentAverageUtilization
                  | std.number.Integer
                  | doc m%"
                  currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.
                  "%
                  | optional,
                currentAverageValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type. It will always be set, regardless of the corresponding metric specification.
                  "%,
                name
                  | String
                  | doc m%"
                  name is the name of the resource in question.
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference"
            | doc m%"
            CrossVersionObjectReference contains enough information to let you identify the referred resource.
            "%
            = {
                apiVersion
                  | String
                  | doc m%"
                  API version of the referent
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                  "%,
                name
                  | String
                  | doc m%"
                  Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.ExternalMetricSource"
            | doc m%"
            ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one "target" type should be set.
            "%
            = {
                metricName
                  | String
                  | doc m%"
                  metricName is the name of the metric in question.
                  "%,
                metricSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  metricSelector is used to identify a specific time series within a given metric.
                  "%
                  | optional,
                targetAverageValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  targetAverageValue is the target per-pod value of global metric (as a quantity). Mutually exclusive with TargetValue.
                  "%
                  | optional,
                targetValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  targetValue is the target value of the metric (as a quantity). Mutually exclusive with TargetAverageValue.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.ExternalMetricStatus"
            | doc m%"
            ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
            "%
            = {
                currentAverageValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  currentAverageValue is the current value of metric averaged over autoscaled pods.
                  "%
                  | optional,
                currentValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  currentValue is the current value of the metric (as a quantity)
                  "%,
                metricName
                  | String
                  | doc m%"
                  metricName is the name of a metric used for autoscaling in metric system.
                  "%,
                metricSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  metricSelector is used to identify a specific time series within a given metric.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
            | doc m%"
            HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler",
          "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerCondition"
            | doc m%"
            HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  lastTransitionTime is the last time the condition transitioned from one status to another
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  message is a human-readable explanation containing details about the transition
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  reason is the reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  status is the status of the condition (True, False, Unknown)
                  "%,
                type
                  | String
                  | doc m%"
                  type describes the current condition
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList"
            | doc m%"
            HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList",
          "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec"
            | doc m%"
            HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
            "%
            = {
                maxReplicas
                  | std.number.Integer
                  | doc m%"
                  maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
                  "%,
                metrics
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.MetricSpec"
                  ])
                  | doc m%"
                  metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.
                  "%
                  | optional,
                minReplicas
                  | std.number.Integer
                  | doc m%"
                  minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
                  "%
                  | optional,
                scaleTargetRef
                  | definitions.contract."io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference"
                  | doc m%"
                  scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus"
            | doc m%"
            HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerCondition"
                  ])
                  | doc m%"
                  conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
                  "%,
                currentMetrics
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.MetricStatus"
                  ])
                  | doc m%"
                  currentMetrics is the last read state of the metrics used by this autoscaler.
                  "%
                  | optional,
                currentReplicas
                  | std.number.Integer
                  | doc m%"
                  currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
                  "%,
                desiredReplicas
                  | std.number.Integer
                  | doc m%"
                  desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
                  "%,
                lastScaleTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.
                  "%
                  | optional,
                observedGeneration
                  | std.number.Integer
                  | doc m%"
                  observedGeneration is the most recent generation observed by this autoscaler.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.MetricSpec"
            | doc m%"
            MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
            "%
            = {
                containerResource
                  | definitions.contract."io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricSource"
                  | doc m%"
                  container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.
                  "%
                  | optional,
                external
                  | definitions.contract."io.k8s.api.autoscaling.v2beta1.ExternalMetricSource"
                  | doc m%"
                  external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
                  "%
                  | optional,
                object
                  | definitions.contract."io.k8s.api.autoscaling.v2beta1.ObjectMetricSource"
                  | doc m%"
                  object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
                  "%
                  | optional,
                pods
                  | definitions.contract."io.k8s.api.autoscaling.v2beta1.PodsMetricSource"
                  | doc m%"
                  pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
                  "%
                  | optional,
                resource
                  | definitions.contract."io.k8s.api.autoscaling.v2beta1.ResourceMetricSource"
                  | doc m%"
                  resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  type is the type of metric source.  It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.MetricStatus"
            | doc m%"
            MetricStatus describes the last-read state of a single metric.
            "%
            = {
                containerResource
                  | definitions.contract."io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricStatus"
                  | doc m%"
                  container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
                  "%
                  | optional,
                external
                  | definitions.contract."io.k8s.api.autoscaling.v2beta1.ExternalMetricStatus"
                  | doc m%"
                  external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
                  "%
                  | optional,
                object
                  | definitions.contract."io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus"
                  | doc m%"
                  object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
                  "%
                  | optional,
                pods
                  | definitions.contract."io.k8s.api.autoscaling.v2beta1.PodsMetricStatus"
                  | doc m%"
                  pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
                  "%
                  | optional,
                resource
                  | definitions.contract."io.k8s.api.autoscaling.v2beta1.ResourceMetricStatus"
                  | doc m%"
                  resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  type is the type of metric source.  It will be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each corresponds to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.ObjectMetricSource"
            | doc m%"
            ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
            "%
            = {
                averageValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
                  "%
                  | optional,
                metricName
                  | String
                  | doc m%"
                  metricName is the name of the metric in question.
                  "%,
                selector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
                  "%
                  | optional,
                target
                  | definitions.contract."io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference"
                  | doc m%"
                  target is the described Kubernetes object.
                  "%,
                targetValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  targetValue is the target value of the metric (as a quantity).
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus"
            | doc m%"
            ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
            "%
            = {
                averageValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  averageValue is the current value of the average of the metric across all relevant pods (as a quantity)
                  "%
                  | optional,
                currentValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  currentValue is the current value of the metric (as a quantity).
                  "%,
                metricName
                  | String
                  | doc m%"
                  metricName is the name of the metric in question.
                  "%,
                selector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the ObjectMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
                  "%
                  | optional,
                target
                  | definitions.contract."io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference"
                  | doc m%"
                  target is the described Kubernetes object.
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.PodsMetricSource"
            | doc m%"
            PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
            "%
            = {
                metricName
                  | String
                  | doc m%"
                  metricName is the name of the metric in question
                  "%,
                selector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping When unset, just the metricName will be used to gather metrics.
                  "%
                  | optional,
                targetAverageValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  targetAverageValue is the target value of the average of the metric across all relevant pods (as a quantity)
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.PodsMetricStatus"
            | doc m%"
            PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
            "%
            = {
                currentAverageValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  currentAverageValue is the current value of the average of the metric across all relevant pods (as a quantity)
                  "%,
                metricName
                  | String
                  | doc m%"
                  metricName is the name of the metric in question
                  "%,
                selector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  selector is the string-encoded form of a standard kubernetes label selector for the given metric When set in the PodsMetricSource, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.ResourceMetricSource"
            | doc m%"
            ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
            "%
            = {
                name
                  | String
                  | doc m%"
                  name is the name of the resource in question.
                  "%,
                targetAverageUtilization
                  | std.number.Integer
                  | doc m%"
                  targetAverageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
                  "%
                  | optional,
                targetAverageValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  targetAverageValue is the target value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v2beta1.ResourceMetricStatus"
            | doc m%"
            ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
            "%
            = {
                currentAverageUtilization
                  | std.number.Integer
                  | doc m%"
                  currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if `targetAverageValue` was set in the corresponding metric specification.
                  "%
                  | optional,
                currentAverageValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the "pods" metric source type. It will always be set, regardless of the corresponding metric specification.
                  "%,
                name
                  | String
                  | doc m%"
                  name is the name of the resource in question.
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricSource"
            | doc m%"
            ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
            "%
            = {
                container
                  | String
                  | doc m%"
                  container is the name of the container in the pods of the scaling target
                  "%,
                name
                  | String
                  | doc m%"
                  name is the name of the resource in question.
                  "%,
                target
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricTarget"
                  | doc m%"
                  target specifies the target value for the given metric
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricStatus"
            | doc m%"
            ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
            "%
            = {
                container
                  | String
                  | doc m%"
                  Container is the name of the container in the pods of the scaling target
                  "%,
                current
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricValueStatus"
                  | doc m%"
                  current contains the current value for the given metric
                  "%,
                name
                  | String
                  | doc m%"
                  Name is the name of the resource in question.
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference"
            | doc m%"
            CrossVersionObjectReference contains enough information to let you identify the referred resource.
            "%
            = {
                apiVersion
                  | String
                  | doc m%"
                  API version of the referent
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
                  "%,
                name
                  | String
                  | doc m%"
                  Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.ExternalMetricSource"
            | doc m%"
            ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
            "%
            = {
                metric
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
                  | doc m%"
                  metric identifies the target metric by name and selector
                  "%,
                target
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricTarget"
                  | doc m%"
                  target specifies the target value for the given metric
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.ExternalMetricStatus"
            | doc m%"
            ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
            "%
            = {
                current
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricValueStatus"
                  | doc m%"
                  current contains the current value for the given metric
                  "%,
                metric
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
                  | doc m%"
                  metric identifies the target metric by name and selector
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy"
            | doc m%"
            HPAScalingPolicy is a single policy which must hold true for a specified past interval.
            "%
            = {
                periodSeconds
                  | std.number.Integer
                  | doc m%"
                  PeriodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
                  "%,
                type
                  | String
                  | doc m%"
                  Type is used to specify the scaling policy.
                  "%,
                value
                  | std.number.Integer
                  | doc m%"
                  Value contains the amount of change which is permitted by the policy. It must be greater than zero
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.HPAScalingRules"
            | doc m%"
            HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
            "%
            = {
                policies
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy"
                  ])
                  | doc m%"
                  policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
                  "%
                  | optional,
                selectPolicy
                  | String
                  | doc m%"
                  selectPolicy is used to specify which policy should be used. If not set, the default value MaxPolicySelect is used.
                  "%
                  | optional,
                stabilizationWindowSeconds
                  | std.number.Integer
                  | doc m%"
                  StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
            | doc m%"
            HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler",
          "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior"
            | doc m%"
            HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
            "%
            = {
                scaleDown
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.HPAScalingRules"
                  | doc m%"
                  scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used).
                  "%
                  | optional,
                scaleUp
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.HPAScalingRules"
                  | doc m%"
                  scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of:
                    * increase no more than 4 pods per 60 seconds
                    * double the number of pods per 60 seconds
                  No stabilization is used.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition"
            | doc m%"
            HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  lastTransitionTime is the last time the condition transitioned from one status to another
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  message is a human-readable explanation containing details about the transition
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  reason is the reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  status is the status of the condition (True, False, Unknown)
                  "%,
                type
                  | String
                  | doc m%"
                  type describes the current condition
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList"
            | doc m%"
            HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList",
          "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec"
            | doc m%"
            HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
            "%
            = {
                behavior
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior"
                  | doc m%"
                  behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used.
                  "%
                  | optional,
                maxReplicas
                  | std.number.Integer
                  | doc m%"
                  maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
                  "%,
                metrics
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricSpec"
                  ])
                  | doc m%"
                  metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
                  "%
                  | optional,
                minReplicas
                  | std.number.Integer
                  | doc m%"
                  minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
                  "%
                  | optional,
                scaleTargetRef
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference"
                  | doc m%"
                  scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus"
            | doc m%"
            HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition"
                  ])
                  | doc m%"
                  conditions is the set of conditions required for this autoscaler to scale its target, and indicates whether or not those conditions are met.
                  "%,
                currentMetrics
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricStatus"
                  ])
                  | doc m%"
                  currentMetrics is the last read state of the metrics used by this autoscaler.
                  "%
                  | optional,
                currentReplicas
                  | std.number.Integer
                  | doc m%"
                  currentReplicas is current number of replicas of pods managed by this autoscaler, as last seen by the autoscaler.
                  "%,
                desiredReplicas
                  | std.number.Integer
                  | doc m%"
                  desiredReplicas is the desired number of replicas of pods managed by this autoscaler, as last calculated by the autoscaler.
                  "%,
                lastScaleTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  lastScaleTime is the last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed.
                  "%
                  | optional,
                observedGeneration
                  | std.number.Integer
                  | doc m%"
                  observedGeneration is the most recent generation observed by this autoscaler.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
            | doc m%"
            MetricIdentifier defines the name and optionally selector for a metric
            "%
            = {
                name
                  | String
                  | doc m%"
                  name is the name of the given metric
                  "%,
                selector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.MetricSpec"
            | doc m%"
            MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
            "%
            = {
                containerResource
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricSource"
                  | doc m%"
                  container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.
                  "%
                  | optional,
                external
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.ExternalMetricSource"
                  | doc m%"
                  external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
                  "%
                  | optional,
                object
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.ObjectMetricSource"
                  | doc m%"
                  object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
                  "%
                  | optional,
                pods
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.PodsMetricSource"
                  | doc m%"
                  pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
                  "%
                  | optional,
                resource
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.ResourceMetricSource"
                  | doc m%"
                  resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  type is the type of metric source.  It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.MetricStatus"
            | doc m%"
            MetricStatus describes the last-read state of a single metric.
            "%
            = {
                containerResource
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricStatus"
                  | doc m%"
                  container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
                  "%
                  | optional,
                external
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.ExternalMetricStatus"
                  | doc m%"
                  external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
                  "%
                  | optional,
                object
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.ObjectMetricStatus"
                  | doc m%"
                  object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
                  "%
                  | optional,
                pods
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.PodsMetricStatus"
                  | doc m%"
                  pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
                  "%
                  | optional,
                resource
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.ResourceMetricStatus"
                  | doc m%"
                  resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  type is the type of metric source.  It will be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each corresponds to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.MetricTarget"
            | doc m%"
            MetricTarget defines the target value, average value, or average utilization of a specific metric
            "%
            = {
                averageUtilization
                  | std.number.Integer
                  | doc m%"
                  averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
                  "%
                  | optional,
                averageValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  type represents whether the metric type is Utilization, Value, or AverageValue
                  "%,
                value
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  value is the target value of the metric (as a quantity).
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.MetricValueStatus"
            | doc m%"
            MetricValueStatus holds the current value for a metric
            "%
            = {
                averageUtilization
                  | std.number.Integer
                  | doc m%"
                  currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.
                  "%
                  | optional,
                averageValue
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  averageValue is the current value of the average of the metric across all relevant pods (as a quantity)
                  "%
                  | optional,
                value
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  value is the current value of the metric (as a quantity).
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.ObjectMetricSource"
            | doc m%"
            ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
            "%
            = {
                describedObject
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference",
                metric
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
                  | doc m%"
                  metric identifies the target metric by name and selector
                  "%,
                target
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricTarget"
                  | doc m%"
                  target specifies the target value for the given metric
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.ObjectMetricStatus"
            | doc m%"
            ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
            "%
            = {
                current
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricValueStatus"
                  | doc m%"
                  current contains the current value for the given metric
                  "%,
                describedObject
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference",
                metric
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
                  | doc m%"
                  metric identifies the target metric by name and selector
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.PodsMetricSource"
            | doc m%"
            PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
            "%
            = {
                metric
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
                  | doc m%"
                  metric identifies the target metric by name and selector
                  "%,
                target
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricTarget"
                  | doc m%"
                  target specifies the target value for the given metric
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.PodsMetricStatus"
            | doc m%"
            PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
            "%
            = {
                current
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricValueStatus"
                  | doc m%"
                  current contains the current value for the given metric
                  "%,
                metric
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
                  | doc m%"
                  metric identifies the target metric by name and selector
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.ResourceMetricSource"
            | doc m%"
            ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
            "%
            = {
                name
                  | String
                  | doc m%"
                  name is the name of the resource in question.
                  "%,
                target
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricTarget"
                  | doc m%"
                  target specifies the target value for the given metric
                  "%,
                ..
              },
          "io.k8s.api.autoscaling.v2beta2.ResourceMetricStatus"
            | doc m%"
            ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
            "%
            = {
                current
                  | definitions.contract."io.k8s.api.autoscaling.v2beta2.MetricValueStatus"
                  | doc m%"
                  current contains the current value for the given metric
                  "%,
                name
                  | String
                  | doc m%"
                  Name is the name of the resource in question.
                  "%,
                ..
              },
          "io.k8s.api.batch.v1.Job"
            | doc m%"
            Job represents the configuration of a single job.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.batch.v1.Job",
          "io.k8s.api.batch.v1.JobCondition"
            | doc m%"
            JobCondition describes current state of a job.
            "%
            = {
                lastProbeTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time the condition was checked.
                  "%
                  | optional,
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time the condition transit from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  Human readable message indicating details about last transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  (brief) reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  Status of the condition, one of True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  Type of job condition, Complete or Failed.
                  "%,
                ..
              },
          "io.k8s.api.batch.v1.JobList"
            | doc m%"
            JobList is a collection of jobs.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.batch.v1.JobList",
          "io.k8s.api.batch.v1.JobSpec"
            | doc m%"
            JobSpec describes how the job execution will look like.
            "%
            = {
                activeDeadlineSeconds
                  | std.number.Integer
                  | doc m%"
                  Specifies the duration in seconds relative to the startTime that the job may be active before the system tries to terminate it; value must be positive integer
                  "%
                  | optional,
                backoffLimit
                  | std.number.Integer
                  | doc m%"
                  Specifies the number of retries before marking this job failed. Defaults to 6
                  "%
                  | optional,
                completions
                  | std.number.Integer
                  | doc m%"
                  Specifies the desired number of successfully finished pods the job should be run with.  Setting to nil means that the success of any pod signals the success of all pods, and allows parallelism to have any positive value.  Setting to 1 means that parallelism is limited to 1 and the success of that pod signals the success of the job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
                  "%
                  | optional,
                manualSelector
                  | Bool
                  | doc m%"
                  manualSelector controls generation of pod labels and pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When false or unset, the system pick labels unique to this job and appends those labels to the pod template.  When true, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other jobs to not function correctly.  However, You may see `manualSelector=true` in jobs that were created with the old `extensions/v1beta1` API. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#specifying-your-own-pod-selector
                  "%
                  | optional,
                parallelism
                  | std.number.Integer
                  | doc m%"
                  Specifies the maximum desired number of pods the job should run at any given time. The actual number of pods running in steady state will be less than this number when ((.spec.completions - .status.successful) < .spec.parallelism), i.e. when the work left to do is less than max parallelism. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
                  "%
                  | optional,
                selector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  A label query over pods that should match the pod count. Normally, the system sets this field for you. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
                  "%
                  | optional,
                template
                  | definitions.contract."io.k8s.api.core.v1.PodTemplateSpec"
                  | doc m%"
                  Describes the pod that will be created when executing a job. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
                  "%,
                ttlSecondsAfterFinished
                  | std.number.Integer
                  | doc m%"
                  ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.batch.v1.JobStatus"
            | doc m%"
            JobStatus represents the current state of a Job.
            "%
            = {
                active
                  | std.number.Integer
                  | doc m%"
                  The number of actively running pods.
                  "%
                  | optional,
                completionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Represents time when the job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the job finishes successfully.
                  "%
                  | optional,
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.batch.v1.JobCondition"
                  ])
                  | doc m%"
                  The latest available observations of an object's current state. When a job fails, one of the conditions will have type == "Failed". More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
                  "%
                  | optional,
                failed
                  | std.number.Integer
                  | doc m%"
                  The number of pods which reached phase Failed.
                  "%
                  | optional,
                startTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Represents time when the job was acknowledged by the job controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.
                  "%
                  | optional,
                succeeded
                  | std.number.Integer
                  | doc m%"
                  The number of pods which reached phase Succeeded.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.batch.v1beta1.CronJob"
            | doc m%"
            CronJob represents the configuration of a single cron job.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.batch.v1beta1.CronJob",
          "io.k8s.api.batch.v1beta1.CronJobList"
            | doc m%"
            CronJobList is a collection of cron jobs.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.batch.v1beta1.CronJobList",
          "io.k8s.api.batch.v1beta1.CronJobSpec"
            | doc m%"
            CronJobSpec describes how the job execution will look like and when it will actually run.
            "%
            = {
                concurrencyPolicy
                  | String
                  | doc m%"
                  Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
                  "%
                  | optional,
                failedJobsHistoryLimit
                  | std.number.Integer
                  | doc m%"
                  The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
                  "%
                  | optional,
                jobTemplate
                  | definitions.contract."io.k8s.api.batch.v1beta1.JobTemplateSpec"
                  | doc m%"
                  Specifies the job that will be created when executing a CronJob.
                  "%,
                schedule
                  | String
                  | doc m%"
                  The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
                  "%,
                startingDeadlineSeconds
                  | std.number.Integer
                  | doc m%"
                  Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
                  "%
                  | optional,
                successfulJobsHistoryLimit
                  | std.number.Integer
                  | doc m%"
                  The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified. Defaults to 3.
                  "%
                  | optional,
                suspend
                  | Bool
                  | doc m%"
                  This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.batch.v1beta1.CronJobStatus"
            | doc m%"
            CronJobStatus represents the current state of a cron job.
            "%
            = {
                active
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.ObjectReference"
                  ])
                  | doc m%"
                  A list of pointers to currently running jobs.
                  "%
                  | optional,
                lastScheduleTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Information when was the last time the job was successfully scheduled.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.batch.v1beta1.JobTemplateSpec"
            | doc m%"
            JobTemplateSpec describes the data a Job should have when created from a template
            "%
            = {
                metadata
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                  | doc m%"
                  Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                  "%
                  | optional,
                spec
                  | definitions.contract."io.k8s.api.batch.v1.JobSpec"
                  | doc m%"
                  Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.batch.v2alpha1.CronJob"
            | doc m%"
            CronJob represents the configuration of a single cron job.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.batch.v2alpha1.CronJob",
          "io.k8s.api.batch.v2alpha1.CronJobList"
            | doc m%"
            CronJobList is a collection of cron jobs.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.batch.v2alpha1.CronJobList",
          "io.k8s.api.batch.v2alpha1.CronJobSpec"
            | doc m%"
            CronJobSpec describes how the job execution will look like and when it will actually run.
            "%
            = {
                concurrencyPolicy
                  | String
                  | doc m%"
                  Specifies how to treat concurrent executions of a Job. Valid values are: - "Allow" (default): allows CronJobs to run concurrently; - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - "Replace": cancels currently running job and replaces it with a new one
                  "%
                  | optional,
                failedJobsHistoryLimit
                  | std.number.Integer
                  | doc m%"
                  The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
                  "%
                  | optional,
                jobTemplate
                  | definitions.contract."io.k8s.api.batch.v2alpha1.JobTemplateSpec"
                  | doc m%"
                  Specifies the job that will be created when executing a CronJob.
                  "%,
                schedule
                  | String
                  | doc m%"
                  The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
                  "%,
                startingDeadlineSeconds
                  | std.number.Integer
                  | doc m%"
                  Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
                  "%
                  | optional,
                successfulJobsHistoryLimit
                  | std.number.Integer
                  | doc m%"
                  The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
                  "%
                  | optional,
                suspend
                  | Bool
                  | doc m%"
                  This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.batch.v2alpha1.CronJobStatus"
            | doc m%"
            CronJobStatus represents the current state of a cron job.
            "%
            = {
                active
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.ObjectReference"
                  ])
                  | doc m%"
                  A list of pointers to currently running jobs.
                  "%
                  | optional,
                lastScheduleTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Information when was the last time the job was successfully scheduled.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.batch.v2alpha1.JobTemplateSpec"
            | doc m%"
            JobTemplateSpec describes the data a Job should have when created from a template
            "%
            = {
                metadata
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                  | doc m%"
                  Standard object's metadata of the jobs created from this template. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                  "%
                  | optional,
                spec
                  | definitions.contract."io.k8s.api.batch.v1.JobSpec"
                  | doc m%"
                  Specification of the desired behavior of the job. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.certificates.v1.CertificateSigningRequest"
            | doc m%"
            CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.
            
            Kubelets use this API to obtain:
             1. client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client-kubelet" signerName).
             2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the "kubernetes.io/kubelet-serving" signerName).
            
            This API can be used to request client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client" signerName), or to obtain certificates from custom non-Kubernetes signers.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.certificates.v1.CertificateSigningRequest",
          "io.k8s.api.certificates.v1.CertificateSigningRequestCondition"
            | doc m%"
            CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.
                  "%
                  | optional,
                lastUpdateTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  lastUpdateTime is the time of the last update to this condition
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  message contains a human readable message with details about the request state
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  reason indicates a brief reason for the request state
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown".
                  "%,
                type
                  | String
                  | doc m%"
                  type of the condition. Known conditions are "Approved", "Denied", and "Failed".
                  
                  An "Approved" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.
                  
                  A "Denied" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.
                  
                  A "Failed" condition is added via the /status subresource, indicating the signer failed to issue the certificate.
                  
                  Approved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.
                  
                  Only one condition of a given type is allowed.
                  "%,
                ..
              },
          "io.k8s.api.certificates.v1.CertificateSigningRequestList"
            | doc m%"
            CertificateSigningRequestList is a collection of CertificateSigningRequest objects
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.certificates.v1.CertificateSigningRequestList",
          "io.k8s.api.certificates.v1.CertificateSigningRequestSpec"
            | doc m%"
            CertificateSigningRequestSpec contains the certificate request.
            "%
            = {
                extra
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.allOf
                    [
                      predicates.isType '"Array",
                      predicates.arrays.arrayOf (predicates.isType '"String")
                    ])
                  ])
                  | doc m%"
                  extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
                  "%
                  | optional,
                groups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  groups contains group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
                  "%
                  | optional,
                request
                  | predicates.contract_from_predicate
                  (predicates.isType '"String")
                  | doc m%"
                  request contains an x509 certificate signing request encoded in a "CERTIFICATE REQUEST" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.
                  "%,
                signerName
                  | String
                  | doc m%"
                  signerName indicates the requested signer, and is a qualified name.
                  
                  List/watch requests for CertificateSigningRequests can filter on this field using a "spec.signerName=NAME" fieldSelector.
                  
                  Well-known Kubernetes signers are:
                   1. "kubernetes.io/kube-apiserver-client": issues client certificates that can be used to authenticate to kube-apiserver.
                    Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the "csrsigning" controller in kube-controller-manager.
                   2. "kubernetes.io/kube-apiserver-client-kubelet": issues client certificates that kubelets use to authenticate to kube-apiserver.
                    Requests for this signer can be auto-approved by the "csrapproving" controller in kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
                   3. "kubernetes.io/kubelet-serving" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.
                    Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
                  
                  More details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers
                  
                  Custom signerNames can also be specified. The signer defines:
                   1. Trust distribution: how trust (CA bundles) are distributed.
                   2. Permitted subjects: and behavior when a disallowed subject is requested.
                   3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.
                   4. Required, permitted, or forbidden key usages / extended key usages.
                   5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.
                   6. Whether or not requests for CA certificates are allowed.
                  "%,
                uid
                  | String
                  | doc m%"
                  uid contains the uid of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
                  "%
                  | optional,
                usages
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  usages specifies a set of key usages requested in the issued certificate.
                  
                  Requests for TLS client certificates typically request: "digital signature", "key encipherment", "client auth".
                  
                  Requests for TLS serving certificates typically request: "key encipherment", "digital signature", "server auth".
                  
                  Valid values are:
                   "signing", "digital signature", "content commitment",
                   "key encipherment", "key agreement", "data encipherment",
                   "cert sign", "crl sign", "encipher only", "decipher only", "any",
                   "server auth", "client auth",
                   "code signing", "email protection", "s/mime",
                   "ipsec end system", "ipsec tunnel", "ipsec user",
                   "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"
                  "%
                  | optional,
                username
                  | String
                  | doc m%"
                  username contains the name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.certificates.v1.CertificateSigningRequestStatus"
            | doc m%"
            CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.
            "%
            = {
                certificate
                  | predicates.contract_from_predicate
                  (predicates.isType '"String")
                  | doc m%"
                  certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is set via the /status subresource. Once populated, this field is immutable.
                  
                  If the certificate signing request is denied, a condition of type "Denied" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type "Failed" is added and this field remains empty.
                  
                  Validation requirements:
                   1. certificate must contain one or more PEM blocks.
                   2. All PEM blocks must have the "CERTIFICATE" label, contain no headers, and the encoded data
                    must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.
                   3. Non-PEM content may appear before or after the "CERTIFICATE" PEM blocks and is unvalidated,
                    to allow for explanatory text as described in section 5.2 of RFC7468.
                  
                  If more than one PEM block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.
                  
                  The certificate is encoded in PEM format.
                  
                  When serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:
                  
                      base64(
                      -----BEGIN CERTIFICATE-----
                      ...
                      -----END CERTIFICATE-----
                      )
                  "%
                  | optional,
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.certificates.v1.CertificateSigningRequestCondition"
                  ])
                  | doc m%"
                  conditions applied to the request. Known conditions are "Approved", "Denied", and "Failed".
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
            | doc m%"
            Describes a certificate signing request
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.certificates.v1beta1.CertificateSigningRequest",
          "io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition" =
            {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  lastTransitionTime is the time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time.
                  "%
                  | optional,
                lastUpdateTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  timestamp for the last update to this condition
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  human readable message with details about the request state
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  brief reason for the request state
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  Status of the condition, one of True, False, Unknown. Approved, Denied, and Failed conditions may not be "False" or "Unknown". Defaults to "True". If unset, should be treated as "True".
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  type of the condition. Known conditions include "Approved", "Denied", and "Failed".
                  "%,
                ..
              },
          "io.k8s.api.certificates.v1beta1.CertificateSigningRequestList" =
            predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.certificates.v1beta1.CertificateSigningRequestList",
          "io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec"
            | doc m%"
            This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
            "%
            = {
                extra
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.allOf
                    [
                      predicates.isType '"Array",
                      predicates.arrays.arrayOf (predicates.isType '"String")
                    ])
                  ])
                  | doc m%"
                  Extra information about the requesting user. See user.Info interface for details.
                  "%
                  | optional,
                groups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Group information about the requesting user. See user.Info interface for details.
                  "%
                  | optional,
                request
                  | predicates.contract_from_predicate
                  (predicates.isType '"String")
                  | doc m%"
                  Base64-encoded PKCS#10 CSR data
                  "%,
                signerName
                  | String
                  | doc m%"
                  Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`. If empty, it will be defaulted:
                   1. If it's a kubelet client certificate, it is assigned
                      "kubernetes.io/kube-apiserver-client-kubelet".
                   2. If it's a kubelet serving certificate, it is assigned
                      "kubernetes.io/kubelet-serving".
                   3. Otherwise, it is assigned "kubernetes.io/legacy-unknown".
                  Distribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.
                  "%
                  | optional,
                uid
                  | String
                  | doc m%"
                  UID information about the requesting user. See user.Info interface for details.
                  "%
                  | optional,
                usages
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
                       https://tools.ietf.org/html/rfc5280#section-4.2.1.12
                  Valid values are:
                   "signing",
                   "digital signature",
                   "content commitment",
                   "key encipherment",
                   "key agreement",
                   "data encipherment",
                   "cert sign",
                   "crl sign",
                   "encipher only",
                   "decipher only",
                   "any",
                   "server auth",
                   "client auth",
                   "code signing",
                   "email protection",
                   "s/mime",
                   "ipsec end system",
                   "ipsec tunnel",
                   "ipsec user",
                   "timestamping",
                   "ocsp signing",
                   "microsoft sgc",
                   "netscape sgc"
                  "%
                  | optional,
                username
                  | String
                  | doc m%"
                  Information about the requesting user. See user.Info interface for details.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus" = {
                certificate
                  | predicates.contract_from_predicate
                  (predicates.isType '"String")
                  | doc m%"
                  If request was approved, the controller will place the issued certificate here.
                  "%
                  | optional,
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition"
                  ])
                  | doc m%"
                  Conditions applied to the request, such as approval or denial.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.coordination.v1.Lease"
            | doc m%"
            Lease defines a lease concept.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.coordination.v1.Lease",
          "io.k8s.api.coordination.v1.LeaseList"
            | doc m%"
            LeaseList is a list of Lease objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.coordination.v1.LeaseList",
          "io.k8s.api.coordination.v1.LeaseSpec"
            | doc m%"
            LeaseSpec is a specification of a Lease.
            "%
            = {
                acquireTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
                  | doc m%"
                  acquireTime is a time when the current lease was acquired.
                  "%
                  | optional,
                holderIdentity
                  | String
                  | doc m%"
                  holderIdentity contains the identity of the holder of a current lease.
                  "%
                  | optional,
                leaseDurationSeconds
                  | std.number.Integer
                  | doc m%"
                  leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
                  "%
                  | optional,
                leaseTransitions
                  | std.number.Integer
                  | doc m%"
                  leaseTransitions is the number of transitions of a lease between holders.
                  "%
                  | optional,
                renewTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
                  | doc m%"
                  renewTime is a time when the current holder of a lease has last updated the lease.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.coordination.v1beta1.Lease"
            | doc m%"
            Lease defines a lease concept.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.coordination.v1beta1.Lease",
          "io.k8s.api.coordination.v1beta1.LeaseList"
            | doc m%"
            LeaseList is a list of Lease objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.coordination.v1beta1.LeaseList",
          "io.k8s.api.coordination.v1beta1.LeaseSpec"
            | doc m%"
            LeaseSpec is a specification of a Lease.
            "%
            = {
                acquireTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
                  | doc m%"
                  acquireTime is a time when the current lease was acquired.
                  "%
                  | optional,
                holderIdentity
                  | String
                  | doc m%"
                  holderIdentity contains the identity of the holder of a current lease.
                  "%
                  | optional,
                leaseDurationSeconds
                  | std.number.Integer
                  | doc m%"
                  leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
                  "%
                  | optional,
                leaseTransitions
                  | std.number.Integer
                  | doc m%"
                  leaseTransitions is the number of transitions of a lease between holders.
                  "%
                  | optional,
                renewTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
                  | doc m%"
                  renewTime is a time when the current holder of a lease has last updated the lease.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
            | doc m%"
            Represents a Persistent Disk resource in AWS.
            
            An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                  "%
                  | optional,
                partition
                  | std.number.Integer
                  | doc m%"
                  The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                  "%
                  | optional,
                volumeID
                  | String
                  | doc m%"
                  Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                  "%,
                ..
              },
          "io.k8s.api.core.v1.Affinity"
            | doc m%"
            Affinity is a group of affinity scheduling rules.
            "%
            = {
                nodeAffinity
                  | definitions.contract."io.k8s.api.core.v1.NodeAffinity"
                  | doc m%"
                  Describes node affinity scheduling rules for the pod.
                  "%
                  | optional,
                podAffinity
                  | definitions.contract."io.k8s.api.core.v1.PodAffinity"
                  | doc m%"
                  Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                  "%
                  | optional,
                podAntiAffinity
                  | definitions.contract."io.k8s.api.core.v1.PodAntiAffinity"
                  | doc m%"
                  Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.AttachedVolume"
            | doc m%"
            AttachedVolume describes a volume attached to a node
            "%
            = {
                devicePath
                  | String
                  | doc m%"
                  DevicePath represents the device path where the volume should be available
                  "%,
                name
                  | String
                  | doc m%"
                  Name of the attached volume
                  "%,
                ..
              },
          "io.k8s.api.core.v1.AzureDiskVolumeSource"
            | doc m%"
            AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
            "%
            = {
                cachingMode
                  | String
                  | doc m%"
                  Host Caching mode: None, Read Only, Read Write.
                  "%
                  | optional,
                diskName
                  | String
                  | doc m%"
                  The Name of the data disk in the blob storage
                  "%,
                diskURI
                  | String
                  | doc m%"
                  The URI the data disk in the blob storage
                  "%,
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.AzureFilePersistentVolumeSource"
            | doc m%"
            AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
            "%
            = {
                readOnly
                  | Bool
                  | doc m%"
                  Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  "%
                  | optional,
                secretName
                  | String
                  | doc m%"
                  the name of secret that contains Azure Storage Account Name and Key
                  "%,
                secretNamespace
                  | String
                  | doc m%"
                  the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
                  "%
                  | optional,
                shareName
                  | String
                  | doc m%"
                  Share Name
                  "%,
                ..
              },
          "io.k8s.api.core.v1.AzureFileVolumeSource"
            | doc m%"
            AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
            "%
            = {
                readOnly
                  | Bool
                  | doc m%"
                  Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  "%
                  | optional,
                secretName
                  | String
                  | doc m%"
                  the name of secret that contains Azure Storage Account Name and Key
                  "%,
                shareName
                  | String
                  | doc m%"
                  Share Name
                  "%,
                ..
              },
          "io.k8s.api.core.v1.Binding"
            | doc m%"
            Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.Binding",
          "io.k8s.api.core.v1.CSIPersistentVolumeSource"
            | doc m%"
            Represents storage that is managed by an external CSI volume driver (Beta feature)
            "%
            = {
                controllerExpandSecretRef
                  | definitions.contract."io.k8s.api.core.v1.SecretReference"
                  | doc m%"
                  ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
                  "%
                  | optional,
                controllerPublishSecretRef
                  | definitions.contract."io.k8s.api.core.v1.SecretReference"
                  | doc m%"
                  ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
                  "%
                  | optional,
                driver
                  | String
                  | doc m%"
                  Driver is the name of the driver to use for this volume. Required.
                  "%,
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
                  "%
                  | optional,
                nodePublishSecretRef
                  | definitions.contract."io.k8s.api.core.v1.SecretReference"
                  | doc m%"
                  NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
                  "%
                  | optional,
                nodeStageSecretRef
                  | definitions.contract."io.k8s.api.core.v1.SecretReference"
                  | doc m%"
                  NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
                  "%
                  | optional,
                volumeAttributes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Attributes of the volume to publish.
                  "%
                  | optional,
                volumeHandle
                  | String
                  | doc m%"
                  VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.CSIVolumeSource"
            | doc m%"
            Represents a source location of a volume to mount, managed by an external CSI driver
            "%
            = {
                driver
                  | String
                  | doc m%"
                  Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
                  "%,
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
                  "%
                  | optional,
                nodePublishSecretRef
                  | definitions.contract."io.k8s.api.core.v1.LocalObjectReference"
                  | doc m%"
                  NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Specifies a read-only configuration for the volume. Defaults to false (read/write).
                  "%
                  | optional,
                volumeAttributes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.Capabilities"
            | doc m%"
            Adds and removes POSIX capabilities from running containers.
            "%
            = {
                add
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Added capabilities
                  "%
                  | optional,
                drop
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Removed capabilities
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.CephFSPersistentVolumeSource"
            | doc m%"
            Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
            "%
            = {
                monitors
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                  "%,
                path
                  | String
                  | doc m%"
                  Optional: Used as the mounted root, rather than the full Ceph tree, default is /
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                  "%
                  | optional,
                secretFile
                  | String
                  | doc m%"
                  Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.SecretReference"
                  | doc m%"
                  Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                  "%
                  | optional,
                user
                  | String
                  | doc m%"
                  Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.CephFSVolumeSource"
            | doc m%"
            Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
            "%
            = {
                monitors
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                  "%,
                path
                  | String
                  | doc m%"
                  Optional: Used as the mounted root, rather than the full Ceph tree, default is /
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                  "%
                  | optional,
                secretFile
                  | String
                  | doc m%"
                  Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.LocalObjectReference"
                  | doc m%"
                  Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                  "%
                  | optional,
                user
                  | String
                  | doc m%"
                  Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.CinderPersistentVolumeSource"
            | doc m%"
            Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.SecretReference"
                  | doc m%"
                  Optional: points to a secret object containing parameters used to connect to OpenStack.
                  "%
                  | optional,
                volumeID
                  | String
                  | doc m%"
                  volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                  "%,
                ..
              },
          "io.k8s.api.core.v1.CinderVolumeSource"
            | doc m%"
            Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.LocalObjectReference"
                  | doc m%"
                  Optional: points to a secret object containing parameters used to connect to OpenStack.
                  "%
                  | optional,
                volumeID
                  | String
                  | doc m%"
                  volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                  "%,
                ..
              },
          "io.k8s.api.core.v1.ClientIPConfig"
            | doc m%"
            ClientIPConfig represents the configurations of Client IP based session affinity.
            "%
            = {
                timeoutSeconds
                  | std.number.Integer
                  | doc m%"
                  timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ComponentCondition"
            | doc m%"
            Information about the condition of a component.
            "%
            = {
                error
                  | String
                  | doc m%"
                  Condition error code for a component. For example, a health check error code.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  Message about the condition for a component. For example, information about a health check.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
                  "%,
                type
                  | String
                  | doc m%"
                  Type of condition for a component. Valid value: "Healthy"
                  "%,
                ..
              },
          "io.k8s.api.core.v1.ComponentStatus"
            | doc m%"
            ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.ComponentStatus",
          "io.k8s.api.core.v1.ComponentStatusList"
            | doc m%"
            Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.ComponentStatusList",
          "io.k8s.api.core.v1.ConfigMap"
            | doc m%"
            ConfigMap holds configuration data for pods to consume.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.ConfigMap",
          "io.k8s.api.core.v1.ConfigMapEnvSource"
            | doc m%"
            ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
            
            The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
            "%
            = {
                name
                  | String
                  | doc m%"
                  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                  "%
                  | optional,
                "optional"
                  | Bool
                  | doc m%"
                  Specify whether the ConfigMap must be defined
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ConfigMapKeySelector"
            | doc m%"
            Selects a key from a ConfigMap.
            "%
            = {
                key
                  | String
                  | doc m%"
                  The key to select.
                  "%,
                name
                  | String
                  | doc m%"
                  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                  "%
                  | optional,
                "optional"
                  | Bool
                  | doc m%"
                  Specify whether the ConfigMap or its key must be defined
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ConfigMapList"
            | doc m%"
            ConfigMapList is a resource containing a list of ConfigMap objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.ConfigMapList",
          "io.k8s.api.core.v1.ConfigMapNodeConfigSource"
            | doc m%"
            ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.
            "%
            = {
                kubeletConfigKey
                  | String
                  | doc m%"
                  KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
                  "%,
                name
                  | String
                  | doc m%"
                  Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
                  "%,
                namespace
                  | String
                  | doc m%"
                  Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
                  "%,
                resourceVersion
                  | String
                  | doc m%"
                  ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
                  "%
                  | optional,
                uid
                  | String
                  | doc m%"
                  UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ConfigMapProjection"
            | doc m%"
            Adapts a ConfigMap into a projected volume.
            
            The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
            "%
            = {
                items
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.KeyToPath"
                  ])
                  | doc m%"
                  If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                  "%
                  | optional,
                "optional"
                  | Bool
                  | doc m%"
                  Specify whether the ConfigMap or its keys must be defined
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ConfigMapVolumeSource"
            | doc m%"
            Adapts a ConfigMap into a volume.
            
            The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
            "%
            = {
                defaultMode
                  | std.number.Integer
                  | doc m%"
                  Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                  "%
                  | optional,
                items
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.KeyToPath"
                  ])
                  | doc m%"
                  If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                  "%
                  | optional,
                "optional"
                  | Bool
                  | doc m%"
                  Specify whether the ConfigMap or its keys must be defined
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.Container"
            | doc m%"
            A single application container that you want to run within a pod.
            "%
            = {
                args
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                  "%
                  | optional,
                command
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                  "%
                  | optional,
                env
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.EnvVar"
                  ])
                  | doc m%"
                  List of environment variables to set in the container. Cannot be updated.
                  "%
                  | optional,
                envFrom
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.EnvFromSource"
                  ])
                  | doc m%"
                  List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
                  "%
                  | optional,
                image
                  | String
                  | doc m%"
                  Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
                  "%
                  | optional,
                imagePullPolicy
                  | String
                  | doc m%"
                  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
                  "%
                  | optional,
                lifecycle
                  | definitions.contract."io.k8s.api.core.v1.Lifecycle"
                  | doc m%"
                  Actions that the management system should take in response to container lifecycle events. Cannot be updated.
                  "%
                  | optional,
                livenessProbe
                  | definitions.contract."io.k8s.api.core.v1.Probe"
                  | doc m%"
                  Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
                  "%,
                ports
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.ContainerPort"
                  ])
                  | doc m%"
                  List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
                  "%
                  | optional,
                readinessProbe
                  | definitions.contract."io.k8s.api.core.v1.Probe"
                  | doc m%"
                  Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                  "%
                  | optional,
                resources
                  | definitions.contract."io.k8s.api.core.v1.ResourceRequirements"
                  | doc m%"
                  Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                  "%
                  | optional,
                securityContext
                  | definitions.contract."io.k8s.api.core.v1.SecurityContext"
                  | doc m%"
                  Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
                  "%
                  | optional,
                startupProbe
                  | definitions.contract."io.k8s.api.core.v1.Probe"
                  | doc m%"
                  StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                  "%
                  | optional,
                stdin
                  | Bool
                  | doc m%"
                  Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
                  "%
                  | optional,
                stdinOnce
                  | Bool
                  | doc m%"
                  Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
                  "%
                  | optional,
                terminationMessagePath
                  | String
                  | doc m%"
                  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
                  "%
                  | optional,
                terminationMessagePolicy
                  | String
                  | doc m%"
                  Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
                  "%
                  | optional,
                tty
                  | Bool
                  | doc m%"
                  Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
                  "%
                  | optional,
                volumeDevices
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.VolumeDevice"
                  ])
                  | doc m%"
                  volumeDevices is the list of block devices to be used by the container.
                  "%
                  | optional,
                volumeMounts
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.VolumeMount"
                  ])
                  | doc m%"
                  Pod volumes to mount into the container's filesystem. Cannot be updated.
                  "%
                  | optional,
                workingDir
                  | String
                  | doc m%"
                  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ContainerImage"
            | doc m%"
            Describe a container image
            "%
            = {
                names
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Names by which this image is known. e.g. ["k8s.gcr.io/hyperkube:v1.0.7", "dockerhub.io/google_containers/hyperkube:v1.0.7"]
                  "%,
                sizeBytes
                  | std.number.Integer
                  | doc m%"
                  The size of the image in bytes.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ContainerPort"
            | doc m%"
            ContainerPort represents a network port in a single container.
            "%
            = {
                containerPort
                  | std.number.Integer
                  | doc m%"
                  Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
                  "%,
                hostIP
                  | String
                  | doc m%"
                  What host IP to bind the external port to.
                  "%
                  | optional,
                hostPort
                  | std.number.Integer
                  | doc m%"
                  Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
                  "%
                  | optional,
                protocol
                  | String
                  | doc m%"
                  Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ContainerState"
            | doc m%"
            ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
            "%
            = {
                running
                  | definitions.contract."io.k8s.api.core.v1.ContainerStateRunning"
                  | doc m%"
                  Details about a running container
                  "%
                  | optional,
                terminated
                  | definitions.contract."io.k8s.api.core.v1.ContainerStateTerminated"
                  | doc m%"
                  Details about a terminated container
                  "%
                  | optional,
                waiting
                  | definitions.contract."io.k8s.api.core.v1.ContainerStateWaiting"
                  | doc m%"
                  Details about a waiting container
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ContainerStateRunning"
            | doc m%"
            ContainerStateRunning is a running state of a container.
            "%
            = {
                startedAt
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Time at which the container was last (re-)started
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ContainerStateTerminated"
            | doc m%"
            ContainerStateTerminated is a terminated state of a container.
            "%
            = {
                containerID
                  | String
                  | doc m%"
                  Container's ID in the format 'docker://<container_id>'
                  "%
                  | optional,
                exitCode
                  | std.number.Integer
                  | doc m%"
                  Exit status from the last termination of the container
                  "%,
                finishedAt
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Time at which the container last terminated
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  Message regarding the last termination of the container
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  (brief) reason from the last termination of the container
                  "%
                  | optional,
                signal
                  | std.number.Integer
                  | doc m%"
                  Signal from the last termination of the container
                  "%
                  | optional,
                startedAt
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Time at which previous execution of the container started
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ContainerStateWaiting"
            | doc m%"
            ContainerStateWaiting is a waiting state of a container.
            "%
            = {
                message
                  | String
                  | doc m%"
                  Message regarding why the container is not yet running.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  (brief) reason the container is not yet running.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ContainerStatus"
            | doc m%"
            ContainerStatus contains details for the current status of this container.
            "%
            = {
                containerID
                  | String
                  | doc m%"
                  Container's ID in the format 'docker://<container_id>'.
                  "%
                  | optional,
                image
                  | String
                  | doc m%"
                  The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images
                  "%,
                imageID
                  | String
                  | doc m%"
                  ImageID of the container's image.
                  "%,
                lastState
                  | definitions.contract."io.k8s.api.core.v1.ContainerState"
                  | doc m%"
                  Details about the container's last termination condition.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
                  "%,
                ready
                  | Bool
                  | doc m%"
                  Specifies whether the container has passed its readiness probe.
                  "%,
                restartCount
                  | std.number.Integer
                  | doc m%"
                  The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
                  "%,
                started
                  | Bool
                  | doc m%"
                  Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
                  "%
                  | optional,
                state
                  | definitions.contract."io.k8s.api.core.v1.ContainerState"
                  | doc m%"
                  Details about the container's current condition.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.DaemonEndpoint"
            | doc m%"
            DaemonEndpoint contains information about a single Daemon endpoint.
            "%
            = {
                Port
                  | std.number.Integer
                  | doc m%"
                  Port number of the given endpoint.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.DownwardAPIProjection"
            | doc m%"
            Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
            "%
            = {
                items
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.DownwardAPIVolumeFile"
                  ])
                  | doc m%"
                  Items is a list of DownwardAPIVolume file
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.DownwardAPIVolumeFile"
            | doc m%"
            DownwardAPIVolumeFile represents information to create the file containing the pod field
            "%
            = {
                fieldRef
                  | definitions.contract."io.k8s.api.core.v1.ObjectFieldSelector"
                  | doc m%"
                  Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
                  "%
                  | optional,
                mode
                  | std.number.Integer
                  | doc m%"
                  Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                  "%
                  | optional,
                path
                  | String
                  | doc m%"
                  Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
                  "%,
                resourceFieldRef
                  | definitions.contract."io.k8s.api.core.v1.ResourceFieldSelector"
                  | doc m%"
                  Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.DownwardAPIVolumeSource"
            | doc m%"
            DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
            "%
            = {
                defaultMode
                  | std.number.Integer
                  | doc m%"
                  Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                  "%
                  | optional,
                items
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.DownwardAPIVolumeFile"
                  ])
                  | doc m%"
                  Items is a list of downward API volume file
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.EmptyDirVolumeSource"
            | doc m%"
            Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
            "%
            = {
                medium
                  | String
                  | doc m%"
                  What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                  "%
                  | optional,
                sizeLimit
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.EndpointAddress"
            | doc m%"
            EndpointAddress is a tuple that describes single IP address.
            "%
            = {
                hostname
                  | String
                  | doc m%"
                  The Hostname of this endpoint
                  "%
                  | optional,
                ip
                  | String
                  | doc m%"
                  The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.
                  "%,
                nodeName
                  | String
                  | doc m%"
                  Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
                  "%
                  | optional,
                targetRef
                  | definitions.contract."io.k8s.api.core.v1.ObjectReference"
                  | doc m%"
                  Reference to object providing the endpoint.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.EndpointPort"
            | doc m%"
            EndpointPort is a tuple that describes a single port.
            "%
            = {
                appProtocol
                  | String
                  | doc m%"
                  The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
                  "%
                  | optional,
                port
                  | std.number.Integer
                  | doc m%"
                  The port number of the endpoint.
                  "%,
                protocol
                  | String
                  | doc m%"
                  The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.EndpointSubset"
            | doc m%"
            EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
              {
                Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
                Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
              }
            The resulting set of endpoints can be viewed as:
                a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
                b: [ 10.10.1.1:309, 10.10.2.2:309 ]
            "%
            = {
                addresses
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.EndpointAddress"
                  ])
                  | doc m%"
                  IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
                  "%
                  | optional,
                notReadyAddresses
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.EndpointAddress"
                  ])
                  | doc m%"
                  IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
                  "%
                  | optional,
                ports
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.EndpointPort"
                  ])
                  | doc m%"
                  Port numbers available on the related IP addresses.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.Endpoints"
            | doc m%"
            Endpoints is a collection of endpoints that implement the actual service. Example:
              Name: "mysvc",
              Subsets: [
                {
                  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
                  Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
                },
                {
                  Addresses: [{"ip": "10.10.3.3"}],
                  Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
                },
             ]
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.Endpoints",
          "io.k8s.api.core.v1.EndpointsList"
            | doc m%"
            EndpointsList is a list of endpoints.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.EndpointsList",
          "io.k8s.api.core.v1.EnvFromSource"
            | doc m%"
            EnvFromSource represents the source of a set of ConfigMaps
            "%
            = {
                configMapRef
                  | definitions.contract."io.k8s.api.core.v1.ConfigMapEnvSource"
                  | doc m%"
                  The ConfigMap to select from
                  "%
                  | optional,
                prefix
                  | String
                  | doc m%"
                  An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.SecretEnvSource"
                  | doc m%"
                  The Secret to select from
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.EnvVar"
            | doc m%"
            EnvVar represents an environment variable present in a Container.
            "%
            = {
                name
                  | String
                  | doc m%"
                  Name of the environment variable. Must be a C_IDENTIFIER.
                  "%,
                value
                  | String
                  | doc m%"
                  Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
                  "%
                  | optional,
                valueFrom
                  | definitions.contract."io.k8s.api.core.v1.EnvVarSource"
                  | doc m%"
                  Source for the environment variable's value. Cannot be used if value is not empty.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.EnvVarSource"
            | doc m%"
            EnvVarSource represents a source for the value of an EnvVar.
            "%
            = {
                configMapKeyRef
                  | definitions.contract."io.k8s.api.core.v1.ConfigMapKeySelector"
                  | doc m%"
                  Selects a key of a ConfigMap.
                  "%
                  | optional,
                fieldRef
                  | definitions.contract."io.k8s.api.core.v1.ObjectFieldSelector"
                  | doc m%"
                  Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                  "%
                  | optional,
                resourceFieldRef
                  | definitions.contract."io.k8s.api.core.v1.ResourceFieldSelector"
                  | doc m%"
                  Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                  "%
                  | optional,
                secretKeyRef
                  | definitions.contract."io.k8s.api.core.v1.SecretKeySelector"
                  | doc m%"
                  Selects a key of a secret in the pod's namespace
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.EphemeralContainer"
            | doc m%"
            An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.
            "%
            = {
                args
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                  "%
                  | optional,
                command
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                  "%
                  | optional,
                env
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.EnvVar"
                  ])
                  | doc m%"
                  List of environment variables to set in the container. Cannot be updated.
                  "%
                  | optional,
                envFrom
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.EnvFromSource"
                  ])
                  | doc m%"
                  List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
                  "%
                  | optional,
                image
                  | String
                  | doc m%"
                  Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
                  "%
                  | optional,
                imagePullPolicy
                  | String
                  | doc m%"
                  Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
                  "%
                  | optional,
                lifecycle
                  | definitions.contract."io.k8s.api.core.v1.Lifecycle"
                  | doc m%"
                  Lifecycle is not allowed for ephemeral containers.
                  "%
                  | optional,
                livenessProbe
                  | definitions.contract."io.k8s.api.core.v1.Probe"
                  | doc m%"
                  Probes are not allowed for ephemeral containers.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
                  "%,
                ports
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.ContainerPort"
                  ])
                  | doc m%"
                  Ports are not allowed for ephemeral containers.
                  "%
                  | optional,
                readinessProbe
                  | definitions.contract."io.k8s.api.core.v1.Probe"
                  | doc m%"
                  Probes are not allowed for ephemeral containers.
                  "%
                  | optional,
                resources
                  | definitions.contract."io.k8s.api.core.v1.ResourceRequirements"
                  | doc m%"
                  Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
                  "%
                  | optional,
                securityContext
                  | definitions.contract."io.k8s.api.core.v1.SecurityContext"
                  | doc m%"
                  SecurityContext is not allowed for ephemeral containers.
                  "%
                  | optional,
                startupProbe
                  | definitions.contract."io.k8s.api.core.v1.Probe"
                  | doc m%"
                  Probes are not allowed for ephemeral containers.
                  "%
                  | optional,
                stdin
                  | Bool
                  | doc m%"
                  Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
                  "%
                  | optional,
                stdinOnce
                  | Bool
                  | doc m%"
                  Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
                  "%
                  | optional,
                targetContainerName
                  | String
                  | doc m%"
                  If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.
                  "%
                  | optional,
                terminationMessagePath
                  | String
                  | doc m%"
                  Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
                  "%
                  | optional,
                terminationMessagePolicy
                  | String
                  | doc m%"
                  Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
                  "%
                  | optional,
                tty
                  | Bool
                  | doc m%"
                  Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
                  "%
                  | optional,
                volumeDevices
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.VolumeDevice"
                  ])
                  | doc m%"
                  volumeDevices is the list of block devices to be used by the container.
                  "%
                  | optional,
                volumeMounts
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.VolumeMount"
                  ])
                  | doc m%"
                  Pod volumes to mount into the container's filesystem. Cannot be updated.
                  "%
                  | optional,
                workingDir
                  | String
                  | doc m%"
                  Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.EphemeralVolumeSource"
            | doc m%"
            Represents an ephemeral volume that is handled by a normal storage driver.
            "%
            = {
                readOnly
                  | Bool
                  | doc m%"
                  Specifies a read-only configuration for the volume. Defaults to false (read/write).
                  "%
                  | optional,
                volumeClaimTemplate
                  | definitions.contract."io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
                  | doc m%"
                  Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
                  
                  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
                  
                  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
                  
                  Required, must not be nil.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.Event"
            | doc m%"
            Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.Event",
          "io.k8s.api.core.v1.EventList"
            | doc m%"
            EventList is a list of events.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.EventList",
          "io.k8s.api.core.v1.EventSeries"
            | doc m%"
            EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
            "%
            = {
                count
                  | std.number.Integer
                  | doc m%"
                  Number of occurrences in this series up to the last heartbeat time
                  "%
                  | optional,
                lastObservedTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
                  | doc m%"
                  Time of the last occurrence observed
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.EventSource"
            | doc m%"
            EventSource contains information for an event.
            "%
            = {
                component
                  | String
                  | doc m%"
                  Component from which the event is generated.
                  "%
                  | optional,
                host
                  | String
                  | doc m%"
                  Node name on which the event is generated.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ExecAction"
            | doc m%"
            ExecAction describes a "run in container" action.
            "%
            = {
                command
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.FCVolumeSource"
            | doc m%"
            Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  "%
                  | optional,
                lun
                  | std.number.Integer
                  | doc m%"
                  Optional: FC target lun number
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  "%
                  | optional,
                targetWWNs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Optional: FC target worldwide names (WWNs)
                  "%
                  | optional,
                wwids
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.FlexPersistentVolumeSource"
            | doc m%"
            FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
            "%
            = {
                driver
                  | String
                  | doc m%"
                  Driver is the name of the driver to use for this volume.
                  "%,
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
                  "%
                  | optional,
                options
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Optional: Extra command options if any.
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.SecretReference"
                  | doc m%"
                  Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.FlexVolumeSource"
            | doc m%"
            FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
            "%
            = {
                driver
                  | String
                  | doc m%"
                  Driver is the name of the driver to use for this volume.
                  "%,
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
                  "%
                  | optional,
                options
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Optional: Extra command options if any.
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.LocalObjectReference"
                  | doc m%"
                  Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.FlockerVolumeSource"
            | doc m%"
            Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
            "%
            = {
                datasetName
                  | String
                  | doc m%"
                  Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
                  "%
                  | optional,
                datasetUUID
                  | String
                  | doc m%"
                  UUID of the dataset. This is unique identifier of a Flocker dataset
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
            | doc m%"
            Represents a Persistent Disk resource in Google Compute Engine.
            
            A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                  "%
                  | optional,
                partition
                  | std.number.Integer
                  | doc m%"
                  The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                  "%
                  | optional,
                pdName
                  | String
                  | doc m%"
                  Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                  "%,
                readOnly
                  | Bool
                  | doc m%"
                  ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.GitRepoVolumeSource"
            | doc m%"
            Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
            
            DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
            "%
            = {
                directory
                  | String
                  | doc m%"
                  Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
                  "%
                  | optional,
                repository
                  | String
                  | doc m%"
                  Repository URL
                  "%,
                revision
                  | String
                  | doc m%"
                  Commit hash for the specified revision.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.GlusterfsPersistentVolumeSource"
            | doc m%"
            Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
            "%
            = {
                endpoints
                  | String
                  | doc m%"
                  EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                  "%,
                endpointsNamespace
                  | String
                  | doc m%"
                  EndpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                  "%
                  | optional,
                path
                  | String
                  | doc m%"
                  Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                  "%,
                readOnly
                  | Bool
                  | doc m%"
                  ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.GlusterfsVolumeSource"
            | doc m%"
            Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
            "%
            = {
                endpoints
                  | String
                  | doc m%"
                  EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                  "%,
                path
                  | String
                  | doc m%"
                  Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                  "%,
                readOnly
                  | Bool
                  | doc m%"
                  ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.HTTPGetAction"
            | doc m%"
            HTTPGetAction describes an action based on HTTP Get requests.
            "%
            = {
                host
                  | String
                  | doc m%"
                  Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                  "%
                  | optional,
                httpHeaders
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.HTTPHeader"
                  ])
                  | doc m%"
                  Custom headers to set in the request. HTTP allows repeated headers.
                  "%
                  | optional,
                path
                  | String
                  | doc m%"
                  Path to access on the HTTP server.
                  "%
                  | optional,
                port
                  | definitions.contract."io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                  | doc m%"
                  Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                  "%,
                scheme
                  | String
                  | doc m%"
                  Scheme to use for connecting to the host. Defaults to HTTP.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.HTTPHeader"
            | doc m%"
            HTTPHeader describes a custom header to be used in HTTP probes
            "%
            = {
                name
                  | String
                  | doc m%"
                  The header field name
                  "%,
                value
                  | String
                  | doc m%"
                  The header field value
                  "%,
                ..
              },
          "io.k8s.api.core.v1.Handler"
            | doc m%"
            Handler defines a specific action that should be taken
            "%
            = {
                exec
                  | definitions.contract."io.k8s.api.core.v1.ExecAction"
                  | doc m%"
                  One and only one of the following should be specified. Exec specifies the action to take.
                  "%
                  | optional,
                httpGet
                  | definitions.contract."io.k8s.api.core.v1.HTTPGetAction"
                  | doc m%"
                  HTTPGet specifies the http request to perform.
                  "%
                  | optional,
                tcpSocket
                  | definitions.contract."io.k8s.api.core.v1.TCPSocketAction"
                  | doc m%"
                  TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.HostAlias"
            | doc m%"
            HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
            "%
            = {
                hostnames
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Hostnames for the above IP address.
                  "%
                  | optional,
                ip
                  | String
                  | doc m%"
                  IP address of the host file entry.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.HostPathVolumeSource"
            | doc m%"
            Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
            "%
            = {
                path
                  | String
                  | doc m%"
                  Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                  "%,
                type
                  | String
                  | doc m%"
                  Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ISCSIPersistentVolumeSource"
            | doc m%"
            ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
            "%
            = {
                chapAuthDiscovery
                  | Bool
                  | doc m%"
                  whether support iSCSI Discovery CHAP authentication
                  "%
                  | optional,
                chapAuthSession
                  | Bool
                  | doc m%"
                  whether support iSCSI Session CHAP authentication
                  "%
                  | optional,
                fsType
                  | String
                  | doc m%"
                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
                  "%
                  | optional,
                initiatorName
                  | String
                  | doc m%"
                  Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
                  "%
                  | optional,
                iqn
                  | String
                  | doc m%"
                  Target iSCSI Qualified Name.
                  "%,
                iscsiInterface
                  | String
                  | doc m%"
                  iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
                  "%
                  | optional,
                lun
                  | std.number.Integer
                  | doc m%"
                  iSCSI Target Lun number.
                  "%,
                portals
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.SecretReference"
                  | doc m%"
                  CHAP Secret for iSCSI target and initiator authentication
                  "%
                  | optional,
                targetPortal
                  | String
                  | doc m%"
                  iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
                  "%,
                ..
              },
          "io.k8s.api.core.v1.ISCSIVolumeSource"
            | doc m%"
            Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
            "%
            = {
                chapAuthDiscovery
                  | Bool
                  | doc m%"
                  whether support iSCSI Discovery CHAP authentication
                  "%
                  | optional,
                chapAuthSession
                  | Bool
                  | doc m%"
                  whether support iSCSI Session CHAP authentication
                  "%
                  | optional,
                fsType
                  | String
                  | doc m%"
                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
                  "%
                  | optional,
                initiatorName
                  | String
                  | doc m%"
                  Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
                  "%
                  | optional,
                iqn
                  | String
                  | doc m%"
                  Target iSCSI Qualified Name.
                  "%,
                iscsiInterface
                  | String
                  | doc m%"
                  iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
                  "%
                  | optional,
                lun
                  | std.number.Integer
                  | doc m%"
                  iSCSI Target Lun number.
                  "%,
                portals
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.LocalObjectReference"
                  | doc m%"
                  CHAP Secret for iSCSI target and initiator authentication
                  "%
                  | optional,
                targetPortal
                  | String
                  | doc m%"
                  iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
                  "%,
                ..
              },
          "io.k8s.api.core.v1.KeyToPath"
            | doc m%"
            Maps a string key to a path within a volume.
            "%
            = {
                key
                  | String
                  | doc m%"
                  The key to project.
                  "%,
                mode
                  | std.number.Integer
                  | doc m%"
                  Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                  "%
                  | optional,
                path
                  | String
                  | doc m%"
                  The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.Lifecycle"
            | doc m%"
            Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
            "%
            = {
                postStart
                  | definitions.contract."io.k8s.api.core.v1.Handler"
                  | doc m%"
                  PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
                  "%
                  | optional,
                preStop
                  | definitions.contract."io.k8s.api.core.v1.Handler"
                  | doc m%"
                  PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.LimitRange"
            | doc m%"
            LimitRange sets resource usage limits for each kind of resource in a Namespace.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.LimitRange",
          "io.k8s.api.core.v1.LimitRangeItem"
            | doc m%"
            LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
            "%
            = {
                "default"
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  Default resource requirement limit value by resource name if resource limit is omitted.
                  "%
                  | optional,
                defaultRequest
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
                  "%
                  | optional,
                max
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  Max usage constraints on this kind by resource name.
                  "%
                  | optional,
                maxLimitRequestRatio
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
                  "%
                  | optional,
                min
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  Min usage constraints on this kind by resource name.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  Type of resource that this limit applies to.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.LimitRangeList"
            | doc m%"
            LimitRangeList is a list of LimitRange items.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.LimitRangeList",
          "io.k8s.api.core.v1.LimitRangeSpec"
            | doc m%"
            LimitRangeSpec defines a min/max usage limit for resources that match on kind.
            "%
            = {
                limits
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.LimitRangeItem"
                  ])
                  | doc m%"
                  Limits is the list of LimitRangeItem objects that are enforced.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.LoadBalancerIngress"
            | doc m%"
            LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
            "%
            = {
                hostname
                  | String
                  | doc m%"
                  Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
                  "%
                  | optional,
                ip
                  | String
                  | doc m%"
                  IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
                  "%
                  | optional,
                ports
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.PortStatus"
                  ])
                  | doc m%"
                  Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.LoadBalancerStatus"
            | doc m%"
            LoadBalancerStatus represents the status of a load-balancer.
            "%
            = {
                ingress
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.LoadBalancerIngress"
                  ])
                  | doc m%"
                  Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.LocalObjectReference"
            | doc m%"
            LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
            "%
            = {
                name
                  | String
                  | doc m%"
                  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.LocalVolumeSource"
            | doc m%"
            Local represents directly-attached storage with node affinity (Beta feature)
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a fileystem if unspecified.
                  "%
                  | optional,
                path
                  | String
                  | doc m%"
                  The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
                  "%,
                ..
              },
          "io.k8s.api.core.v1.NFSVolumeSource"
            | doc m%"
            Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
            "%
            = {
                path
                  | String
                  | doc m%"
                  Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                  "%,
                readOnly
                  | Bool
                  | doc m%"
                  ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                  "%
                  | optional,
                server
                  | String
                  | doc m%"
                  Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                  "%,
                ..
              },
          "io.k8s.api.core.v1.Namespace"
            | doc m%"
            Namespace provides a scope for Names. Use of multiple namespaces is optional.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.Namespace",
          "io.k8s.api.core.v1.NamespaceCondition"
            | doc m%"
            NamespaceCondition contains details about state of namespace.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | optional,
                message | String | optional,
                reason | String | optional,
                status
                  | String
                  | doc m%"
                  Status of the condition, one of True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  Type of namespace controller condition.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.NamespaceList"
            | doc m%"
            NamespaceList is a list of Namespaces.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.NamespaceList",
          "io.k8s.api.core.v1.NamespaceSpec"
            | doc m%"
            NamespaceSpec describes the attributes on a Namespace.
            "%
            = {
                finalizers
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.NamespaceStatus"
            | doc m%"
            NamespaceStatus is information about the current status of a Namespace.
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.NamespaceCondition"
                  ])
                  | doc m%"
                  Represents the latest available observations of a namespace's current state.
                  "%
                  | optional,
                phase
                  | String
                  | doc m%"
                  Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.Node"
            | doc m%"
            Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.Node",
          "io.k8s.api.core.v1.NodeAddress"
            | doc m%"
            NodeAddress contains information for the node's address.
            "%
            = {
                address
                  | String
                  | doc m%"
                  The node address.
                  "%,
                type
                  | String
                  | doc m%"
                  Node address type, one of Hostname, ExternalIP or InternalIP.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.NodeAffinity"
            | doc m%"
            Node affinity is a group of node affinity scheduling rules.
            "%
            = {
                preferredDuringSchedulingIgnoredDuringExecution
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.PreferredSchedulingTerm"
                  ])
                  | doc m%"
                  The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                  "%
                  | optional,
                requiredDuringSchedulingIgnoredDuringExecution
                  | definitions.contract."io.k8s.api.core.v1.NodeSelector"
                  | doc m%"
                  If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.NodeCondition"
            | doc m%"
            NodeCondition contains condition information for a node.
            "%
            = {
                lastHeartbeatTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time we got an update on a given condition.
                  "%
                  | optional,
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time the condition transit from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  Human readable message indicating details about last transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  (brief) reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  Status of the condition, one of True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  Type of node condition.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.NodeConfigSource"
            | doc m%"
            NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.
            "%
            = {
                configMap
                  | definitions.contract."io.k8s.api.core.v1.ConfigMapNodeConfigSource"
                  | doc m%"
                  ConfigMap is a reference to a Node's ConfigMap
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.NodeConfigStatus"
            | doc m%"
            NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
            "%
            = {
                active
                  | definitions.contract."io.k8s.api.core.v1.NodeConfigSource"
                  | doc m%"
                  Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
                  "%
                  | optional,
                assigned
                  | definitions.contract."io.k8s.api.core.v1.NodeConfigSource"
                  | doc m%"
                  Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
                  "%
                  | optional,
                error
                  | String
                  | doc m%"
                  Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
                  "%
                  | optional,
                lastKnownGood
                  | definitions.contract."io.k8s.api.core.v1.NodeConfigSource"
                  | doc m%"
                  LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.NodeDaemonEndpoints"
            | doc m%"
            NodeDaemonEndpoints lists ports opened by daemons running on the Node.
            "%
            = {
                kubeletEndpoint
                  | definitions.contract."io.k8s.api.core.v1.DaemonEndpoint"
                  | doc m%"
                  Endpoint on which Kubelet is listening.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.NodeList"
            | doc m%"
            NodeList is the whole list of all Nodes which have been registered with master.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.NodeList",
          "io.k8s.api.core.v1.NodeSelector"
            | doc m%"
            A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
            "%
            = {
                nodeSelectorTerms
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.NodeSelectorTerm"
                  ])
                  | doc m%"
                  Required. A list of node selector terms. The terms are ORed.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.NodeSelectorRequirement"
            | doc m%"
            A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
            "%
            = {
                key
                  | String
                  | doc m%"
                  The label key that the selector applies to.
                  "%,
                operator
                  | String
                  | doc m%"
                  Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                  "%,
                values
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.NodeSelectorTerm"
            | doc m%"
            A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
            "%
            = {
                matchExpressions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.NodeSelectorRequirement"
                  ])
                  | doc m%"
                  A list of node selector requirements by node's labels.
                  "%
                  | optional,
                matchFields
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.NodeSelectorRequirement"
                  ])
                  | doc m%"
                  A list of node selector requirements by node's fields.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.NodeSpec"
            | doc m%"
            NodeSpec describes the attributes that a node is created with.
            "%
            = {
                configSource
                  | definitions.contract."io.k8s.api.core.v1.NodeConfigSource"
                  | doc m%"
                  If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field
                  "%
                  | optional,
                externalID
                  | String
                  | doc m%"
                  Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
                  "%
                  | optional,
                podCIDR
                  | String
                  | doc m%"
                  PodCIDR represents the pod IP range assigned to the node.
                  "%
                  | optional,
                podCIDRs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
                  "%
                  | optional,
                providerID
                  | String
                  | doc m%"
                  ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
                  "%
                  | optional,
                taints
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Taint"
                  ])
                  | doc m%"
                  If specified, the node's taints.
                  "%
                  | optional,
                unschedulable
                  | Bool
                  | doc m%"
                  Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.NodeStatus"
            | doc m%"
            NodeStatus is information about the current status of a node.
            "%
            = {
                addresses
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.NodeAddress"
                  ])
                  | doc m%"
                  List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.
                  "%
                  | optional,
                allocatable
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
                  "%
                  | optional,
                capacity
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
                  "%
                  | optional,
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.NodeCondition"
                  ])
                  | doc m%"
                  Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
                  "%
                  | optional,
                config
                  | definitions.contract."io.k8s.api.core.v1.NodeConfigStatus"
                  | doc m%"
                  Status of the config assigned to the node via the dynamic Kubelet config feature.
                  "%
                  | optional,
                daemonEndpoints
                  | definitions.contract."io.k8s.api.core.v1.NodeDaemonEndpoints"
                  | doc m%"
                  Endpoints of daemons running on the Node.
                  "%
                  | optional,
                images
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.ContainerImage"
                  ])
                  | doc m%"
                  List of container images on this node
                  "%
                  | optional,
                nodeInfo
                  | definitions.contract."io.k8s.api.core.v1.NodeSystemInfo"
                  | doc m%"
                  Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
                  "%
                  | optional,
                phase
                  | String
                  | doc m%"
                  NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
                  "%
                  | optional,
                volumesAttached
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.AttachedVolume"
                  ])
                  | doc m%"
                  List of volumes that are attached to the node.
                  "%
                  | optional,
                volumesInUse
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  List of attachable volumes in use (mounted) by the node.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.NodeSystemInfo"
            | doc m%"
            NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
            "%
            = {
                architecture
                  | String
                  | doc m%"
                  The Architecture reported by the node
                  "%,
                bootID
                  | String
                  | doc m%"
                  Boot ID reported by the node.
                  "%,
                containerRuntimeVersion
                  | String
                  | doc m%"
                  ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
                  "%,
                kernelVersion
                  | String
                  | doc m%"
                  Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
                  "%,
                kubeProxyVersion
                  | String
                  | doc m%"
                  KubeProxy Version reported by the node.
                  "%,
                kubeletVersion
                  | String
                  | doc m%"
                  Kubelet Version reported by the node.
                  "%,
                machineID
                  | String
                  | doc m%"
                  MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
                  "%,
                operatingSystem
                  | String
                  | doc m%"
                  The Operating System reported by the node
                  "%,
                osImage
                  | String
                  | doc m%"
                  OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
                  "%,
                systemUUID
                  | String
                  | doc m%"
                  SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
                  "%,
                ..
              },
          "io.k8s.api.core.v1.ObjectFieldSelector"
            | doc m%"
            ObjectFieldSelector selects an APIVersioned field of an object.
            "%
            = {
                apiVersion
                  | String
                  | doc m%"
                  Version of the schema the FieldPath is written in terms of, defaults to "v1".
                  "%
                  | optional,
                fieldPath
                  | String
                  | doc m%"
                  Path of the field to select in the specified API version.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.ObjectReference"
            | doc m%"
            ObjectReference contains enough information to let you inspect or modify the referred object.
            "%
            = {
                apiVersion
                  | String
                  | doc m%"
                  API version of the referent.
                  "%
                  | optional,
                fieldPath
                  | String
                  | doc m%"
                  If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                  "%
                  | optional,
                namespace
                  | String
                  | doc m%"
                  Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
                  "%
                  | optional,
                resourceVersion
                  | String
                  | doc m%"
                  Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                  "%
                  | optional,
                uid
                  | String
                  | doc m%"
                  UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PersistentVolume"
            | doc m%"
            PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.PersistentVolume",
          "io.k8s.api.core.v1.PersistentVolumeClaim"
            | doc m%"
            PersistentVolumeClaim is a user's request for and claim to a persistent volume
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.PersistentVolumeClaim",
          "io.k8s.api.core.v1.PersistentVolumeClaimCondition"
            | doc m%"
            PersistentVolumeClaimCondition contails details about state of pvc
            "%
            = {
                lastProbeTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time we probed the condition.
                  "%
                  | optional,
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  Human-readable message indicating details about last transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
                  "%
                  | optional,
                status | String,
                type | String,
                ..
              },
          "io.k8s.api.core.v1.PersistentVolumeClaimList"
            | doc m%"
            PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.PersistentVolumeClaimList",
          "io.k8s.api.core.v1.PersistentVolumeClaimSpec"
            | doc m%"
            PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
            "%
            = {
                accessModes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                  "%
                  | optional,
                dataSource
                  | definitions.contract."io.k8s.api.core.v1.TypedLocalObjectReference"
                  | doc m%"
                  This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
                  "%
                  | optional,
                resources
                  | definitions.contract."io.k8s.api.core.v1.ResourceRequirements"
                  | doc m%"
                  Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
                  "%
                  | optional,
                selector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  A label query over volumes to consider for binding.
                  "%
                  | optional,
                storageClassName
                  | String
                  | doc m%"
                  Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
                  "%
                  | optional,
                volumeMode
                  | String
                  | doc m%"
                  volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
                  "%
                  | optional,
                volumeName
                  | String
                  | doc m%"
                  VolumeName is the binding reference to the PersistentVolume backing this claim.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PersistentVolumeClaimStatus"
            | doc m%"
            PersistentVolumeClaimStatus is the current status of a persistent volume claim.
            "%
            = {
                accessModes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
                  "%
                  | optional,
                capacity
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  Represents the actual resources of the underlying volume.
                  "%
                  | optional,
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.PersistentVolumeClaimCondition"
                  ])
                  | doc m%"
                  Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
                  "%
                  | optional,
                phase
                  | String
                  | doc m%"
                  Phase represents the current phase of PersistentVolumeClaim.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
            | doc m%"
            PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
            "%
            = {
                metadata
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                  | doc m%"
                  May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
                  "%
                  | optional,
                spec
                  | definitions.contract."io.k8s.api.core.v1.PersistentVolumeClaimSpec"
                  | doc m%"
                  The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource"
            | doc m%"
            PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
            "%
            = {
                claimName
                  | String
                  | doc m%"
                  ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                  "%,
                readOnly
                  | Bool
                  | doc m%"
                  Will force the ReadOnly setting in VolumeMounts. Default false.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PersistentVolumeList"
            | doc m%"
            PersistentVolumeList is a list of PersistentVolume items.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.PersistentVolumeList",
          "io.k8s.api.core.v1.PersistentVolumeSpec"
            | doc m%"
            PersistentVolumeSpec is the specification of a persistent volume.
            "%
            = {
                accessModes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
                  "%
                  | optional,
                awsElasticBlockStore
                  | definitions.contract."io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
                  | doc m%"
                  AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                  "%
                  | optional,
                azureDisk
                  | definitions.contract."io.k8s.api.core.v1.AzureDiskVolumeSource"
                  | doc m%"
                  AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
                  "%
                  | optional,
                azureFile
                  | definitions.contract."io.k8s.api.core.v1.AzureFilePersistentVolumeSource"
                  | doc m%"
                  AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
                  "%
                  | optional,
                capacity
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
                  "%
                  | optional,
                cephfs
                  | definitions.contract."io.k8s.api.core.v1.CephFSPersistentVolumeSource"
                  | doc m%"
                  CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
                  "%
                  | optional,
                cinder
                  | definitions.contract."io.k8s.api.core.v1.CinderPersistentVolumeSource"
                  | doc m%"
                  Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                  "%
                  | optional,
                claimRef
                  | definitions.contract."io.k8s.api.core.v1.ObjectReference"
                  | doc m%"
                  ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
                  "%
                  | optional,
                csi
                  | definitions.contract."io.k8s.api.core.v1.CSIPersistentVolumeSource"
                  | doc m%"
                  CSI represents storage that is handled by an external CSI driver (Beta feature).
                  "%
                  | optional,
                fc
                  | definitions.contract."io.k8s.api.core.v1.FCVolumeSource"
                  | doc m%"
                  FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
                  "%
                  | optional,
                flexVolume
                  | definitions.contract."io.k8s.api.core.v1.FlexPersistentVolumeSource"
                  | doc m%"
                  FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
                  "%
                  | optional,
                flocker
                  | definitions.contract."io.k8s.api.core.v1.FlockerVolumeSource"
                  | doc m%"
                  Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
                  "%
                  | optional,
                gcePersistentDisk
                  | definitions.contract."io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
                  | doc m%"
                  GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                  "%
                  | optional,
                glusterfs
                  | definitions.contract."io.k8s.api.core.v1.GlusterfsPersistentVolumeSource"
                  | doc m%"
                  Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
                  "%
                  | optional,
                hostPath
                  | definitions.contract."io.k8s.api.core.v1.HostPathVolumeSource"
                  | doc m%"
                  HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                  "%
                  | optional,
                iscsi
                  | definitions.contract."io.k8s.api.core.v1.ISCSIPersistentVolumeSource"
                  | doc m%"
                  ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
                  "%
                  | optional,
                local
                  | definitions.contract."io.k8s.api.core.v1.LocalVolumeSource"
                  | doc m%"
                  Local represents directly-attached storage with node affinity
                  "%
                  | optional,
                mountOptions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
                  "%
                  | optional,
                nfs
                  | definitions.contract."io.k8s.api.core.v1.NFSVolumeSource"
                  | doc m%"
                  NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                  "%
                  | optional,
                nodeAffinity
                  | definitions.contract."io.k8s.api.core.v1.VolumeNodeAffinity"
                  | doc m%"
                  NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
                  "%
                  | optional,
                persistentVolumeReclaimPolicy
                  | String
                  | doc m%"
                  What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
                  "%
                  | optional,
                photonPersistentDisk
                  | definitions.contract."io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
                  | doc m%"
                  PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
                  "%
                  | optional,
                portworxVolume
                  | definitions.contract."io.k8s.api.core.v1.PortworxVolumeSource"
                  | doc m%"
                  PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
                  "%
                  | optional,
                quobyte
                  | definitions.contract."io.k8s.api.core.v1.QuobyteVolumeSource"
                  | doc m%"
                  Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
                  "%
                  | optional,
                rbd
                  | definitions.contract."io.k8s.api.core.v1.RBDPersistentVolumeSource"
                  | doc m%"
                  RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
                  "%
                  | optional,
                scaleIO
                  | definitions.contract."io.k8s.api.core.v1.ScaleIOPersistentVolumeSource"
                  | doc m%"
                  ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
                  "%
                  | optional,
                storageClassName
                  | String
                  | doc m%"
                  Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
                  "%
                  | optional,
                storageos
                  | definitions.contract."io.k8s.api.core.v1.StorageOSPersistentVolumeSource"
                  | doc m%"
                  StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
                  "%
                  | optional,
                volumeMode
                  | String
                  | doc m%"
                  volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
                  "%
                  | optional,
                vsphereVolume
                  | definitions.contract."io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
                  | doc m%"
                  VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PersistentVolumeStatus"
            | doc m%"
            PersistentVolumeStatus is the current status of a persistent volume.
            "%
            = {
                message
                  | String
                  | doc m%"
                  A human-readable message indicating details about why the volume is in this state.
                  "%
                  | optional,
                phase
                  | String
                  | doc m%"
                  Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
            | doc m%"
            Represents a Photon Controller persistent disk resource.
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  "%
                  | optional,
                pdID
                  | String
                  | doc m%"
                  ID that identifies Photon Controller persistent disk
                  "%,
                ..
              },
          "io.k8s.api.core.v1.Pod"
            | doc m%"
            Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.Pod",
          "io.k8s.api.core.v1.PodAffinity"
            | doc m%"
            Pod affinity is a group of inter pod affinity scheduling rules.
            "%
            = {
                preferredDuringSchedulingIgnoredDuringExecution
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.WeightedPodAffinityTerm"
                  ])
                  | doc m%"
                  The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                  "%
                  | optional,
                requiredDuringSchedulingIgnoredDuringExecution
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.PodAffinityTerm"
                  ])
                  | doc m%"
                  If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PodAffinityTerm"
            | doc m%"
            Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
            "%
            = {
                labelSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  A label query over a set of resources, in this case pods.
                  "%
                  | optional,
                namespaces
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                  "%
                  | optional,
                topologyKey
                  | String
                  | doc m%"
                  This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.PodAntiAffinity"
            | doc m%"
            Pod anti affinity is a group of inter pod anti affinity scheduling rules.
            "%
            = {
                preferredDuringSchedulingIgnoredDuringExecution
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.WeightedPodAffinityTerm"
                  ])
                  | doc m%"
                  The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                  "%
                  | optional,
                requiredDuringSchedulingIgnoredDuringExecution
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.PodAffinityTerm"
                  ])
                  | doc m%"
                  If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PodCondition"
            | doc m%"
            PodCondition contains details for the current condition of this pod.
            "%
            = {
                lastProbeTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time we probed the condition.
                  "%
                  | optional,
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  Human-readable message indicating details about last transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  Unique, one-word, CamelCase reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
                  "%,
                type
                  | String
                  | doc m%"
                  Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
                  "%,
                ..
              },
          "io.k8s.api.core.v1.PodDNSConfig"
            | doc m%"
            PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
            "%
            = {
                nameservers
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
                  "%
                  | optional,
                options
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.PodDNSConfigOption"
                  ])
                  | doc m%"
                  A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
                  "%
                  | optional,
                searches
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PodDNSConfigOption"
            | doc m%"
            PodDNSConfigOption defines DNS resolver options of a pod.
            "%
            = {
                name
                  | String
                  | doc m%"
                  Required.
                  "%
                  | optional,
                value | String | optional,
                ..
              },
          "io.k8s.api.core.v1.PodIP"
            | doc m%"
            IP address information for entries in the (plural) PodIPs field. Each entry includes:
               IP: An IP address allocated to the pod. Routable at least within the cluster.
            "%
            = {
                ip
                  | String
                  | doc m%"
                  ip is an IP address (IPv4 or IPv6) assigned to the pod
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PodList"
            | doc m%"
            PodList is a list of Pods.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.PodList",
          "io.k8s.api.core.v1.PodReadinessGate"
            | doc m%"
            PodReadinessGate contains the reference to a pod condition
            "%
            = {
                conditionType
                  | String
                  | doc m%"
                  ConditionType refers to a condition in the pod's condition list with matching type.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.PodSecurityContext"
            | doc m%"
            PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
            "%
            = {
                fsGroup
                  | std.number.Integer
                  | doc m%"
                  A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
                  
                  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
                  
                  If unset, the Kubelet will not modify the ownership and permissions of any volume.
                  "%
                  | optional,
                fsGroupChangePolicy
                  | String
                  | doc m%"
                  fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
                  "%
                  | optional,
                runAsGroup
                  | std.number.Integer
                  | doc m%"
                  The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
                  "%
                  | optional,
                runAsNonRoot
                  | Bool
                  | doc m%"
                  Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                  "%
                  | optional,
                runAsUser
                  | std.number.Integer
                  | doc m%"
                  The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
                  "%
                  | optional,
                seLinuxOptions
                  | definitions.contract."io.k8s.api.core.v1.SELinuxOptions"
                  | doc m%"
                  The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
                  "%
                  | optional,
                seccompProfile
                  | definitions.contract."io.k8s.api.core.v1.SeccompProfile"
                  | doc m%"
                  The seccomp options to use by the containers in this pod.
                  "%
                  | optional,
                supplementalGroups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType 'Integer)
                  ])
                  | doc m%"
                  A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
                  "%
                  | optional,
                sysctls
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Sysctl"
                  ])
                  | doc m%"
                  Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
                  "%
                  | optional,
                windowsOptions
                  | definitions.contract."io.k8s.api.core.v1.WindowsSecurityContextOptions"
                  | doc m%"
                  The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PodSpec"
            | doc m%"
            PodSpec is a description of a pod.
            "%
            = {
                activeDeadlineSeconds
                  | std.number.Integer
                  | doc m%"
                  Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
                  "%
                  | optional,
                affinity
                  | definitions.contract."io.k8s.api.core.v1.Affinity"
                  | doc m%"
                  If specified, the pod's scheduling constraints
                  "%
                  | optional,
                automountServiceAccountToken
                  | Bool
                  | doc m%"
                  AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
                  "%
                  | optional,
                containers
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Container"
                  ])
                  | doc m%"
                  List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
                  "%,
                dnsConfig
                  | definitions.contract."io.k8s.api.core.v1.PodDNSConfig"
                  | doc m%"
                  Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
                  "%
                  | optional,
                dnsPolicy
                  | String
                  | doc m%"
                  Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
                  "%
                  | optional,
                enableServiceLinks
                  | Bool
                  | doc m%"
                  EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
                  "%
                  | optional,
                ephemeralContainers
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.EphemeralContainer"
                  ])
                  | doc m%"
                  List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.
                  "%
                  | optional,
                hostAliases
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.HostAlias"
                  ])
                  | doc m%"
                  HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
                  "%
                  | optional,
                hostIPC
                  | Bool
                  | doc m%"
                  Use the host's ipc namespace. Optional: Default to false.
                  "%
                  | optional,
                hostNetwork
                  | Bool
                  | doc m%"
                  Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
                  "%
                  | optional,
                hostPID
                  | Bool
                  | doc m%"
                  Use the host's pid namespace. Optional: Default to false.
                  "%
                  | optional,
                hostname
                  | String
                  | doc m%"
                  Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
                  "%
                  | optional,
                imagePullSecrets
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.LocalObjectReference"
                  ])
                  | doc m%"
                  ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
                  "%
                  | optional,
                initContainers
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Container"
                  ])
                  | doc m%"
                  List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
                  "%
                  | optional,
                nodeName
                  | String
                  | doc m%"
                  NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
                  "%
                  | optional,
                nodeSelector
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
                  "%
                  | optional,
                overhead
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.
                  "%
                  | optional,
                preemptionPolicy
                  | String
                  | doc m%"
                  PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
                  "%
                  | optional,
                "priority"
                  | std.number.Integer
                  | doc m%"
                  The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
                  "%
                  | optional,
                priorityClassName
                  | String
                  | doc m%"
                  If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
                  "%
                  | optional,
                readinessGates
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.PodReadinessGate"
                  ])
                  | doc m%"
                  If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
                  "%
                  | optional,
                restartPolicy
                  | String
                  | doc m%"
                  Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
                  "%
                  | optional,
                runtimeClassName
                  | String
                  | doc m%"
                  RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.
                  "%
                  | optional,
                schedulerName
                  | String
                  | doc m%"
                  If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
                  "%
                  | optional,
                securityContext
                  | definitions.contract."io.k8s.api.core.v1.PodSecurityContext"
                  | doc m%"
                  SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
                  "%
                  | optional,
                serviceAccount
                  | String
                  | doc m%"
                  DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
                  "%
                  | optional,
                serviceAccountName
                  | String
                  | doc m%"
                  ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
                  "%
                  | optional,
                setHostnameAsFQDN
                  | Bool
                  | doc m%"
                  If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
                  "%
                  | optional,
                shareProcessNamespace
                  | Bool
                  | doc m%"
                  Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
                  "%
                  | optional,
                subdomain
                  | String
                  | doc m%"
                  If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
                  "%
                  | optional,
                terminationGracePeriodSeconds
                  | std.number.Integer
                  | doc m%"
                  Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
                  "%
                  | optional,
                tolerations
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Toleration"
                  ])
                  | doc m%"
                  If specified, the pod's tolerations.
                  "%
                  | optional,
                topologySpreadConstraints
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.TopologySpreadConstraint"
                  ])
                  | doc m%"
                  TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
                  "%
                  | optional,
                volumes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Volume"
                  ])
                  | doc m%"
                  List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PodStatus"
            | doc m%"
            PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.PodCondition"
                  ])
                  | doc m%"
                  Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
                  "%
                  | optional,
                containerStatuses
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.ContainerStatus"
                  ])
                  | doc m%"
                  The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
                  "%
                  | optional,
                ephemeralContainerStatuses
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.ContainerStatus"
                  ])
                  | doc m%"
                  Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.
                  "%
                  | optional,
                hostIP
                  | String
                  | doc m%"
                  IP address of the host to which the pod is assigned. Empty if not yet scheduled.
                  "%
                  | optional,
                initContainerStatuses
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.ContainerStatus"
                  ])
                  | doc m%"
                  The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  A human readable message indicating details about why the pod is in this condition.
                  "%
                  | optional,
                nominatedNodeName
                  | String
                  | doc m%"
                  nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than PodSpec.nodeName when the pod is scheduled.
                  "%
                  | optional,
                phase
                  | String
                  | doc m%"
                  The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
                  
                  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
                  
                  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
                  "%
                  | optional,
                podIP
                  | String
                  | doc m%"
                  IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
                  "%
                  | optional,
                podIPs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.PodIP"
                  ])
                  | doc m%"
                  podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
                  "%
                  | optional,
                qosClass
                  | String
                  | doc m%"
                  The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
                  "%
                  | optional,
                startTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PodTemplate"
            | doc m%"
            PodTemplate describes a template for creating copies of a predefined pod.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.PodTemplate",
          "io.k8s.api.core.v1.PodTemplateList"
            | doc m%"
            PodTemplateList is a list of PodTemplates.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.PodTemplateList",
          "io.k8s.api.core.v1.PodTemplateSpec"
            | doc m%"
            PodTemplateSpec describes the data a pod should have when created from a template
            "%
            = {
                metadata
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
                  | doc m%"
                  Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                  "%
                  | optional,
                spec
                  | definitions.contract."io.k8s.api.core.v1.PodSpec"
                  | doc m%"
                  Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.PortStatus" = {
                error
                  | String
                  | doc m%"
                  Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use
                    CamelCase names
                  - cloud provider specific error values must have names that comply with the
                    format foo.example.com/CamelCase.
                  "%
                  | optional,
                port
                  | std.number.Integer
                  | doc m%"
                  Port is the port number of the service port of which status is recorded here
                  "%,
                protocol
                  | String
                  | doc m%"
                  Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
                  "%,
                ..
              },
          "io.k8s.api.core.v1.PortworxVolumeSource"
            | doc m%"
            PortworxVolumeSource represents a Portworx volume resource.
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  "%
                  | optional,
                volumeID
                  | String
                  | doc m%"
                  VolumeID uniquely identifies a Portworx volume
                  "%,
                ..
              },
          "io.k8s.api.core.v1.PreferredSchedulingTerm"
            | doc m%"
            An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
            "%
            = {
                preference
                  | definitions.contract."io.k8s.api.core.v1.NodeSelectorTerm"
                  | doc m%"
                  A node selector term, associated with the corresponding weight.
                  "%,
                weight
                  | std.number.Integer
                  | doc m%"
                  Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.Probe"
            | doc m%"
            Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
            "%
            = {
                exec
                  | definitions.contract."io.k8s.api.core.v1.ExecAction"
                  | doc m%"
                  One and only one of the following should be specified. Exec specifies the action to take.
                  "%
                  | optional,
                failureThreshold
                  | std.number.Integer
                  | doc m%"
                  Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                  "%
                  | optional,
                httpGet
                  | definitions.contract."io.k8s.api.core.v1.HTTPGetAction"
                  | doc m%"
                  HTTPGet specifies the http request to perform.
                  "%
                  | optional,
                initialDelaySeconds
                  | std.number.Integer
                  | doc m%"
                  Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                  "%
                  | optional,
                periodSeconds
                  | std.number.Integer
                  | doc m%"
                  How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                  "%
                  | optional,
                successThreshold
                  | std.number.Integer
                  | doc m%"
                  Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                  "%
                  | optional,
                tcpSocket
                  | definitions.contract."io.k8s.api.core.v1.TCPSocketAction"
                  | doc m%"
                  TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
                  "%
                  | optional,
                timeoutSeconds
                  | std.number.Integer
                  | doc m%"
                  Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ProjectedVolumeSource"
            | doc m%"
            Represents a projected volume source
            "%
            = {
                defaultMode
                  | std.number.Integer
                  | doc m%"
                  Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                  "%
                  | optional,
                sources
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.VolumeProjection"
                  ])
                  | doc m%"
                  list of volume projections
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.QuobyteVolumeSource"
            | doc m%"
            Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
            "%
            = {
                group
                  | String
                  | doc m%"
                  Group to map volume access to Default is no group
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
                  "%
                  | optional,
                registry
                  | String
                  | doc m%"
                  Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
                  "%,
                tenant
                  | String
                  | doc m%"
                  Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
                  "%
                  | optional,
                user
                  | String
                  | doc m%"
                  User to map volume access to Defaults to serivceaccount user
                  "%
                  | optional,
                volume
                  | String
                  | doc m%"
                  Volume is a string that references an already created Quobyte volume by name.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.RBDPersistentVolumeSource"
            | doc m%"
            Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
                  "%
                  | optional,
                image
                  | String
                  | doc m%"
                  The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%,
                keyring
                  | String
                  | doc m%"
                  Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%
                  | optional,
                monitors
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%,
                pool
                  | String
                  | doc m%"
                  The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.SecretReference"
                  | doc m%"
                  SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%
                  | optional,
                user
                  | String
                  | doc m%"
                  The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.RBDVolumeSource"
            | doc m%"
            Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
                  "%
                  | optional,
                image
                  | String
                  | doc m%"
                  The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%,
                keyring
                  | String
                  | doc m%"
                  Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%
                  | optional,
                monitors
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%,
                pool
                  | String
                  | doc m%"
                  The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.LocalObjectReference"
                  | doc m%"
                  SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%
                  | optional,
                user
                  | String
                  | doc m%"
                  The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ReplicationController"
            | doc m%"
            ReplicationController represents the configuration of a replication controller.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.ReplicationController",
          "io.k8s.api.core.v1.ReplicationControllerCondition"
            | doc m%"
            ReplicationControllerCondition describes the state of a replication controller at a certain point.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  The last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  A human readable message indicating details about the transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  The reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  Status of the condition, one of True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  Type of replication controller condition.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.ReplicationControllerList"
            | doc m%"
            ReplicationControllerList is a collection of replication controllers.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.ReplicationControllerList",
          "io.k8s.api.core.v1.ReplicationControllerSpec"
            | doc m%"
            ReplicationControllerSpec is the specification of a replication controller.
            "%
            = {
                minReadySeconds
                  | std.number.Integer
                  | doc m%"
                  Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
                  "%
                  | optional,
                replicas
                  | std.number.Integer
                  | doc m%"
                  Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
                  "%
                  | optional,
                selector
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
                  "%
                  | optional,
                template
                  | definitions.contract."io.k8s.api.core.v1.PodTemplateSpec"
                  | doc m%"
                  Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ReplicationControllerStatus"
            | doc m%"
            ReplicationControllerStatus represents the current status of a replication controller.
            "%
            = {
                availableReplicas
                  | std.number.Integer
                  | doc m%"
                  The number of available replicas (ready for at least minReadySeconds) for this replication controller.
                  "%
                  | optional,
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.ReplicationControllerCondition"
                  ])
                  | doc m%"
                  Represents the latest available observations of a replication controller's current state.
                  "%
                  | optional,
                fullyLabeledReplicas
                  | std.number.Integer
                  | doc m%"
                  The number of pods that have labels matching the labels of the pod template of the replication controller.
                  "%
                  | optional,
                observedGeneration
                  | std.number.Integer
                  | doc m%"
                  ObservedGeneration reflects the generation of the most recently observed replication controller.
                  "%
                  | optional,
                readyReplicas
                  | std.number.Integer
                  | doc m%"
                  The number of ready replicas for this replication controller.
                  "%
                  | optional,
                replicas
                  | std.number.Integer
                  | doc m%"
                  Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
                  "%,
                ..
              },
          "io.k8s.api.core.v1.ResourceFieldSelector"
            | doc m%"
            ResourceFieldSelector represents container resources (cpu, memory) and their output format
            "%
            = {
                containerName
                  | String
                  | doc m%"
                  Container name: required for volumes, optional for env vars
                  "%
                  | optional,
                divisor
                  | definitions.contract."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  | doc m%"
                  Specifies the output format of the exposed resources, defaults to "1"
                  "%
                  | optional,
                resource
                  | String
                  | doc m%"
                  Required: resource to select
                  "%,
                ..
              },
          "io.k8s.api.core.v1.ResourceQuota"
            | doc m%"
            ResourceQuota sets aggregate quota restrictions enforced per namespace
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.ResourceQuota",
          "io.k8s.api.core.v1.ResourceQuotaList"
            | doc m%"
            ResourceQuotaList is a list of ResourceQuota items.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.ResourceQuotaList",
          "io.k8s.api.core.v1.ResourceQuotaSpec"
            | doc m%"
            ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
            "%
            = {
                hard
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
                  "%
                  | optional,
                scopeSelector
                  | definitions.contract."io.k8s.api.core.v1.ScopeSelector"
                  | doc m%"
                  scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
                  "%
                  | optional,
                scopes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ResourceQuotaStatus"
            | doc m%"
            ResourceQuotaStatus defines the enforced hard limits and observed use.
            "%
            = {
                hard
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
                  "%
                  | optional,
                used
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  Used is the current observed total usage of the resource in the namespace.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ResourceRequirements"
            | doc m%"
            ResourceRequirements describes the compute resource requirements.
            "%
            = {
                limits
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                  "%
                  | optional,
                requests
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.SELinuxOptions"
            | doc m%"
            SELinuxOptions are the labels to be applied to the container
            "%
            = {
                level
                  | String
                  | doc m%"
                  Level is SELinux level label that applies to the container.
                  "%
                  | optional,
                role
                  | String
                  | doc m%"
                  Role is a SELinux role label that applies to the container.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  Type is a SELinux type label that applies to the container.
                  "%
                  | optional,
                user
                  | String
                  | doc m%"
                  User is a SELinux user label that applies to the container.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ScaleIOPersistentVolumeSource"
            | doc m%"
            ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
                  "%
                  | optional,
                gateway
                  | String
                  | doc m%"
                  The host address of the ScaleIO API Gateway.
                  "%,
                protectionDomain
                  | String
                  | doc m%"
                  The name of the ScaleIO Protection Domain for the configured storage.
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.SecretReference"
                  | doc m%"
                  SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
                  "%,
                sslEnabled
                  | Bool
                  | doc m%"
                  Flag to enable/disable SSL communication with Gateway, default false
                  "%
                  | optional,
                storageMode
                  | String
                  | doc m%"
                  Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
                  "%
                  | optional,
                storagePool
                  | String
                  | doc m%"
                  The ScaleIO Storage Pool associated with the protection domain.
                  "%
                  | optional,
                system
                  | String
                  | doc m%"
                  The name of the storage system as configured in ScaleIO.
                  "%,
                volumeName
                  | String
                  | doc m%"
                  The name of a volume already created in the ScaleIO system that is associated with this volume source.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ScaleIOVolumeSource"
            | doc m%"
            ScaleIOVolumeSource represents a persistent ScaleIO volume
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
                  "%
                  | optional,
                gateway
                  | String
                  | doc m%"
                  The host address of the ScaleIO API Gateway.
                  "%,
                protectionDomain
                  | String
                  | doc m%"
                  The name of the ScaleIO Protection Domain for the configured storage.
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.LocalObjectReference"
                  | doc m%"
                  SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
                  "%,
                sslEnabled
                  | Bool
                  | doc m%"
                  Flag to enable/disable SSL communication with Gateway, default false
                  "%
                  | optional,
                storageMode
                  | String
                  | doc m%"
                  Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
                  "%
                  | optional,
                storagePool
                  | String
                  | doc m%"
                  The ScaleIO Storage Pool associated with the protection domain.
                  "%
                  | optional,
                system
                  | String
                  | doc m%"
                  The name of the storage system as configured in ScaleIO.
                  "%,
                volumeName
                  | String
                  | doc m%"
                  The name of a volume already created in the ScaleIO system that is associated with this volume source.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ScopeSelector"
            | doc m%"
            A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
            "%
            = {
                matchExpressions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.ScopedResourceSelectorRequirement"
                  ])
                  | doc m%"
                  A list of scope selector requirements by scope of the resources.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ScopedResourceSelectorRequirement"
            | doc m%"
            A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
            "%
            = {
                operator
                  | String
                  | doc m%"
                  Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
                  "%,
                scopeName
                  | String
                  | doc m%"
                  The name of the scope that the selector applies to.
                  "%,
                values
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.SeccompProfile"
            | doc m%"
            SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.SeccompProfile",
          "io.k8s.api.core.v1.Secret"
            | doc m%"
            Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.Secret",
          "io.k8s.api.core.v1.SecretEnvSource"
            | doc m%"
            SecretEnvSource selects a Secret to populate the environment variables with.
            
            The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
            "%
            = {
                name
                  | String
                  | doc m%"
                  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                  "%
                  | optional,
                "optional"
                  | Bool
                  | doc m%"
                  Specify whether the Secret must be defined
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.SecretKeySelector"
            | doc m%"
            SecretKeySelector selects a key of a Secret.
            "%
            = {
                key
                  | String
                  | doc m%"
                  The key of the secret to select from.  Must be a valid secret key.
                  "%,
                name
                  | String
                  | doc m%"
                  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                  "%
                  | optional,
                "optional"
                  | Bool
                  | doc m%"
                  Specify whether the Secret or its key must be defined
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.SecretList"
            | doc m%"
            SecretList is a list of Secret.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.SecretList",
          "io.k8s.api.core.v1.SecretProjection"
            | doc m%"
            Adapts a secret into a projected volume.
            
            The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
            "%
            = {
                items
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.KeyToPath"
                  ])
                  | doc m%"
                  If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                  "%
                  | optional,
                "optional"
                  | Bool
                  | doc m%"
                  Specify whether the Secret or its key must be defined
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.SecretReference"
            | doc m%"
            SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
            "%
            = {
                name
                  | String
                  | doc m%"
                  Name is unique within a namespace to reference a secret resource.
                  "%
                  | optional,
                namespace
                  | String
                  | doc m%"
                  Namespace defines the space within which the secret name must be unique.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.SecretVolumeSource"
            | doc m%"
            Adapts a Secret into a volume.
            
            The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
            "%
            = {
                defaultMode
                  | std.number.Integer
                  | doc m%"
                  Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                  "%
                  | optional,
                items
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.KeyToPath"
                  ])
                  | doc m%"
                  If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                  "%
                  | optional,
                "optional"
                  | Bool
                  | doc m%"
                  Specify whether the Secret or its keys must be defined
                  "%
                  | optional,
                secretName
                  | String
                  | doc m%"
                  Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.SecurityContext"
            | doc m%"
            SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
            "%
            = {
                allowPrivilegeEscalation
                  | Bool
                  | doc m%"
                  AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
                  "%
                  | optional,
                capabilities
                  | definitions.contract."io.k8s.api.core.v1.Capabilities"
                  | doc m%"
                  The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
                  "%
                  | optional,
                privileged
                  | Bool
                  | doc m%"
                  Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
                  "%
                  | optional,
                procMount
                  | String
                  | doc m%"
                  procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
                  "%
                  | optional,
                readOnlyRootFilesystem
                  | Bool
                  | doc m%"
                  Whether this container has a read-only root filesystem. Default is false.
                  "%
                  | optional,
                runAsGroup
                  | std.number.Integer
                  | doc m%"
                  The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                  "%
                  | optional,
                runAsNonRoot
                  | Bool
                  | doc m%"
                  Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                  "%
                  | optional,
                runAsUser
                  | std.number.Integer
                  | doc m%"
                  The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                  "%
                  | optional,
                seLinuxOptions
                  | definitions.contract."io.k8s.api.core.v1.SELinuxOptions"
                  | doc m%"
                  The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                  "%
                  | optional,
                seccompProfile
                  | definitions.contract."io.k8s.api.core.v1.SeccompProfile"
                  | doc m%"
                  The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
                  "%
                  | optional,
                windowsOptions
                  | definitions.contract."io.k8s.api.core.v1.WindowsSecurityContextOptions"
                  | doc m%"
                  The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.Service"
            | doc m%"
            Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.Service",
          "io.k8s.api.core.v1.ServiceAccount"
            | doc m%"
            ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.ServiceAccount",
          "io.k8s.api.core.v1.ServiceAccountList"
            | doc m%"
            ServiceAccountList is a list of ServiceAccount objects
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.ServiceAccountList",
          "io.k8s.api.core.v1.ServiceAccountTokenProjection"
            | doc m%"
            ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
            "%
            = {
                audience
                  | String
                  | doc m%"
                  Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
                  "%
                  | optional,
                expirationSeconds
                  | std.number.Integer
                  | doc m%"
                  ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
                  "%
                  | optional,
                path
                  | String
                  | doc m%"
                  Path is the path relative to the mount point of the file to project the token into.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.ServiceList"
            | doc m%"
            ServiceList holds a list of services.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.core.v1.ServiceList",
          "io.k8s.api.core.v1.ServicePort"
            | doc m%"
            ServicePort contains information on service's port.
            "%
            = {
                appProtocol
                  | String
                  | doc m%"
                  The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                  "%
                  | optional,
                nodePort
                  | std.number.Integer
                  | doc m%"
                  The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                  "%
                  | optional,
                port
                  | std.number.Integer
                  | doc m%"
                  The port that will be exposed by this service.
                  "%,
                protocol
                  | String
                  | doc m%"
                  The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                  "%
                  | optional,
                targetPort
                  | definitions.contract."io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                  | doc m%"
                  Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ServiceSpec"
            | doc m%"
            ServiceSpec describes the attributes that a user creates on a service.
            "%
            = {
                allocateLoadBalancerNodePorts
                  | Bool
                  | doc m%"
                  allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
                  "%
                  | optional,
                clusterIP
                  | String
                  | doc m%"
                  clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                  "%
                  | optional,
                clusterIPs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
                  
                  Unless the "IPv6DualStack" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                  "%
                  | optional,
                externalIPs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
                  "%
                  | optional,
                externalName
                  | String
                  | doc m%"
                  externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be
                  "%
                  | optional,
                externalTrafficPolicy
                  | String
                  | doc m%"
                  externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
                  "%
                  | optional,
                healthCheckNodePort
                  | std.number.Integer
                  | doc m%"
                  healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
                  "%
                  | optional,
                ipFamilies
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the "IPv6DualStack" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services.  This field will be wiped when updating a Service to type ExternalName.
                  
                  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
                  "%
                  | optional,
                ipFamilyPolicy
                  | String
                  | doc m%"
                  IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the "IPv6DualStack" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.
                  "%
                  | optional,
                loadBalancerIP
                  | String
                  | doc m%"
                  Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
                  "%
                  | optional,
                loadBalancerSourceRanges
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
                  "%
                  | optional,
                ports
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.ServicePort"
                  ])
                  | doc m%"
                  The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                  "%
                  | optional,
                publishNotReadyAddresses
                  | Bool
                  | doc m%"
                  publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
                  "%
                  | optional,
                selector
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
                  "%
                  | optional,
                sessionAffinity
                  | String
                  | doc m%"
                  Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
                  "%
                  | optional,
                sessionAffinityConfig
                  | definitions.contract."io.k8s.api.core.v1.SessionAffinityConfig"
                  | doc m%"
                  sessionAffinityConfig contains the configurations of session affinity.
                  "%
                  | optional,
                topologyKeys
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.ServiceStatus"
            | doc m%"
            ServiceStatus represents the current status of a service.
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
                  ])
                  | doc m%"
                  Current service state
                  "%
                  | optional,
                loadBalancer
                  | definitions.contract."io.k8s.api.core.v1.LoadBalancerStatus"
                  | doc m%"
                  LoadBalancer contains the current status of the load-balancer, if one is present.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.SessionAffinityConfig"
            | doc m%"
            SessionAffinityConfig represents the configurations of session affinity.
            "%
            = {
                clientIP
                  | definitions.contract."io.k8s.api.core.v1.ClientIPConfig"
                  | doc m%"
                  clientIP contains the configurations of Client IP based session affinity.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.StorageOSPersistentVolumeSource"
            | doc m%"
            Represents a StorageOS persistent volume resource.
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.ObjectReference"
                  | doc m%"
                  SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
                  "%
                  | optional,
                volumeName
                  | String
                  | doc m%"
                  VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
                  "%
                  | optional,
                volumeNamespace
                  | String
                  | doc m%"
                  VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.StorageOSVolumeSource"
            | doc m%"
            Represents a StorageOS persistent volume resource.
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                  "%
                  | optional,
                secretRef
                  | definitions.contract."io.k8s.api.core.v1.LocalObjectReference"
                  | doc m%"
                  SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
                  "%
                  | optional,
                volumeName
                  | String
                  | doc m%"
                  VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
                  "%
                  | optional,
                volumeNamespace
                  | String
                  | doc m%"
                  VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.Sysctl"
            | doc m%"
            Sysctl defines a kernel parameter to be set
            "%
            = {
                name
                  | String
                  | doc m%"
                  Name of a property to set
                  "%,
                value
                  | String
                  | doc m%"
                  Value of a property to set
                  "%,
                ..
              },
          "io.k8s.api.core.v1.TCPSocketAction"
            | doc m%"
            TCPSocketAction describes an action based on opening a socket
            "%
            = {
                host
                  | String
                  | doc m%"
                  Optional: Host name to connect to, defaults to the pod IP.
                  "%
                  | optional,
                port
                  | definitions.contract."io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                  | doc m%"
                  Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.Taint"
            | doc m%"
            The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
            "%
            = {
                effect
                  | String
                  | doc m%"
                  Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
                  "%,
                key
                  | String
                  | doc m%"
                  Required. The taint key to be applied to a node.
                  "%,
                timeAdded
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
                  "%
                  | optional,
                value
                  | String
                  | doc m%"
                  The taint value corresponding to the taint key.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.Toleration"
            | doc m%"
            The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
            "%
            = {
                effect
                  | String
                  | doc m%"
                  Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                  "%
                  | optional,
                key
                  | String
                  | doc m%"
                  Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                  "%
                  | optional,
                operator
                  | String
                  | doc m%"
                  Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                  "%
                  | optional,
                tolerationSeconds
                  | std.number.Integer
                  | doc m%"
                  TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                  "%
                  | optional,
                value
                  | String
                  | doc m%"
                  Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.TopologySelectorLabelRequirement"
            | doc m%"
            A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
            "%
            = {
                key
                  | String
                  | doc m%"
                  The label key that the selector applies to.
                  "%,
                values
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  An array of string values. One value must match the label to be selected. Each entry in Values is ORed.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.TopologySelectorTerm"
            | doc m%"
            A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
            "%
            = {
                matchLabelExpressions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.TopologySelectorLabelRequirement"
                  ])
                  | doc m%"
                  A list of topology selector requirements by labels.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.TopologySpreadConstraint"
            | doc m%"
            TopologySpreadConstraint specifies how to spread matching pods among the given topology.
            "%
            = {
                labelSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
                  "%
                  | optional,
                maxSkew
                  | std.number.Integer
                  | doc m%"
                  MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
                  "%,
                topologyKey
                  | String
                  | doc m%"
                  TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
                  "%,
                whenUnsatisfiable
                  | String
                  | doc m%"
                  WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,
                    but giving higher precedence to topologies that would help reduce the
                    skew.
                  A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assigment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.TypedLocalObjectReference"
            | doc m%"
            TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
            "%
            = {
                apiGroup
                  | String
                  | doc m%"
                  APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  Kind is the type of resource being referenced
                  "%,
                name
                  | String
                  | doc m%"
                  Name is the name of resource being referenced
                  "%,
                ..
              },
          "io.k8s.api.core.v1.Volume"
            | doc m%"
            Volume represents a named volume in a pod that may be accessed by any container in the pod.
            "%
            = {
                awsElasticBlockStore
                  | definitions.contract."io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
                  | doc m%"
                  AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                  "%
                  | optional,
                azureDisk
                  | definitions.contract."io.k8s.api.core.v1.AzureDiskVolumeSource"
                  | doc m%"
                  AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
                  "%
                  | optional,
                azureFile
                  | definitions.contract."io.k8s.api.core.v1.AzureFileVolumeSource"
                  | doc m%"
                  AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
                  "%
                  | optional,
                cephfs
                  | definitions.contract."io.k8s.api.core.v1.CephFSVolumeSource"
                  | doc m%"
                  CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
                  "%
                  | optional,
                cinder
                  | definitions.contract."io.k8s.api.core.v1.CinderVolumeSource"
                  | doc m%"
                  Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                  "%
                  | optional,
                configMap
                  | definitions.contract."io.k8s.api.core.v1.ConfigMapVolumeSource"
                  | doc m%"
                  ConfigMap represents a configMap that should populate this volume
                  "%
                  | optional,
                csi
                  | definitions.contract."io.k8s.api.core.v1.CSIVolumeSource"
                  | doc m%"
                  CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
                  "%
                  | optional,
                downwardAPI
                  | definitions.contract."io.k8s.api.core.v1.DownwardAPIVolumeSource"
                  | doc m%"
                  DownwardAPI represents downward API about the pod that should populate this volume
                  "%
                  | optional,
                emptyDir
                  | definitions.contract."io.k8s.api.core.v1.EmptyDirVolumeSource"
                  | doc m%"
                  EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                  "%
                  | optional,
                ephemeral
                  | definitions.contract."io.k8s.api.core.v1.EphemeralVolumeSource"
                  | doc m%"
                  Ephemeral represents a volume that is handled by a cluster storage driver (Alpha feature). The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
                  
                  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity
                     tracking are needed,
                  c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through
                     a PersistentVolumeClaim (see EphemeralVolumeSource for more
                     information on the connection between this volume type
                     and PersistentVolumeClaim).
                  
                  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
                  
                  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
                  
                  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
                  "%
                  | optional,
                fc
                  | definitions.contract."io.k8s.api.core.v1.FCVolumeSource"
                  | doc m%"
                  FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
                  "%
                  | optional,
                flexVolume
                  | definitions.contract."io.k8s.api.core.v1.FlexVolumeSource"
                  | doc m%"
                  FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
                  "%
                  | optional,
                flocker
                  | definitions.contract."io.k8s.api.core.v1.FlockerVolumeSource"
                  | doc m%"
                  Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
                  "%
                  | optional,
                gcePersistentDisk
                  | definitions.contract."io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
                  | doc m%"
                  GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                  "%
                  | optional,
                gitRepo
                  | definitions.contract."io.k8s.api.core.v1.GitRepoVolumeSource"
                  | doc m%"
                  GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
                  "%
                  | optional,
                glusterfs
                  | definitions.contract."io.k8s.api.core.v1.GlusterfsVolumeSource"
                  | doc m%"
                  Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
                  "%
                  | optional,
                hostPath
                  | definitions.contract."io.k8s.api.core.v1.HostPathVolumeSource"
                  | doc m%"
                  HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                  "%
                  | optional,
                iscsi
                  | definitions.contract."io.k8s.api.core.v1.ISCSIVolumeSource"
                  | doc m%"
                  ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                  "%,
                nfs
                  | definitions.contract."io.k8s.api.core.v1.NFSVolumeSource"
                  | doc m%"
                  NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                  "%
                  | optional,
                persistentVolumeClaim
                  | definitions.contract."io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource"
                  | doc m%"
                  PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                  "%
                  | optional,
                photonPersistentDisk
                  | definitions.contract."io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
                  | doc m%"
                  PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
                  "%
                  | optional,
                portworxVolume
                  | definitions.contract."io.k8s.api.core.v1.PortworxVolumeSource"
                  | doc m%"
                  PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
                  "%
                  | optional,
                projected
                  | definitions.contract."io.k8s.api.core.v1.ProjectedVolumeSource"
                  | doc m%"
                  Items for all in one resources secrets, configmaps, and downward API
                  "%
                  | optional,
                quobyte
                  | definitions.contract."io.k8s.api.core.v1.QuobyteVolumeSource"
                  | doc m%"
                  Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
                  "%
                  | optional,
                rbd
                  | definitions.contract."io.k8s.api.core.v1.RBDVolumeSource"
                  | doc m%"
                  RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
                  "%
                  | optional,
                scaleIO
                  | definitions.contract."io.k8s.api.core.v1.ScaleIOVolumeSource"
                  | doc m%"
                  ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
                  "%
                  | optional,
                secret
                  | definitions.contract."io.k8s.api.core.v1.SecretVolumeSource"
                  | doc m%"
                  Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
                  "%
                  | optional,
                storageos
                  | definitions.contract."io.k8s.api.core.v1.StorageOSVolumeSource"
                  | doc m%"
                  StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
                  "%
                  | optional,
                vsphereVolume
                  | definitions.contract."io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
                  | doc m%"
                  VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.VolumeDevice"
            | doc m%"
            volumeDevice describes a mapping of a raw block device within a container.
            "%
            = {
                devicePath
                  | String
                  | doc m%"
                  devicePath is the path inside of the container that the device will be mapped to.
                  "%,
                name
                  | String
                  | doc m%"
                  name must match the name of a persistentVolumeClaim in the pod
                  "%,
                ..
              },
          "io.k8s.api.core.v1.VolumeMount"
            | doc m%"
            VolumeMount describes a mounting of a Volume within a container.
            "%
            = {
                mountPath
                  | String
                  | doc m%"
                  Path within the container at which the volume should be mounted.  Must not contain ':'.
                  "%,
                mountPropagation
                  | String
                  | doc m%"
                  mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  This must match the Name of a Volume.
                  "%,
                readOnly
                  | Bool
                  | doc m%"
                  Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
                  "%
                  | optional,
                subPath
                  | String
                  | doc m%"
                  Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
                  "%
                  | optional,
                subPathExpr
                  | String
                  | doc m%"
                  Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.VolumeNodeAffinity"
            | doc m%"
            VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
            "%
            = {
                required
                  | definitions.contract."io.k8s.api.core.v1.NodeSelector"
                  | doc m%"
                  Required specifies hard node constraints that must be met.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.VolumeProjection"
            | doc m%"
            Projection that may be projected along with other supported volume types
            "%
            = {
                configMap
                  | definitions.contract."io.k8s.api.core.v1.ConfigMapProjection"
                  | doc m%"
                  information about the configMap data to project
                  "%
                  | optional,
                downwardAPI
                  | definitions.contract."io.k8s.api.core.v1.DownwardAPIProjection"
                  | doc m%"
                  information about the downwardAPI data to project
                  "%
                  | optional,
                secret
                  | definitions.contract."io.k8s.api.core.v1.SecretProjection"
                  | doc m%"
                  information about the secret data to project
                  "%
                  | optional,
                serviceAccountToken
                  | definitions.contract."io.k8s.api.core.v1.ServiceAccountTokenProjection"
                  | doc m%"
                  information about the serviceAccountToken data to project
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
            | doc m%"
            Represents a vSphere volume resource.
            "%
            = {
                fsType
                  | String
                  | doc m%"
                  Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                  "%
                  | optional,
                storagePolicyID
                  | String
                  | doc m%"
                  Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
                  "%
                  | optional,
                storagePolicyName
                  | String
                  | doc m%"
                  Storage Policy Based Management (SPBM) profile name.
                  "%
                  | optional,
                volumePath
                  | String
                  | doc m%"
                  Path that identifies vSphere volume vmdk
                  "%,
                ..
              },
          "io.k8s.api.core.v1.WeightedPodAffinityTerm"
            | doc m%"
            The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
            "%
            = {
                podAffinityTerm
                  | definitions.contract."io.k8s.api.core.v1.PodAffinityTerm"
                  | doc m%"
                  Required. A pod affinity term, associated with the corresponding weight.
                  "%,
                weight
                  | std.number.Integer
                  | doc m%"
                  weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                  "%,
                ..
              },
          "io.k8s.api.core.v1.WindowsSecurityContextOptions"
            | doc m%"
            WindowsSecurityContextOptions contain Windows-specific options and credentials.
            "%
            = {
                gmsaCredentialSpec
                  | String
                  | doc m%"
                  GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
                  "%
                  | optional,
                gmsaCredentialSpecName
                  | String
                  | doc m%"
                  GMSACredentialSpecName is the name of the GMSA credential spec to use.
                  "%
                  | optional,
                runAsUserName
                  | String
                  | doc m%"
                  The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.discovery.v1beta1.Endpoint"
            | doc m%"
            Endpoint represents a single logical "backend" implementing a service.
            "%
            = {
                addresses
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice addressType field. Consumers must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100.
                  "%,
                conditions
                  | definitions.contract."io.k8s.api.discovery.v1beta1.EndpointConditions"
                  | doc m%"
                  conditions contains information about the current status of the endpoint.
                  "%
                  | optional,
                hostname
                  | String
                  | doc m%"
                  hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same hostname should be considered fungible (e.g. multiple A values in DNS). Must be lowercase and pass DNS Label (RFC 1123) validation.
                  "%
                  | optional,
                nodeName
                  | String
                  | doc m%"
                  nodeName represents the name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node. This field can be enabled with the EndpointSliceNodeName feature gate.
                  "%
                  | optional,
                targetRef
                  | definitions.contract."io.k8s.api.core.v1.ObjectReference"
                  | doc m%"
                  targetRef is a reference to a Kubernetes object that represents this endpoint.
                  "%
                  | optional,
                topology
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  topology contains arbitrary topology information associated with the endpoint. These key/value pairs must conform with the label format. https://kubernetes.io/docs/concepts/overview/working-with-objects/labels Topology may include a maximum of 16 key/value pairs. This includes, but is not limited to the following well known keys: * kubernetes.io/hostname: the value indicates the hostname of the node
                    where the endpoint is located. This should match the corresponding
                    node label.
                  * topology.kubernetes.io/zone: the value indicates the zone where the
                    endpoint is located. This should match the corresponding node label.
                  * topology.kubernetes.io/region: the value indicates the region where the
                    endpoint is located. This should match the corresponding node label.
                  This field is deprecated and will be removed in future api versions.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.discovery.v1beta1.EndpointConditions"
            | doc m%"
            EndpointConditions represents the current condition of an endpoint.
            "%
            = {
                ready
                  | Bool
                  | doc m%"
                  ready indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready. For compatibility reasons, ready should never be "true" for terminating endpoints.
                  "%
                  | optional,
                serving
                  | Bool
                  | doc m%"
                  serving is identical to ready except that it is set regardless of the terminating state of endpoints. This condition should be set to true for a ready endpoint that is terminating. If nil, consumers should defer to the ready condition. This field can be enabled with the EndpointSliceTerminatingCondition feature gate.
                  "%
                  | optional,
                terminating
                  | Bool
                  | doc m%"
                  terminating indicates that this endpoint is terminating. A nil value indicates an unknown state. Consumers should interpret this unknown state to mean that the endpoint is not terminating. This field can be enabled with the EndpointSliceTerminatingCondition feature gate.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.discovery.v1beta1.EndpointPort"
            | doc m%"
            EndpointPort represents a Port used by an EndpointSlice
            "%
            = {
                appProtocol
                  | String
                  | doc m%"
                  The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes service, this corresponds to the Service.ports[].name. Name must either be an empty string or pass DNS_LABEL validation: * must be no more than 63 characters long. * must consist of lower case alphanumeric characters or '-'. * must start and end with an alphanumeric character. Default is empty string.
                  "%
                  | optional,
                port
                  | std.number.Integer
                  | doc m%"
                  The port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.
                  "%
                  | optional,
                protocol
                  | String
                  | doc m%"
                  The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.discovery.v1beta1.EndpointSlice"
            | doc m%"
            EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.discovery.v1beta1.EndpointSlice",
          "io.k8s.api.discovery.v1beta1.EndpointSliceList"
            | doc m%"
            EndpointSliceList represents a list of endpoint slices
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.discovery.v1beta1.EndpointSliceList",
          "io.k8s.api.events.v1.Event"
            | doc m%"
            Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.events.v1.Event",
          "io.k8s.api.events.v1.EventList"
            | doc m%"
            EventList is a list of Event objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.events.v1.EventList",
          "io.k8s.api.events.v1.EventSeries"
            | doc m%"
            EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in "k8s.io/client-go/tools/events/event_broadcaster.go" shows how this struct is updated on heartbeats and can guide customized reporter implementations.
            "%
            = {
                count
                  | std.number.Integer
                  | doc m%"
                  count is the number of occurrences in this series up to the last heartbeat time.
                  "%,
                lastObservedTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
                  | doc m%"
                  lastObservedTime is the time when last Event from the series was seen before last heartbeat.
                  "%,
                ..
              },
          "io.k8s.api.events.v1beta1.Event"
            | doc m%"
            Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.events.v1beta1.Event",
          "io.k8s.api.events.v1beta1.EventList"
            | doc m%"
            EventList is a list of Event objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.events.v1beta1.EventList",
          "io.k8s.api.events.v1beta1.EventSeries"
            | doc m%"
            EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
            "%
            = {
                count
                  | std.number.Integer
                  | doc m%"
                  count is the number of occurrences in this series up to the last heartbeat time.
                  "%,
                lastObservedTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
                  | doc m%"
                  lastObservedTime is the time when last Event from the series was seen before last heartbeat.
                  "%,
                ..
              },
          "io.k8s.api.extensions.v1beta1.HTTPIngressPath"
            | doc m%"
            HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
            "%
            = {
                backend
                  | definitions.contract."io.k8s.api.extensions.v1beta1.IngressBackend"
                  | doc m%"
                  Backend defines the referenced service endpoint to which the traffic will be forwarded to.
                  "%,
                path
                  | String
                  | doc m%"
                  Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched.
                  "%
                  | optional,
                pathType
                  | String
                  | doc m%"
                  PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
                    done on a path element by element basis. A path element refers is the
                    list of labels in the path split by the '/' separator. A request is a
                    match for path p if every p is an element-wise prefix of p of the
                    request path. Note that if the last element of the path is a substring
                    of the last element in request path, it is not a match (e.g. /foo/bar
                    matches /foo/bar/baz, but does not match /foo/barbaz).
                  * ImplementationSpecific: Interpretation of the Path matching is up to
                    the IngressClass. Implementations can treat this as a separate PathType
                    or treat it identically to Prefix or Exact path types.
                  Implementations are required to support all path types. Defaults to ImplementationSpecific.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue"
            | doc m%"
            HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
            "%
            = {
                paths
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.extensions.v1beta1.HTTPIngressPath"
                  ])
                  | doc m%"
                  A collection of paths that map requests to backends.
                  "%,
                ..
              },
          "io.k8s.api.extensions.v1beta1.Ingress"
            | doc m%"
            Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc. DEPRECATED - This group version of Ingress is deprecated by networking.k8s.io/v1beta1 Ingress. See the release notes for more information.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.extensions.v1beta1.Ingress",
          "io.k8s.api.extensions.v1beta1.IngressBackend"
            | doc m%"
            IngressBackend describes all endpoints for a given service and port.
            "%
            = {
                resource
                  | definitions.contract."io.k8s.api.core.v1.TypedLocalObjectReference"
                  | doc m%"
                  Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified.
                  "%
                  | optional,
                serviceName
                  | String
                  | doc m%"
                  Specifies the name of the referenced service.
                  "%
                  | optional,
                servicePort
                  | definitions.contract."io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                  | doc m%"
                  Specifies the port of the referenced service.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.extensions.v1beta1.IngressList"
            | doc m%"
            IngressList is a collection of Ingress.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.extensions.v1beta1.IngressList",
          "io.k8s.api.extensions.v1beta1.IngressRule"
            | doc m%"
            IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
            "%
            = {
                host
                  | String
                  | doc m%"
                  Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
                     the IP in the Spec of the parent Ingress.
                  2. The `:` delimiter is not respected because ports are not allowed.
                  	  Currently the port of an Ingress is implicitly :80 for http and
                  	  :443 for https.
                  Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
                  
                  Host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
                  "%
                  | optional,
                http
                  | definitions.contract."io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue"
                  | optional,
                ..
              },
          "io.k8s.api.extensions.v1beta1.IngressSpec"
            | doc m%"
            IngressSpec describes the Ingress the user wishes to exist.
            "%
            = {
                backend
                  | definitions.contract."io.k8s.api.extensions.v1beta1.IngressBackend"
                  | doc m%"
                  A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
                  "%
                  | optional,
                ingressClassName
                  | String
                  | doc m%"
                  IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
                  "%
                  | optional,
                rules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.extensions.v1beta1.IngressRule"
                  ])
                  | doc m%"
                  A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
                  "%
                  | optional,
                tls
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.extensions.v1beta1.IngressTLS"
                  ])
                  | doc m%"
                  TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.extensions.v1beta1.IngressStatus"
            | doc m%"
            IngressStatus describe the current state of the Ingress.
            "%
            = {
                loadBalancer
                  | definitions.contract."io.k8s.api.core.v1.LoadBalancerStatus"
                  | doc m%"
                  LoadBalancer contains the current status of the load-balancer.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.extensions.v1beta1.IngressTLS"
            | doc m%"
            IngressTLS describes the transport layer security associated with an Ingress.
            "%
            = {
                hosts
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
                  "%
                  | optional,
                secretName
                  | String
                  | doc m%"
                  SecretName is the name of the secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.FlowDistinguisherMethod"
            | doc m%"
            FlowDistinguisherMethod specifies the method of a flow distinguisher.
            "%
            = {
                type
                  | String
                  | doc m%"
                  `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.FlowSchema"
            | doc m%"
            FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.FlowSchema",
          "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaCondition"
            | doc m%"
            FlowSchemaCondition describes conditions for a FlowSchema.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  `lastTransitionTime` is the last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  `message` is a human-readable message indicating details about last transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  `status` is the status of the condition. Can be True, False, Unknown. Required.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  `type` is the type of the condition. Required.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaList"
            | doc m%"
            FlowSchemaList is a list of FlowSchema objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.FlowSchemaList",
          "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaSpec"
            | doc m%"
            FlowSchemaSpec describes how the FlowSchema's specification looks like.
            "%
            = {
                distinguisherMethod
                  | definitions.contract."io.k8s.api.flowcontrol.v1alpha1.FlowDistinguisherMethod"
                  | doc m%"
                  `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
                  "%
                  | optional,
                matchingPrecedence
                  | std.number.Integer
                  | doc m%"
                  `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
                  "%
                  | optional,
                priorityLevelConfiguration
                  | definitions.contract."io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationReference"
                  | doc m%"
                  `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
                  "%,
                rules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.PolicyRulesWithSubjects"
                  ])
                  | doc m%"
                  `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaStatus"
            | doc m%"
            FlowSchemaStatus represents the current state of a FlowSchema.
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.FlowSchemaCondition"
                  ])
                  | doc m%"
                  `conditions` is a list of the current states of FlowSchema.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.GroupSubject"
            | doc m%"
            GroupSubject holds detailed information for group-kind subject.
            "%
            = {
                name
                  | String
                  | doc m%"
                  name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.LimitResponse"
            | doc m%"
            LimitResponse defines how to handle requests that can not be executed right now.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.LimitResponse",
          "io.k8s.api.flowcontrol.v1alpha1.LimitedPriorityLevelConfiguration"
            | doc m%"
            LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
             * How are requests for this priority level limited?
             * What should be done with requests that exceed the limit?
            "%
            = {
                assuredConcurrencyShares
                  | std.number.Integer
                  | doc m%"
                  `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
                  
                              ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
                  
                  bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
                  "%
                  | optional,
                limitResponse
                  | definitions.contract."io.k8s.api.flowcontrol.v1alpha1.LimitResponse"
                  | doc m%"
                  `limitResponse` indicates what to do with requests that can not be executed right now
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.NonResourcePolicyRule"
            | doc m%"
            NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
            "%
            = {
                nonResourceURLs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
                    - "/healthz" is legal
                    - "/hea*" is illegal
                    - "/hea" is legal but matches nothing
                    - "/hea/*" also matches nothing
                    - "/healthz/*" matches all per-component health checks.
                  "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
                  "%,
                verbs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.PolicyRulesWithSubjects"
            | doc m%"
            PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
            "%
            = {
                nonResourceRules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.NonResourcePolicyRule"
                  ])
                  | doc m%"
                  `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
                  "%
                  | optional,
                resourceRules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.ResourcePolicyRule"
                  ])
                  | doc m%"
                  `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
                  "%
                  | optional,
                subjects
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.Subject"
                  ])
                  | doc m%"
                  subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration"
            | doc m%"
            PriorityLevelConfiguration represents the configuration of a priority level.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration",
          "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationCondition"
            | doc m%"
            PriorityLevelConfigurationCondition defines the condition of priority level.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  `lastTransitionTime` is the last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  `message` is a human-readable message indicating details about last transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  `status` is the status of the condition. Can be True, False, Unknown. Required.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  `type` is the type of the condition. Required.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationList"
            | doc m%"
            PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationList",
          "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationReference"
            | doc m%"
            PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
            "%
            = {
                name
                  | String
                  | doc m%"
                  `name` is the name of the priority level configuration being referenced Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec"
            | doc m%"
            PriorityLevelConfigurationSpec specifies the configuration of a priority level.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec",
          "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationStatus"
            | doc m%"
            PriorityLevelConfigurationStatus represents the current state of a "request-priority".
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationCondition"
                  ])
                  | doc m%"
                  `conditions` is the current state of "request-priority".
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.QueuingConfiguration"
            | doc m%"
            QueuingConfiguration holds the configuration parameters for queuing
            "%
            = {
                handSize
                  | std.number.Integer
                  | doc m%"
                  `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
                  "%
                  | optional,
                queueLengthLimit
                  | std.number.Integer
                  | doc m%"
                  `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
                  "%
                  | optional,
                queues
                  | std.number.Integer
                  | doc m%"
                  `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.ResourcePolicyRule"
            | doc m%"
            ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.
            "%
            = {
                apiGroups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
                  "%,
                clusterScope
                  | Bool
                  | doc m%"
                  `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
                  "%
                  | optional,
                namespaces
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
                  "%
                  | optional,
                resources
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
                  "%,
                verbs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.ServiceAccountSubject"
            | doc m%"
            ServiceAccountSubject holds detailed information for service-account-kind subject.
            "%
            = {
                name
                  | String
                  | doc m%"
                  `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
                  "%,
                namespace
                  | String
                  | doc m%"
                  `namespace` is the namespace of matching ServiceAccount objects. Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1alpha1.Subject"
            | doc m%"
            Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.Subject",
          "io.k8s.api.flowcontrol.v1alpha1.UserSubject"
            | doc m%"
            UserSubject holds detailed information for user-kind subject.
            "%
            = {
                name
                  | String
                  | doc m%"
                  `name` is the username that matches, or "*" to match all usernames. Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.FlowDistinguisherMethod"
            | doc m%"
            FlowDistinguisherMethod specifies the method of a flow distinguisher.
            "%
            = {
                type
                  | String
                  | doc m%"
                  `type` is the type of flow distinguisher method The supported types are "ByUser" and "ByNamespace". Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.FlowSchema"
            | doc m%"
            FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1beta1.FlowSchema",
          "io.k8s.api.flowcontrol.v1beta1.FlowSchemaCondition"
            | doc m%"
            FlowSchemaCondition describes conditions for a FlowSchema.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  `lastTransitionTime` is the last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  `message` is a human-readable message indicating details about last transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  `status` is the status of the condition. Can be True, False, Unknown. Required.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  `type` is the type of the condition. Required.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.FlowSchemaList"
            | doc m%"
            FlowSchemaList is a list of FlowSchema objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1beta1.FlowSchemaList",
          "io.k8s.api.flowcontrol.v1beta1.FlowSchemaSpec"
            | doc m%"
            FlowSchemaSpec describes how the FlowSchema's specification looks like.
            "%
            = {
                distinguisherMethod
                  | definitions.contract."io.k8s.api.flowcontrol.v1beta1.FlowDistinguisherMethod"
                  | doc m%"
                  `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
                  "%
                  | optional,
                matchingPrecedence
                  | std.number.Integer
                  | doc m%"
                  `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.
                  "%
                  | optional,
                priorityLevelConfiguration
                  | definitions.contract."io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationReference"
                  | doc m%"
                  `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required.
                  "%,
                rules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.PolicyRulesWithSubjects"
                  ])
                  | doc m%"
                  `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.FlowSchemaStatus"
            | doc m%"
            FlowSchemaStatus represents the current state of a FlowSchema.
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.FlowSchemaCondition"
                  ])
                  | doc m%"
                  `conditions` is a list of the current states of FlowSchema.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.GroupSubject"
            | doc m%"
            GroupSubject holds detailed information for group-kind subject.
            "%
            = {
                name
                  | String
                  | doc m%"
                  name is the user group that matches, or "*" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.LimitResponse"
            | doc m%"
            LimitResponse defines how to handle requests that can not be executed right now.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1beta1.LimitResponse",
          "io.k8s.api.flowcontrol.v1beta1.LimitedPriorityLevelConfiguration"
            | doc m%"
            LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
             * How are requests for this priority level limited?
             * What should be done with requests that exceed the limit?
            "%
            = {
                assuredConcurrencyShares
                  | std.number.Integer
                  | doc m%"
                  `assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be exeucting at a given time.  ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) --- the number of requests that may be executing at a time --- for each such priority level:
                  
                              ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
                  
                  bigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL). This field has a default value of 30.
                  "%
                  | optional,
                limitResponse
                  | definitions.contract."io.k8s.api.flowcontrol.v1beta1.LimitResponse"
                  | doc m%"
                  `limitResponse` indicates what to do with requests that can not be executed right now
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.NonResourcePolicyRule"
            | doc m%"
            NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
            "%
            = {
                nonResourceURLs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  `nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:
                    - "/healthz" is legal
                    - "/hea*" is illegal
                    - "/hea" is legal but matches nothing
                    - "/hea/*" also matches nothing
                    - "/healthz/*" matches all per-component health checks.
                  "*" matches all non-resource urls. if it is present, it must be the only entry. Required.
                  "%,
                verbs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs. If it is present, it must be the only entry. Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.PolicyRulesWithSubjects"
            | doc m%"
            PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
            "%
            = {
                nonResourceRules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.NonResourcePolicyRule"
                  ])
                  | doc m%"
                  `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.
                  "%
                  | optional,
                resourceRules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.ResourcePolicyRule"
                  ])
                  | doc m%"
                  `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
                  "%
                  | optional,
                subjects
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.Subject"
                  ])
                  | doc m%"
                  subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfiguration"
            | doc m%"
            PriorityLevelConfiguration represents the configuration of a priority level.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfiguration",
          "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationCondition"
            | doc m%"
            PriorityLevelConfigurationCondition defines the condition of priority level.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  `lastTransitionTime` is the last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  `message` is a human-readable message indicating details about last transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  `status` is the status of the condition. Can be True, False, Unknown. Required.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  `type` is the type of the condition. Required.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationList"
            | doc m%"
            PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationList",
          "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationReference"
            | doc m%"
            PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
            "%
            = {
                name
                  | String
                  | doc m%"
                  `name` is the name of the priority level configuration being referenced Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationSpec"
            | doc m%"
            PriorityLevelConfigurationSpec specifies the configuration of a priority level.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationSpec",
          "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationStatus"
            | doc m%"
            PriorityLevelConfigurationStatus represents the current state of a "request-priority".
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationCondition"
                  ])
                  | doc m%"
                  `conditions` is the current state of "request-priority".
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.QueuingConfiguration"
            | doc m%"
            QueuingConfiguration holds the configuration parameters for queuing
            "%
            = {
                handSize
                  | std.number.Integer
                  | doc m%"
                  `handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.
                  "%
                  | optional,
                queueLengthLimit
                  | std.number.Integer
                  | doc m%"
                  `queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.
                  "%
                  | optional,
                queues
                  | std.number.Integer
                  | doc m%"
                  `queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.ResourcePolicyRule"
            | doc m%"
            ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.
            "%
            = {
                apiGroups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  `apiGroups` is a list of matching API groups and may not be empty. "*" matches all API groups and, if present, must be the only entry. Required.
                  "%,
                clusterScope
                  | Bool
                  | doc m%"
                  `clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.
                  "%
                  | optional,
                namespaces
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  `namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains "*".  Note that "*" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.
                  "%
                  | optional,
                resources
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  `resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ "services", "nodes/status" ].  This list may not be empty. "*" matches all resources and, if present, must be the only entry. Required.
                  "%,
                verbs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  `verbs` is a list of matching verbs and may not be empty. "*" matches all verbs and, if present, must be the only entry. Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.ServiceAccountSubject"
            | doc m%"
            ServiceAccountSubject holds detailed information for service-account-kind subject.
            "%
            = {
                name
                  | String
                  | doc m%"
                  `name` is the name of matching ServiceAccount objects, or "*" to match regardless of name. Required.
                  "%,
                namespace
                  | String
                  | doc m%"
                  `namespace` is the namespace of matching ServiceAccount objects. Required.
                  "%,
                ..
              },
          "io.k8s.api.flowcontrol.v1beta1.Subject"
            | doc m%"
            Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.flowcontrol.v1beta1.Subject",
          "io.k8s.api.flowcontrol.v1beta1.UserSubject"
            | doc m%"
            UserSubject holds detailed information for user-kind subject.
            "%
            = {
                name
                  | String
                  | doc m%"
                  `name` is the username that matches, or "*" to match all usernames. Required.
                  "%,
                ..
              },
          "io.k8s.api.networking.v1.HTTPIngressPath"
            | doc m%"
            HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
            "%
            = {
                backend
                  | definitions.contract."io.k8s.api.networking.v1.IngressBackend"
                  | doc m%"
                  Backend defines the referenced service endpoint to which the traffic will be forwarded to.
                  "%,
                path
                  | String
                  | doc m%"
                  Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched.
                  "%
                  | optional,
                pathType
                  | String
                  | doc m%"
                  PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
                    done on a path element by element basis. A path element refers is the
                    list of labels in the path split by the '/' separator. A request is a
                    match for path p if every p is an element-wise prefix of p of the
                    request path. Note that if the last element of the path is a substring
                    of the last element in request path, it is not a match (e.g. /foo/bar
                    matches /foo/bar/baz, but does not match /foo/barbaz).
                  * ImplementationSpecific: Interpretation of the Path matching is up to
                    the IngressClass. Implementations can treat this as a separate PathType
                    or treat it identically to Prefix or Exact path types.
                  Implementations are required to support all path types.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.HTTPIngressRuleValue"
            | doc m%"
            HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
            "%
            = {
                paths
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.networking.v1.HTTPIngressPath"
                  ])
                  | doc m%"
                  A collection of paths that map requests to backends.
                  "%,
                ..
              },
          "io.k8s.api.networking.v1.IPBlock"
            | doc m%"
            IPBlock describes a particular CIDR (Ex. "192.168.1.1/24","2001:db9::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
            "%
            = {
                cidr
                  | String
                  | doc m%"
                  CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
                  "%,
                except
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.Ingress"
            | doc m%"
            Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.networking.v1.Ingress",
          "io.k8s.api.networking.v1.IngressBackend"
            | doc m%"
            IngressBackend describes all endpoints for a given service and port.
            "%
            = {
                resource
                  | definitions.contract."io.k8s.api.core.v1.TypedLocalObjectReference"
                  | doc m%"
                  Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".
                  "%
                  | optional,
                service
                  | definitions.contract."io.k8s.api.networking.v1.IngressServiceBackend"
                  | doc m%"
                  Service references a Service as a Backend. This is a mutually exclusive setting with "Resource".
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.IngressClass"
            | doc m%"
            IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.networking.v1.IngressClass",
          "io.k8s.api.networking.v1.IngressClassList"
            | doc m%"
            IngressClassList is a collection of IngressClasses.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.networking.v1.IngressClassList",
          "io.k8s.api.networking.v1.IngressClassSpec"
            | doc m%"
            IngressClassSpec provides information about the class of an Ingress.
            "%
            = {
                controller
                  | String
                  | doc m%"
                  Controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
                  "%
                  | optional,
                parameters
                  | definitions.contract."io.k8s.api.core.v1.TypedLocalObjectReference"
                  | doc m%"
                  Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.IngressList"
            | doc m%"
            IngressList is a collection of Ingress.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.networking.v1.IngressList",
          "io.k8s.api.networking.v1.IngressRule"
            | doc m%"
            IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
            "%
            = {
                host
                  | String
                  | doc m%"
                  Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
                     the IP in the Spec of the parent Ingress.
                  2. The `:` delimiter is not respected because ports are not allowed.
                  	  Currently the port of an Ingress is implicitly :80 for http and
                  	  :443 for https.
                  Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
                  
                  Host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
                  "%
                  | optional,
                http
                  | definitions.contract."io.k8s.api.networking.v1.HTTPIngressRuleValue"
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.IngressServiceBackend"
            | doc m%"
            IngressServiceBackend references a Kubernetes Service as a Backend.
            "%
            = {
                name
                  | String
                  | doc m%"
                  Name is the referenced service. The service must exist in the same namespace as the Ingress object.
                  "%,
                port
                  | definitions.contract."io.k8s.api.networking.v1.ServiceBackendPort"
                  | doc m%"
                  Port of the referenced service. A port name or port number is required for a IngressServiceBackend.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.IngressSpec"
            | doc m%"
            IngressSpec describes the Ingress the user wishes to exist.
            "%
            = {
                defaultBackend
                  | definitions.contract."io.k8s.api.networking.v1.IngressBackend"
                  | doc m%"
                  DefaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
                  "%
                  | optional,
                ingressClassName
                  | String
                  | doc m%"
                  IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
                  "%
                  | optional,
                rules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.networking.v1.IngressRule"
                  ])
                  | doc m%"
                  A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
                  "%
                  | optional,
                tls
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.networking.v1.IngressTLS"
                  ])
                  | doc m%"
                  TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.IngressStatus"
            | doc m%"
            IngressStatus describe the current state of the Ingress.
            "%
            = {
                loadBalancer
                  | definitions.contract."io.k8s.api.core.v1.LoadBalancerStatus"
                  | doc m%"
                  LoadBalancer contains the current status of the load-balancer.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.IngressTLS"
            | doc m%"
            IngressTLS describes the transport layer security associated with an Ingress.
            "%
            = {
                hosts
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
                  "%
                  | optional,
                secretName
                  | String
                  | doc m%"
                  SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.NetworkPolicy"
            | doc m%"
            NetworkPolicy describes what network traffic is allowed for a set of Pods
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.networking.v1.NetworkPolicy",
          "io.k8s.api.networking.v1.NetworkPolicyEgressRule"
            | doc m%"
            NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
            "%
            = {
                ports
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.networking.v1.NetworkPolicyPort"
                  ])
                  | doc m%"
                  List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
                  "%
                  | optional,
                to
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.networking.v1.NetworkPolicyPeer"
                  ])
                  | doc m%"
                  List of destinations for outgoing traffic of pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.NetworkPolicyIngressRule"
            | doc m%"
            NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
            "%
            = {
                from
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.networking.v1.NetworkPolicyPeer"
                  ])
                  | doc m%"
                  List of sources which should be able to access the pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the from list.
                  "%
                  | optional,
                ports
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.networking.v1.NetworkPolicyPort"
                  ])
                  | doc m%"
                  List of ports which should be made accessible on the pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.NetworkPolicyList"
            | doc m%"
            NetworkPolicyList is a list of NetworkPolicy objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.networking.v1.NetworkPolicyList",
          "io.k8s.api.networking.v1.NetworkPolicyPeer"
            | doc m%"
            NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
            "%
            = {
                ipBlock
                  | definitions.contract."io.k8s.api.networking.v1.IPBlock"
                  | doc m%"
                  IPBlock defines policy on a particular IPBlock. If this field is set then neither of the other fields can be.
                  "%
                  | optional,
                namespaceSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  Selects Namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces.
                  
                  If PodSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects all Pods in the Namespaces selected by NamespaceSelector.
                  "%
                  | optional,
                podSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods.
                  
                  If NamespaceSelector is also set, then the NetworkPolicyPeer as a whole selects the Pods matching PodSelector in the Namespaces selected by NamespaceSelector. Otherwise it selects the Pods matching PodSelector in the policy's own Namespace.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.NetworkPolicyPort"
            | doc m%"
            NetworkPolicyPort describes a port to allow traffic on
            "%
            = {
                port
                  | definitions.contract."io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                  | doc m%"
                  The port on the given protocol. This can either be a numerical or named port on a pod. If this field is not provided, this matches all port names and numbers.
                  "%
                  | optional,
                protocol
                  | String
                  | doc m%"
                  The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.NetworkPolicySpec"
            | doc m%"
            NetworkPolicySpec provides the specification of a NetworkPolicy
            "%
            = {
                egress
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.networking.v1.NetworkPolicyEgressRule"
                  ])
                  | doc m%"
                  List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
                  "%
                  | optional,
                ingress
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.networking.v1.NetworkPolicyIngressRule"
                  ])
                  | doc m%"
                  List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
                  "%
                  | optional,
                podSelector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
                  "%,
                policyTypes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  List of rule types that the NetworkPolicy relates to. Valid options are "Ingress", "Egress", or "Ingress,Egress". If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1.ServiceBackendPort"
            | doc m%"
            ServiceBackendPort is the service port being referenced.
            "%
            = {
                name
                  | String
                  | doc m%"
                  Name is the name of the port on the Service. This is a mutually exclusive setting with "Number".
                  "%
                  | optional,
                number
                  | std.number.Integer
                  | doc m%"
                  Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1beta1.HTTPIngressPath"
            | doc m%"
            HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
            "%
            = {
                backend
                  | definitions.contract."io.k8s.api.networking.v1beta1.IngressBackend"
                  | doc m%"
                  Backend defines the referenced service endpoint to which the traffic will be forwarded to.
                  "%,
                path
                  | String
                  | doc m%"
                  Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/'. When unspecified, all paths from incoming requests are matched.
                  "%
                  | optional,
                pathType
                  | String
                  | doc m%"
                  PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
                    done on a path element by element basis. A path element refers is the
                    list of labels in the path split by the '/' separator. A request is a
                    match for path p if every p is an element-wise prefix of p of the
                    request path. Note that if the last element of the path is a substring
                    of the last element in request path, it is not a match (e.g. /foo/bar
                    matches /foo/bar/baz, but does not match /foo/barbaz).
                  * ImplementationSpecific: Interpretation of the Path matching is up to
                    the IngressClass. Implementations can treat this as a separate PathType
                    or treat it identically to Prefix or Exact path types.
                  Implementations are required to support all path types. Defaults to ImplementationSpecific.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1beta1.HTTPIngressRuleValue"
            | doc m%"
            HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
            "%
            = {
                paths
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.networking.v1beta1.HTTPIngressPath"
                  ])
                  | doc m%"
                  A collection of paths that map requests to backends.
                  "%,
                ..
              },
          "io.k8s.api.networking.v1beta1.Ingress"
            | doc m%"
            Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.networking.v1beta1.Ingress",
          "io.k8s.api.networking.v1beta1.IngressBackend"
            | doc m%"
            IngressBackend describes all endpoints for a given service and port.
            "%
            = {
                resource
                  | definitions.contract."io.k8s.api.core.v1.TypedLocalObjectReference"
                  | doc m%"
                  Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, serviceName and servicePort must not be specified.
                  "%
                  | optional,
                serviceName
                  | String
                  | doc m%"
                  Specifies the name of the referenced service.
                  "%
                  | optional,
                servicePort
                  | definitions.contract."io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                  | doc m%"
                  Specifies the port of the referenced service.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1beta1.IngressClass"
            | doc m%"
            IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.networking.v1beta1.IngressClass",
          "io.k8s.api.networking.v1beta1.IngressClassList"
            | doc m%"
            IngressClassList is a collection of IngressClasses.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.networking.v1beta1.IngressClassList",
          "io.k8s.api.networking.v1beta1.IngressClassSpec"
            | doc m%"
            IngressClassSpec provides information about the class of an Ingress.
            "%
            = {
                controller
                  | String
                  | doc m%"
                  Controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
                  "%
                  | optional,
                parameters
                  | definitions.contract."io.k8s.api.core.v1.TypedLocalObjectReference"
                  | doc m%"
                  Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1beta1.IngressList"
            | doc m%"
            IngressList is a collection of Ingress.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.networking.v1beta1.IngressList",
          "io.k8s.api.networking.v1beta1.IngressRule"
            | doc m%"
            IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
            "%
            = {
                host
                  | String
                  | doc m%"
                  Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
                     the IP in the Spec of the parent Ingress.
                  2. The `:` delimiter is not respected because ports are not allowed.
                  	  Currently the port of an Ingress is implicitly :80 for http and
                  	  :443 for https.
                  Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
                  
                  Host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
                  "%
                  | optional,
                http
                  | definitions.contract."io.k8s.api.networking.v1beta1.HTTPIngressRuleValue"
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1beta1.IngressSpec"
            | doc m%"
            IngressSpec describes the Ingress the user wishes to exist.
            "%
            = {
                backend
                  | definitions.contract."io.k8s.api.networking.v1beta1.IngressBackend"
                  | doc m%"
                  A default backend capable of servicing requests that don't match any rule. At least one of 'backend' or 'rules' must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
                  "%
                  | optional,
                ingressClassName
                  | String
                  | doc m%"
                  IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
                  "%
                  | optional,
                rules
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.networking.v1beta1.IngressRule"
                  ])
                  | doc m%"
                  A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
                  "%
                  | optional,
                tls
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.networking.v1beta1.IngressTLS"
                  ])
                  | doc m%"
                  TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1beta1.IngressStatus"
            | doc m%"
            IngressStatus describe the current state of the Ingress.
            "%
            = {
                loadBalancer
                  | definitions.contract."io.k8s.api.core.v1.LoadBalancerStatus"
                  | doc m%"
                  LoadBalancer contains the current status of the load-balancer.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.networking.v1beta1.IngressTLS"
            | doc m%"
            IngressTLS describes the transport layer security associated with an Ingress.
            "%
            = {
                hosts
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
                  "%
                  | optional,
                secretName
                  | String
                  | doc m%"
                  SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.node.v1.Overhead"
            | doc m%"
            Overhead structure represents the resource overhead associated with running a pod.
            "%
            = {
                podFixed
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  PodFixed represents the fixed resource overhead associated with running a pod.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.node.v1.RuntimeClass"
            | doc m%"
            RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://kubernetes.io/docs/concepts/containers/runtime-class/
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.node.v1.RuntimeClass",
          "io.k8s.api.node.v1.RuntimeClassList"
            | doc m%"
            RuntimeClassList is a list of RuntimeClass objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.node.v1.RuntimeClassList",
          "io.k8s.api.node.v1.Scheduling"
            | doc m%"
            Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
            "%
            = {
                nodeSelector
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
                  "%
                  | optional,
                tolerations
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Toleration"
                  ])
                  | doc m%"
                  tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.node.v1alpha1.Overhead"
            | doc m%"
            Overhead structure represents the resource overhead associated with running a pod.
            "%
            = {
                podFixed
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  PodFixed represents the fixed resource overhead associated with running a pod.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.node.v1alpha1.RuntimeClass"
            | doc m%"
            RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.node.v1alpha1.RuntimeClass",
          "io.k8s.api.node.v1alpha1.RuntimeClassList"
            | doc m%"
            RuntimeClassList is a list of RuntimeClass objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.node.v1alpha1.RuntimeClassList",
          "io.k8s.api.node.v1alpha1.RuntimeClassSpec"
            | doc m%"
            RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters that are required to describe the RuntimeClass to the Container Runtime Interface (CRI) implementation, as well as any other components that need to understand how the pod will be run. The RuntimeClassSpec is immutable.
            "%
            = {
                overhead
                  | definitions.contract."io.k8s.api.node.v1alpha1.Overhead"
                  | doc m%"
                  Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. For more details, see https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the PodOverhead feature.
                  "%
                  | optional,
                runtimeHandler
                  | String
                  | doc m%"
                  RuntimeHandler specifies the underlying runtime and configuration that the CRI implementation will use to handle pods of this class. The possible values are specific to the node & CRI configuration.  It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called "runc" might specify that the runc OCI runtime (using native Linux containers) will be used to run the containers in a pod. The RuntimeHandler must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.
                  "%,
                scheduling
                  | definitions.contract."io.k8s.api.node.v1alpha1.Scheduling"
                  | doc m%"
                  Scheduling holds the scheduling constraints to ensure that pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.node.v1alpha1.Scheduling"
            | doc m%"
            Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
            "%
            = {
                nodeSelector
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
                  "%
                  | optional,
                tolerations
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Toleration"
                  ])
                  | doc m%"
                  tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.node.v1beta1.Overhead"
            | doc m%"
            Overhead structure represents the resource overhead associated with running a pod.
            "%
            = {
                podFixed
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                  ])
                  | doc m%"
                  PodFixed represents the fixed resource overhead associated with running a pod.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.node.v1beta1.RuntimeClass"
            | doc m%"
            RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.node.v1beta1.RuntimeClass",
          "io.k8s.api.node.v1beta1.RuntimeClassList"
            | doc m%"
            RuntimeClassList is a list of RuntimeClass objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.node.v1beta1.RuntimeClassList",
          "io.k8s.api.node.v1beta1.Scheduling"
            | doc m%"
            Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
            "%
            = {
                nodeSelector
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  nodeSelector lists labels that must be present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass nodeSelector is merged with a pod's existing nodeSelector. Any conflicts will cause the pod to be rejected in admission.
                  "%
                  | optional,
                tolerations
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.core.v1.Toleration"
                  ])
                  | doc m%"
                  tolerations are appended (excluding duplicates) to pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the pod and the RuntimeClass.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.policy.v1beta1.AllowedCSIDriver"
            | doc m%"
            AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.
            "%
            = {
                name
                  | String
                  | doc m%"
                  Name is the registered name of the CSI driver
                  "%,
                ..
              },
          "io.k8s.api.policy.v1beta1.AllowedFlexVolume"
            | doc m%"
            AllowedFlexVolume represents a single Flexvolume that is allowed to be used.
            "%
            = {
                driver
                  | String
                  | doc m%"
                  driver is the name of the Flexvolume driver.
                  "%,
                ..
              },
          "io.k8s.api.policy.v1beta1.AllowedHostPath"
            | doc m%"
            AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.
            "%
            = {
                pathPrefix
                  | String
                  | doc m%"
                  pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
                  
                  Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
                  "%
                  | optional,
                readOnly
                  | Bool
                  | doc m%"
                  when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.policy.v1beta1.Eviction"
            | doc m%"
            Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.policy.v1beta1.Eviction",
          "io.k8s.api.policy.v1beta1.FSGroupStrategyOptions"
            | doc m%"
            FSGroupStrategyOptions defines the strategy type and options used to create the strategy.
            "%
            = {
                ranges
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.policy.v1beta1.IDRange"
                  ])
                  | doc m%"
                  ranges are the allowed ranges of fs groups.  If you would like to force a single fs group then supply a single range with the same start and end. Required for MustRunAs.
                  "%
                  | optional,
                rule
                  | String
                  | doc m%"
                  rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.policy.v1beta1.HostPortRange"
            | doc m%"
            HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.
            "%
            = {
                max
                  | std.number.Integer
                  | doc m%"
                  max is the end of the range, inclusive.
                  "%,
                min
                  | std.number.Integer
                  | doc m%"
                  min is the start of the range, inclusive.
                  "%,
                ..
              },
          "io.k8s.api.policy.v1beta1.IDRange"
            | doc m%"
            IDRange provides a min/max of an allowed range of IDs.
            "%
            = {
                max
                  | std.number.Integer
                  | doc m%"
                  max is the end of the range, inclusive.
                  "%,
                min
                  | std.number.Integer
                  | doc m%"
                  min is the start of the range, inclusive.
                  "%,
                ..
              },
          "io.k8s.api.policy.v1beta1.PodDisruptionBudget"
            | doc m%"
            PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.policy.v1beta1.PodDisruptionBudget",
          "io.k8s.api.policy.v1beta1.PodDisruptionBudgetList"
            | doc m%"
            PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.policy.v1beta1.PodDisruptionBudgetList",
          "io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec"
            | doc m%"
            PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
            "%
            = {
                maxUnavailable
                  | definitions.contract."io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                  | doc m%"
                  An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
                  "%
                  | optional,
                minAvailable
                  | definitions.contract."io.k8s.apimachinery.pkg.util.intstr.IntOrString"
                  | doc m%"
                  An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
                  "%
                  | optional,
                selector
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  | doc m%"
                  Label query over pods whose evictions are managed by the disruption budget.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus"
            | doc m%"
            PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
            "%
            = {
                currentHealthy
                  | std.number.Integer
                  | doc m%"
                  current number of healthy pods
                  "%,
                desiredHealthy
                  | std.number.Integer
                  | doc m%"
                  minimum desired number of healthy pods
                  "%,
                disruptedPods
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  ])
                  | doc m%"
                  DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
                  "%
                  | optional,
                disruptionsAllowed
                  | std.number.Integer
                  | doc m%"
                  Number of pod disruptions that are currently allowed.
                  "%,
                expectedPods
                  | std.number.Integer
                  | doc m%"
                  total number of pods counted by this disruption budget
                  "%,
                observedGeneration
                  | std.number.Integer
                  | doc m%"
                  Most recent generation observed when updating this PDB status. DisruptionsAllowed and other status information is valid only if observedGeneration equals to PDB's object generation.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.policy.v1beta1.PodSecurityPolicy"
            | doc m%"
            PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.policy.v1beta1.PodSecurityPolicy",
          "io.k8s.api.policy.v1beta1.PodSecurityPolicyList"
            | doc m%"
            PodSecurityPolicyList is a list of PodSecurityPolicy objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.policy.v1beta1.PodSecurityPolicyList",
          "io.k8s.api.policy.v1beta1.PodSecurityPolicySpec"
            | doc m%"
            PodSecurityPolicySpec defines the policy enforced.
            "%
            = {
                allowPrivilegeEscalation
                  | Bool
                  | doc m%"
                  allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
                  "%
                  | optional,
                allowedCSIDrivers
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.policy.v1beta1.AllowedCSIDriver"
                  ])
                  | doc m%"
                  AllowedCSIDrivers is an allowlist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is a beta field, and is only honored if the API server enables the CSIInlineVolume feature gate.
                  "%
                  | optional,
                allowedCapabilities
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
                  "%
                  | optional,
                allowedFlexVolumes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.policy.v1beta1.AllowedFlexVolume"
                  ])
                  | doc m%"
                  allowedFlexVolumes is an allowlist of Flexvolumes.  Empty or nil indicates that all Flexvolumes may be used.  This parameter is effective only when the usage of the Flexvolumes is allowed in the "volumes" field.
                  "%
                  | optional,
                allowedHostPaths
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.policy.v1beta1.AllowedHostPath"
                  ])
                  | doc m%"
                  allowedHostPaths is an allowlist of host paths. Empty indicates that all host paths may be used.
                  "%
                  | optional,
                allowedProcMountTypes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  AllowedProcMountTypes is an allowlist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
                  "%
                  | optional,
                allowedUnsafeSysctls
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to allowlist all allowed unsafe sysctls explicitly to avoid rejection.
                  
                  Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
                  "%
                  | optional,
                defaultAddCapabilities
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
                  "%
                  | optional,
                defaultAllowPrivilegeEscalation
                  | Bool
                  | doc m%"
                  defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
                  "%
                  | optional,
                forbiddenSysctls
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
                  
                  Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
                  "%
                  | optional,
                fsGroup
                  | definitions.contract."io.k8s.api.policy.v1beta1.FSGroupStrategyOptions"
                  | doc m%"
                  fsGroup is the strategy that will dictate what fs group is used by the SecurityContext.
                  "%,
                hostIPC
                  | Bool
                  | doc m%"
                  hostIPC determines if the policy allows the use of HostIPC in the pod spec.
                  "%
                  | optional,
                hostNetwork
                  | Bool
                  | doc m%"
                  hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
                  "%
                  | optional,
                hostPID
                  | Bool
                  | doc m%"
                  hostPID determines if the policy allows the use of HostPID in the pod spec.
                  "%
                  | optional,
                hostPorts
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.policy.v1beta1.HostPortRange"
                  ])
                  | doc m%"
                  hostPorts determines which host port ranges are allowed to be exposed.
                  "%
                  | optional,
                privileged
                  | Bool
                  | doc m%"
                  privileged determines if a pod can request to be run as privileged.
                  "%
                  | optional,
                readOnlyRootFilesystem
                  | Bool
                  | doc m%"
                  readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
                  "%
                  | optional,
                requiredDropCapabilities
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
                  "%
                  | optional,
                runAsGroup
                  | definitions.contract."io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions"
                  | doc m%"
                  RunAsGroup is the strategy that will dictate the allowable RunAsGroup values that may be set. If this field is omitted, the pod's RunAsGroup can take any value. This field requires the RunAsGroup feature gate to be enabled.
                  "%
                  | optional,
                runAsUser
                  | definitions.contract."io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions"
                  | doc m%"
                  runAsUser is the strategy that will dictate the allowable RunAsUser values that may be set.
                  "%,
                runtimeClass
                  | definitions.contract."io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions"
                  | doc m%"
                  runtimeClass is the strategy that will dictate the allowable RuntimeClasses for a pod. If this field is omitted, the pod's runtimeClassName field is unrestricted. Enforcement of this field depends on the RuntimeClass feature gate being enabled.
                  "%
                  | optional,
                seLinux
                  | definitions.contract."io.k8s.api.policy.v1beta1.SELinuxStrategyOptions"
                  | doc m%"
                  seLinux is the strategy that will dictate the allowable labels that may be set.
                  "%,
                supplementalGroups
                  | definitions.contract."io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions"
                  | doc m%"
                  supplementalGroups is the strategy that will dictate what supplemental groups are used by the SecurityContext.
                  "%,
                volumes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  volumes is an allowlist of volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions"
            | doc m%"
            RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy.
            "%
            = {
                ranges
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.policy.v1beta1.IDRange"
                  ])
                  | doc m%"
                  ranges are the allowed ranges of gids that may be used. If you would like to force a single gid then supply a single range with the same start and end. Required for MustRunAs.
                  "%
                  | optional,
                rule
                  | String
                  | doc m%"
                  rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
                  "%,
                ..
              },
          "io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions"
            | doc m%"
            RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.
            "%
            = {
                ranges
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.policy.v1beta1.IDRange"
                  ])
                  | doc m%"
                  ranges are the allowed ranges of uids that may be used. If you would like to force a single uid then supply a single range with the same start and end. Required for MustRunAs.
                  "%
                  | optional,
                rule
                  | String
                  | doc m%"
                  rule is the strategy that will dictate the allowable RunAsUser values that may be set.
                  "%,
                ..
              },
          "io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions"
            | doc m%"
            RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.
            "%
            = {
                allowedRuntimeClassNames
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  allowedRuntimeClassNames is an allowlist of RuntimeClass names that may be specified on a pod. A value of "*" means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the RuntimeClassName field to be unset.
                  "%,
                defaultRuntimeClassName
                  | String
                  | doc m%"
                  defaultRuntimeClassName is the default RuntimeClassName to set on the pod. The default MUST be allowed by the allowedRuntimeClassNames list. A value of nil does not mutate the Pod.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.policy.v1beta1.SELinuxStrategyOptions"
            | doc m%"
            SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.
            "%
            = {
                rule
                  | String
                  | doc m%"
                  rule is the strategy that will dictate the allowable labels that may be set.
                  "%,
                seLinuxOptions
                  | definitions.contract."io.k8s.api.core.v1.SELinuxOptions"
                  | doc m%"
                  seLinuxOptions required to run as; required for MustRunAs More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions"
            | doc m%"
            SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.
            "%
            = {
                ranges
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.policy.v1beta1.IDRange"
                  ])
                  | doc m%"
                  ranges are the allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same start and end. Required for MustRunAs.
                  "%
                  | optional,
                rule
                  | String
                  | doc m%"
                  rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.rbac.v1.AggregationRule"
            | doc m%"
            AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
            "%
            = {
                clusterRoleSelectors
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  ])
                  | doc m%"
                  ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.rbac.v1.ClusterRole"
            | doc m%"
            ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1.ClusterRole",
          "io.k8s.api.rbac.v1.ClusterRoleBinding"
            | doc m%"
            ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1.ClusterRoleBinding",
          "io.k8s.api.rbac.v1.ClusterRoleBindingList"
            | doc m%"
            ClusterRoleBindingList is a collection of ClusterRoleBindings
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1.ClusterRoleBindingList",
          "io.k8s.api.rbac.v1.ClusterRoleList"
            | doc m%"
            ClusterRoleList is a collection of ClusterRoles
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1.ClusterRoleList",
          "io.k8s.api.rbac.v1.PolicyRule"
            | doc m%"
            PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
            "%
            = {
                apiGroups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
                  "%
                  | optional,
                nonResourceURLs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
                  "%
                  | optional,
                resourceNames
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
                  "%
                  | optional,
                resources
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
                  "%
                  | optional,
                verbs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
                  "%,
                ..
              },
          "io.k8s.api.rbac.v1.Role"
            | doc m%"
            Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1.Role",
          "io.k8s.api.rbac.v1.RoleBinding"
            | doc m%"
            RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1.RoleBinding",
          "io.k8s.api.rbac.v1.RoleBindingList"
            | doc m%"
            RoleBindingList is a collection of RoleBindings
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1.RoleBindingList",
          "io.k8s.api.rbac.v1.RoleList"
            | doc m%"
            RoleList is a collection of Roles
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1.RoleList",
          "io.k8s.api.rbac.v1.RoleRef"
            | doc m%"
            RoleRef contains information that points to the role being used
            "%
            = {
                apiGroup
                  | String
                  | doc m%"
                  APIGroup is the group for the resource being referenced
                  "%,
                kind
                  | String
                  | doc m%"
                  Kind is the type of resource being referenced
                  "%,
                name
                  | String
                  | doc m%"
                  Name is the name of resource being referenced
                  "%,
                ..
              },
          "io.k8s.api.rbac.v1.Subject"
            | doc m%"
            Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
            "%
            = {
                apiGroup
                  | String
                  | doc m%"
                  APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
                  "%,
                name
                  | String
                  | doc m%"
                  Name of the object being referenced.
                  "%,
                namespace
                  | String
                  | doc m%"
                  Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.rbac.v1alpha1.AggregationRule"
            | doc m%"
            AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
            "%
            = {
                clusterRoleSelectors
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  ])
                  | doc m%"
                  ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.rbac.v1alpha1.ClusterRole"
            | doc m%"
            ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1alpha1.ClusterRole",
          "io.k8s.api.rbac.v1alpha1.ClusterRoleBinding"
            | doc m%"
            ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1alpha1.ClusterRoleBinding",
          "io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList"
            | doc m%"
            ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindings, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList",
          "io.k8s.api.rbac.v1alpha1.ClusterRoleList"
            | doc m%"
            ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1alpha1.ClusterRoleList",
          "io.k8s.api.rbac.v1alpha1.PolicyRule"
            | doc m%"
            PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
            "%
            = {
                apiGroups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
                  "%
                  | optional,
                nonResourceURLs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
                  "%
                  | optional,
                resourceNames
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
                  "%
                  | optional,
                resources
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
                  "%
                  | optional,
                verbs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
                  "%,
                ..
              },
          "io.k8s.api.rbac.v1alpha1.Role"
            | doc m%"
            Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1alpha1.Role",
          "io.k8s.api.rbac.v1alpha1.RoleBinding"
            | doc m%"
            RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1alpha1.RoleBinding",
          "io.k8s.api.rbac.v1alpha1.RoleBindingList"
            | doc m%"
            RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1alpha1.RoleBindingList",
          "io.k8s.api.rbac.v1alpha1.RoleList"
            | doc m%"
            RoleList is a collection of Roles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1alpha1.RoleList",
          "io.k8s.api.rbac.v1alpha1.RoleRef"
            | doc m%"
            RoleRef contains information that points to the role being used
            "%
            = {
                apiGroup
                  | String
                  | doc m%"
                  APIGroup is the group for the resource being referenced
                  "%,
                kind
                  | String
                  | doc m%"
                  Kind is the type of resource being referenced
                  "%,
                name
                  | String
                  | doc m%"
                  Name is the name of resource being referenced
                  "%,
                ..
              },
          "io.k8s.api.rbac.v1alpha1.Subject"
            | doc m%"
            Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
            "%
            = {
                apiVersion
                  | String
                  | doc m%"
                  APIVersion holds the API group and version of the referenced subject. Defaults to "v1" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io/v1alpha1" for User and Group subjects.
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
                  "%,
                name
                  | String
                  | doc m%"
                  Name of the object being referenced.
                  "%,
                namespace
                  | String
                  | doc m%"
                  Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.rbac.v1beta1.AggregationRule"
            | doc m%"
            AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
            "%
            = {
                clusterRoleSelectors
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                  ])
                  | doc m%"
                  ClusterRoleSelectors holds a list of selectors which will be used to find ClusterRoles and create the rules. If any of the selectors match, then the ClusterRole's permissions will be added
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.rbac.v1beta1.ClusterRole"
            | doc m%"
            ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1beta1.ClusterRole",
          "io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
            | doc m%"
            ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1beta1.ClusterRoleBinding",
          "io.k8s.api.rbac.v1beta1.ClusterRoleBindingList"
            | doc m%"
            ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindingList, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1beta1.ClusterRoleBindingList",
          "io.k8s.api.rbac.v1beta1.ClusterRoleList"
            | doc m%"
            ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1beta1.ClusterRoleList",
          "io.k8s.api.rbac.v1beta1.PolicyRule"
            | doc m%"
            PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
            "%
            = {
                apiGroups
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
                  "%
                  | optional,
                nonResourceURLs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
                  "%
                  | optional,
                resourceNames
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
                  "%
                  | optional,
                resources
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Resources is a list of resources this rule applies to.  '*' represents all resources in the specified apiGroups. '*/foo' represents the subresource 'foo' for all resources in the specified apiGroups.
                  "%
                  | optional,
                verbs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
                  "%,
                ..
              },
          "io.k8s.api.rbac.v1beta1.Role"
            | doc m%"
            Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1beta1.Role",
          "io.k8s.api.rbac.v1beta1.RoleBinding"
            | doc m%"
            RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1beta1.RoleBinding",
          "io.k8s.api.rbac.v1beta1.RoleBindingList"
            | doc m%"
            RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1beta1.RoleBindingList",
          "io.k8s.api.rbac.v1beta1.RoleList"
            | doc m%"
            RoleList is a collection of Roles Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.22.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.rbac.v1beta1.RoleList",
          "io.k8s.api.rbac.v1beta1.RoleRef"
            | doc m%"
            RoleRef contains information that points to the role being used
            "%
            = {
                apiGroup
                  | String
                  | doc m%"
                  APIGroup is the group for the resource being referenced
                  "%,
                kind
                  | String
                  | doc m%"
                  Kind is the type of resource being referenced
                  "%,
                name
                  | String
                  | doc m%"
                  Name is the name of resource being referenced
                  "%,
                ..
              },
          "io.k8s.api.rbac.v1beta1.Subject"
            | doc m%"
            Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
            "%
            = {
                apiGroup
                  | String
                  | doc m%"
                  APIGroup holds the API group of the referenced subject. Defaults to "" for ServiceAccount subjects. Defaults to "rbac.authorization.k8s.io" for User and Group subjects.
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  Kind of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount". If the Authorizer does not recognized the kind value, the Authorizer should report an error.
                  "%,
                name
                  | String
                  | doc m%"
                  Name of the object being referenced.
                  "%,
                namespace
                  | String
                  | doc m%"
                  Namespace of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty the Authorizer should report an error.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.scheduling.v1.PriorityClass"
            | doc m%"
            PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.scheduling.v1.PriorityClass",
          "io.k8s.api.scheduling.v1.PriorityClassList"
            | doc m%"
            PriorityClassList is a collection of priority classes.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.scheduling.v1.PriorityClassList",
          "io.k8s.api.scheduling.v1alpha1.PriorityClass"
            | doc m%"
            DEPRECATED - This group version of PriorityClass is deprecated by scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.scheduling.v1alpha1.PriorityClass",
          "io.k8s.api.scheduling.v1alpha1.PriorityClassList"
            | doc m%"
            PriorityClassList is a collection of priority classes.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.scheduling.v1alpha1.PriorityClassList",
          "io.k8s.api.scheduling.v1beta1.PriorityClass"
            | doc m%"
            DEPRECATED - This group version of PriorityClass is deprecated by scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.scheduling.v1beta1.PriorityClass",
          "io.k8s.api.scheduling.v1beta1.PriorityClassList"
            | doc m%"
            PriorityClassList is a collection of priority classes.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.scheduling.v1beta1.PriorityClassList",
          "io.k8s.api.storage.v1.CSIDriver"
            | doc m%"
            CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1.CSIDriver",
          "io.k8s.api.storage.v1.CSIDriverList"
            | doc m%"
            CSIDriverList is a collection of CSIDriver objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1.CSIDriverList",
          "io.k8s.api.storage.v1.CSIDriverSpec"
            | doc m%"
            CSIDriverSpec is the specification of a CSIDriver.
            "%
            = {
                attachRequired
                  | Bool
                  | doc m%"
                  attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
                  "%
                  | optional,
                fsGroupPolicy
                  | String
                  | doc m%"
                  Defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details. This field is alpha-level, and is only honored by servers that enable the CSIVolumeFSGroupPolicy feature gate.
                  "%
                  | optional,
                podInfoOnMount
                  | Bool
                  | doc m%"
                  If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" iff the volume is an ephemeral inline volume
                                                  defined by a CSIVolumeSource, otherwise "false"
                  
                  "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
                  "%
                  | optional,
                requiresRepublish
                  | Bool
                  | doc m%"
                  RequiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
                  
                  Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
                  
                  This is an alpha feature and only available when the CSIServiceAccountToken feature is enabled.
                  "%
                  | optional,
                storageCapacity
                  | Bool
                  | doc m%"
                  If set to true, storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information.
                  
                  The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
                  
                  Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
                  
                  This is an alpha field and only available when the CSIStorageCapacity feature is enabled. The default is false.
                  "%
                  | optional,
                tokenRequests
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.storage.v1.TokenRequest"
                  ])
                  | doc m%"
                  TokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {
                    "<audience>": {
                      "token": <token>,
                      "expirationTimestamp": <expiration timestamp in RFC3339>,
                    },
                    ...
                  }
                  
                  Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
                  
                  This is an alpha feature and only available when the CSIServiceAccountToken feature is enabled.
                  "%
                  | optional,
                volumeLifecycleModes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  volumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future. This field is beta.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1.CSINode"
            | doc m%"
            CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1.CSINode",
          "io.k8s.api.storage.v1.CSINodeDriver"
            | doc m%"
            CSINodeDriver holds information about the specification of one CSI driver installed on a node
            "%
            = {
                allocatable
                  | definitions.contract."io.k8s.api.storage.v1.VolumeNodeResources"
                  | doc m%"
                  allocatable represents the volume resources of a node that are available for scheduling. This field is beta.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
                  "%,
                nodeID
                  | String
                  | doc m%"
                  nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
                  "%,
                topologyKeys
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1.CSINodeList"
            | doc m%"
            CSINodeList is a collection of CSINode objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1.CSINodeList",
          "io.k8s.api.storage.v1.CSINodeSpec"
            | doc m%"
            CSINodeSpec holds information about the specification of all CSI drivers installed on a node
            "%
            = {
                drivers
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.storage.v1.CSINodeDriver"
                  ])
                  | doc m%"
                  drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
                  "%,
                ..
              },
          "io.k8s.api.storage.v1.StorageClass"
            | doc m%"
            StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
            
            StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1.StorageClass",
          "io.k8s.api.storage.v1.StorageClassList"
            | doc m%"
            StorageClassList is a collection of storage classes.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1.StorageClassList",
          "io.k8s.api.storage.v1.TokenRequest"
            | doc m%"
            TokenRequest contains parameters of a service account token.
            "%
            = {
                audience
                  | String
                  | doc m%"
                  Audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
                  "%,
                expirationSeconds
                  | std.number.Integer
                  | doc m%"
                  ExpirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec".
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1.VolumeAttachment"
            | doc m%"
            VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
            
            VolumeAttachment objects are non-namespaced.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1.VolumeAttachment",
          "io.k8s.api.storage.v1.VolumeAttachmentList"
            | doc m%"
            VolumeAttachmentList is a collection of VolumeAttachment objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1.VolumeAttachmentList",
          "io.k8s.api.storage.v1.VolumeAttachmentSource"
            | doc m%"
            VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
            "%
            = {
                inlineVolumeSpec
                  | definitions.contract."io.k8s.api.core.v1.PersistentVolumeSpec"
                  | doc m%"
                  inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
                  "%
                  | optional,
                persistentVolumeName
                  | String
                  | doc m%"
                  Name of the persistent volume to attach.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1.VolumeAttachmentSpec"
            | doc m%"
            VolumeAttachmentSpec is the specification of a VolumeAttachment request.
            "%
            = {
                attacher
                  | String
                  | doc m%"
                  Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
                  "%,
                nodeName
                  | String
                  | doc m%"
                  The node that the volume should be attached to.
                  "%,
                source
                  | definitions.contract."io.k8s.api.storage.v1.VolumeAttachmentSource"
                  | doc m%"
                  Source represents the volume that should be attached.
                  "%,
                ..
              },
          "io.k8s.api.storage.v1.VolumeAttachmentStatus"
            | doc m%"
            VolumeAttachmentStatus is the status of a VolumeAttachment request.
            "%
            = {
                attachError
                  | definitions.contract."io.k8s.api.storage.v1.VolumeError"
                  | doc m%"
                  The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
                  "%
                  | optional,
                attached
                  | Bool
                  | doc m%"
                  Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
                  "%,
                attachmentMetadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
                  "%
                  | optional,
                detachError
                  | definitions.contract."io.k8s.api.storage.v1.VolumeError"
                  | doc m%"
                  The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1.VolumeError"
            | doc m%"
            VolumeError captures an error encountered during a volume operation.
            "%
            = {
                message
                  | String
                  | doc m%"
                  String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
                  "%
                  | optional,
                time
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Time the error was encountered.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1.VolumeNodeResources"
            | doc m%"
            VolumeNodeResources is a set of resource limits for scheduling of volumes.
            "%
            = {
                count
                  | std.number.Integer
                  | doc m%"
                  Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is not specified, then the supported number of volumes on this node is unbounded.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1alpha1.VolumeAttachment"
            | doc m%"
            VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
            
            VolumeAttachment objects are non-namespaced.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1alpha1.VolumeAttachment",
          "io.k8s.api.storage.v1alpha1.VolumeAttachmentList"
            | doc m%"
            VolumeAttachmentList is a collection of VolumeAttachment objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1alpha1.VolumeAttachmentList",
          "io.k8s.api.storage.v1alpha1.VolumeAttachmentSource"
            | doc m%"
            VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
            "%
            = {
                inlineVolumeSpec
                  | definitions.contract."io.k8s.api.core.v1.PersistentVolumeSpec"
                  | doc m%"
                  inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
                  "%
                  | optional,
                persistentVolumeName
                  | String
                  | doc m%"
                  Name of the persistent volume to attach.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1alpha1.VolumeAttachmentSpec"
            | doc m%"
            VolumeAttachmentSpec is the specification of a VolumeAttachment request.
            "%
            = {
                attacher
                  | String
                  | doc m%"
                  Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
                  "%,
                nodeName
                  | String
                  | doc m%"
                  The node that the volume should be attached to.
                  "%,
                source
                  | definitions.contract."io.k8s.api.storage.v1alpha1.VolumeAttachmentSource"
                  | doc m%"
                  Source represents the volume that should be attached.
                  "%,
                ..
              },
          "io.k8s.api.storage.v1alpha1.VolumeAttachmentStatus"
            | doc m%"
            VolumeAttachmentStatus is the status of a VolumeAttachment request.
            "%
            = {
                attachError
                  | definitions.contract."io.k8s.api.storage.v1alpha1.VolumeError"
                  | doc m%"
                  The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
                  "%
                  | optional,
                attached
                  | Bool
                  | doc m%"
                  Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
                  "%,
                attachmentMetadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
                  "%
                  | optional,
                detachError
                  | definitions.contract."io.k8s.api.storage.v1alpha1.VolumeError"
                  | doc m%"
                  The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1alpha1.VolumeError"
            | doc m%"
            VolumeError captures an error encountered during a volume operation.
            "%
            = {
                message
                  | String
                  | doc m%"
                  String detailing the error encountered during Attach or Detach operation. This string maybe logged, so it should not contain sensitive information.
                  "%
                  | optional,
                time
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Time the error was encountered.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1beta1.CSIDriver"
            | doc m%"
            CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1beta1.CSIDriver",
          "io.k8s.api.storage.v1beta1.CSIDriverList"
            | doc m%"
            CSIDriverList is a collection of CSIDriver objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1beta1.CSIDriverList",
          "io.k8s.api.storage.v1beta1.CSIDriverSpec"
            | doc m%"
            CSIDriverSpec is the specification of a CSIDriver.
            "%
            = {
                attachRequired
                  | Bool
                  | doc m%"
                  attachRequired indicates this CSI volume driver requires an attach operation (because it implements the CSI ControllerPublishVolume() method), and that the Kubernetes attach detach controller should call the attach volume interface which checks the volumeattachment status and waits until the volume is attached before proceeding to mounting. The CSI external-attacher coordinates with CSI volume driver and updates the volumeattachment status when the attach operation is complete. If the CSIDriverRegistry feature gate is enabled and the value is specified to false, the attach operation will be skipped. Otherwise the attach operation will be called.
                  "%
                  | optional,
                fsGroupPolicy
                  | String
                  | doc m%"
                  Defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details. This field is alpha-level, and is only honored by servers that enable the CSIVolumeFSGroupPolicy feature gate.
                  "%
                  | optional,
                podInfoOnMount
                  | Bool
                  | doc m%"
                  If set to true, podInfoOnMount indicates this CSI volume driver requires additional pod information (like podName, podUID, etc.) during mount operations. If set to false, pod information will not be passed on mount. Default is false. The CSI driver specifies podInfoOnMount as part of driver deployment. If true, Kubelet will pass pod information as VolumeContext in the CSI NodePublishVolume() calls. The CSI driver is responsible for parsing and validating the information passed in as VolumeContext. The following VolumeConext will be passed if podInfoOnMount is set to true. This list might grow, but the prefix will be used. "csi.storage.k8s.io/pod.name": pod.Name "csi.storage.k8s.io/pod.namespace": pod.Namespace "csi.storage.k8s.io/pod.uid": string(pod.UID) "csi.storage.k8s.io/ephemeral": "true" iff the volume is an ephemeral inline volume
                                                  defined by a CSIVolumeSource, otherwise "false"
                  
                  "csi.storage.k8s.io/ephemeral" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" VolumeLifecycleMode. Other drivers can leave pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.
                  "%
                  | optional,
                requiresRepublish
                  | Bool
                  | doc m%"
                  RequiresRepublish indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.
                  
                  Note: After a successful initial NodePublishVolume call, subsequent calls to NodePublishVolume should only update the contents of the volume. New mount points will not be seen by a running container.
                  
                  This is an alpha feature and only available when the CSIServiceAccountToken feature is enabled.
                  "%
                  | optional,
                storageCapacity
                  | Bool
                  | doc m%"
                  If set to true, storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information.
                  
                  The check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.
                  
                  Alternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.
                  
                  This is an alpha field and only available when the CSIStorageCapacity feature is enabled. The default is false.
                  "%
                  | optional,
                tokenRequests
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.storage.v1beta1.TokenRequest"
                  ])
                  | doc m%"
                  TokenRequests indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in VolumeContext in the CSI NodePublishVolume calls. The CSI driver should parse and validate the following VolumeContext: "csi.storage.k8s.io/serviceAccount.tokens": {
                    "<audience>": {
                      "token": <token>,
                      "expirationTimestamp": <expiration timestamp in RFC3339>,
                    },
                    ...
                  }
                  
                  Note: Audience in each TokenRequest should be different and at most one token is empty string. To receive a new token after expiry, RequiresRepublish can be used to trigger NodePublishVolume periodically.
                  
                  This is an alpha feature and only available when the CSIServiceAccountToken feature is enabled.
                  "%
                  | optional,
                volumeLifecycleModes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  VolumeLifecycleModes defines what kind of volumes this CSI volume driver supports. The default if the list is empty is "Persistent", which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is "Ephemeral". In this mode, volumes are defined inline inside the pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that pod. A driver has to be aware of this because it is only going to get a NodePublishVolume call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1beta1.CSINode"
            | doc m%"
            DEPRECATED - This group version of CSINode is deprecated by storage/v1/CSINode. See the release notes for more information. CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1beta1.CSINode",
          "io.k8s.api.storage.v1beta1.CSINodeDriver"
            | doc m%"
            CSINodeDriver holds information about the specification of one CSI driver installed on a node
            "%
            = {
                allocatable
                  | definitions.contract."io.k8s.api.storage.v1beta1.VolumeNodeResources"
                  | doc m%"
                  allocatable represents the volume resources of a node that are available for scheduling.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  This is the name of the CSI driver that this object refers to. This MUST be the same name returned by the CSI GetPluginName() call for that driver.
                  "%,
                nodeID
                  | String
                  | doc m%"
                  nodeID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as "node1", but the storage system may refer to the same node as "nodeA". When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. "nodeA" instead of "node1". This field is required.
                  "%,
                topologyKeys
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  topologyKeys is the list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. "company.com/zone", "company.com/region"). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the node object and pass back to the driver. It is possible for different nodes to use different topology keys. This can be empty if driver does not support topology.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1beta1.CSINodeList"
            | doc m%"
            CSINodeList is a collection of CSINode objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1beta1.CSINodeList",
          "io.k8s.api.storage.v1beta1.CSINodeSpec"
            | doc m%"
            CSINodeSpec holds information about the specification of all CSI drivers installed on a node
            "%
            = {
                drivers
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.api.storage.v1beta1.CSINodeDriver"
                  ])
                  | doc m%"
                  drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.
                  "%,
                ..
              },
          "io.k8s.api.storage.v1beta1.StorageClass"
            | doc m%"
            StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
            
            StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1beta1.StorageClass",
          "io.k8s.api.storage.v1beta1.StorageClassList"
            | doc m%"
            StorageClassList is a collection of storage classes.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1beta1.StorageClassList",
          "io.k8s.api.storage.v1beta1.TokenRequest"
            | doc m%"
            TokenRequest contains parameters of a service account token.
            "%
            = {
                audience
                  | String
                  | doc m%"
                  Audience is the intended audience of the token in "TokenRequestSpec". It will default to the audiences of kube apiserver.
                  "%,
                expirationSeconds
                  | std.number.Integer
                  | doc m%"
                  ExpirationSeconds is the duration of validity of the token in "TokenRequestSpec". It has the same default value of "ExpirationSeconds" in "TokenRequestSpec"
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1beta1.VolumeAttachment"
            | doc m%"
            VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
            
            VolumeAttachment objects are non-namespaced.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1beta1.VolumeAttachment",
          "io.k8s.api.storage.v1beta1.VolumeAttachmentList"
            | doc m%"
            VolumeAttachmentList is a collection of VolumeAttachment objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.api.storage.v1beta1.VolumeAttachmentList",
          "io.k8s.api.storage.v1beta1.VolumeAttachmentSource"
            | doc m%"
            VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
            "%
            = {
                inlineVolumeSpec
                  | definitions.contract."io.k8s.api.core.v1.PersistentVolumeSpec"
                  | doc m%"
                  inlineVolumeSpec contains all the information necessary to attach a persistent volume defined by a pod's inline VolumeSource. This field is populated only for the CSIMigration feature. It contains translated fields from a pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the CSIMigration feature.
                  "%
                  | optional,
                persistentVolumeName
                  | String
                  | doc m%"
                  Name of the persistent volume to attach.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1beta1.VolumeAttachmentSpec"
            | doc m%"
            VolumeAttachmentSpec is the specification of a VolumeAttachment request.
            "%
            = {
                attacher
                  | String
                  | doc m%"
                  Attacher indicates the name of the volume driver that MUST handle this request. This is the name returned by GetPluginName().
                  "%,
                nodeName
                  | String
                  | doc m%"
                  The node that the volume should be attached to.
                  "%,
                source
                  | definitions.contract."io.k8s.api.storage.v1beta1.VolumeAttachmentSource"
                  | doc m%"
                  Source represents the volume that should be attached.
                  "%,
                ..
              },
          "io.k8s.api.storage.v1beta1.VolumeAttachmentStatus"
            | doc m%"
            VolumeAttachmentStatus is the status of a VolumeAttachment request.
            "%
            = {
                attachError
                  | definitions.contract."io.k8s.api.storage.v1beta1.VolumeError"
                  | doc m%"
                  The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
                  "%
                  | optional,
                attached
                  | Bool
                  | doc m%"
                  Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
                  "%,
                attachmentMetadata
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Upon successful attach, this field is populated with any information returned by the attach operation that must be passed into subsequent WaitForAttach or Mount calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.
                  "%
                  | optional,
                detachError
                  | definitions.contract."io.k8s.api.storage.v1beta1.VolumeError"
                  | doc m%"
                  The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1beta1.VolumeError"
            | doc m%"
            VolumeError captures an error encountered during a volume operation.
            "%
            = {
                message
                  | String
                  | doc m%"
                  String detailing the error encountered during Attach or Detach operation. This string may be logged, so it should not contain sensitive information.
                  "%
                  | optional,
                time
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Time the error was encountered.
                  "%
                  | optional,
                ..
              },
          "io.k8s.api.storage.v1beta1.VolumeNodeResources"
            | doc m%"
            VolumeNodeResources is a set of resource limits for scheduling of volumes.
            "%
            = {
                count
                  | std.number.Integer
                  | doc m%"
                  Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple pods on the same node. If this field is nil, then the supported number of volumes on this node is unbounded.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition"
            | doc m%"
            CustomResourceColumnDefinition specifies a column for server side printing.
            "%
            = {
                description
                  | String
                  | doc m%"
                  description is a human readable description of this column.
                  "%
                  | optional,
                format
                  | String
                  | doc m%"
                  format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
                  "%
                  | optional,
                jsonPath
                  | String
                  | doc m%"
                  jsonPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
                  "%,
                name
                  | String
                  | doc m%"
                  name is a human readable name for the column.
                  "%,
                "priority"
                  | std.number.Integer
                  | doc m%"
                  priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
                  "%,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion"
            | doc m%"
            CustomResourceConversion describes how to convert different versions of a CR.
            "%
            = {
                strategy
                  | String
                  | doc m%"
                  strategy specifies how custom resources are converted between versions. Allowed values are: - `None`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `Webhook`: API Server will call to an external webhook to do the conversion. Additional information
                    is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhook to be set.
                  "%,
                webhook
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion"
                  | doc m%"
                  webhook describes how to call the conversion webhook. Required when `strategy` is set to `Webhook`.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition"
            | doc m%"
            CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition",
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition"
            | doc m%"
            CustomResourceDefinitionCondition contains details for the current condition of this pod.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  lastTransitionTime last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  message is a human-readable message indicating details about last transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  reason is a unique, one-word, CamelCase reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  status is the status of the condition. Can be True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  type is the type of the condition. Types include Established, NamesAccepted and Terminating.
                  "%,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList"
            | doc m%"
            CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList",
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames"
            | doc m%"
            CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
            "%
            = {
                categories
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
                  "%,
                listKind
                  | String
                  | doc m%"
                  listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
                  "%
                  | optional,
                plural
                  | String
                  | doc m%"
                  plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
                  "%,
                shortNames
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
                  "%
                  | optional,
                singular
                  | String
                  | doc m%"
                  singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec"
            | doc m%"
            CustomResourceDefinitionSpec describes how a user wants their resource to appear
            "%
            = {
                conversion
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion"
                  | doc m%"
                  conversion defines conversion settings for the CRD.
                  "%
                  | optional,
                group
                  | String
                  | doc m%"
                  group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
                  "%,
                names
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames"
                  | doc m%"
                  names specify the resource and kind names for the custom resource.
                  "%,
                preserveUnknownFields
                  | Bool
                  | doc m%"
                  preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.
                  "%
                  | optional,
                scope
                  | String
                  | doc m%"
                  scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
                  "%,
                versions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion"
                  ])
                  | doc m%"
                  versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
                  "%,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus"
            | doc m%"
            CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
            "%
            = {
                acceptedNames
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames"
                  | doc m%"
                  acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.
                  "%
                  | optional,
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition"
                  ])
                  | doc m%"
                  conditions indicate state for particular aspects of a CustomResourceDefinition
                  "%
                  | optional,
                storedVersions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion"
            | doc m%"
            CustomResourceDefinitionVersion describes a version for CRD.
            "%
            = {
                additionalPrinterColumns
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition"
                  ])
                  | doc m%"
                  additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If no columns are specified, a single column displaying the age of the custom resource is used.
                  "%
                  | optional,
                deprecated
                  | Bool
                  | doc m%"
                  deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.
                  "%
                  | optional,
                deprecationWarning
                  | String
                  | doc m%"
                  deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
                  "%,
                schema
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation"
                  | doc m%"
                  schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource.
                  "%
                  | optional,
                served
                  | Bool
                  | doc m%"
                  served is a flag enabling/disabling this version from being served via REST APIs
                  "%,
                storage
                  | Bool
                  | doc m%"
                  storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.
                  "%,
                subresources
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources"
                  | doc m%"
                  subresources specify what subresources this version of the defined custom resource have.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale"
            | doc m%"
            CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
            "%
            = {
                labelSelectorPath
                  | String
                  | doc m%"
                  labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.
                  "%
                  | optional,
                specReplicasPath
                  | String
                  | doc m%"
                  specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.
                  "%,
                statusReplicasPath
                  | String
                  | doc m%"
                  statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.
                  "%,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus"
            | doc m%"
            CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza
            "%
            = {  .. },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources"
            | doc m%"
            CustomResourceSubresources defines the status and scale subresources for CustomResources.
            "%
            = {
                scale
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale"
                  | doc m%"
                  scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.
                  "%
                  | optional,
                status
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus"
                  | doc m%"
                  status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation"
            | doc m%"
            CustomResourceValidation is a list of validation methods for CustomResources.
            "%
            = {
                openAPIV3Schema
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                  | doc m%"
                  openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation"
            | doc m%"
            ExternalDocumentation allows referencing an external resource for extended documentation.
            "%
            = { description | String | optional, url | String | optional, .. },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
            | doc m%"
            JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON",
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
            | doc m%"
            JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
            "%
            = {
                "$ref" | String | optional,
                "$schema" | String | optional,
                additionalItems
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
                  | optional,
                additionalProperties
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
                  | optional,
                allOf
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                  ])
                  | optional,
                anyOf
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                  ])
                  | optional,
                "default"
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
                  | doc m%"
                  default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. Defaulting requires spec.preserveUnknownFields to be false.
                  "%
                  | optional,
                definitions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                  ])
                  | optional,
                dependencies
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray"
                  ])
                  | optional,
                description | String | optional,
                enum
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
                  ])
                  | optional,
                example
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
                  | optional,
                exclusiveMaximum | Bool | optional,
                exclusiveMinimum | Bool | optional,
                externalDocs
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation"
                  | optional,
                format
                  | String
                  | doc m%"
                  format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:
                  
                  - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\d{3}[- ]?\d{2}[- ]?\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
                  "%
                  | optional,
                id | String | optional,
                items
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray"
                  | optional,
                maxItems | std.number.Integer | optional,
                maxLength | std.number.Integer | optional,
                maxProperties | std.number.Integer | optional,
                maximum | Number | optional,
                minItems | std.number.Integer | optional,
                minLength | std.number.Integer | optional,
                minProperties | std.number.Integer | optional,
                minimum | Number | optional,
                multipleOf | Number | optional,
                not
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                  | optional,
                nullable | Bool | optional,
                oneOf
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                  ])
                  | optional,
                pattern | String | optional,
                patternProperties
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                  ])
                  | optional,
                properties
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                  ])
                  | optional,
                required
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | optional,
                title | String | optional,
                type | String | optional,
                uniqueItems | Bool | optional,
                x-kubernetes-embedded-resource
                  | Bool
                  | doc m%"
                  x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
                  "%
                  | optional,
                x-kubernetes-int-or-string
                  | Bool
                  | doc m%"
                  x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:
                  
                  1) anyOf:
                     - type: integer
                     - type: string
                  2) allOf:
                     - anyOf:
                       - type: integer
                       - type: string
                     - ... zero or more
                  "%
                  | optional,
                x-kubernetes-list-map-keys
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.
                  
                  This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).
                  
                  The properties specified must either be required or have a default value, to ensure those properties are present for all list items.
                  "%
                  | optional,
                x-kubernetes-list-type
                  | String
                  | doc m%"
                  x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:
                  
                  1) `atomic`: the list is treated as a single entity, like a scalar.
                       Atomic lists will be entirely replaced when updated. This extension
                       may be used on any type of list (struct, scalar, ...).
                  2) `set`:
                       Sets are lists that must not have multiple items with the same value. Each
                       value must be a scalar, an object with x-kubernetes-map-type `atomic` or an
                       array with x-kubernetes-list-type `atomic`.
                  3) `map`:
                       These lists are like maps in that their elements have a non-index key
                       used to identify them. Order is preserved upon merge. The map tag
                       must only be used on a list with elements of type object.
                  Defaults to atomic for arrays.
                  "%
                  | optional,
                x-kubernetes-map-type
                  | String
                  | doc m%"
                  x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:
                  
                  1) `granular`:
                       These maps are actual maps (key-value pairs) and each fields are independent
                       from each other (they can each be manipulated by separate actors). This is
                       the default behaviour for all maps.
                  2) `atomic`: the list is treated as a single entity, like a scalar.
                       Atomic maps will be entirely replaced when updated.
                  "%
                  | optional,
                x-kubernetes-preserve-unknown-fields
                  | Bool
                  | doc m%"
                  x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray"
            | doc m%"
            JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray",
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
            | doc m%"
            JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool",
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray"
            | doc m%"
            JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray",
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference"
            | doc m%"
            ServiceReference holds a reference to Service.legacy.k8s.io
            "%
            = {
                name
                  | String
                  | doc m%"
                  name is the name of the service. Required
                  "%,
                namespace
                  | String
                  | doc m%"
                  namespace is the namespace of the service. Required
                  "%,
                path
                  | String
                  | doc m%"
                  path is an optional URL path at which the webhook will be contacted.
                  "%
                  | optional,
                port
                  | std.number.Integer
                  | doc m%"
                  port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig"
            | doc m%"
            WebhookClientConfig contains the information to make a TLS connection with the webhook.
            "%
            = {
                caBundle
                  | String
                  | doc m%"
                  caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
                  "%
                  | optional,
                service
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference"
                  | doc m%"
                  service is a reference to the service for this webhook. Either service or url must be specified.
                  
                  If the webhook is running within the cluster, then you should use `service`.
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
                  
                  The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
                  
                  Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
                  
                  The scheme must be "https"; the URL must begin with "https://".
                  
                  A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
                  
                  Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion"
            | doc m%"
            WebhookConversion describes how to call a conversion webhook
            "%
            = {
                clientConfig
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig"
                  | doc m%"
                  clientConfig is the instructions for how to call the webhook if strategy is `Webhook`.
                  "%
                  | optional,
                conversionReviewVersions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.
                  "%,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition"
            | doc m%"
            CustomResourceColumnDefinition specifies a column for server side printing.
            "%
            = {
                JSONPath
                  | String
                  | doc m%"
                  JSONPath is a simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.
                  "%,
                description
                  | String
                  | doc m%"
                  description is a human readable description of this column.
                  "%
                  | optional,
                format
                  | String
                  | doc m%"
                  format is an optional OpenAPI type definition for this column. The 'name' format is applied to the primary identifier column to assist in clients identifying column is the resource name. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  name is a human readable name for the column.
                  "%,
                "priority"
                  | std.number.Integer
                  | doc m%"
                  priority is an integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.
                  "%
                  | optional,
                type
                  | String
                  | doc m%"
                  type is an OpenAPI type definition for this column. See https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#data-types for details.
                  "%,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceConversion"
            | doc m%"
            CustomResourceConversion describes how to convert different versions of a CR.
            "%
            = {
                conversionReviewVersions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  conversionReviewVersions is an ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail. Defaults to `["v1beta1"]`.
                  "%
                  | optional,
                strategy
                  | String
                  | doc m%"
                  strategy specifies how custom resources are converted between versions. Allowed values are: - `None`: The converter only change the apiVersion and would not touch any other field in the custom resource. - `Webhook`: API Server will call to an external webhook to do the conversion. Additional information
                    is needed for this option. This requires spec.preserveUnknownFields to be false, and spec.conversion.webhookClientConfig to be set.
                  "%,
                webhookClientConfig
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.WebhookClientConfig"
                  | doc m%"
                  webhookClientConfig is the instructions for how to call the webhook if strategy is `Webhook`. Required when `strategy` is set to `Webhook`.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
            | doc m%"
            CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>. Deprecated in v1.16, planned for removal in v1.22. Use apiextensions.k8s.io/v1 CustomResourceDefinition instead.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition",
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionCondition"
            | doc m%"
            CustomResourceDefinitionCondition contains details for the current condition of this pod.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  lastTransitionTime last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  message is a human-readable message indicating details about last transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  reason is a unique, one-word, CamelCase reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  status is the status of the condition. Can be True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  type is the type of the condition. Types include Established, NamesAccepted and Terminating.
                  "%,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionList"
            | doc m%"
            CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionList",
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames"
            | doc m%"
            CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
            "%
            = {
                categories
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  categories is a list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`.
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  kind is the serialized kind of the resource. It is normally CamelCase and singular. Custom resource instances will use this value as the `kind` attribute in API calls.
                  "%,
                listKind
                  | String
                  | doc m%"
                  listKind is the serialized kind of the list for this resource. Defaults to "`kind`List".
                  "%
                  | optional,
                plural
                  | String
                  | doc m%"
                  plural is the plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). Must be all lowercase.
                  "%,
                shortNames
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  shortNames are short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase.
                  "%
                  | optional,
                singular
                  | String
                  | doc m%"
                  singular is the singular name of the resource. It must be all lowercase. Defaults to lowercased `kind`.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec"
            | doc m%"
            CustomResourceDefinitionSpec describes how a user wants their resource to appear
            "%
            = {
                additionalPrinterColumns
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition"
                  ])
                  | doc m%"
                  additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
                  "%
                  | optional,
                conversion
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceConversion"
                  | doc m%"
                  conversion defines conversion settings for the CRD.
                  "%
                  | optional,
                group
                  | String
                  | doc m%"
                  group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
                  "%,
                names
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames"
                  | doc m%"
                  names specify the resource and kind names for the custom resource.
                  "%,
                preserveUnknownFields
                  | Bool
                  | doc m%"
                  preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. If false, schemas must be defined for all versions. Defaults to true in v1beta for backwards compatibility. Deprecated: will be required to be false in v1. Preservation of unknown fields can be specified in the validation schema using the `x-kubernetes-preserve-unknown-fields: true` extension. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.
                  "%
                  | optional,
                scope
                  | String
                  | doc m%"
                  scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`. Default is `Namespaced`.
                  "%,
                subresources
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources"
                  | doc m%"
                  subresources specify what subresources the defined custom resource has. If present, this field configures subresources for all versions. Top-level and per-version subresources are mutually exclusive.
                  "%
                  | optional,
                validation
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation"
                  | doc m%"
                  validation describes the schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive.
                  "%
                  | optional,
                version
                  | String
                  | doc m%"
                  version is the API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.
                  "%
                  | optional,
                versions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionVersion"
                  ])
                  | doc m%"
                  versions is the list of all API versions of the defined custom resource. Optional if `version` is specified. The name of the first item in the `versions` list must match the `version` field if `version` and `versions` are both specified. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionStatus"
            | doc m%"
            CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
            "%
            = {
                acceptedNames
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames"
                  | doc m%"
                  acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.
                  "%
                  | optional,
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionCondition"
                  ])
                  | doc m%"
                  conditions indicate state for particular aspects of a CustomResourceDefinition
                  "%
                  | optional,
                storedVersions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionVersion"
            | doc m%"
            CustomResourceDefinitionVersion describes a version for CRD.
            "%
            = {
                additionalPrinterColumns
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition"
                  ])
                  | doc m%"
                  additionalPrinterColumns specifies additional columns returned in Table output. See https://kubernetes.io/docs/reference/using-api/api-concepts/#receiving-resources-as-tables for details. Top-level and per-version columns are mutually exclusive. Per-version columns must not all be set to identical values (top-level columns should be used instead). If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.
                  "%
                  | optional,
                deprecated
                  | Bool
                  | doc m%"
                  deprecated indicates this version of the custom resource API is deprecated. When set to true, API requests to this version receive a warning header in the server response. Defaults to false.
                  "%
                  | optional,
                deprecationWarning
                  | String
                  | doc m%"
                  deprecationWarning overrides the default warning returned to API clients. May only be set when `deprecated` is true. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  name is the version name, e.g. “v1”, “v2beta1”, etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true.
                  "%,
                schema
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation"
                  | doc m%"
                  schema describes the schema used for validation and pruning of this version of the custom resource. Top-level and per-version schemas are mutually exclusive. Per-version schemas must not all be set to identical values (top-level validation schema should be used instead).
                  "%
                  | optional,
                served
                  | Bool
                  | doc m%"
                  served is a flag enabling/disabling this version from being served via REST APIs
                  "%,
                storage
                  | Bool
                  | doc m%"
                  storage indicates this version should be used when persisting custom resources to storage. There must be exactly one version with storage=true.
                  "%,
                subresources
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources"
                  | doc m%"
                  subresources specify what subresources this version of the defined custom resource have. Top-level and per-version subresources are mutually exclusive. Per-version subresources must not all be set to identical values (top-level subresources should be used instead).
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceScale"
            | doc m%"
            CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
            "%
            = {
                labelSelectorPath
                  | String
                  | doc m%"
                  labelSelectorPath defines the JSON path inside of a custom resource that corresponds to Scale `status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. More info: https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions#scale-subresource If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to the empty string.
                  "%
                  | optional,
                specReplicasPath
                  | String
                  | doc m%"
                  specReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.
                  "%,
                statusReplicasPath
                  | String
                  | doc m%"
                  statusReplicasPath defines the JSON path inside of a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.
                  "%,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceStatus"
            | doc m%"
            CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza
            "%
            = {  .. },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources"
            | doc m%"
            CustomResourceSubresources defines the status and scale subresources for CustomResources.
            "%
            = {
                scale
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceScale"
                  | doc m%"
                  scale indicates the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object.
                  "%
                  | optional,
                status
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceStatus"
                  | doc m%"
                  status indicates the custom resource should serve a `/status` subresource. When enabled: 1. requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. 2. requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation"
            | doc m%"
            CustomResourceValidation is a list of validation methods for CustomResources.
            "%
            = {
                openAPIV3Schema
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                  | doc m%"
                  openAPIV3Schema is the OpenAPI v3 schema to use for validation and pruning.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ExternalDocumentation"
            | doc m%"
            ExternalDocumentation allows referencing an external resource for extended documentation.
            "%
            = { description | String | optional, url | String | optional, .. },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON"
            | doc m%"
            JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON",
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
            | doc m%"
            JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
            "%
            = {
                "$ref" | String | optional,
                "$schema" | String | optional,
                additionalItems
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool"
                  | optional,
                additionalProperties
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool"
                  | optional,
                allOf
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                  ])
                  | optional,
                anyOf
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                  ])
                  | optional,
                "default"
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON"
                  | doc m%"
                  default is a default value for undefined object fields. Defaulting is a beta feature under the CustomResourceDefaulting feature gate. CustomResourceDefinitions with defaults must be created using the v1 (or newer) CustomResourceDefinition API.
                  "%
                  | optional,
                definitions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                  ])
                  | optional,
                dependencies
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrStringArray"
                  ])
                  | optional,
                description | String | optional,
                enum
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON"
                  ])
                  | optional,
                example
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON"
                  | optional,
                exclusiveMaximum | Bool | optional,
                exclusiveMinimum | Bool | optional,
                externalDocs
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ExternalDocumentation"
                  | optional,
                format
                  | String
                  | doc m%"
                  format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:
                  
                  - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like "0321751043" or "978-0321751041" - isbn10: an ISBN10 number string like "0321751043" - isbn13: an ISBN13 number string like "978-0321751041" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\d{3}[- ]?\d{2}[- ]?\d{4}$ - hexcolor: an hexadecimal color code like "#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like "rgb(255,255,2559" - byte: base64 encoded binary data - password: any kind of string - date: a date string like "2006-01-02" as defined by full-date in RFC3339 - duration: a duration string like "22 ns" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like "2014-12-15T19:30:20.000Z" as defined by date-time in RFC3339.
                  "%
                  | optional,
                id | String | optional,
                items
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrArray"
                  | optional,
                maxItems | std.number.Integer | optional,
                maxLength | std.number.Integer | optional,
                maxProperties | std.number.Integer | optional,
                maximum | Number | optional,
                minItems | std.number.Integer | optional,
                minLength | std.number.Integer | optional,
                minProperties | std.number.Integer | optional,
                minimum | Number | optional,
                multipleOf | Number | optional,
                not
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                  | optional,
                nullable | Bool | optional,
                oneOf
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                  ])
                  | optional,
                pattern | String | optional,
                patternProperties
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                  ])
                  | optional,
                properties
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                  ])
                  | optional,
                required
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | optional,
                title | String | optional,
                type | String | optional,
                uniqueItems | Bool | optional,
                x-kubernetes-embedded-resource
                  | Bool
                  | doc m%"
                  x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
                  "%
                  | optional,
                x-kubernetes-int-or-string
                  | Bool
                  | doc m%"
                  x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:
                  
                  1) anyOf:
                     - type: integer
                     - type: string
                  2) allOf:
                     - anyOf:
                       - type: integer
                       - type: string
                     - ... zero or more
                  "%
                  | optional,
                x-kubernetes-list-map-keys
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.
                  
                  This tag MUST only be used on lists that have the "x-kubernetes-list-type" extension set to "map". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).
                  
                  The properties specified must either be required or have a default value, to ensure those properties are present for all list items.
                  "%
                  | optional,
                x-kubernetes-list-type
                  | String
                  | doc m%"
                  x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:
                  
                  1) `atomic`: the list is treated as a single entity, like a scalar.
                       Atomic lists will be entirely replaced when updated. This extension
                       may be used on any type of list (struct, scalar, ...).
                  2) `set`:
                       Sets are lists that must not have multiple items with the same value. Each
                       value must be a scalar, an object with x-kubernetes-map-type `atomic` or an
                       array with x-kubernetes-list-type `atomic`.
                  3) `map`:
                       These lists are like maps in that their elements have a non-index key
                       used to identify them. Order is preserved upon merge. The map tag
                       must only be used on a list with elements of type object.
                  Defaults to atomic for arrays.
                  "%
                  | optional,
                x-kubernetes-map-type
                  | String
                  | doc m%"
                  x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:
                  
                  1) `granular`:
                       These maps are actual maps (key-value pairs) and each fields are independent
                       from each other (they can each be manipulated by separate actors). This is
                       the default behaviour for all maps.
                  2) `atomic`: the list is treated as a single entity, like a scalar.
                       Atomic maps will be entirely replaced when updated.
                  "%
                  | optional,
                x-kubernetes-preserve-unknown-fields
                  | Bool
                  | doc m%"
                  x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrArray"
            | doc m%"
            JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrArray",
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool"
            | doc m%"
            JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool",
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrStringArray"
            | doc m%"
            JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrStringArray",
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ServiceReference"
            | doc m%"
            ServiceReference holds a reference to Service.legacy.k8s.io
            "%
            = {
                name
                  | String
                  | doc m%"
                  name is the name of the service. Required
                  "%,
                namespace
                  | String
                  | doc m%"
                  namespace is the namespace of the service. Required
                  "%,
                path
                  | String
                  | doc m%"
                  path is an optional URL path at which the webhook will be contacted.
                  "%
                  | optional,
                port
                  | std.number.Integer
                  | doc m%"
                  port is an optional service port at which the webhook will be contacted. `port` should be a valid port number (1-65535, inclusive). Defaults to 443 for backward compatibility.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.WebhookClientConfig"
            | doc m%"
            WebhookClientConfig contains the information to make a TLS connection with the webhook.
            "%
            = {
                caBundle
                  | String
                  | doc m%"
                  caBundle is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
                  "%
                  | optional,
                service
                  | definitions.contract."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ServiceReference"
                  | doc m%"
                  service is a reference to the service for this webhook. Either service or url must be specified.
                  
                  If the webhook is running within the cluster, then you should use `service`.
                  "%
                  | optional,
                url
                  | String
                  | doc m%"
                  url gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
                  
                  The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
                  
                  Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
                  
                  The scheme must be "https"; the URL must begin with "https://".
                  
                  A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
                  
                  Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apimachinery.pkg.api.resource.Quantity"
            | doc m%"
            Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
            
            The serialization format is:
            
            <quantity>        ::= <signedNumber><suffix>
              (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
            <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
              (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
            <decimalSI>       ::= m | "" | k | M | G | T | P | E
              (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
            <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
            
            No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
            
            When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
            
            Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
              a. No precision is lost
              b. No fractional digits will be emitted
              c. The exponent (or suffix) is as large as possible.
            The sign will be omitted unless the number is negative.
            
            Examples:
              1.5 will be serialized as "1500m"
              1.5Gi will be serialized as "1536Mi"
            
            Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
            
            Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
            
            This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
            "%
            = String,
          "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            | doc m%"
            APIGroup contains the name, the supported versions, and the preferred version of a group.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup",
          "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList"
            | doc m%"
            APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList",
          "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
            | doc m%"
            APIResource specifies the name of a resource and whether it is namespaced.
            "%
            = {
                categories
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  categories is a list of the grouped resources this resource belongs to (e.g. 'all')
                  "%
                  | optional,
                group
                  | String
                  | doc m%"
                  group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale".
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')
                  "%,
                name
                  | String
                  | doc m%"
                  name is the plural name of the resource.
                  "%,
                namespaced
                  | Bool
                  | doc m%"
                  namespaced indicates if a resource is namespaced or not.
                  "%,
                shortNames
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  shortNames is a list of suggested short names of the resource.
                  "%
                  | optional,
                singularName
                  | String
                  | doc m%"
                  singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
                  "%,
                storageVersionHash
                  | String
                  | doc m%"
                  The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.
                  "%
                  | optional,
                verbs
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
                  "%,
                version
                  | String
                  | doc m%"
                  version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)".
                  "%
                  | optional,
                ..
              },
          "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            | doc m%"
            APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList",
          "io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions"
            | doc m%"
            APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions",
          "io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
            | doc m%"
            Condition contains details for one aspect of the current state of this API Resource.
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                  "%,
                message
                  | String
                  | doc m%"
                  message is a human readable message indicating details about the transition. This may be an empty string.
                  "%,
                observedGeneration
                  | std.number.Integer
                  | doc m%"
                  observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.
                  "%,
                status
                  | String
                  | doc m%"
                  status of the condition, one of True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  type of condition in CamelCase or in foo.example.com/CamelCase.
                  "%,
                ..
              },
          "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            | doc m%"
            DeleteOptions may be provided when deleting an API object.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions",
          "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1"
            | doc m%"
            FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
            
            Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.
            
            The exact format is defined in sigs.k8s.io/structured-merge-diff
            "%
            = {  .. },
          "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
            | doc m%"
            GroupVersion contains the "group/version" and "version" string of a version. It is made a struct to keep extensibility.
            "%
            = {
                groupVersion
                  | String
                  | doc m%"
                  groupVersion specifies the API group and version in the form "group/version"
                  "%,
                version
                  | String
                  | doc m%"
                  version specifies the version in the form of "version". This is to save the clients the trouble of splitting the GroupVersion.
                  "%,
                ..
              },
          "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            | doc m%"
            A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
            | doc m%"
            A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
            "%
            = {
                key
                  | predicates.contract_from_predicate
                  (predicates.isType '"String")
                  | doc m%"
                  key is the label key that the selector applies to.
                  "%,
                operator
                  | String
                  | doc m%"
                  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                  "%,
                values
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
            | doc m%"
            ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
            "%
            = {
                continue
                  | String
                  | doc m%"
                  continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
                  "%
                  | optional,
                remainingItemCount
                  | std.number.Integer
                  | doc m%"
                  remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
                  "%
                  | optional,
                resourceVersion
                  | String
                  | doc m%"
                  String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                  "%
                  | optional,
                selfLink
                  | String
                  | doc m%"
                  selfLink is a URL representing this object. Populated by the system. Read-only.
                  
                  DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
            | doc m%"
            ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
            "%
            = {
                apiVersion
                  | String
                  | doc m%"
                  APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
                  "%
                  | optional,
                fieldsType
                  | String
                  | doc m%"
                  FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
                  "%
                  | optional,
                fieldsV1
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1"
                  | doc m%"
                  FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
                  "%
                  | optional,
                manager
                  | String
                  | doc m%"
                  Manager is an identifier of the workflow managing these fields.
                  "%
                  | optional,
                operation
                  | String
                  | doc m%"
                  Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
                  "%
                  | optional,
                time
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Time is timestamp of when these fields were set. It should always be empty if Operation is 'Apply'
                  "%
                  | optional,
                ..
              },
          "io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
            | doc m%"
            MicroTime is version of Time with microsecond level precision.
            "%
            = String,
          "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
            | doc m%"
            ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
            "%
            = {
                annotations
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations
                  "%
                  | optional,
                clusterName
                  | String
                  | doc m%"
                  The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.
                  "%
                  | optional,
                creationTimestamp
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
                  
                  Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                  "%
                  | optional,
                deletionGracePeriodSeconds
                  | std.number.Integer
                  | doc m%"
                  Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
                  "%
                  | optional,
                deletionTimestamp
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
                  
                  Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
                  "%
                  | optional,
                finalizers
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf (predicates.isType '"String")
                  ])
                  | doc m%"
                  Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
                  "%
                  | optional,
                generateName
                  | String
                  | doc m%"
                  GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
                  
                  If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).
                  
                  Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
                  "%
                  | optional,
                generation
                  | std.number.Integer
                  | doc m%"
                  A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
                  "%
                  | optional,
                labels
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType 'Record,
                    predicates.records.record {  } {  } true
                    (predicates.isType '"String")
                  ])
                  | doc m%"
                  Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
                  "%
                  | optional,
                managedFields
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
                  ])
                  | doc m%"
                  ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
                  "%
                  | optional,
                namespace
                  | String
                  | doc m%"
                  Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
                  
                  Must be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces
                  "%
                  | optional,
                ownerReferences
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
                  ])
                  | doc m%"
                  List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
                  "%
                  | optional,
                resourceVersion
                  | String
                  | doc m%"
                  An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
                  
                  Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
                  "%
                  | optional,
                selfLink
                  | String
                  | doc m%"
                  SelfLink is a URL representing this object. Populated by the system. Read-only.
                  
                  DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.
                  "%
                  | optional,
                uid
                  | String
                  | doc m%"
                  UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
                  
                  Populated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
                  "%
                  | optional,
                ..
              },
          "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
            | doc m%"
            OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
            "%
            = {
                apiVersion
                  | String
                  | doc m%"
                  API version of the referent.
                  "%,
                blockOwnerDeletion
                  | Bool
                  | doc m%"
                  If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
                  "%
                  | optional,
                controller
                  | Bool
                  | doc m%"
                  If true, this reference points to the managing controller.
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                  "%,
                name
                  | String
                  | doc m%"
                  Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
                  "%,
                uid
                  | String
                  | doc m%"
                  UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
                  "%,
                ..
              },
          "io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            | doc m%"
            Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.
            "%
            = {  .. },
          "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions"
            | doc m%"
            Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
            "%
            = {
                resourceVersion
                  | String
                  | doc m%"
                  Specifies the target ResourceVersion
                  "%
                  | optional,
                uid
                  | String
                  | doc m%"
                  Specifies the target UID.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
            | doc m%"
            ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.
            "%
            = {
                clientCIDR
                  | String
                  | doc m%"
                  The CIDR with which clients can match their IP to figure out the server address that they should use.
                  "%,
                serverAddress
                  | String
                  | doc m%"
                  Address of this server, suitable for a client that matches the above CIDR. This can be a hostname, hostname:port, IP or IP:port.
                  "%,
                ..
              },
          "io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            | doc m%"
            Status is a return value for calls that don't return other objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Status",
          "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
            | doc m%"
            StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
            "%
            = {
                field
                  | String
                  | doc m%"
                  The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.
                  
                  Examples:
                    "name" - the field "name" on the current resource
                    "items[0].name" - the field "name" on the first array entry in "items"
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  A human-readable description of the cause of the error.  This field may be presented as-is to a reader.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  A machine-readable description of the cause of the error. If this value is empty there is no information available.
                  "%
                  | optional,
                ..
              },
          "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails"
            | doc m%"
            StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
            "%
            = {
                causes
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
                  ])
                  | doc m%"
                  The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.
                  "%
                  | optional,
                group
                  | String
                  | doc m%"
                  The group attribute of the resource associated with the status StatusReason.
                  "%
                  | optional,
                kind
                  | String
                  | doc m%"
                  The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
                  "%
                  | optional,
                name
                  | String
                  | doc m%"
                  The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).
                  "%
                  | optional,
                retryAfterSeconds
                  | std.number.Integer
                  | doc m%"
                  If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.
                  "%
                  | optional,
                uid
                  | String
                  | doc m%"
                  UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids
                  "%
                  | optional,
                ..
              },
          "io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            | doc m%"
            Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
            "%
            = String,
          "io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            | doc m%"
            Event represents a single event to a watched resource.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent",
          "io.k8s.apimachinery.pkg.runtime.RawExtension"
            | doc m%"
            RawExtension is used to hold extensions in external versions.
            
            To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.
            
            // Internal package: type MyAPIObject struct {
            	runtime.TypeMeta `json:",inline"`
            	MyPlugin runtime.Object `json:"myPlugin"`
            } type PluginA struct {
            	AOption string `json:"aOption"`
            }
            
            // External package: type MyAPIObject struct {
            	runtime.TypeMeta `json:",inline"`
            	MyPlugin runtime.RawExtension `json:"myPlugin"`
            } type PluginA struct {
            	AOption string `json:"aOption"`
            }
            
            // On the wire, the JSON will look something like this: {
            	"kind":"MyAPIObject",
            	"apiVersion":"v1",
            	"myPlugin": {
            		"kind":"PluginA",
            		"aOption":"foo",
            	},
            }
            
            So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
            "%
            = {  .. },
          "io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            | doc m%"
            IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "io.k8s.apimachinery.pkg.version.Info"
            | doc m%"
            Info contains versioning information. how we'll want to distribute that information.
            "%
            = {
                buildDate | String,
                compiler | String,
                gitCommit | String,
                gitTreeState | String,
                gitVersion | String,
                goVersion | String,
                major | String,
                minor | String,
                platform | String,
                ..
              },
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
            | doc m%"
            APIService represents a server for a particular GroupVersion. Name must be "version.group".
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService",
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition"
            | doc m%"
            APIServiceCondition describes the state of an APIService at a particular point
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  Human-readable message indicating details about last transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  Unique, one-word, CamelCase reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  Status is the status of the condition. Can be True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  Type is the type of the condition.
                  "%,
                ..
              },
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList"
            | doc m%"
            APIServiceList is a list of APIService objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList",
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec"
            | doc m%"
            APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
            "%
            = {
                caBundle
                  | predicates.contract_from_predicate
                  (predicates.isType '"String")
                  | doc m%"
                  CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.
                  "%
                  | optional,
                group
                  | String
                  | doc m%"
                  Group is the API group name this server hosts
                  "%
                  | optional,
                groupPriorityMinimum
                  | std.number.Integer
                  | doc m%"
                  GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
                  "%,
                insecureSkipTLSVerify
                  | Bool
                  | doc m%"
                  InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
                  "%
                  | optional,
                service
                  | definitions.contract."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference"
                  | doc m%"
                  Service is a reference to the service for this API server.  It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.
                  "%
                  | optional,
                version
                  | String
                  | doc m%"
                  Version is the API version this server hosts.  For example, "v1"
                  "%
                  | optional,
                versionPriority
                  | std.number.Integer
                  | doc m%"
                  VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
                  "%,
                ..
              },
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus"
            | doc m%"
            APIServiceStatus contains derived information about an API server
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition"
                  ])
                  | doc m%"
                  Current service state of apiService.
                  "%
                  | optional,
                ..
              },
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference"
            | doc m%"
            ServiceReference holds a reference to Service.legacy.k8s.io
            "%
            = {
                name
                  | String
                  | doc m%"
                  Name is the name of the service
                  "%
                  | optional,
                namespace
                  | String
                  | doc m%"
                  Namespace is the namespace of the service
                  "%
                  | optional,
                port
                  | std.number.Integer
                  | doc m%"
                  If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
                  "%
                  | optional,
                ..
              },
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
            | doc m%"
            APIService represents a server for a particular GroupVersion. Name must be "version.group".
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService",
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition"
            | doc m%"
            APIServiceCondition describes the state of an APIService at a particular point
            "%
            = {
                lastTransitionTime
                  | definitions.contract."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                  | doc m%"
                  Last time the condition transitioned from one status to another.
                  "%
                  | optional,
                message
                  | String
                  | doc m%"
                  Human-readable message indicating details about last transition.
                  "%
                  | optional,
                reason
                  | String
                  | doc m%"
                  Unique, one-word, CamelCase reason for the condition's last transition.
                  "%
                  | optional,
                status
                  | String
                  | doc m%"
                  Status is the status of the condition. Can be True, False, Unknown.
                  "%,
                type
                  | String
                  | doc m%"
                  Type is the type of the condition.
                  "%,
                ..
              },
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceList"
            | doc m%"
            APIServiceList is a list of APIService objects.
            "%
            = predicates.contract_from_predicate
              definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceList",
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec"
            | doc m%"
            APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
            "%
            = {
                caBundle
                  | predicates.contract_from_predicate
                  (predicates.isType '"String")
                  | doc m%"
                  CABundle is a PEM encoded CA bundle which will be used to validate an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.
                  "%
                  | optional,
                group
                  | String
                  | doc m%"
                  Group is the API group name this server hosts
                  "%
                  | optional,
                groupPriorityMinimum
                  | std.number.Integer
                  | doc m%"
                  GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We'd recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
                  "%,
                insecureSkipTLSVerify
                  | Bool
                  | doc m%"
                  InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
                  "%
                  | optional,
                service
                  | definitions.contract."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference"
                  | doc m%"
                  Service is a reference to the service for this API server.  It must communicate on port 443. If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.
                  "%
                  | optional,
                version
                  | String
                  | doc m%"
                  Version is the API version this server hosts.  For example, "v1"
                  "%
                  | optional,
                versionPriority
                  | std.number.Integer
                  | doc m%"
                  VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a group. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
                  "%,
                ..
              },
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceStatus"
            | doc m%"
            APIServiceStatus contains derived information about an API server
            "%
            = {
                conditions
                  | predicates.contract_from_predicate
                  (predicates.allOf
                  [
                    predicates.isType '"Array",
                    predicates.arrays.arrayOf
                    definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition"
                  ])
                  | doc m%"
                  Current service state of apiService.
                  "%
                  | optional,
                ..
              },
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference"
            | doc m%"
            ServiceReference holds a reference to Service.legacy.k8s.io
            "%
            = {
                name
                  | String
                  | doc m%"
                  Name is the name of the service
                  "%
                  | optional,
                namespace
                  | String
                  | doc m%"
                  Namespace is the namespace of the service
                  "%
                  | optional,
                port
                  | std.number.Integer
                  | doc m%"
                  If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
                  "%
                  | optional,
                ..
              },
        },
    predicate = {
          "io.argoproj.common.Amount"
            | doc m%"
            Amount represent a numeric amount.
            "%
            = predicates.isType '"Number",
          "io.argoproj.common.Backoff"
            | doc m%"
            Backoff for an operation
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  duration =
                    definitions.predicate."io.argoproj.common.Int64OrString",
                  factor = definitions.predicate."io.argoproj.common.Amount",
                  jitter = definitions.predicate."io.argoproj.common.Amount",
                  steps = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.common.BasicAuth"
            | doc m%"
            BasicAuth contains the reference to K8s secrets that holds the username and password
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  password =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  username =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.common.Condition"
            | doc m%"
            Condition contains details about resource state
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.common.Int64OrString" = predicates.anyOf
              [ predicates.isType 'Integer, predicates.isType '"String" ],
          "io.argoproj.common.Metadata"
            | doc m%"
            Metadata holds the annotations and labels of an event source pod
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  annotations = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  labels = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.common.Resource"
            | doc m%"
            Resource represent arbitrary structured data.
            "%
            = predicates.isType 'Record,
          "io.argoproj.common.S3Artifact"
            | doc m%"
            S3Artifact contains information about an S3 connection and bucket
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "accessKey", "bucket", "endpoint", "secretKey" ],
                predicates.records.record
                {
                  accessKey =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  bucket = definitions.predicate."io.argoproj.common.S3Bucket",
                  endpoint = predicates.isType '"String",
                  events = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  filter = definitions.predicate."io.argoproj.common.S3Filter",
                  insecure = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  region = predicates.isType '"String",
                  secretKey =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.common.S3Bucket"
            | doc m%"
            S3Bucket contains information to describe an S3 Bucket
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  key = predicates.isType '"String",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.common.S3Filter"
            | doc m%"
            S3Filter represents filters to apply to bucket notifications for specifying constraints on objects
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "prefix", "suffix" ],
                predicates.records.record
                {
                  prefix = predicates.isType '"String",
                  suffix = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.common.SASLConfig"
            | doc m%"
            SASLConfig refers to SASL configuration for a client
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  mechanism = predicates.isType '"String",
                  passwordSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  userSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.common.SchemaRegistryConfig"
            | doc m%"
            SchemaRegistryConfig refers to configuration for a client
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "schemaId", "url" ],
                predicates.records.record
                {
                  auth = definitions.predicate."io.argoproj.common.BasicAuth",
                  schemaId = predicates.isType 'Integer,
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.common.SecureHeader"
            | doc m%"
            SecureHeader refers to HTTP Headers with auth tokens as values
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  valueFrom =
                    definitions.predicate."io.argoproj.common.ValueFromSource",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.common.Status"
            | doc m%"
            Status is a common structure which can be used for Status field.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.common.Condition"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.common.TLSConfig"
            | doc m%"
            TLSConfig refers to TLS configuration for a client.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  caCertSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  clientCertSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  clientKeySecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  insecureSkipVerify = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.common.ValueFromSource"
            | doc m%"
            ValueFromSource allows you to reference keys from either a Configmap or Secret
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  configMapKeyRef =
                    definitions.predicate."io.k8s.api.core.v1.ConfigMapKeySelector",
                  secretKeyRef =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.BusConfig"
            | doc m%"
            BusConfig has the finalized configuration for EventBus
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  jetstream =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.JetStreamConfig",
                  kafka =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.KafkaBus",
                  nats =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.NATSConfig",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.ContainerTemplate"
            | doc m%"
            ContainerTemplate defines customized spec for a container
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  imagePullPolicy = predicates.isType '"String",
                  resources =
                    definitions.predicate."io.k8s.api.core.v1.ResourceRequirements",
                  securityContext =
                    definitions.predicate."io.k8s.api.core.v1.SecurityContext",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.EventBus"
            | doc m%"
            EventBus is the definition of a eventbus resource
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "metadata", "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.const "argoproj.io/v1alpha1"
                      ],
                  kind = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.const "EventBus"
                      ],
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.EventBusSpec",
                  status =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.EventBusStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.EventBusList"
            | doc m%"
            EventBusList is the list of eventbus resources
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items", "metadata" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.eventbus.v1alpha1.EventBus"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.EventBusSpec"
            | doc m%"
            EventBusSpec refers to specification of eventbus resource
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  jetstream =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.JetStreamBus",
                  kafka =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.KafkaBus",
                  nats =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.NATSBus",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.EventBusStatus"
            | doc m%"
            EventBusStatus holds the status of the eventbus resource
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.common.Condition"
                      ],
                  config =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.BusConfig",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.JetStreamBus"
            | doc m%"
            JetStreamBus holds the JetStream EventBus information
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  affinity =
                    definitions.predicate."io.k8s.api.core.v1.Affinity",
                  containerTemplate =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.ContainerTemplate",
                  imagePullSecrets = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.LocalObjectReference"
                      ],
                  maxPayload = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.argoproj.common.Metadata",
                  metricsContainerTemplate =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.ContainerTemplate",
                  nodeSelector = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  persistence =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.PersistenceStrategy",
                  "priority" = predicates.isType 'Integer,
                  priorityClassName = predicates.isType '"String",
                  reloaderContainerTemplate =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.ContainerTemplate",
                  replicas = predicates.isType 'Integer,
                  securityContext =
                    definitions.predicate."io.k8s.api.core.v1.PodSecurityContext",
                  serviceAccountName = predicates.isType '"String",
                  settings = predicates.isType '"String",
                  startArgs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  streamConfig = predicates.isType '"String",
                  tolerations = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Toleration"
                      ],
                  version = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.JetStreamConfig" = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  accessSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  streamConfig = predicates.isType '"String",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.KafkaBus"
            | doc m%"
            KafkaBus holds the KafkaBus EventBus information
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  consumerGroup =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.KafkaConsumerGroup",
                  sasl = definitions.predicate."io.argoproj.common.SASLConfig",
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  topic = predicates.isType '"String",
                  url = predicates.isType '"String",
                  version = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.KafkaConsumerGroup" = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  groupName = predicates.isType '"String",
                  rebalanceStrategy = predicates.isType '"String",
                  startOldest = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.NATSBus"
            | doc m%"
            NATSBus holds the NATS eventbus information
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  exotic =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.NATSConfig",
                  native =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.NativeStrategy",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.NATSConfig"
            | doc m%"
            NATSConfig holds the config of NATS
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  accessSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  auth = predicates.isType '"String",
                  clusterID = predicates.isType '"String",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.NativeStrategy"
            | doc m%"
            NativeStrategy indicates to install a native NATS service
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  affinity =
                    definitions.predicate."io.k8s.api.core.v1.Affinity",
                  auth = predicates.isType '"String",
                  containerTemplate =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.ContainerTemplate",
                  imagePullSecrets = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.LocalObjectReference"
                      ],
                  maxAge = predicates.isType '"String",
                  maxBytes = predicates.isType '"String",
                  maxMsgs = predicates.isType 'Integer,
                  maxPayload = predicates.isType '"String",
                  maxSubs = predicates.isType 'Integer,
                  metadata =
                    definitions.predicate."io.argoproj.common.Metadata",
                  metricsContainerTemplate =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.ContainerTemplate",
                  nodeSelector = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  persistence =
                    definitions.predicate."io.argoproj.eventbus.v1alpha1.PersistenceStrategy",
                  "priority" = predicates.isType 'Integer,
                  priorityClassName = predicates.isType '"String",
                  raftCommitTimeout = predicates.isType '"String",
                  raftElectionTimeout = predicates.isType '"String",
                  raftHeartbeatTimeout = predicates.isType '"String",
                  raftLeaseTimeout = predicates.isType '"String",
                  replicas = predicates.isType 'Integer,
                  securityContext =
                    definitions.predicate."io.k8s.api.core.v1.PodSecurityContext",
                  serviceAccountName = predicates.isType '"String",
                  tolerations = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Toleration"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventbus.v1alpha1.PersistenceStrategy"
            | doc m%"
            PersistenceStrategy defines the strategy of persistence
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  accessMode = predicates.isType '"String",
                  storageClassName = predicates.isType '"String",
                  volumeSize =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.AMQPConsumeConfig"
            | doc m%"
            AMQPConsumeConfig holds the configuration to immediately starts delivering queued messages
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  autoAck = predicates.isType '"Bool",
                  consumerTag = predicates.isType '"String",
                  exclusive = predicates.isType '"Bool",
                  noLocal = predicates.isType '"Bool",
                  noWait = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.AMQPEventSource"
            | doc m%"
            AMQPEventSource refers to an event-source for AMQP stream events
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "exchangeName", "exchangeType", "routingKey" ],
                predicates.records.record
                {
                  auth = definitions.predicate."io.argoproj.common.BasicAuth",
                  connectionBackoff =
                    definitions.predicate."io.argoproj.common.Backoff",
                  consume =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.AMQPConsumeConfig",
                  exchangeDeclare =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.AMQPExchangeDeclareConfig",
                  exchangeName = predicates.isType '"String",
                  exchangeType = predicates.isType '"String",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  jsonBody = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  queueBind =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.AMQPQueueBindConfig",
                  queueDeclare =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.AMQPQueueDeclareConfig",
                  routingKey = predicates.isType '"String",
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  url = predicates.isType '"String",
                  urlSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.AMQPExchangeDeclareConfig"
            | doc m%"
            AMQPExchangeDeclareConfig holds the configuration for the exchange on the server
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  autoDelete = predicates.isType '"Bool",
                  durable = predicates.isType '"Bool",
                  internal = predicates.isType '"Bool",
                  noWait = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.AMQPQueueBindConfig"
            | doc m%"
            AMQPQueueBindConfig holds the configuration that binds an exchange to a queue so that publishings to the exchange will be routed to the queue when the publishing routing key matches the binding routing key
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                { noWait = predicates.isType '"Bool", }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.AMQPQueueDeclareConfig"
            | doc m%"
            AMQPQueueDeclareConfig holds the configuration of a queue to hold messages and deliver to consumers. Declaring creates a queue if it doesn't already exist, or ensures that an existing queue matches the same parameters
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  arguments = predicates.isType '"String",
                  autoDelete = predicates.isType '"Bool",
                  durable = predicates.isType '"Bool",
                  exclusive = predicates.isType '"Bool",
                  name = predicates.isType '"String",
                  noWait = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.AzureEventsHubEventSource"
            | doc m%"
            AzureEventsHubEventSource describes the event source for azure events hub More info at https://docs.microsoft.com/en-us/azure/event-hubs/
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "fqdn", "hubName" ],
                predicates.records.record
                {
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  fqdn = predicates.isType '"String",
                  hubName = predicates.isType '"String",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  sharedAccessKey =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  sharedAccessKeyName =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.AzureQueueStorageEventSource"
            | doc m%"
            AzureQueueStorageEventSource describes the event source for azure queue storage more info at https://learn.microsoft.com/en-us/azure/storage/queues/
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "queueName" ],
                predicates.records.record
                {
                  connectionString =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  decodeMessage = predicates.isType '"Bool",
                  dlq = predicates.isType '"Bool",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  jsonBody = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  queueName = predicates.isType '"String",
                  storageAccountName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.AzureServiceBusEventSource"
            | doc m%"
            AzureServiceBusEventSource describes the event source for azure service bus More info at https://docs.microsoft.com/en-us/azure/service-bus-messaging/
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "queueName", "subscriptionName", "topicName" ],
                predicates.records.record
                {
                  connectionString =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  fullyQualifiedNamespace = predicates.isType '"String",
                  jsonBody = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  queueName = predicates.isType '"String",
                  subscriptionName = predicates.isType '"String",
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  topicName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.BitbucketAuth"
            | doc m%"
            BitbucketAuth holds the different auth strategies for connecting to Bitbucket
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  basic =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.BitbucketBasicAuth",
                  oauthToken =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.BitbucketBasicAuth"
            | doc m%"
            BasicAuth holds the information required to authenticate user via basic auth mechanism
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "password", "username" ],
                predicates.records.record
                {
                  password =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  username =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.BitbucketEventSource"
            | doc m%"
            BitbucketEventSource describes the event source for Bitbucket
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "auth", "events", "webhook" ],
                predicates.records.record
                {
                  auth =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.BitbucketAuth",
                  deleteHookOnFinish = predicates.isType '"Bool",
                  events = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  owner = predicates.isType '"String",
                  projectKey = predicates.isType '"String",
                  repositories = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.BitbucketRepository"
                      ],
                  repositorySlug = predicates.isType '"String",
                  webhook =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.WebhookContext",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.BitbucketRepository" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "owner", "repositorySlug" ],
                predicates.records.record
                {
                  owner = predicates.isType '"String",
                  repositorySlug = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.BitbucketServerEventSource"
            | doc m%"
            BitbucketServerEventSource refers to event-source related to Bitbucket Server events
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "bitbucketserverBaseURL", "events" ],
                predicates.records.record
                {
                  accessToken =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  bitbucketserverBaseURL = predicates.isType '"String",
                  deleteHookOnFinish = predicates.isType '"Bool",
                  events = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  projectKey = predicates.isType '"String",
                  repositories = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.BitbucketServerRepository"
                      ],
                  repositorySlug = predicates.isType '"String",
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  webhook =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.WebhookContext",
                  webhookSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.BitbucketServerRepository" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "projectKey", "repositorySlug" ],
                predicates.records.record
                {
                  projectKey = predicates.isType '"String",
                  repositorySlug = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.CalendarEventSource"
            | doc m%"
            CalendarEventSource describes a time based dependency. One of the fields (schedule, interval, or recurrence) must be passed. Schedule takes precedence over interval; interval takes precedence over recurrence
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  exclusionDates = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  interval = predicates.isType '"String",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  persistence =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventPersistence",
                  schedule = predicates.isType '"String",
                  timezone = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.CatchupConfiguration" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  enabled = predicates.isType '"Bool",
                  maxDuration = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.ConfigMapPersistence" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  createIfNotExist = predicates.isType '"Bool",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.EmitterEventSource"
            | doc m%"
            EmitterEventSource describes the event source for emitter More info at https://emitter.io/develop/getting-started/
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "broker", "channelKey", "channelName" ],
                predicates.records.record
                {
                  broker = predicates.isType '"String",
                  channelKey = predicates.isType '"String",
                  channelName = predicates.isType '"String",
                  connectionBackoff =
                    definitions.predicate."io.argoproj.common.Backoff",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  jsonBody = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  password =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  username =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.EventPersistence" = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  catchup =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.CatchupConfiguration",
                  configMap =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.ConfigMapPersistence",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.EventSource"
            | doc m%"
            EventSource is the definition of a eventsource resource
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "metadata", "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.const "argoproj.io/v1alpha1"
                      ],
                  kind = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.const "EventSource"
                      ],
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceSpec",
                  status =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.EventSourceFilter" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                { expression = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.EventSourceList"
            | doc m%"
            EventSourceList is the list of eventsource resources
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items", "metadata" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSource"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.EventSourceSpec"
            | doc m%"
            EventSourceSpec refers to specification of event-source resource
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  amqp = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.AMQPEventSource"
                      ],
                  azureEventsHub = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.AzureEventsHubEventSource"
                      ],
                  azureQueueStorage = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.AzureQueueStorageEventSource"
                      ],
                  azureServiceBus = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.AzureServiceBusEventSource"
                      ],
                  bitbucket = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.BitbucketEventSource"
                      ],
                  bitbucketserver = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.BitbucketServerEventSource"
                      ],
                  calendar = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.CalendarEventSource"
                      ],
                  emitter = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.EmitterEventSource"
                      ],
                  eventBusName = predicates.isType '"String",
                  file = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.FileEventSource"
                      ],
                  generic = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.GenericEventSource"
                      ],
                  gerrit = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.GerritEventSource"
                      ],
                  github = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.GithubEventSource"
                      ],
                  gitlab = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.GitlabEventSource"
                      ],
                  hdfs = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.HDFSEventSource"
                      ],
                  kafka = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.KafkaEventSource"
                      ],
                  minio = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.common.S3Artifact"
                      ],
                  mqtt = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.MQTTEventSource"
                      ],
                  nats = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.NATSEventsSource"
                      ],
                  nsq = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.NSQEventSource"
                      ],
                  pubSub = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.PubSubEventSource"
                      ],
                  pulsar = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.PulsarEventSource"
                      ],
                  redis = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.RedisEventSource"
                      ],
                  redisStream = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.RedisStreamEventSource"
                      ],
                  replicas = predicates.isType 'Integer,
                  resource = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.ResourceEventSource"
                      ],
                  service =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.Service",
                  sftp = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.SFTPEventSource"
                      ],
                  slack = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.SlackEventSource"
                      ],
                  sns = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.SNSEventSource"
                      ],
                  sqs = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.SQSEventSource"
                      ],
                  storageGrid = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.StorageGridEventSource"
                      ],
                  stripe = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.StripeEventSource"
                      ],
                  template =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.Template",
                  webhook = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.WebhookEventSource"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.EventSourceStatus"
            | doc m%"
            EventSourceStatus holds the status of the event-source resource
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.common.Condition"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.FileEventSource"
            | doc m%"
            FileEventSource describes an event-source for file related events.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "eventType", "watchPathConfig" ],
                predicates.records.record
                {
                  eventType = predicates.isType '"String",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  polling = predicates.isType '"Bool",
                  watchPathConfig =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.WatchPathConfig",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.GenericEventSource"
            | doc m%"
            GenericEventSource refers to a generic event source. It can be used to implement a custom event source.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "config", "url" ],
                predicates.records.record
                {
                  authSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  config = predicates.isType '"String",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  insecure = predicates.isType '"Bool",
                  jsonBody = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.GerritEventSource"
            | doc m%"
            GerritEventSource refers to event-source related to gerrit events
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "events", "gerritBaseURL", "hookName" ],
                predicates.records.record
                {
                  auth = definitions.predicate."io.argoproj.common.BasicAuth",
                  deleteHookOnFinish = predicates.isType '"Bool",
                  events = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  gerritBaseURL = predicates.isType '"String",
                  hookName = predicates.isType '"String",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  projects = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  sslVerify = predicates.isType '"Bool",
                  webhook =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.WebhookContext",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.GithubAppCreds" = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "appID", "installationID", "privateKey" ],
                predicates.records.record
                {
                  appID = predicates.isType 'Integer,
                  installationID = predicates.isType 'Integer,
                  privateKey =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.GithubEventSource"
            | doc m%"
            GithubEventSource refers to event-source for github related events
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "events" ],
                predicates.records.record
                {
                  active = predicates.isType '"Bool",
                  apiToken =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  contentType = predicates.isType '"String",
                  deleteHookOnFinish = predicates.isType '"Bool",
                  events = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  githubApp =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.GithubAppCreds",
                  githubBaseURL = predicates.isType '"String",
                  githubUploadURL = predicates.isType '"String",
                  id = predicates.isType 'Integer,
                  insecure = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  organizations = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  owner = predicates.isType '"String",
                  repositories = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.OwnedRepositories"
                      ],
                  repository = predicates.isType '"String",
                  webhook =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.WebhookContext",
                  webhookSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.GitlabEventSource"
            | doc m%"
            GitlabEventSource refers to event-source related to Gitlab events
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "events", "gitlabBaseURL" ],
                predicates.records.record
                {
                  accessToken =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  deleteHookOnFinish = predicates.isType '"Bool",
                  enableSSLVerification = predicates.isType '"Bool",
                  events = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  gitlabBaseURL = predicates.isType '"String",
                  groups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  projectID = predicates.isType '"String",
                  projects = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  secretToken =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  webhook =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.WebhookContext",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.HDFSEventSource"
            | doc m%"
            HDFSEventSource refers to event-source for HDFS related events
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "addresses", "directory", "type" ],
                predicates.records.record
                {
                  addresses = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  checkInterval = predicates.isType '"String",
                  directory = predicates.isType '"String",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  hdfsUser = predicates.isType '"String",
                  krbCCacheSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  krbConfigConfigMap =
                    definitions.predicate."io.k8s.api.core.v1.ConfigMapKeySelector",
                  krbKeytabSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  krbRealm = predicates.isType '"String",
                  krbServicePrincipalName = predicates.isType '"String",
                  krbUsername = predicates.isType '"String",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  path = predicates.isType '"String",
                  pathRegexp = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.KafkaConsumerGroup" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "groupName" ],
                predicates.records.record
                {
                  groupName = predicates.isType '"String",
                  oldest = predicates.isType '"Bool",
                  rebalanceStrategy = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.KafkaEventSource"
            | doc m%"
            KafkaEventSource refers to event-source for Kafka related events
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "topic", "url" ],
                predicates.records.record
                {
                  config = predicates.isType '"String",
                  connectionBackoff =
                    definitions.predicate."io.argoproj.common.Backoff",
                  consumerGroup =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.KafkaConsumerGroup",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  jsonBody = predicates.isType '"Bool",
                  limitEventsPerSecond = predicates.isType 'Integer,
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  partition = predicates.isType '"String",
                  sasl = definitions.predicate."io.argoproj.common.SASLConfig",
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  topic = predicates.isType '"String",
                  url = predicates.isType '"String",
                  version = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.MQTTEventSource"
            | doc m%"
            MQTTEventSource refers to event-source for MQTT related events
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "clientId", "topic", "url" ],
                predicates.records.record
                {
                  auth = definitions.predicate."io.argoproj.common.BasicAuth",
                  clientId = predicates.isType '"String",
                  connectionBackoff =
                    definitions.predicate."io.argoproj.common.Backoff",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  jsonBody = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  topic = predicates.isType '"String",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.NATSAuth"
            | doc m%"
            NATSAuth refers to the auth info for NATS EventSource
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  basic = definitions.predicate."io.argoproj.common.BasicAuth",
                  credential =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  nkey =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  token =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.NATSEventsSource"
            | doc m%"
            NATSEventsSource refers to event-source for NATS related events
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "subject", "url" ],
                predicates.records.record
                {
                  auth =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.NATSAuth",
                  connectionBackoff =
                    definitions.predicate."io.argoproj.common.Backoff",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  jsonBody = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  subject = predicates.isType '"String",
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.NSQEventSource"
            | doc m%"
            NSQEventSource describes the event source for NSQ PubSub More info at https://godoc.org/github.com/nsqio/go-nsq
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "channel", "hostAddress", "topic" ],
                predicates.records.record
                {
                  channel = predicates.isType '"String",
                  connectionBackoff =
                    definitions.predicate."io.argoproj.common.Backoff",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  hostAddress = predicates.isType '"String",
                  jsonBody = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  topic = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.OwnedRepositories" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  names = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  owner = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.PubSubEventSource"
            | doc m%"
            PubSubEventSource refers to event-source for GCP PubSub related events.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  credentialSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  deleteSubscriptionOnFinish = predicates.isType '"Bool",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  jsonBody = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  projectID = predicates.isType '"String",
                  subscriptionID = predicates.isType '"String",
                  topic = predicates.isType '"String",
                  topicProjectID = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.PulsarEventSource"
            | doc m%"
            PulsarEventSource describes the event source for Apache Pulsar
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "topics", "url" ],
                predicates.records.record
                {
                  authAthenzParams = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  authAthenzSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  authTokenSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  connectionBackoff =
                    definitions.predicate."io.argoproj.common.Backoff",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  jsonBody = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  tlsAllowInsecureConnection = predicates.isType '"Bool",
                  tlsTrustCertsSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  tlsValidateHostname = predicates.isType '"Bool",
                  topics = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  type = predicates.isType '"String",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.RedisEventSource"
            | doc m%"
            RedisEventSource describes an event source for the Redis PubSub. More info at https://godoc.org/github.com/go-redis/redis#example-PubSub
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "channels", "hostAddress" ],
                predicates.records.record
                {
                  channels = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  db = predicates.isType 'Integer,
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  hostAddress = predicates.isType '"String",
                  jsonBody = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  namespace = predicates.isType '"String",
                  password =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  username = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.RedisStreamEventSource"
            | doc m%"
            RedisStreamEventSource describes an event source for Redis streams (https://redis.io/topics/streams-intro)
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "hostAddress", "streams" ],
                predicates.records.record
                {
                  consumerGroup = predicates.isType '"String",
                  db = predicates.isType 'Integer,
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  hostAddress = predicates.isType '"String",
                  maxMsgCountPerRead = predicates.isType 'Integer,
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  password =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  streams = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  username = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.ResourceEventSource"
            | doc m%"
            ResourceEventSource refers to a event-source for K8s resource related events.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "eventTypes", "group", "namespace", "resource", "version" ],
                predicates.records.record
                {
                  eventTypes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.ResourceFilter",
                  group = predicates.isType '"String",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  namespace = predicates.isType '"String",
                  resource = predicates.isType '"String",
                  version = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.ResourceFilter"
            | doc m%"
            ResourceFilter contains K8s ObjectMeta information to further filter resource event objects
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  afterStart = predicates.isType '"Bool",
                  createdBy =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  fields = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.Selector"
                      ],
                  labels = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.eventsource.v1alpha1.Selector"
                      ],
                  prefix = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.SFTPEventSource"
            | doc m%"
            SFTPEventSource describes an event-source for sftp related events.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "eventType", "watchPathConfig" ],
                predicates.records.record
                {
                  address =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  eventType = predicates.isType '"String",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  password =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  pollIntervalDuration = predicates.isType '"String",
                  username =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  watchPathConfig =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.WatchPathConfig",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.SNSEventSource"
            | doc m%"
            SNSEventSource refers to event-source for AWS SNS related events
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "region", "topicArn" ],
                predicates.records.record
                {
                  accessKey =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  endpoint = predicates.isType '"String",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  region = predicates.isType '"String",
                  roleARN = predicates.isType '"String",
                  secretKey =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  topicArn = predicates.isType '"String",
                  validateSignature = predicates.isType '"Bool",
                  webhook =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.WebhookContext",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.SQSEventSource"
            | doc m%"
            SQSEventSource refers to event-source for AWS SQS related events
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "queue", "region", "waitTimeSeconds" ],
                predicates.records.record
                {
                  accessKey =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  dlq = predicates.isType '"Bool",
                  endpoint = predicates.isType '"String",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  jsonBody = predicates.isType '"Bool",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  queue = predicates.isType '"String",
                  queueAccountId = predicates.isType '"String",
                  region = predicates.isType '"String",
                  roleARN = predicates.isType '"String",
                  secretKey =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  sessionToken =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  waitTimeSeconds = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.Selector"
            | doc m%"
            Selector represents conditional operation to select K8s objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "key", "value" ],
                predicates.records.record
                {
                  key = predicates.isType '"String",
                  operation = predicates.isType '"String",
                  value = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.Service"
            | doc m%"
            Service holds the service information eventsource exposes
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  clusterIP = predicates.isType '"String",
                  ports = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ServicePort"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.SlackEventSource"
            | doc m%"
            SlackEventSource refers to event-source for Slack related events
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  signingSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  token =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  webhook =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.WebhookContext",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.StorageGridEventSource"
            | doc m%"
            StorageGridEventSource refers to event-source for StorageGrid related events
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "apiURL", "authToken", "bucket", "topicArn" ],
                predicates.records.record
                {
                  apiURL = predicates.isType '"String",
                  authToken =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  bucket = predicates.isType '"String",
                  events = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.StorageGridFilter",
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  region = predicates.isType '"String",
                  topicArn = predicates.isType '"String",
                  webhook =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.WebhookContext",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.StorageGridFilter"
            | doc m%"
            StorageGridFilter represents filters to apply to bucket notifications for specifying constraints on objects
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "prefix", "suffix" ],
                predicates.records.record
                {
                  prefix = predicates.isType '"String",
                  suffix = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.StripeEventSource"
            | doc m%"
            StripeEventSource describes the event source for stripe webhook notifications More info at https://stripe.com/docs/webhooks
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiKey =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  createWebhook = predicates.isType '"Bool",
                  eventFilter = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  webhook =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.WebhookContext",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.Template"
            | doc m%"
            Template holds the information of an EventSource deployment template
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  affinity =
                    definitions.predicate."io.k8s.api.core.v1.Affinity",
                  container =
                    definitions.predicate."io.k8s.api.core.v1.Container",
                  imagePullSecrets = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.LocalObjectReference"
                      ],
                  metadata =
                    definitions.predicate."io.argoproj.common.Metadata",
                  nodeSelector = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  "priority" = predicates.isType 'Integer,
                  priorityClassName = predicates.isType '"String",
                  securityContext =
                    definitions.predicate."io.k8s.api.core.v1.PodSecurityContext",
                  serviceAccountName = predicates.isType '"String",
                  tolerations = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Toleration"
                      ],
                  volumes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Volume"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.WatchPathConfig" = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "directory" ],
                predicates.records.record
                {
                  directory = predicates.isType '"String",
                  path = predicates.isType '"String",
                  pathRegexp = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.WebhookContext"
            | doc m%"
            WebhookContext holds a general purpose REST API context
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "endpoint", "method", "port", "url" ],
                predicates.records.record
                {
                  authSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  endpoint = predicates.isType '"String",
                  maxPayloadSize = predicates.isType 'Integer,
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  method = predicates.isType '"String",
                  port = predicates.isType '"String",
                  serverCertSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  serverKeySecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.eventsource.v1alpha1.WebhookEventSource"
            | doc m%"
            CalendarEventSource describes an HTTP based EventSource
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "endpoint", "method", "port", "url" ],
                predicates.records.record
                {
                  authSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  endpoint = predicates.isType '"String",
                  filter =
                    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSourceFilter",
                  maxPayloadSize = predicates.isType 'Integer,
                  metadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  method = predicates.isType '"String",
                  port = predicates.isType '"String",
                  serverCertSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  serverKeySecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.AWSLambdaTrigger"
            | doc m%"
            AWSLambdaTrigger refers to specification of the trigger to invoke an AWS Lambda function
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "functionName", "payload", "region" ],
                predicates.records.record
                {
                  accessKey =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  functionName = predicates.isType '"String",
                  invocationType = predicates.isType '"String",
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  payload = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  region = predicates.isType '"String",
                  roleARN = predicates.isType '"String",
                  secretKey =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.ArgoWorkflowTrigger"
            | doc m%"
            ArgoWorkflowTrigger is the trigger for the Argo Workflow
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  args = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  operation = predicates.isType '"String",
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  source =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.ArtifactLocation",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.ArtifactLocation"
            | doc m%"
            ArtifactLocation describes the source location for an external artifact
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  configmap =
                    definitions.predicate."io.k8s.api.core.v1.ConfigMapKeySelector",
                  file =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.FileArtifact",
                  git =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.GitArtifact",
                  inline = predicates.isType '"String",
                  resource =
                    definitions.predicate."io.argoproj.common.Resource",
                  s3 = definitions.predicate."io.argoproj.common.S3Artifact",
                  url =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.URLArtifact",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.AzureEventHubsTrigger"
            | doc m%"
            AzureEventHubsTrigger refers to specification of the Azure Event Hubs Trigger
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "fqdn", "hubName", "payload", "sharedAccessKeyName" ],
                predicates.records.record
                {
                  fqdn = predicates.isType '"String",
                  hubName = predicates.isType '"String",
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  payload = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  sharedAccessKey =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  sharedAccessKeyName =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.AzureServiceBusTrigger" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "payload", "queueName", "subscriptionName", "topicName" ],
                predicates.records.record
                {
                  connectionString =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  payload = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  queueName = predicates.isType '"String",
                  subscriptionName = predicates.isType '"String",
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  topicName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.ConditionsResetByTime" = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  cron = predicates.isType '"String",
                  timezone = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.ConditionsResetCriteria" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  byTime =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.ConditionsResetByTime",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.CustomTrigger"
            | doc m%"
            CustomTrigger refers to the specification of the custom trigger.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "payload", "secure", "serverURL", "spec" ],
                predicates.records.record
                {
                  certSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  payload = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  secure = predicates.isType '"Bool",
                  serverNameOverride = predicates.isType '"String",
                  serverURL = predicates.isType '"String",
                  spec = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.DataFilter"
            | doc m%"
            DataFilter describes constraints and filters for event data Regular Expressions are purposefully not a feature as they are overkill for our uses here See Rob Pike's Post: https://commandcenter.blogspot.com/2011/08/regular-expressions-in-lexing-and.html
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "path", "type", "value" ],
                predicates.records.record
                {
                  comparator = predicates.isType '"String",
                  path = predicates.isType '"String",
                  template = predicates.isType '"String",
                  type = predicates.isType '"String",
                  value = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.EmailTrigger"
            | doc m%"
            EmailTrigger refers to the specification of the email notification trigger.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  body = predicates.isType '"String",
                  from = predicates.isType '"String",
                  host = predicates.isType '"String",
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  port = predicates.isType 'Integer,
                  smtpPassword =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  subject = predicates.isType '"String",
                  to = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  username = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.Event"
            | doc m%"
            Event represents the cloudevent received from an event source.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "data" ],
                predicates.records.record
                {
                  context =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.EventContext",
                  data = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.EventContext"
            | doc m%"
            EventContext holds the context of the cloudevent received from an event source.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [
                  "datacontenttype",
                  "id",
                  "source",
                  "specversion",
                  "subject",
                  "time",
                  "type"
                ],
                predicates.records.record
                {
                  datacontenttype = predicates.isType '"String",
                  id = predicates.isType '"String",
                  source = predicates.isType '"String",
                  specversion = predicates.isType '"String",
                  subject = predicates.isType '"String",
                  time =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.EventDependency"
            | doc m%"
            EventDependency describes a dependency
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "eventName", "eventSourceName", "name" ],
                predicates.records.record
                {
                  eventName = predicates.isType '"String",
                  eventSourceName = predicates.isType '"String",
                  filters =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.EventDependencyFilter",
                  filtersLogicalOperator = predicates.isType '"String",
                  name = predicates.isType '"String",
                  transform =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.EventDependencyTransformer",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.EventDependencyFilter"
            | doc m%"
            EventDependencyFilter defines filters and constraints for a event.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  context =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.EventContext",
                  data = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.DataFilter"
                      ],
                  dataLogicalOperator = predicates.isType '"String",
                  exprLogicalOperator = predicates.isType '"String",
                  exprs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.ExprFilter"
                      ],
                  script = predicates.isType '"String",
                  time =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TimeFilter",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.EventDependencyTransformer"
            | doc m%"
            EventDependencyTransformer transforms the event
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  jq = predicates.isType '"String",
                  script = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.ExprFilter" = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "expr", "fields" ],
                predicates.records.record
                {
                  expr = predicates.isType '"String",
                  fields = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.PayloadField"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.FileArtifact"
            | doc m%"
            FileArtifact contains information about an artifact in a filesystem
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                { path = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.GitArtifact"
            | doc m%"
            GitArtifact contains information about an artifact stored in git
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "cloneDirectory", "filePath", "url" ],
                predicates.records.record
                {
                  branch = predicates.isType '"String",
                  cloneDirectory = predicates.isType '"String",
                  creds =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.GitCreds",
                  filePath = predicates.isType '"String",
                  insecureIgnoreHostKey = predicates.isType '"Bool",
                  ref = predicates.isType '"String",
                  remote =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.GitRemoteConfig",
                  sshKeySecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  tag = predicates.isType '"String",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.GitCreds"
            | doc m%"
            GitCreds contain reference to git username and password
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  password =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  username =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.GitRemoteConfig"
            | doc m%"
            GitRemoteConfig contains the configuration of a Git remote
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "urls" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  urls = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.HTTPTrigger"
            | doc m%"
            HTTPTrigger is the trigger for the HTTP request
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "payload", "url" ],
                predicates.records.record
                {
                  basicAuth =
                    definitions.predicate."io.argoproj.common.BasicAuth",
                  headers = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  method = predicates.isType '"String",
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  payload = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  secureHeaders = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.common.SecureHeader"
                      ],
                  timeout = predicates.isType 'Integer,
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.K8SResourcePolicy"
            | doc m%"
            K8SResourcePolicy refers to the policy used to check the state of K8s based triggers using labels
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "backoff", "errorOnBackoffTimeout" ],
                predicates.records.record
                {
                  backoff = definitions.predicate."io.argoproj.common.Backoff",
                  errorOnBackoffTimeout = predicates.isType '"Bool",
                  labels = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.KafkaTrigger"
            | doc m%"
            KafkaTrigger refers to the specification of the Kafka trigger.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "payload", "topic", "url" ],
                predicates.records.record
                {
                  compress = predicates.isType '"Bool",
                  flushFrequency = predicates.isType 'Integer,
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  partition = predicates.isType 'Integer,
                  partitioningKey = predicates.isType '"String",
                  payload = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  requiredAcks = predicates.isType 'Integer,
                  sasl = definitions.predicate."io.argoproj.common.SASLConfig",
                  schemaRegistry =
                    definitions.predicate."io.argoproj.common.SchemaRegistryConfig",
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  topic = predicates.isType '"String",
                  url = predicates.isType '"String",
                  version = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.LogTrigger" = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                { intervalSeconds = predicates.isType 'Integer, }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.NATSTrigger"
            | doc m%"
            NATSTrigger refers to the specification of the NATS trigger.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "payload", "subject", "url" ],
                predicates.records.record
                {
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  payload = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  subject = predicates.isType '"String",
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.OpenWhiskTrigger"
            | doc m%"
            OpenWhiskTrigger refers to the specification of the OpenWhisk trigger.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "actionName", "host", "payload" ],
                predicates.records.record
                {
                  actionName = predicates.isType '"String",
                  authToken =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  host = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  payload = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  version = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.PayloadField"
            | doc m%"
            PayloadField binds a value at path within the event payload against a name.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "path" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  path = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.PulsarTrigger"
            | doc m%"
            PulsarTrigger refers to the specification of the Pulsar trigger.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "payload", "topic", "url" ],
                predicates.records.record
                {
                  authAthenzParams = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  authAthenzSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  authTokenSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  connectionBackoff =
                    definitions.predicate."io.argoproj.common.Backoff",
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  payload = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  tls = definitions.predicate."io.argoproj.common.TLSConfig",
                  tlsAllowInsecureConnection = predicates.isType '"Bool",
                  tlsTrustCertsSecret =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  tlsValidateHostname = predicates.isType '"Bool",
                  topic = predicates.isType '"String",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.RateLimit" = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  requestsPerUnit = predicates.isType 'Integer,
                  unit = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.Sensor"
            | doc m%"
            Sensor is the definition of a sensor resource
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "metadata", "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.const "argoproj.io/v1alpha1"
                      ],
                  kind = predicates.allOf
                      [
                        predicates.isType '"String",
                        predicates.const "Sensor"
                      ],
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.SensorSpec",
                  status =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.SensorStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.SensorList"
            | doc m%"
            SensorList is the list of Sensor resources
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items", "metadata" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.Sensor"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.SensorSpec"
            | doc m%"
            SensorSpec represents desired sensor state
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "dependencies", "triggers" ],
                predicates.records.record
                {
                  dependencies = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.EventDependency"
                      ],
                  errorOnFailedRound = predicates.isType '"Bool",
                  eventBusName = predicates.isType '"String",
                  loggingFields = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  replicas = predicates.isType 'Integer,
                  revisionHistoryLimit = predicates.isType 'Integer,
                  template =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.Template",
                  triggers = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.Trigger"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.SensorStatus"
            | doc m%"
            SensorStatus contains information about the status of a sensor.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.common.Condition"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.SlackSender" = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  icon = predicates.isType '"String",
                  username = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.SlackThread" = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  broadcastMessageToChannel = predicates.isType '"Bool",
                  messageAggregationKey = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.SlackTrigger"
            | doc m%"
            SlackTrigger refers to the specification of the slack notification trigger.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  attachments = predicates.isType '"String",
                  blocks = predicates.isType '"String",
                  channel = predicates.isType '"String",
                  message = predicates.isType '"String",
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  sender =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.SlackSender",
                  slackToken =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                  thread =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.SlackThread",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.StandardK8STrigger"
            | doc m%"
            StandardK8STrigger is the standard Kubernetes resource trigger
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  liveObject = predicates.isType '"Bool",
                  operation = predicates.isType '"String",
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  patchStrategy = predicates.isType '"String",
                  source =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.ArtifactLocation",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.StatusPolicy"
            | doc m%"
            StatusPolicy refers to the policy used to check the state of the trigger using response status
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "allow" ],
                predicates.records.record
                {
                  allow = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType 'Integer)
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.Template"
            | doc m%"
            Template holds the information of a sensor deployment template
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  affinity =
                    definitions.predicate."io.k8s.api.core.v1.Affinity",
                  container =
                    definitions.predicate."io.k8s.api.core.v1.Container",
                  imagePullSecrets = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.LocalObjectReference"
                      ],
                  metadata =
                    definitions.predicate."io.argoproj.common.Metadata",
                  nodeSelector = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  "priority" = predicates.isType 'Integer,
                  priorityClassName = predicates.isType '"String",
                  securityContext =
                    definitions.predicate."io.k8s.api.core.v1.PodSecurityContext",
                  serviceAccountName = predicates.isType '"String",
                  tolerations = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Toleration"
                      ],
                  volumes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Volume"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.TimeFilter"
            | doc m%"
            TimeFilter describes a window in time. It filters out events that occur outside the time limits. In other words, only events that occur after Start and before Stop will pass this filter.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "start", "stop" ],
                predicates.records.record
                {
                  start = predicates.isType '"String",
                  stop = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.Trigger"
            | doc m%"
            Trigger is an action taken, output produced, an event created, a message sent
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  atLeastOnce = predicates.isType '"Bool",
                  parameters = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameter"
                      ],
                  policy =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerPolicy",
                  rateLimit =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.RateLimit",
                  retryStrategy =
                    definitions.predicate."io.argoproj.common.Backoff",
                  template =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerTemplate",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.TriggerParameter"
            | doc m%"
            TriggerParameter indicates a passed parameter to a service template
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "dest" ],
                predicates.records.record
                {
                  dest = predicates.isType '"String",
                  operation = predicates.isType '"String",
                  src =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.TriggerParameterSource",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.TriggerParameterSource"
            | doc m%"
            TriggerParameterSource defines the source for a parameter from a event event
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "dependencyName" ],
                predicates.records.record
                {
                  contextKey = predicates.isType '"String",
                  contextTemplate = predicates.isType '"String",
                  dataKey = predicates.isType '"String",
                  dataTemplate = predicates.isType '"String",
                  dependencyName = predicates.isType '"String",
                  useRawData = predicates.isType '"Bool",
                  value = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.TriggerPolicy"
            | doc m%"
            TriggerPolicy dictates the policy for the trigger retries
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  k8s =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.K8SResourcePolicy",
                  status =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.StatusPolicy",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.TriggerTemplate"
            | doc m%"
            TriggerTemplate is the template that describes trigger specification.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  argoWorkflow =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.ArgoWorkflowTrigger",
                  awsLambda =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.AWSLambdaTrigger",
                  azureEventHubs =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.AzureEventHubsTrigger",
                  azureServiceBus =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.AzureServiceBusTrigger",
                  conditions = predicates.isType '"String",
                  conditionsReset = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.argoproj.sensor.v1alpha1.ConditionsResetCriteria"
                      ],
                  custom =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.CustomTrigger",
                  email =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.EmailTrigger",
                  http =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.HTTPTrigger",
                  k8s =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.StandardK8STrigger",
                  kafka =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.KafkaTrigger",
                  log =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.LogTrigger",
                  name = predicates.isType '"String",
                  nats =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.NATSTrigger",
                  openWhisk =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.OpenWhiskTrigger",
                  pulsar =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.PulsarTrigger",
                  slack =
                    definitions.predicate."io.argoproj.sensor.v1alpha1.SlackTrigger",
                }
                {  }
                true
                predicates.always
              ],
          "io.argoproj.sensor.v1alpha1.URLArtifact"
            | doc m%"
            URLArtifact contains information about an artifact at an http endpoint.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "path" ],
                predicates.records.record
                {
                  path = predicates.isType '"String",
                  verifyCert = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1.MutatingWebhook"
            | doc m%"
            MutatingWebhook describes an admission webhook and the resources and operations it applies to.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [
                  "admissionReviewVersions",
                  "clientConfig",
                  "name",
                  "sideEffects"
                ],
                predicates.records.record
                {
                  admissionReviewVersions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  clientConfig =
                    definitions.predicate."io.k8s.api.admissionregistration.v1.WebhookClientConfig",
                  failurePolicy = predicates.isType '"String",
                  matchPolicy = predicates.isType '"String",
                  name = predicates.isType '"String",
                  namespaceSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  objectSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  reinvocationPolicy = predicates.isType '"String",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.admissionregistration.v1.RuleWithOperations"
                      ],
                  sideEffects = predicates.isType '"String",
                  timeoutSeconds = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration"
            | doc m%"
            MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  webhooks = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.admissionregistration.v1.MutatingWebhook"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList"
            | doc m%"
            MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1.RuleWithOperations"
            | doc m%"
            RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiGroups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  apiVersions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  operations = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resources = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  scope = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1.ServiceReference"
            | doc m%"
            ServiceReference holds a reference to Service.legacy.k8s.io
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "namespace" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                  path = predicates.isType '"String",
                  port = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1.ValidatingWebhook"
            | doc m%"
            ValidatingWebhook describes an admission webhook and the resources and operations it applies to.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [
                  "admissionReviewVersions",
                  "clientConfig",
                  "name",
                  "sideEffects"
                ],
                predicates.records.record
                {
                  admissionReviewVersions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  clientConfig =
                    definitions.predicate."io.k8s.api.admissionregistration.v1.WebhookClientConfig",
                  failurePolicy = predicates.isType '"String",
                  matchPolicy = predicates.isType '"String",
                  name = predicates.isType '"String",
                  namespaceSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  objectSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.admissionregistration.v1.RuleWithOperations"
                      ],
                  sideEffects = predicates.isType '"String",
                  timeoutSeconds = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration"
            | doc m%"
            ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  webhooks = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.admissionregistration.v1.ValidatingWebhook"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList"
            | doc m%"
            ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1.WebhookClientConfig"
            | doc m%"
            WebhookClientConfig contains the information to make a TLS connection with the webhook
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  caBundle = predicates.isType '"String",
                  service =
                    definitions.predicate."io.k8s.api.admissionregistration.v1.ServiceReference",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1beta1.MutatingWebhook"
            | doc m%"
            MutatingWebhook describes an admission webhook and the resources and operations it applies to.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "clientConfig", "name" ],
                predicates.records.record
                {
                  admissionReviewVersions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  clientConfig =
                    definitions.predicate."io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig",
                  failurePolicy = predicates.isType '"String",
                  matchPolicy = predicates.isType '"String",
                  name = predicates.isType '"String",
                  namespaceSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  objectSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  reinvocationPolicy = predicates.isType '"String",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.admissionregistration.v1beta1.RuleWithOperations"
                      ],
                  sideEffects = predicates.isType '"String",
                  timeoutSeconds = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
            | doc m%"
            MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 MutatingWebhookConfiguration instead.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  webhooks = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.admissionregistration.v1beta1.MutatingWebhook"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList"
            | doc m%"
            MutatingWebhookConfigurationList is a list of MutatingWebhookConfiguration.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1beta1.RuleWithOperations"
            | doc m%"
            RuleWithOperations is a tuple of Operations and Resources. It is recommended to make sure that all the tuple expansions are valid.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiGroups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  apiVersions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  operations = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resources = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  scope = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1beta1.ServiceReference"
            | doc m%"
            ServiceReference holds a reference to Service.legacy.k8s.io
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "namespace" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                  path = predicates.isType '"String",
                  port = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook"
            | doc m%"
            ValidatingWebhook describes an admission webhook and the resources and operations it applies to.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "clientConfig", "name" ],
                predicates.records.record
                {
                  admissionReviewVersions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  clientConfig =
                    definitions.predicate."io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig",
                  failurePolicy = predicates.isType '"String",
                  matchPolicy = predicates.isType '"String",
                  name = predicates.isType '"String",
                  namespaceSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  objectSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.admissionregistration.v1beta1.RuleWithOperations"
                      ],
                  sideEffects = predicates.isType '"String",
                  timeoutSeconds = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
            | doc m%"
            ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 ValidatingWebhookConfiguration instead.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  webhooks = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList"
            | doc m%"
            ValidatingWebhookConfigurationList is a list of ValidatingWebhookConfiguration.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig"
            | doc m%"
            WebhookClientConfig contains the information to make a TLS connection with the webhook
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  caBundle = predicates.isType '"String",
                  service =
                    definitions.predicate."io.k8s.api.admissionregistration.v1beta1.ServiceReference",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apiserverinternal.v1alpha1.ServerStorageVersion"
            | doc m%"
            An API server instance reports the version it can decode and the version it encodes objects to when persisting objects in the backend.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiServerID = predicates.isType '"String",
                  decodableVersions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  encodingVersion = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apiserverinternal.v1alpha1.StorageVersion"
            | doc m%"
            
             Storage version of a specific resource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec", "status" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.apiserverinternal.v1alpha1.StorageVersionSpec",
                  status =
                    definitions.predicate."io.k8s.api.apiserverinternal.v1alpha1.StorageVersionStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apiserverinternal.v1alpha1.StorageVersionCondition"
            | doc m%"
            Describes the state of the storageVersion at a certain point.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "reason", "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  observedGeneration = predicates.isType 'Integer,
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList"
            | doc m%"
            A list of StorageVersions.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.apiserverinternal.v1alpha1.StorageVersion"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apiserverinternal.v1alpha1.StorageVersionSpec"
            | doc m%"
            StorageVersionSpec is an empty spec.
            "%
            = predicates.isType 'Record,
          "io.k8s.api.apiserverinternal.v1alpha1.StorageVersionStatus"
            | doc m%"
            API server instances report the versions they can decode and the version they encode objects to when persisting objects in the backend.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  commonEncodingVersion = predicates.isType '"String",
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.apiserverinternal.v1alpha1.StorageVersionCondition"
                      ],
                  storageVersions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.apiserverinternal.v1alpha1.ServerStorageVersion"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.ControllerRevision"
            | doc m%"
            ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "revision" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  data =
                    definitions.predicate."io.k8s.apimachinery.pkg.runtime.RawExtension",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  revision = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.ControllerRevisionList"
            | doc m%"
            ControllerRevisionList is a resource containing a list of ControllerRevision objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.apps.v1.ControllerRevision"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.DaemonSet"
            | doc m%"
            DaemonSet represents the configuration of a daemon set.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.apps.v1.DaemonSetSpec",
                  status =
                    definitions.predicate."io.k8s.api.apps.v1.DaemonSetStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.DaemonSetCondition"
            | doc m%"
            DaemonSetCondition describes the state of a DaemonSet at a certain point.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.DaemonSetList"
            | doc m%"
            DaemonSetList is a collection of daemon sets.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.apps.v1.DaemonSet"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.DaemonSetSpec"
            | doc m%"
            DaemonSetSpec is the specification of a daemon set.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "selector", "template" ],
                predicates.records.record
                {
                  minReadySeconds = predicates.isType 'Integer,
                  revisionHistoryLimit = predicates.isType 'Integer,
                  selector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  template =
                    definitions.predicate."io.k8s.api.core.v1.PodTemplateSpec",
                  updateStrategy =
                    definitions.predicate."io.k8s.api.apps.v1.DaemonSetUpdateStrategy",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.DaemonSetStatus"
            | doc m%"
            DaemonSetStatus represents the current status of a daemon set.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [
                  "currentNumberScheduled",
                  "desiredNumberScheduled",
                  "numberMisscheduled",
                  "numberReady"
                ],
                predicates.records.record
                {
                  collisionCount = predicates.isType 'Integer,
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.apps.v1.DaemonSetCondition"
                      ],
                  currentNumberScheduled = predicates.isType 'Integer,
                  desiredNumberScheduled = predicates.isType 'Integer,
                  numberAvailable = predicates.isType 'Integer,
                  numberMisscheduled = predicates.isType 'Integer,
                  numberReady = predicates.isType 'Integer,
                  numberUnavailable = predicates.isType 'Integer,
                  observedGeneration = predicates.isType 'Integer,
                  updatedNumberScheduled = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.DaemonSetUpdateStrategy"
            | doc m%"
            DaemonSetUpdateStrategy is a struct used to control the update strategy for a DaemonSet.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  rollingUpdate =
                    definitions.predicate."io.k8s.api.apps.v1.RollingUpdateDaemonSet",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.Deployment"
            | doc m%"
            Deployment enables declarative updates for Pods and ReplicaSets.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.apps.v1.DeploymentSpec",
                  status =
                    definitions.predicate."io.k8s.api.apps.v1.DeploymentStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.DeploymentCondition"
            | doc m%"
            DeploymentCondition describes the state of a deployment at a certain point.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  lastUpdateTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.DeploymentList"
            | doc m%"
            DeploymentList is a list of Deployments.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.apps.v1.Deployment"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.DeploymentSpec"
            | doc m%"
            DeploymentSpec is the specification of the desired behavior of the Deployment.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "selector", "template" ],
                predicates.records.record
                {
                  minReadySeconds = predicates.isType 'Integer,
                  paused = predicates.isType '"Bool",
                  progressDeadlineSeconds = predicates.isType 'Integer,
                  replicas = predicates.isType 'Integer,
                  revisionHistoryLimit = predicates.isType 'Integer,
                  selector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  strategy =
                    definitions.predicate."io.k8s.api.apps.v1.DeploymentStrategy",
                  template =
                    definitions.predicate."io.k8s.api.core.v1.PodTemplateSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.DeploymentStatus"
            | doc m%"
            DeploymentStatus is the most recently observed status of the Deployment.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  availableReplicas = predicates.isType 'Integer,
                  collisionCount = predicates.isType 'Integer,
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.apps.v1.DeploymentCondition"
                      ],
                  observedGeneration = predicates.isType 'Integer,
                  readyReplicas = predicates.isType 'Integer,
                  replicas = predicates.isType 'Integer,
                  unavailableReplicas = predicates.isType 'Integer,
                  updatedReplicas = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.DeploymentStrategy"
            | doc m%"
            DeploymentStrategy describes how to replace existing pods with new ones.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  rollingUpdate =
                    definitions.predicate."io.k8s.api.apps.v1.RollingUpdateDeployment",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.ReplicaSet"
            | doc m%"
            ReplicaSet ensures that a specified number of pod replicas are running at any given time.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.apps.v1.ReplicaSetSpec",
                  status =
                    definitions.predicate."io.k8s.api.apps.v1.ReplicaSetStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.ReplicaSetCondition"
            | doc m%"
            ReplicaSetCondition describes the state of a replica set at a certain point.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.ReplicaSetList"
            | doc m%"
            ReplicaSetList is a collection of ReplicaSets.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.apps.v1.ReplicaSet"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.ReplicaSetSpec"
            | doc m%"
            ReplicaSetSpec is the specification of a ReplicaSet.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "selector" ],
                predicates.records.record
                {
                  minReadySeconds = predicates.isType 'Integer,
                  replicas = predicates.isType 'Integer,
                  selector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  template =
                    definitions.predicate."io.k8s.api.core.v1.PodTemplateSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.ReplicaSetStatus"
            | doc m%"
            ReplicaSetStatus represents the current status of a ReplicaSet.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "replicas" ],
                predicates.records.record
                {
                  availableReplicas = predicates.isType 'Integer,
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.apps.v1.ReplicaSetCondition"
                      ],
                  fullyLabeledReplicas = predicates.isType 'Integer,
                  observedGeneration = predicates.isType 'Integer,
                  readyReplicas = predicates.isType 'Integer,
                  replicas = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.RollingUpdateDaemonSet"
            | doc m%"
            Spec to control the desired behavior of daemon set rolling update.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  maxUnavailable =
                    definitions.predicate."io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.RollingUpdateDeployment"
            | doc m%"
            Spec to control the desired behavior of rolling update.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  maxSurge =
                    definitions.predicate."io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                  maxUnavailable =
                    definitions.predicate."io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy"
            | doc m%"
            RollingUpdateStatefulSetStrategy is used to communicate parameter for RollingUpdateStatefulSetStrategyType.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                { partition = predicates.isType 'Integer, }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.StatefulSet"
            | doc m%"
            StatefulSet represents a set of pods with consistent identities. Identities are defined as:
             - Network: A single stable DNS and hostname.
             - Storage: As many VolumeClaims as requested.
            The StatefulSet guarantees that a given network identity will always map to the same storage identity.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.apps.v1.StatefulSetSpec",
                  status =
                    definitions.predicate."io.k8s.api.apps.v1.StatefulSetStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.StatefulSetCondition"
            | doc m%"
            StatefulSetCondition describes the state of a statefulset at a certain point.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.StatefulSetList"
            | doc m%"
            StatefulSetList is a collection of StatefulSets.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.apps.v1.StatefulSet"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.StatefulSetSpec"
            | doc m%"
            A StatefulSetSpec is the specification of a StatefulSet.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "selector", "serviceName", "template" ],
                predicates.records.record
                {
                  podManagementPolicy = predicates.isType '"String",
                  replicas = predicates.isType 'Integer,
                  revisionHistoryLimit = predicates.isType 'Integer,
                  selector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  serviceName = predicates.isType '"String",
                  template =
                    definitions.predicate."io.k8s.api.core.v1.PodTemplateSpec",
                  updateStrategy =
                    definitions.predicate."io.k8s.api.apps.v1.StatefulSetUpdateStrategy",
                  volumeClaimTemplates = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.PersistentVolumeClaim"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.StatefulSetStatus"
            | doc m%"
            StatefulSetStatus represents the current state of a StatefulSet.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "replicas" ],
                predicates.records.record
                {
                  collisionCount = predicates.isType 'Integer,
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.apps.v1.StatefulSetCondition"
                      ],
                  currentReplicas = predicates.isType 'Integer,
                  currentRevision = predicates.isType '"String",
                  observedGeneration = predicates.isType 'Integer,
                  readyReplicas = predicates.isType 'Integer,
                  replicas = predicates.isType 'Integer,
                  updateRevision = predicates.isType '"String",
                  updatedReplicas = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.apps.v1.StatefulSetUpdateStrategy"
            | doc m%"
            StatefulSetUpdateStrategy indicates the strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  rollingUpdate =
                    definitions.predicate."io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authentication.v1.BoundObjectReference"
            | doc m%"
            BoundObjectReference is a reference to an object that a token is bound to.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                  uid = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authentication.v1.TokenRequest"
            | doc m%"
            TokenRequest requests a token for a given service account.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.authentication.v1.TokenRequestSpec",
                  status =
                    definitions.predicate."io.k8s.api.authentication.v1.TokenRequestStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authentication.v1.TokenRequestSpec"
            | doc m%"
            TokenRequestSpec contains client provided parameters of a token request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "audiences" ],
                predicates.records.record
                {
                  audiences = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  boundObjectRef =
                    definitions.predicate."io.k8s.api.authentication.v1.BoundObjectReference",
                  expirationSeconds = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authentication.v1.TokenRequestStatus"
            | doc m%"
            TokenRequestStatus is the result of a token request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "expirationTimestamp", "token" ],
                predicates.records.record
                {
                  expirationTimestamp =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  token = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authentication.v1.TokenReview"
            | doc m%"
            TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.authentication.v1.TokenReviewSpec",
                  status =
                    definitions.predicate."io.k8s.api.authentication.v1.TokenReviewStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authentication.v1.TokenReviewSpec"
            | doc m%"
            TokenReviewSpec is a description of the token authentication request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  audiences = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  token = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authentication.v1.TokenReviewStatus"
            | doc m%"
            TokenReviewStatus is the result of the token authentication request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  audiences = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  authenticated = predicates.isType '"Bool",
                  error = predicates.isType '"String",
                  user =
                    definitions.predicate."io.k8s.api.authentication.v1.UserInfo",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authentication.v1.UserInfo"
            | doc m%"
            UserInfo holds the information about the user needed to implement the user.Info interface.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  extra = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.allOf
                        [
                          predicates.isType '"Array",
                          predicates.arrays.arrayOf
                          (predicates.isType '"String")
                        ])
                      ],
                  groups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  uid = predicates.isType '"String",
                  username = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authentication.v1beta1.TokenReview"
            | doc m%"
            TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.authentication.v1beta1.TokenReviewSpec",
                  status =
                    definitions.predicate."io.k8s.api.authentication.v1beta1.TokenReviewStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authentication.v1beta1.TokenReviewSpec"
            | doc m%"
            TokenReviewSpec is a description of the token authentication request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  audiences = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  token = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authentication.v1beta1.TokenReviewStatus"
            | doc m%"
            TokenReviewStatus is the result of the token authentication request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  audiences = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  authenticated = predicates.isType '"Bool",
                  error = predicates.isType '"String",
                  user =
                    definitions.predicate."io.k8s.api.authentication.v1beta1.UserInfo",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authentication.v1beta1.UserInfo"
            | doc m%"
            UserInfo holds the information about the user needed to implement the user.Info interface.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  extra = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.allOf
                        [
                          predicates.isType '"Array",
                          predicates.arrays.arrayOf
                          (predicates.isType '"String")
                        ])
                      ],
                  groups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  uid = predicates.isType '"String",
                  username = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1.LocalSubjectAccessReview"
            | doc m%"
            LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.authorization.v1.SubjectAccessReviewSpec",
                  status =
                    definitions.predicate."io.k8s.api.authorization.v1.SubjectAccessReviewStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1.NonResourceAttributes"
            | doc m%"
            NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  path = predicates.isType '"String",
                  verb = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1.NonResourceRule"
            | doc m%"
            NonResourceRule holds information that describes a rule for the non-resource
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "verbs" ],
                predicates.records.record
                {
                  nonResourceURLs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  verbs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1.ResourceAttributes"
            | doc m%"
            ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  group = predicates.isType '"String",
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                  resource = predicates.isType '"String",
                  subresource = predicates.isType '"String",
                  verb = predicates.isType '"String",
                  version = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1.ResourceRule"
            | doc m%"
            ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "verbs" ],
                predicates.records.record
                {
                  apiGroups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resourceNames = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resources = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  verbs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1.SelfSubjectAccessReview"
            | doc m%"
            SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec",
                  status =
                    definitions.predicate."io.k8s.api.authorization.v1.SubjectAccessReviewStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec"
            | doc m%"
            SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  nonResourceAttributes =
                    definitions.predicate."io.k8s.api.authorization.v1.NonResourceAttributes",
                  resourceAttributes =
                    definitions.predicate."io.k8s.api.authorization.v1.ResourceAttributes",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1.SelfSubjectRulesReview"
            | doc m%"
            SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec",
                  status =
                    definitions.predicate."io.k8s.api.authorization.v1.SubjectRulesReviewStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                { namespace = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1.SubjectAccessReview"
            | doc m%"
            SubjectAccessReview checks whether or not a user or group can perform an action.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.authorization.v1.SubjectAccessReviewSpec",
                  status =
                    definitions.predicate."io.k8s.api.authorization.v1.SubjectAccessReviewStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1.SubjectAccessReviewSpec"
            | doc m%"
            SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  extra = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.allOf
                        [
                          predicates.isType '"Array",
                          predicates.arrays.arrayOf
                          (predicates.isType '"String")
                        ])
                      ],
                  groups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  nonResourceAttributes =
                    definitions.predicate."io.k8s.api.authorization.v1.NonResourceAttributes",
                  resourceAttributes =
                    definitions.predicate."io.k8s.api.authorization.v1.ResourceAttributes",
                  uid = predicates.isType '"String",
                  user = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1.SubjectAccessReviewStatus"
            | doc m%"
            SubjectAccessReviewStatus
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "allowed" ],
                predicates.records.record
                {
                  allowed = predicates.isType '"Bool",
                  denied = predicates.isType '"Bool",
                  evaluationError = predicates.isType '"String",
                  reason = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1.SubjectRulesReviewStatus"
            | doc m%"
            SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "incomplete", "nonResourceRules", "resourceRules" ],
                predicates.records.record
                {
                  evaluationError = predicates.isType '"String",
                  incomplete = predicates.isType '"Bool",
                  nonResourceRules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.authorization.v1.NonResourceRule"
                      ],
                  resourceRules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.authorization.v1.ResourceRule"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview"
            | doc m%"
            LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec",
                  status =
                    definitions.predicate."io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1beta1.NonResourceAttributes"
            | doc m%"
            NonResourceAttributes includes the authorization attributes available for non-resource requests to the Authorizer interface
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  path = predicates.isType '"String",
                  verb = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1beta1.NonResourceRule"
            | doc m%"
            NonResourceRule holds information that describes a rule for the non-resource
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "verbs" ],
                predicates.records.record
                {
                  nonResourceURLs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  verbs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1beta1.ResourceAttributes"
            | doc m%"
            ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  group = predicates.isType '"String",
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                  resource = predicates.isType '"String",
                  subresource = predicates.isType '"String",
                  verb = predicates.isType '"String",
                  version = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1beta1.ResourceRule"
            | doc m%"
            ResourceRule is the list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "verbs" ],
                predicates.records.record
                {
                  apiGroups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resourceNames = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resources = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  verbs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview"
            | doc m%"
            SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means "in all namespaces".  Self is a special case, because users should always be able to check whether they can perform an action
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.authorization.v1beta1.SelfSubjectAccessReviewSpec",
                  status =
                    definitions.predicate."io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1beta1.SelfSubjectAccessReviewSpec"
            | doc m%"
            SelfSubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  nonResourceAttributes =
                    definitions.predicate."io.k8s.api.authorization.v1beta1.NonResourceAttributes",
                  resourceAttributes =
                    definitions.predicate."io.k8s.api.authorization.v1beta1.ResourceAttributes",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview"
            | doc m%"
            SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.authorization.v1beta1.SelfSubjectRulesReviewSpec",
                  status =
                    definitions.predicate."io.k8s.api.authorization.v1beta1.SubjectRulesReviewStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1beta1.SelfSubjectRulesReviewSpec" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                { namespace = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1beta1.SubjectAccessReview"
            | doc m%"
            SubjectAccessReview checks whether or not a user or group can perform an action.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec",
                  status =
                    definitions.predicate."io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec"
            | doc m%"
            SubjectAccessReviewSpec is a description of the access request.  Exactly one of ResourceAuthorizationAttributes and NonResourceAuthorizationAttributes must be set
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  extra = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.allOf
                        [
                          predicates.isType '"Array",
                          predicates.arrays.arrayOf
                          (predicates.isType '"String")
                        ])
                      ],
                  group = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  nonResourceAttributes =
                    definitions.predicate."io.k8s.api.authorization.v1beta1.NonResourceAttributes",
                  resourceAttributes =
                    definitions.predicate."io.k8s.api.authorization.v1beta1.ResourceAttributes",
                  uid = predicates.isType '"String",
                  user = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus"
            | doc m%"
            SubjectAccessReviewStatus
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "allowed" ],
                predicates.records.record
                {
                  allowed = predicates.isType '"Bool",
                  denied = predicates.isType '"Bool",
                  evaluationError = predicates.isType '"String",
                  reason = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.authorization.v1beta1.SubjectRulesReviewStatus"
            | doc m%"
            SubjectRulesReviewStatus contains the result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "incomplete", "nonResourceRules", "resourceRules" ],
                predicates.records.record
                {
                  evaluationError = predicates.isType '"String",
                  incomplete = predicates.isType '"Bool",
                  nonResourceRules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.authorization.v1beta1.NonResourceRule"
                      ],
                  resourceRules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.authorization.v1beta1.ResourceRule"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v1.CrossVersionObjectReference"
            | doc m%"
            CrossVersionObjectReference contains enough information to let you identify the referred resource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "kind", "name" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
            | doc m%"
            configuration of a horizontal pod autoscaler.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec",
                  status =
                    definitions.predicate."io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList"
            | doc m%"
            list of horizontal pod autoscaler objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec"
            | doc m%"
            specification of a horizontal pod autoscaler.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "maxReplicas", "scaleTargetRef" ],
                predicates.records.record
                {
                  maxReplicas = predicates.isType 'Integer,
                  minReplicas = predicates.isType 'Integer,
                  scaleTargetRef =
                    definitions.predicate."io.k8s.api.autoscaling.v1.CrossVersionObjectReference",
                  targetCPUUtilizationPercentage = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus"
            | doc m%"
            current status of a horizontal pod autoscaler
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "currentReplicas", "desiredReplicas" ],
                predicates.records.record
                {
                  currentCPUUtilizationPercentage = predicates.isType 'Integer,
                  currentReplicas = predicates.isType 'Integer,
                  desiredReplicas = predicates.isType 'Integer,
                  lastScaleTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  observedGeneration = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v1.Scale"
            | doc m%"
            Scale represents a scaling request for a resource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.autoscaling.v1.ScaleSpec",
                  status =
                    definitions.predicate."io.k8s.api.autoscaling.v1.ScaleStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v1.ScaleSpec"
            | doc m%"
            ScaleSpec describes the attributes of a scale subresource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                { replicas = predicates.isType 'Integer, }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v1.ScaleStatus"
            | doc m%"
            ScaleStatus represents the current status of a scale subresource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "replicas" ],
                predicates.records.record
                {
                  replicas = predicates.isType 'Integer,
                  selector = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricSource"
            | doc m%"
            ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "container", "name" ],
                predicates.records.record
                {
                  container = predicates.isType '"String",
                  name = predicates.isType '"String",
                  targetAverageUtilization = predicates.isType 'Integer,
                  targetAverageValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricStatus"
            | doc m%"
            ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "container", "currentAverageValue", "name" ],
                predicates.records.record
                {
                  container = predicates.isType '"String",
                  currentAverageUtilization = predicates.isType 'Integer,
                  currentAverageValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference"
            | doc m%"
            CrossVersionObjectReference contains enough information to let you identify the referred resource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "kind", "name" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.ExternalMetricSource"
            | doc m%"
            ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one "target" type should be set.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "metricName" ],
                predicates.records.record
                {
                  metricName = predicates.isType '"String",
                  metricSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  targetAverageValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                  targetValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.ExternalMetricStatus"
            | doc m%"
            ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "currentValue", "metricName" ],
                predicates.records.record
                {
                  currentAverageValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                  currentValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                  metricName = predicates.isType '"String",
                  metricSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
            | doc m%"
            HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec",
                  status =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerCondition"
            | doc m%"
            HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList"
            | doc m%"
            HorizontalPodAutoscaler is a list of horizontal pod autoscaler objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec"
            | doc m%"
            HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "maxReplicas", "scaleTargetRef" ],
                predicates.records.record
                {
                  maxReplicas = predicates.isType 'Integer,
                  metrics = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.autoscaling.v2beta1.MetricSpec"
                      ],
                  minReplicas = predicates.isType 'Integer,
                  scaleTargetRef =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus"
            | doc m%"
            HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "conditions", "currentReplicas", "desiredReplicas" ],
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerCondition"
                      ],
                  currentMetrics = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.autoscaling.v2beta1.MetricStatus"
                      ],
                  currentReplicas = predicates.isType 'Integer,
                  desiredReplicas = predicates.isType 'Integer,
                  lastScaleTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  observedGeneration = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.MetricSpec"
            | doc m%"
            MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                {
                  containerResource =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricSource",
                  external =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.ExternalMetricSource",
                  object =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.ObjectMetricSource",
                  pods =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.PodsMetricSource",
                  resource =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.ResourceMetricSource",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.MetricStatus"
            | doc m%"
            MetricStatus describes the last-read state of a single metric.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                {
                  containerResource =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.ContainerResourceMetricStatus",
                  external =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.ExternalMetricStatus",
                  object =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus",
                  pods =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.PodsMetricStatus",
                  resource =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.ResourceMetricStatus",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.ObjectMetricSource"
            | doc m%"
            ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "metricName", "target", "targetValue" ],
                predicates.records.record
                {
                  averageValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                  metricName = predicates.isType '"String",
                  selector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  target =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference",
                  targetValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus"
            | doc m%"
            ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "currentValue", "metricName", "target" ],
                predicates.records.record
                {
                  averageValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                  currentValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                  metricName = predicates.isType '"String",
                  selector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  target =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.PodsMetricSource"
            | doc m%"
            PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "metricName", "targetAverageValue" ],
                predicates.records.record
                {
                  metricName = predicates.isType '"String",
                  selector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  targetAverageValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.PodsMetricStatus"
            | doc m%"
            PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "currentAverageValue", "metricName" ],
                predicates.records.record
                {
                  currentAverageValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                  metricName = predicates.isType '"String",
                  selector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.ResourceMetricSource"
            | doc m%"
            ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  targetAverageUtilization = predicates.isType 'Integer,
                  targetAverageValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta1.ResourceMetricStatus"
            | doc m%"
            ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "currentAverageValue", "name" ],
                predicates.records.record
                {
                  currentAverageUtilization = predicates.isType 'Integer,
                  currentAverageValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricSource"
            | doc m%"
            ContainerResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "container", "name", "target" ],
                predicates.records.record
                {
                  container = predicates.isType '"String",
                  name = predicates.isType '"String",
                  target =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricTarget",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricStatus"
            | doc m%"
            ContainerResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing a single container in each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "container", "current", "name" ],
                predicates.records.record
                {
                  container = predicates.isType '"String",
                  current =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricValueStatus",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference"
            | doc m%"
            CrossVersionObjectReference contains enough information to let you identify the referred resource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "kind", "name" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.ExternalMetricSource"
            | doc m%"
            ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "metric", "target" ],
                predicates.records.record
                {
                  metric =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
                  target =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricTarget",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.ExternalMetricStatus"
            | doc m%"
            ExternalMetricStatus indicates the current value of a global metric not associated with any Kubernetes object.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "current", "metric" ],
                predicates.records.record
                {
                  current =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricValueStatus",
                  metric =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy"
            | doc m%"
            HPAScalingPolicy is a single policy which must hold true for a specified past interval.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "periodSeconds", "type", "value" ],
                predicates.records.record
                {
                  periodSeconds = predicates.isType 'Integer,
                  type = predicates.isType '"String",
                  value = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.HPAScalingRules"
            | doc m%"
            HPAScalingRules configures the scaling behavior for one direction. These Rules are applied after calculating DesiredReplicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly, instead, the safest value from the stabilization window is chosen.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  policies = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy"
                      ],
                  selectPolicy = predicates.isType '"String",
                  stabilizationWindowSeconds = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
            | doc m%"
            HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec",
                  status =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior"
            | doc m%"
            HorizontalPodAutoscalerBehavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  scaleDown =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.HPAScalingRules",
                  scaleUp =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.HPAScalingRules",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition"
            | doc m%"
            HorizontalPodAutoscalerCondition describes the state of a HorizontalPodAutoscaler at a certain point.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList"
            | doc m%"
            HorizontalPodAutoscalerList is a list of horizontal pod autoscaler objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec"
            | doc m%"
            HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "maxReplicas", "scaleTargetRef" ],
                predicates.records.record
                {
                  behavior =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior",
                  maxReplicas = predicates.isType 'Integer,
                  metrics = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricSpec"
                      ],
                  minReplicas = predicates.isType 'Integer,
                  scaleTargetRef =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus"
            | doc m%"
            HorizontalPodAutoscalerStatus describes the current status of a horizontal pod autoscaler.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "conditions", "currentReplicas", "desiredReplicas" ],
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition"
                      ],
                  currentMetrics = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricStatus"
                      ],
                  currentReplicas = predicates.isType 'Integer,
                  desiredReplicas = predicates.isType 'Integer,
                  lastScaleTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  observedGeneration = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.MetricIdentifier"
            | doc m%"
            MetricIdentifier defines the name and optionally selector for a metric
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  selector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.MetricSpec"
            | doc m%"
            MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                {
                  containerResource =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricSource",
                  external =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.ExternalMetricSource",
                  object =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.ObjectMetricSource",
                  pods =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.PodsMetricSource",
                  resource =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.ResourceMetricSource",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.MetricStatus"
            | doc m%"
            MetricStatus describes the last-read state of a single metric.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                {
                  containerResource =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.ContainerResourceMetricStatus",
                  external =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.ExternalMetricStatus",
                  object =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.ObjectMetricStatus",
                  pods =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.PodsMetricStatus",
                  resource =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.ResourceMetricStatus",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.MetricTarget"
            | doc m%"
            MetricTarget defines the target value, average value, or average utilization of a specific metric
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                {
                  averageUtilization = predicates.isType 'Integer,
                  averageValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                  type = predicates.isType '"String",
                  value =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.MetricValueStatus"
            | doc m%"
            MetricValueStatus holds the current value for a metric
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  averageUtilization = predicates.isType 'Integer,
                  averageValue =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                  value =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.ObjectMetricSource"
            | doc m%"
            ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "describedObject", "metric", "target" ],
                predicates.records.record
                {
                  describedObject =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference",
                  metric =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
                  target =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricTarget",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.ObjectMetricStatus"
            | doc m%"
            ObjectMetricStatus indicates the current value of a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "current", "describedObject", "metric" ],
                predicates.records.record
                {
                  current =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricValueStatus",
                  describedObject =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference",
                  metric =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.PodsMetricSource"
            | doc m%"
            PodsMetricSource indicates how to scale on a metric describing each pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "metric", "target" ],
                predicates.records.record
                {
                  metric =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
                  target =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricTarget",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.PodsMetricStatus"
            | doc m%"
            PodsMetricStatus indicates the current value of a metric describing each pod in the current scale target (for example, transactions-processed-per-second).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "current", "metric" ],
                predicates.records.record
                {
                  current =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricValueStatus",
                  metric =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.ResourceMetricSource"
            | doc m%"
            ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  The values will be averaged together before being compared to the target.  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.  Only one "target" type should be set.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "target" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  target =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricTarget",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.autoscaling.v2beta2.ResourceMetricStatus"
            | doc m%"
            ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "current", "name" ],
                predicates.records.record
                {
                  current =
                    definitions.predicate."io.k8s.api.autoscaling.v2beta2.MetricValueStatus",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v1.Job"
            | doc m%"
            Job represents the configuration of a single job.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec = definitions.predicate."io.k8s.api.batch.v1.JobSpec",
                  status =
                    definitions.predicate."io.k8s.api.batch.v1.JobStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v1.JobCondition"
            | doc m%"
            JobCondition describes current state of a job.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastProbeTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v1.JobList"
            | doc m%"
            JobList is a collection of jobs.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.batch.v1.Job"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v1.JobSpec"
            | doc m%"
            JobSpec describes how the job execution will look like.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "template" ],
                predicates.records.record
                {
                  activeDeadlineSeconds = predicates.isType 'Integer,
                  backoffLimit = predicates.isType 'Integer,
                  completions = predicates.isType 'Integer,
                  manualSelector = predicates.isType '"Bool",
                  parallelism = predicates.isType 'Integer,
                  selector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  template =
                    definitions.predicate."io.k8s.api.core.v1.PodTemplateSpec",
                  ttlSecondsAfterFinished = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v1.JobStatus"
            | doc m%"
            JobStatus represents the current state of a Job.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  active = predicates.isType 'Integer,
                  completionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.batch.v1.JobCondition"
                      ],
                  failed = predicates.isType 'Integer,
                  startTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  succeeded = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v1beta1.CronJob"
            | doc m%"
            CronJob represents the configuration of a single cron job.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.batch.v1beta1.CronJobSpec",
                  status =
                    definitions.predicate."io.k8s.api.batch.v1beta1.CronJobStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v1beta1.CronJobList"
            | doc m%"
            CronJobList is a collection of cron jobs.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.batch.v1beta1.CronJob"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v1beta1.CronJobSpec"
            | doc m%"
            CronJobSpec describes how the job execution will look like and when it will actually run.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "jobTemplate", "schedule" ],
                predicates.records.record
                {
                  concurrencyPolicy = predicates.isType '"String",
                  failedJobsHistoryLimit = predicates.isType 'Integer,
                  jobTemplate =
                    definitions.predicate."io.k8s.api.batch.v1beta1.JobTemplateSpec",
                  schedule = predicates.isType '"String",
                  startingDeadlineSeconds = predicates.isType 'Integer,
                  successfulJobsHistoryLimit = predicates.isType 'Integer,
                  suspend = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v1beta1.CronJobStatus"
            | doc m%"
            CronJobStatus represents the current state of a cron job.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  active = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ObjectReference"
                      ],
                  lastScheduleTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v1beta1.JobTemplateSpec"
            | doc m%"
            JobTemplateSpec describes the data a Job should have when created from a template
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec = definitions.predicate."io.k8s.api.batch.v1.JobSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v2alpha1.CronJob"
            | doc m%"
            CronJob represents the configuration of a single cron job.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.batch.v2alpha1.CronJobSpec",
                  status =
                    definitions.predicate."io.k8s.api.batch.v2alpha1.CronJobStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v2alpha1.CronJobList"
            | doc m%"
            CronJobList is a collection of cron jobs.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.batch.v2alpha1.CronJob"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v2alpha1.CronJobSpec"
            | doc m%"
            CronJobSpec describes how the job execution will look like and when it will actually run.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "jobTemplate", "schedule" ],
                predicates.records.record
                {
                  concurrencyPolicy = predicates.isType '"String",
                  failedJobsHistoryLimit = predicates.isType 'Integer,
                  jobTemplate =
                    definitions.predicate."io.k8s.api.batch.v2alpha1.JobTemplateSpec",
                  schedule = predicates.isType '"String",
                  startingDeadlineSeconds = predicates.isType 'Integer,
                  successfulJobsHistoryLimit = predicates.isType 'Integer,
                  suspend = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v2alpha1.CronJobStatus"
            | doc m%"
            CronJobStatus represents the current state of a cron job.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  active = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ObjectReference"
                      ],
                  lastScheduleTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.batch.v2alpha1.JobTemplateSpec"
            | doc m%"
            JobTemplateSpec describes the data a Job should have when created from a template
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec = definitions.predicate."io.k8s.api.batch.v1.JobSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.certificates.v1.CertificateSigningRequest"
            | doc m%"
            CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.
            
            Kubelets use this API to obtain:
             1. client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client-kubelet" signerName).
             2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the "kubernetes.io/kubelet-serving" signerName).
            
            This API can be used to request client certificates to authenticate to kube-apiserver (with the "kubernetes.io/kube-apiserver-client" signerName), or to obtain certificates from custom non-Kubernetes signers.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.certificates.v1.CertificateSigningRequestSpec",
                  status =
                    definitions.predicate."io.k8s.api.certificates.v1.CertificateSigningRequestStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.certificates.v1.CertificateSigningRequestCondition"
            | doc m%"
            CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest object
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  lastUpdateTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.certificates.v1.CertificateSigningRequestList"
            | doc m%"
            CertificateSigningRequestList is a collection of CertificateSigningRequest objects
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.certificates.v1.CertificateSigningRequest"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.certificates.v1.CertificateSigningRequestSpec"
            | doc m%"
            CertificateSigningRequestSpec contains the certificate request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "request", "signerName" ],
                predicates.records.record
                {
                  extra = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.allOf
                        [
                          predicates.isType '"Array",
                          predicates.arrays.arrayOf
                          (predicates.isType '"String")
                        ])
                      ],
                  groups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  request = predicates.isType '"String",
                  signerName = predicates.isType '"String",
                  uid = predicates.isType '"String",
                  usages = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  username = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.certificates.v1.CertificateSigningRequestStatus"
            | doc m%"
            CertificateSigningRequestStatus contains conditions used to indicate approved/denied/failed status of the request, and the issued certificate.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  certificate = predicates.isType '"String",
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.certificates.v1.CertificateSigningRequestCondition"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
            | doc m%"
            Describes a certificate signing request
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec",
                  status =
                    definitions.predicate."io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  lastUpdateTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.certificates.v1beta1.CertificateSigningRequestList" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.certificates.v1beta1.CertificateSigningRequest"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec"
            | doc m%"
            This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "request" ],
                predicates.records.record
                {
                  extra = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.allOf
                        [
                          predicates.isType '"Array",
                          predicates.arrays.arrayOf
                          (predicates.isType '"String")
                        ])
                      ],
                  groups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  request = predicates.isType '"String",
                  signerName = predicates.isType '"String",
                  uid = predicates.isType '"String",
                  usages = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  username = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus" =
            predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  certificate = predicates.isType '"String",
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.coordination.v1.Lease"
            | doc m%"
            Lease defines a lease concept.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.coordination.v1.LeaseSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.coordination.v1.LeaseList"
            | doc m%"
            LeaseList is a list of Lease objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.coordination.v1.Lease"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.coordination.v1.LeaseSpec"
            | doc m%"
            LeaseSpec is a specification of a Lease.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  acquireTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
                  holderIdentity = predicates.isType '"String",
                  leaseDurationSeconds = predicates.isType 'Integer,
                  leaseTransitions = predicates.isType 'Integer,
                  renewTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.coordination.v1beta1.Lease"
            | doc m%"
            Lease defines a lease concept.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.coordination.v1beta1.LeaseSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.coordination.v1beta1.LeaseList"
            | doc m%"
            LeaseList is a list of Lease objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.coordination.v1beta1.Lease"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.coordination.v1beta1.LeaseSpec"
            | doc m%"
            LeaseSpec is a specification of a Lease.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  acquireTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
                  holderIdentity = predicates.isType '"String",
                  leaseDurationSeconds = predicates.isType 'Integer,
                  leaseTransitions = predicates.isType 'Integer,
                  renewTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource"
            | doc m%"
            Represents a Persistent Disk resource in AWS.
            
            An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "volumeID" ],
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  partition = predicates.isType 'Integer,
                  readOnly = predicates.isType '"Bool",
                  volumeID = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Affinity"
            | doc m%"
            Affinity is a group of affinity scheduling rules.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  nodeAffinity =
                    definitions.predicate."io.k8s.api.core.v1.NodeAffinity",
                  podAffinity =
                    definitions.predicate."io.k8s.api.core.v1.PodAffinity",
                  podAntiAffinity =
                    definitions.predicate."io.k8s.api.core.v1.PodAntiAffinity",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.AttachedVolume"
            | doc m%"
            AttachedVolume describes a volume attached to a node
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "devicePath", "name" ],
                predicates.records.record
                {
                  devicePath = predicates.isType '"String",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.AzureDiskVolumeSource"
            | doc m%"
            AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "diskName", "diskURI" ],
                predicates.records.record
                {
                  cachingMode = predicates.isType '"String",
                  diskName = predicates.isType '"String",
                  diskURI = predicates.isType '"String",
                  fsType = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.AzureFilePersistentVolumeSource"
            | doc m%"
            AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "secretName", "shareName" ],
                predicates.records.record
                {
                  readOnly = predicates.isType '"Bool",
                  secretName = predicates.isType '"String",
                  secretNamespace = predicates.isType '"String",
                  shareName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.AzureFileVolumeSource"
            | doc m%"
            AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "secretName", "shareName" ],
                predicates.records.record
                {
                  readOnly = predicates.isType '"Bool",
                  secretName = predicates.isType '"String",
                  shareName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Binding"
            | doc m%"
            Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "target" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  target =
                    definitions.predicate."io.k8s.api.core.v1.ObjectReference",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.CSIPersistentVolumeSource"
            | doc m%"
            Represents storage that is managed by an external CSI volume driver (Beta feature)
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "driver", "volumeHandle" ],
                predicates.records.record
                {
                  controllerExpandSecretRef =
                    definitions.predicate."io.k8s.api.core.v1.SecretReference",
                  controllerPublishSecretRef =
                    definitions.predicate."io.k8s.api.core.v1.SecretReference",
                  driver = predicates.isType '"String",
                  fsType = predicates.isType '"String",
                  nodePublishSecretRef =
                    definitions.predicate."io.k8s.api.core.v1.SecretReference",
                  nodeStageSecretRef =
                    definitions.predicate."io.k8s.api.core.v1.SecretReference",
                  readOnly = predicates.isType '"Bool",
                  volumeAttributes = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  volumeHandle = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.CSIVolumeSource"
            | doc m%"
            Represents a source location of a volume to mount, managed by an external CSI driver
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "driver" ],
                predicates.records.record
                {
                  driver = predicates.isType '"String",
                  fsType = predicates.isType '"String",
                  nodePublishSecretRef =
                    definitions.predicate."io.k8s.api.core.v1.LocalObjectReference",
                  readOnly = predicates.isType '"Bool",
                  volumeAttributes = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Capabilities"
            | doc m%"
            Adds and removes POSIX capabilities from running containers.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  add = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  drop = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.CephFSPersistentVolumeSource"
            | doc m%"
            Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "monitors" ],
                predicates.records.record
                {
                  monitors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  path = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  secretFile = predicates.isType '"String",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.SecretReference",
                  user = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.CephFSVolumeSource"
            | doc m%"
            Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "monitors" ],
                predicates.records.record
                {
                  monitors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  path = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  secretFile = predicates.isType '"String",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.LocalObjectReference",
                  user = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.CinderPersistentVolumeSource"
            | doc m%"
            Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "volumeID" ],
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.SecretReference",
                  volumeID = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.CinderVolumeSource"
            | doc m%"
            Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "volumeID" ],
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.LocalObjectReference",
                  volumeID = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ClientIPConfig"
            | doc m%"
            ClientIPConfig represents the configurations of Client IP based session affinity.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                { timeoutSeconds = predicates.isType 'Integer, }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ComponentCondition"
            | doc m%"
            Information about the condition of a component.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  error = predicates.isType '"String",
                  message = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ComponentStatus"
            | doc m%"
            ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ComponentCondition"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ComponentStatusList"
            | doc m%"
            Status of all the conditions for the component as a list of ComponentStatus objects. Deprecated: This API is deprecated in v1.19+
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ComponentStatus"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ConfigMap"
            | doc m%"
            ConfigMap holds configuration data for pods to consume.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  binaryData = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  data = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  immutable = predicates.isType '"Bool",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ConfigMapEnvSource"
            | doc m%"
            ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
            
            The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  "optional" = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ConfigMapKeySelector"
            | doc m%"
            Selects a key from a ConfigMap.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "key" ],
                predicates.records.record
                {
                  key = predicates.isType '"String",
                  name = predicates.isType '"String",
                  "optional" = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ConfigMapList"
            | doc m%"
            ConfigMapList is a resource containing a list of ConfigMap objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ConfigMap"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ConfigMapNodeConfigSource"
            | doc m%"
            ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "kubeletConfigKey", "name", "namespace" ],
                predicates.records.record
                {
                  kubeletConfigKey = predicates.isType '"String",
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                  resourceVersion = predicates.isType '"String",
                  uid = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ConfigMapProjection"
            | doc m%"
            Adapts a ConfigMap into a projected volume.
            
            The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.KeyToPath"
                      ],
                  name = predicates.isType '"String",
                  "optional" = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ConfigMapVolumeSource"
            | doc m%"
            Adapts a ConfigMap into a volume.
            
            The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  defaultMode = predicates.isType 'Integer,
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.KeyToPath"
                      ],
                  name = predicates.isType '"String",
                  "optional" = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Container"
            | doc m%"
            A single application container that you want to run within a pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  args = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  command = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  env = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.EnvVar"
                      ],
                  envFrom = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.EnvFromSource"
                      ],
                  image = predicates.isType '"String",
                  imagePullPolicy = predicates.isType '"String",
                  lifecycle =
                    definitions.predicate."io.k8s.api.core.v1.Lifecycle",
                  livenessProbe =
                    definitions.predicate."io.k8s.api.core.v1.Probe",
                  name = predicates.isType '"String",
                  ports = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ContainerPort"
                      ],
                  readinessProbe =
                    definitions.predicate."io.k8s.api.core.v1.Probe",
                  resources =
                    definitions.predicate."io.k8s.api.core.v1.ResourceRequirements",
                  securityContext =
                    definitions.predicate."io.k8s.api.core.v1.SecurityContext",
                  startupProbe =
                    definitions.predicate."io.k8s.api.core.v1.Probe",
                  stdin = predicates.isType '"Bool",
                  stdinOnce = predicates.isType '"Bool",
                  terminationMessagePath = predicates.isType '"String",
                  terminationMessagePolicy = predicates.isType '"String",
                  tty = predicates.isType '"Bool",
                  volumeDevices = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.VolumeDevice"
                      ],
                  volumeMounts = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.VolumeMount"
                      ],
                  workingDir = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ContainerImage"
            | doc m%"
            Describe a container image
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "names" ],
                predicates.records.record
                {
                  names = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  sizeBytes = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ContainerPort"
            | doc m%"
            ContainerPort represents a network port in a single container.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "containerPort" ],
                predicates.records.record
                {
                  containerPort = predicates.isType 'Integer,
                  hostIP = predicates.isType '"String",
                  hostPort = predicates.isType 'Integer,
                  name = predicates.isType '"String",
                  protocol = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ContainerState"
            | doc m%"
            ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  running =
                    definitions.predicate."io.k8s.api.core.v1.ContainerStateRunning",
                  terminated =
                    definitions.predicate."io.k8s.api.core.v1.ContainerStateTerminated",
                  waiting =
                    definitions.predicate."io.k8s.api.core.v1.ContainerStateWaiting",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ContainerStateRunning"
            | doc m%"
            ContainerStateRunning is a running state of a container.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  startedAt =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ContainerStateTerminated"
            | doc m%"
            ContainerStateTerminated is a terminated state of a container.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "exitCode" ],
                predicates.records.record
                {
                  containerID = predicates.isType '"String",
                  exitCode = predicates.isType 'Integer,
                  finishedAt =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  signal = predicates.isType 'Integer,
                  startedAt =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ContainerStateWaiting"
            | doc m%"
            ContainerStateWaiting is a waiting state of a container.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ContainerStatus"
            | doc m%"
            ContainerStatus contains details for the current status of this container.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "image", "imageID", "name", "ready", "restartCount" ],
                predicates.records.record
                {
                  containerID = predicates.isType '"String",
                  image = predicates.isType '"String",
                  imageID = predicates.isType '"String",
                  lastState =
                    definitions.predicate."io.k8s.api.core.v1.ContainerState",
                  name = predicates.isType '"String",
                  ready = predicates.isType '"Bool",
                  restartCount = predicates.isType 'Integer,
                  started = predicates.isType '"Bool",
                  state =
                    definitions.predicate."io.k8s.api.core.v1.ContainerState",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.DaemonEndpoint"
            | doc m%"
            DaemonEndpoint contains information about a single Daemon endpoint.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "Port" ],
                predicates.records.record { Port = predicates.isType 'Integer, }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.DownwardAPIProjection"
            | doc m%"
            Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.DownwardAPIVolumeFile"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.DownwardAPIVolumeFile"
            | doc m%"
            DownwardAPIVolumeFile represents information to create the file containing the pod field
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "path" ],
                predicates.records.record
                {
                  fieldRef =
                    definitions.predicate."io.k8s.api.core.v1.ObjectFieldSelector",
                  mode = predicates.isType 'Integer,
                  path = predicates.isType '"String",
                  resourceFieldRef =
                    definitions.predicate."io.k8s.api.core.v1.ResourceFieldSelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.DownwardAPIVolumeSource"
            | doc m%"
            DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  defaultMode = predicates.isType 'Integer,
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.DownwardAPIVolumeFile"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.EmptyDirVolumeSource"
            | doc m%"
            Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  medium = predicates.isType '"String",
                  sizeLimit =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.EndpointAddress"
            | doc m%"
            EndpointAddress is a tuple that describes single IP address.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "ip" ],
                predicates.records.record
                {
                  hostname = predicates.isType '"String",
                  ip = predicates.isType '"String",
                  nodeName = predicates.isType '"String",
                  targetRef =
                    definitions.predicate."io.k8s.api.core.v1.ObjectReference",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.EndpointPort"
            | doc m%"
            EndpointPort is a tuple that describes a single port.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "port" ],
                predicates.records.record
                {
                  appProtocol = predicates.isType '"String",
                  name = predicates.isType '"String",
                  port = predicates.isType 'Integer,
                  protocol = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.EndpointSubset"
            | doc m%"
            EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:
              {
                Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
                Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
              }
            The resulting set of endpoints can be viewed as:
                a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
                b: [ 10.10.1.1:309, 10.10.2.2:309 ]
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  addresses = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.EndpointAddress"
                      ],
                  notReadyAddresses = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.EndpointAddress"
                      ],
                  ports = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.EndpointPort"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Endpoints"
            | doc m%"
            Endpoints is a collection of endpoints that implement the actual service. Example:
              Name: "mysvc",
              Subsets: [
                {
                  Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
                  Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
                },
                {
                  Addresses: [{"ip": "10.10.3.3"}],
                  Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
                },
             ]
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  subsets = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.EndpointSubset"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.EndpointsList"
            | doc m%"
            EndpointsList is a list of endpoints.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Endpoints"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.EnvFromSource"
            | doc m%"
            EnvFromSource represents the source of a set of ConfigMaps
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  configMapRef =
                    definitions.predicate."io.k8s.api.core.v1.ConfigMapEnvSource",
                  prefix = predicates.isType '"String",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.SecretEnvSource",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.EnvVar"
            | doc m%"
            EnvVar represents an environment variable present in a Container.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  value = predicates.isType '"String",
                  valueFrom =
                    definitions.predicate."io.k8s.api.core.v1.EnvVarSource",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.EnvVarSource"
            | doc m%"
            EnvVarSource represents a source for the value of an EnvVar.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  configMapKeyRef =
                    definitions.predicate."io.k8s.api.core.v1.ConfigMapKeySelector",
                  fieldRef =
                    definitions.predicate."io.k8s.api.core.v1.ObjectFieldSelector",
                  resourceFieldRef =
                    definitions.predicate."io.k8s.api.core.v1.ResourceFieldSelector",
                  secretKeyRef =
                    definitions.predicate."io.k8s.api.core.v1.SecretKeySelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.EphemeralContainer"
            | doc m%"
            An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  args = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  command = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  env = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.EnvVar"
                      ],
                  envFrom = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.EnvFromSource"
                      ],
                  image = predicates.isType '"String",
                  imagePullPolicy = predicates.isType '"String",
                  lifecycle =
                    definitions.predicate."io.k8s.api.core.v1.Lifecycle",
                  livenessProbe =
                    definitions.predicate."io.k8s.api.core.v1.Probe",
                  name = predicates.isType '"String",
                  ports = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ContainerPort"
                      ],
                  readinessProbe =
                    definitions.predicate."io.k8s.api.core.v1.Probe",
                  resources =
                    definitions.predicate."io.k8s.api.core.v1.ResourceRequirements",
                  securityContext =
                    definitions.predicate."io.k8s.api.core.v1.SecurityContext",
                  startupProbe =
                    definitions.predicate."io.k8s.api.core.v1.Probe",
                  stdin = predicates.isType '"Bool",
                  stdinOnce = predicates.isType '"Bool",
                  targetContainerName = predicates.isType '"String",
                  terminationMessagePath = predicates.isType '"String",
                  terminationMessagePolicy = predicates.isType '"String",
                  tty = predicates.isType '"Bool",
                  volumeDevices = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.VolumeDevice"
                      ],
                  volumeMounts = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.VolumeMount"
                      ],
                  workingDir = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.EphemeralVolumeSource"
            | doc m%"
            Represents an ephemeral volume that is handled by a normal storage driver.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  readOnly = predicates.isType '"Bool",
                  volumeClaimTemplate =
                    definitions.predicate."io.k8s.api.core.v1.PersistentVolumeClaimTemplate",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Event"
            | doc m%"
            Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "involvedObject", "metadata" ],
                predicates.records.record
                {
                  action = predicates.isType '"String",
                  apiVersion = predicates.isType '"String",
                  count = predicates.isType 'Integer,
                  eventTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
                  firstTimestamp =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  involvedObject =
                    definitions.predicate."io.k8s.api.core.v1.ObjectReference",
                  kind = predicates.isType '"String",
                  lastTimestamp =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  reason = predicates.isType '"String",
                  related =
                    definitions.predicate."io.k8s.api.core.v1.ObjectReference",
                  reportingComponent = predicates.isType '"String",
                  reportingInstance = predicates.isType '"String",
                  series =
                    definitions.predicate."io.k8s.api.core.v1.EventSeries",
                  source =
                    definitions.predicate."io.k8s.api.core.v1.EventSource",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.EventList"
            | doc m%"
            EventList is a list of events.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Event"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.EventSeries"
            | doc m%"
            EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  count = predicates.isType 'Integer,
                  lastObservedTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.EventSource"
            | doc m%"
            EventSource contains information for an event.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  component = predicates.isType '"String",
                  host = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ExecAction"
            | doc m%"
            ExecAction describes a "run in container" action.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  command = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.FCVolumeSource"
            | doc m%"
            Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  lun = predicates.isType 'Integer,
                  readOnly = predicates.isType '"Bool",
                  targetWWNs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  wwids = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.FlexPersistentVolumeSource"
            | doc m%"
            FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "driver" ],
                predicates.records.record
                {
                  driver = predicates.isType '"String",
                  fsType = predicates.isType '"String",
                  options = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  readOnly = predicates.isType '"Bool",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.SecretReference",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.FlexVolumeSource"
            | doc m%"
            FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "driver" ],
                predicates.records.record
                {
                  driver = predicates.isType '"String",
                  fsType = predicates.isType '"String",
                  options = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  readOnly = predicates.isType '"Bool",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.LocalObjectReference",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.FlockerVolumeSource"
            | doc m%"
            Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  datasetName = predicates.isType '"String",
                  datasetUUID = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource"
            | doc m%"
            Represents a Persistent Disk resource in Google Compute Engine.
            
            A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "pdName" ],
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  partition = predicates.isType 'Integer,
                  pdName = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.GitRepoVolumeSource"
            | doc m%"
            Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
            
            DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "repository" ],
                predicates.records.record
                {
                  directory = predicates.isType '"String",
                  repository = predicates.isType '"String",
                  revision = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.GlusterfsPersistentVolumeSource"
            | doc m%"
            Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "endpoints", "path" ],
                predicates.records.record
                {
                  endpoints = predicates.isType '"String",
                  endpointsNamespace = predicates.isType '"String",
                  path = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.GlusterfsVolumeSource"
            | doc m%"
            Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "endpoints", "path" ],
                predicates.records.record
                {
                  endpoints = predicates.isType '"String",
                  path = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.HTTPGetAction"
            | doc m%"
            HTTPGetAction describes an action based on HTTP Get requests.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "port" ],
                predicates.records.record
                {
                  host = predicates.isType '"String",
                  httpHeaders = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.HTTPHeader"
                      ],
                  path = predicates.isType '"String",
                  port =
                    definitions.predicate."io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                  scheme = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.HTTPHeader"
            | doc m%"
            HTTPHeader describes a custom header to be used in HTTP probes
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "value" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  value = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Handler"
            | doc m%"
            Handler defines a specific action that should be taken
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  exec = definitions.predicate."io.k8s.api.core.v1.ExecAction",
                  httpGet =
                    definitions.predicate."io.k8s.api.core.v1.HTTPGetAction",
                  tcpSocket =
                    definitions.predicate."io.k8s.api.core.v1.TCPSocketAction",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.HostAlias"
            | doc m%"
            HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  hostnames = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  ip = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.HostPathVolumeSource"
            | doc m%"
            Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "path" ],
                predicates.records.record
                {
                  path = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ISCSIPersistentVolumeSource"
            | doc m%"
            ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "iqn", "lun", "targetPortal" ],
                predicates.records.record
                {
                  chapAuthDiscovery = predicates.isType '"Bool",
                  chapAuthSession = predicates.isType '"Bool",
                  fsType = predicates.isType '"String",
                  initiatorName = predicates.isType '"String",
                  iqn = predicates.isType '"String",
                  iscsiInterface = predicates.isType '"String",
                  lun = predicates.isType 'Integer,
                  portals = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  readOnly = predicates.isType '"Bool",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.SecretReference",
                  targetPortal = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ISCSIVolumeSource"
            | doc m%"
            Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "iqn", "lun", "targetPortal" ],
                predicates.records.record
                {
                  chapAuthDiscovery = predicates.isType '"Bool",
                  chapAuthSession = predicates.isType '"Bool",
                  fsType = predicates.isType '"String",
                  initiatorName = predicates.isType '"String",
                  iqn = predicates.isType '"String",
                  iscsiInterface = predicates.isType '"String",
                  lun = predicates.isType 'Integer,
                  portals = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  readOnly = predicates.isType '"Bool",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.LocalObjectReference",
                  targetPortal = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.KeyToPath"
            | doc m%"
            Maps a string key to a path within a volume.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "key", "path" ],
                predicates.records.record
                {
                  key = predicates.isType '"String",
                  mode = predicates.isType 'Integer,
                  path = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Lifecycle"
            | doc m%"
            Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  postStart =
                    definitions.predicate."io.k8s.api.core.v1.Handler",
                  preStop = definitions.predicate."io.k8s.api.core.v1.Handler",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.LimitRange"
            | doc m%"
            LimitRange sets resource usage limits for each kind of resource in a Namespace.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.core.v1.LimitRangeSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.LimitRangeItem"
            | doc m%"
            LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                {
                  "default" = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                  defaultRequest = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                  max = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                  maxLimitRequestRatio = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                  min = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.LimitRangeList"
            | doc m%"
            LimitRangeList is a list of LimitRange items.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.LimitRange"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.LimitRangeSpec"
            | doc m%"
            LimitRangeSpec defines a min/max usage limit for resources that match on kind.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "limits" ],
                predicates.records.record
                {
                  limits = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.LimitRangeItem"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.LoadBalancerIngress"
            | doc m%"
            LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  hostname = predicates.isType '"String",
                  ip = predicates.isType '"String",
                  ports = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.PortStatus"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.LoadBalancerStatus"
            | doc m%"
            LoadBalancerStatus represents the status of a load-balancer.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  ingress = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.LoadBalancerIngress"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.LocalObjectReference"
            | doc m%"
            LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                { name = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.LocalVolumeSource"
            | doc m%"
            Local represents directly-attached storage with node affinity (Beta feature)
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "path" ],
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  path = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NFSVolumeSource"
            | doc m%"
            Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "path", "server" ],
                predicates.records.record
                {
                  path = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  server = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Namespace"
            | doc m%"
            Namespace provides a scope for Names. Use of multiple namespaces is optional.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.core.v1.NamespaceSpec",
                  status =
                    definitions.predicate."io.k8s.api.core.v1.NamespaceStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NamespaceCondition"
            | doc m%"
            NamespaceCondition contains details about state of namespace.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NamespaceList"
            | doc m%"
            NamespaceList is a list of Namespaces.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Namespace"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NamespaceSpec"
            | doc m%"
            NamespaceSpec describes the attributes on a Namespace.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  finalizers = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NamespaceStatus"
            | doc m%"
            NamespaceStatus is information about the current status of a Namespace.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.NamespaceCondition"
                      ],
                  phase = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Node"
            | doc m%"
            Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec = definitions.predicate."io.k8s.api.core.v1.NodeSpec",
                  status =
                    definitions.predicate."io.k8s.api.core.v1.NodeStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NodeAddress"
            | doc m%"
            NodeAddress contains information for the node's address.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "address", "type" ],
                predicates.records.record
                {
                  address = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NodeAffinity"
            | doc m%"
            Node affinity is a group of node affinity scheduling rules.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  preferredDuringSchedulingIgnoredDuringExecution =
                    predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.PreferredSchedulingTerm"
                      ],
                  requiredDuringSchedulingIgnoredDuringExecution =
                    definitions.predicate."io.k8s.api.core.v1.NodeSelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NodeCondition"
            | doc m%"
            NodeCondition contains condition information for a node.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastHeartbeatTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NodeConfigSource"
            | doc m%"
            NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  configMap =
                    definitions.predicate."io.k8s.api.core.v1.ConfigMapNodeConfigSource",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NodeConfigStatus"
            | doc m%"
            NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  active =
                    definitions.predicate."io.k8s.api.core.v1.NodeConfigSource",
                  assigned =
                    definitions.predicate."io.k8s.api.core.v1.NodeConfigSource",
                  error = predicates.isType '"String",
                  lastKnownGood =
                    definitions.predicate."io.k8s.api.core.v1.NodeConfigSource",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NodeDaemonEndpoints"
            | doc m%"
            NodeDaemonEndpoints lists ports opened by daemons running on the Node.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  kubeletEndpoint =
                    definitions.predicate."io.k8s.api.core.v1.DaemonEndpoint",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NodeList"
            | doc m%"
            NodeList is the whole list of all Nodes which have been registered with master.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Node"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NodeSelector"
            | doc m%"
            A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "nodeSelectorTerms" ],
                predicates.records.record
                {
                  nodeSelectorTerms = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.NodeSelectorTerm"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NodeSelectorRequirement"
            | doc m%"
            A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "key", "operator" ],
                predicates.records.record
                {
                  key = predicates.isType '"String",
                  operator = predicates.isType '"String",
                  values = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NodeSelectorTerm"
            | doc m%"
            A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  matchExpressions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.NodeSelectorRequirement"
                      ],
                  matchFields = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.NodeSelectorRequirement"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NodeSpec"
            | doc m%"
            NodeSpec describes the attributes that a node is created with.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  configSource =
                    definitions.predicate."io.k8s.api.core.v1.NodeConfigSource",
                  externalID = predicates.isType '"String",
                  podCIDR = predicates.isType '"String",
                  podCIDRs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  providerID = predicates.isType '"String",
                  taints = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Taint"
                      ],
                  unschedulable = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NodeStatus"
            | doc m%"
            NodeStatus is information about the current status of a node.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  addresses = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.NodeAddress"
                      ],
                  allocatable = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                  capacity = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.NodeCondition"
                      ],
                  config =
                    definitions.predicate."io.k8s.api.core.v1.NodeConfigStatus",
                  daemonEndpoints =
                    definitions.predicate."io.k8s.api.core.v1.NodeDaemonEndpoints",
                  images = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ContainerImage"
                      ],
                  nodeInfo =
                    definitions.predicate."io.k8s.api.core.v1.NodeSystemInfo",
                  phase = predicates.isType '"String",
                  volumesAttached = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.AttachedVolume"
                      ],
                  volumesInUse = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.NodeSystemInfo"
            | doc m%"
            NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [
                  "architecture",
                  "bootID",
                  "containerRuntimeVersion",
                  "kernelVersion",
                  "kubeProxyVersion",
                  "kubeletVersion",
                  "machineID",
                  "operatingSystem",
                  "osImage",
                  "systemUUID"
                ],
                predicates.records.record
                {
                  architecture = predicates.isType '"String",
                  bootID = predicates.isType '"String",
                  containerRuntimeVersion = predicates.isType '"String",
                  kernelVersion = predicates.isType '"String",
                  kubeProxyVersion = predicates.isType '"String",
                  kubeletVersion = predicates.isType '"String",
                  machineID = predicates.isType '"String",
                  operatingSystem = predicates.isType '"String",
                  osImage = predicates.isType '"String",
                  systemUUID = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ObjectFieldSelector"
            | doc m%"
            ObjectFieldSelector selects an APIVersioned field of an object.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "fieldPath" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  fieldPath = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ObjectReference"
            | doc m%"
            ObjectReference contains enough information to let you inspect or modify the referred object.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  fieldPath = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                  resourceVersion = predicates.isType '"String",
                  uid = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PersistentVolume"
            | doc m%"
            PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.core.v1.PersistentVolumeSpec",
                  status =
                    definitions.predicate."io.k8s.api.core.v1.PersistentVolumeStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PersistentVolumeClaim"
            | doc m%"
            PersistentVolumeClaim is a user's request for and claim to a persistent volume
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.core.v1.PersistentVolumeClaimSpec",
                  status =
                    definitions.predicate."io.k8s.api.core.v1.PersistentVolumeClaimStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PersistentVolumeClaimCondition"
            | doc m%"
            PersistentVolumeClaimCondition contails details about state of pvc
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastProbeTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PersistentVolumeClaimList"
            | doc m%"
            PersistentVolumeClaimList is a list of PersistentVolumeClaim items.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.PersistentVolumeClaim"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PersistentVolumeClaimSpec"
            | doc m%"
            PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  accessModes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  dataSource =
                    definitions.predicate."io.k8s.api.core.v1.TypedLocalObjectReference",
                  resources =
                    definitions.predicate."io.k8s.api.core.v1.ResourceRequirements",
                  selector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  storageClassName = predicates.isType '"String",
                  volumeMode = predicates.isType '"String",
                  volumeName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PersistentVolumeClaimStatus"
            | doc m%"
            PersistentVolumeClaimStatus is the current status of a persistent volume claim.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  accessModes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  capacity = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.PersistentVolumeClaimCondition"
                      ],
                  phase = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PersistentVolumeClaimTemplate"
            | doc m%"
            PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.core.v1.PersistentVolumeClaimSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource"
            | doc m%"
            PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "claimName" ],
                predicates.records.record
                {
                  claimName = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PersistentVolumeList"
            | doc m%"
            PersistentVolumeList is a list of PersistentVolume items.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.PersistentVolume"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PersistentVolumeSpec"
            | doc m%"
            PersistentVolumeSpec is the specification of a persistent volume.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  accessModes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  awsElasticBlockStore =
                    definitions.predicate."io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
                  azureDisk =
                    definitions.predicate."io.k8s.api.core.v1.AzureDiskVolumeSource",
                  azureFile =
                    definitions.predicate."io.k8s.api.core.v1.AzureFilePersistentVolumeSource",
                  capacity = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                  cephfs =
                    definitions.predicate."io.k8s.api.core.v1.CephFSPersistentVolumeSource",
                  cinder =
                    definitions.predicate."io.k8s.api.core.v1.CinderPersistentVolumeSource",
                  claimRef =
                    definitions.predicate."io.k8s.api.core.v1.ObjectReference",
                  csi =
                    definitions.predicate."io.k8s.api.core.v1.CSIPersistentVolumeSource",
                  fc =
                    definitions.predicate."io.k8s.api.core.v1.FCVolumeSource",
                  flexVolume =
                    definitions.predicate."io.k8s.api.core.v1.FlexPersistentVolumeSource",
                  flocker =
                    definitions.predicate."io.k8s.api.core.v1.FlockerVolumeSource",
                  gcePersistentDisk =
                    definitions.predicate."io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
                  glusterfs =
                    definitions.predicate."io.k8s.api.core.v1.GlusterfsPersistentVolumeSource",
                  hostPath =
                    definitions.predicate."io.k8s.api.core.v1.HostPathVolumeSource",
                  iscsi =
                    definitions.predicate."io.k8s.api.core.v1.ISCSIPersistentVolumeSource",
                  local =
                    definitions.predicate."io.k8s.api.core.v1.LocalVolumeSource",
                  mountOptions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  nfs =
                    definitions.predicate."io.k8s.api.core.v1.NFSVolumeSource",
                  nodeAffinity =
                    definitions.predicate."io.k8s.api.core.v1.VolumeNodeAffinity",
                  persistentVolumeReclaimPolicy = predicates.isType '"String",
                  photonPersistentDisk =
                    definitions.predicate."io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
                  portworxVolume =
                    definitions.predicate."io.k8s.api.core.v1.PortworxVolumeSource",
                  quobyte =
                    definitions.predicate."io.k8s.api.core.v1.QuobyteVolumeSource",
                  rbd =
                    definitions.predicate."io.k8s.api.core.v1.RBDPersistentVolumeSource",
                  scaleIO =
                    definitions.predicate."io.k8s.api.core.v1.ScaleIOPersistentVolumeSource",
                  storageClassName = predicates.isType '"String",
                  storageos =
                    definitions.predicate."io.k8s.api.core.v1.StorageOSPersistentVolumeSource",
                  volumeMode = predicates.isType '"String",
                  vsphereVolume =
                    definitions.predicate."io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PersistentVolumeStatus"
            | doc m%"
            PersistentVolumeStatus is the current status of a persistent volume.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  message = predicates.isType '"String",
                  phase = predicates.isType '"String",
                  reason = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource"
            | doc m%"
            Represents a Photon Controller persistent disk resource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "pdID" ],
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  pdID = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Pod"
            | doc m%"
            Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec = definitions.predicate."io.k8s.api.core.v1.PodSpec",
                  status = definitions.predicate."io.k8s.api.core.v1.PodStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodAffinity"
            | doc m%"
            Pod affinity is a group of inter pod affinity scheduling rules.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  preferredDuringSchedulingIgnoredDuringExecution =
                    predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.WeightedPodAffinityTerm"
                      ],
                  requiredDuringSchedulingIgnoredDuringExecution =
                    predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.PodAffinityTerm"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodAffinityTerm"
            | doc m%"
            Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "topologyKey" ],
                predicates.records.record
                {
                  labelSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  namespaces = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  topologyKey = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodAntiAffinity"
            | doc m%"
            Pod anti affinity is a group of inter pod anti affinity scheduling rules.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  preferredDuringSchedulingIgnoredDuringExecution =
                    predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.WeightedPodAffinityTerm"
                      ],
                  requiredDuringSchedulingIgnoredDuringExecution =
                    predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.PodAffinityTerm"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodCondition"
            | doc m%"
            PodCondition contains details for the current condition of this pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastProbeTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodDNSConfig"
            | doc m%"
            PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  nameservers = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  options = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.PodDNSConfigOption"
                      ],
                  searches = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodDNSConfigOption"
            | doc m%"
            PodDNSConfigOption defines DNS resolver options of a pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  value = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodIP"
            | doc m%"
            IP address information for entries in the (plural) PodIPs field. Each entry includes:
               IP: An IP address allocated to the pod. Routable at least within the cluster.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record { ip = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodList"
            | doc m%"
            PodList is a list of Pods.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Pod"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodReadinessGate"
            | doc m%"
            PodReadinessGate contains the reference to a pod condition
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "conditionType" ],
                predicates.records.record
                { conditionType = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodSecurityContext"
            | doc m%"
            PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  fsGroup = predicates.isType 'Integer,
                  fsGroupChangePolicy = predicates.isType '"String",
                  runAsGroup = predicates.isType 'Integer,
                  runAsNonRoot = predicates.isType '"Bool",
                  runAsUser = predicates.isType 'Integer,
                  seLinuxOptions =
                    definitions.predicate."io.k8s.api.core.v1.SELinuxOptions",
                  seccompProfile =
                    definitions.predicate."io.k8s.api.core.v1.SeccompProfile",
                  supplementalGroups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType 'Integer)
                      ],
                  sysctls = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Sysctl"
                      ],
                  windowsOptions =
                    definitions.predicate."io.k8s.api.core.v1.WindowsSecurityContextOptions",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodSpec"
            | doc m%"
            PodSpec is a description of a pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "containers" ],
                predicates.records.record
                {
                  activeDeadlineSeconds = predicates.isType 'Integer,
                  affinity =
                    definitions.predicate."io.k8s.api.core.v1.Affinity",
                  automountServiceAccountToken = predicates.isType '"Bool",
                  containers = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Container"
                      ],
                  dnsConfig =
                    definitions.predicate."io.k8s.api.core.v1.PodDNSConfig",
                  dnsPolicy = predicates.isType '"String",
                  enableServiceLinks = predicates.isType '"Bool",
                  ephemeralContainers = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.EphemeralContainer"
                      ],
                  hostAliases = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.HostAlias"
                      ],
                  hostIPC = predicates.isType '"Bool",
                  hostNetwork = predicates.isType '"Bool",
                  hostPID = predicates.isType '"Bool",
                  hostname = predicates.isType '"String",
                  imagePullSecrets = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.LocalObjectReference"
                      ],
                  initContainers = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Container"
                      ],
                  nodeName = predicates.isType '"String",
                  nodeSelector = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  overhead = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                  preemptionPolicy = predicates.isType '"String",
                  "priority" = predicates.isType 'Integer,
                  priorityClassName = predicates.isType '"String",
                  readinessGates = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.PodReadinessGate"
                      ],
                  restartPolicy = predicates.isType '"String",
                  runtimeClassName = predicates.isType '"String",
                  schedulerName = predicates.isType '"String",
                  securityContext =
                    definitions.predicate."io.k8s.api.core.v1.PodSecurityContext",
                  serviceAccount = predicates.isType '"String",
                  serviceAccountName = predicates.isType '"String",
                  setHostnameAsFQDN = predicates.isType '"Bool",
                  shareProcessNamespace = predicates.isType '"Bool",
                  subdomain = predicates.isType '"String",
                  terminationGracePeriodSeconds = predicates.isType 'Integer,
                  tolerations = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Toleration"
                      ],
                  topologySpreadConstraints = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.TopologySpreadConstraint"
                      ],
                  volumes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Volume"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodStatus"
            | doc m%"
            PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.PodCondition"
                      ],
                  containerStatuses = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ContainerStatus"
                      ],
                  ephemeralContainerStatuses = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ContainerStatus"
                      ],
                  hostIP = predicates.isType '"String",
                  initContainerStatuses = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ContainerStatus"
                      ],
                  message = predicates.isType '"String",
                  nominatedNodeName = predicates.isType '"String",
                  phase = predicates.isType '"String",
                  podIP = predicates.isType '"String",
                  podIPs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.PodIP"
                      ],
                  qosClass = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  startTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodTemplate"
            | doc m%"
            PodTemplate describes a template for creating copies of a predefined pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  template =
                    definitions.predicate."io.k8s.api.core.v1.PodTemplateSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodTemplateList"
            | doc m%"
            PodTemplateList is a list of PodTemplates.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.PodTemplate"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PodTemplateSpec"
            | doc m%"
            PodTemplateSpec describes the data a pod should have when created from a template
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec = definitions.predicate."io.k8s.api.core.v1.PodSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PortStatus" = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "port", "protocol" ],
                predicates.records.record
                {
                  error = predicates.isType '"String",
                  port = predicates.isType 'Integer,
                  protocol = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PortworxVolumeSource"
            | doc m%"
            PortworxVolumeSource represents a Portworx volume resource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "volumeID" ],
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  volumeID = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.PreferredSchedulingTerm"
            | doc m%"
            An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "preference", "weight" ],
                predicates.records.record
                {
                  preference =
                    definitions.predicate."io.k8s.api.core.v1.NodeSelectorTerm",
                  weight = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Probe"
            | doc m%"
            Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  exec = definitions.predicate."io.k8s.api.core.v1.ExecAction",
                  failureThreshold = predicates.isType 'Integer,
                  httpGet =
                    definitions.predicate."io.k8s.api.core.v1.HTTPGetAction",
                  initialDelaySeconds = predicates.isType 'Integer,
                  periodSeconds = predicates.isType 'Integer,
                  successThreshold = predicates.isType 'Integer,
                  tcpSocket =
                    definitions.predicate."io.k8s.api.core.v1.TCPSocketAction",
                  timeoutSeconds = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ProjectedVolumeSource"
            | doc m%"
            Represents a projected volume source
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  defaultMode = predicates.isType 'Integer,
                  sources = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.VolumeProjection"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.QuobyteVolumeSource"
            | doc m%"
            Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "registry", "volume" ],
                predicates.records.record
                {
                  group = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  registry = predicates.isType '"String",
                  tenant = predicates.isType '"String",
                  user = predicates.isType '"String",
                  volume = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.RBDPersistentVolumeSource"
            | doc m%"
            Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "image", "monitors" ],
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  image = predicates.isType '"String",
                  keyring = predicates.isType '"String",
                  monitors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  pool = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.SecretReference",
                  user = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.RBDVolumeSource"
            | doc m%"
            Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "image", "monitors" ],
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  image = predicates.isType '"String",
                  keyring = predicates.isType '"String",
                  monitors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  pool = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.LocalObjectReference",
                  user = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ReplicationController"
            | doc m%"
            ReplicationController represents the configuration of a replication controller.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.core.v1.ReplicationControllerSpec",
                  status =
                    definitions.predicate."io.k8s.api.core.v1.ReplicationControllerStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ReplicationControllerCondition"
            | doc m%"
            ReplicationControllerCondition describes the state of a replication controller at a certain point.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ReplicationControllerList"
            | doc m%"
            ReplicationControllerList is a collection of replication controllers.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ReplicationController"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ReplicationControllerSpec"
            | doc m%"
            ReplicationControllerSpec is the specification of a replication controller.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  minReadySeconds = predicates.isType 'Integer,
                  replicas = predicates.isType 'Integer,
                  selector = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  template =
                    definitions.predicate."io.k8s.api.core.v1.PodTemplateSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ReplicationControllerStatus"
            | doc m%"
            ReplicationControllerStatus represents the current status of a replication controller.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "replicas" ],
                predicates.records.record
                {
                  availableReplicas = predicates.isType 'Integer,
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ReplicationControllerCondition"
                      ],
                  fullyLabeledReplicas = predicates.isType 'Integer,
                  observedGeneration = predicates.isType 'Integer,
                  readyReplicas = predicates.isType 'Integer,
                  replicas = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ResourceFieldSelector"
            | doc m%"
            ResourceFieldSelector represents container resources (cpu, memory) and their output format
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "resource" ],
                predicates.records.record
                {
                  containerName = predicates.isType '"String",
                  divisor =
                    definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity",
                  resource = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ResourceQuota"
            | doc m%"
            ResourceQuota sets aggregate quota restrictions enforced per namespace
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.core.v1.ResourceQuotaSpec",
                  status =
                    definitions.predicate."io.k8s.api.core.v1.ResourceQuotaStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ResourceQuotaList"
            | doc m%"
            ResourceQuotaList is a list of ResourceQuota items.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ResourceQuota"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ResourceQuotaSpec"
            | doc m%"
            ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  hard = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                  scopeSelector =
                    definitions.predicate."io.k8s.api.core.v1.ScopeSelector",
                  scopes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ResourceQuotaStatus"
            | doc m%"
            ResourceQuotaStatus defines the enforced hard limits and observed use.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  hard = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                  used = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ResourceRequirements"
            | doc m%"
            ResourceRequirements describes the compute resource requirements.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  limits = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                  requests = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.SELinuxOptions"
            | doc m%"
            SELinuxOptions are the labels to be applied to the container
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  level = predicates.isType '"String",
                  role = predicates.isType '"String",
                  type = predicates.isType '"String",
                  user = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ScaleIOPersistentVolumeSource"
            | doc m%"
            ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "gateway", "secretRef", "system" ],
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  gateway = predicates.isType '"String",
                  protectionDomain = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.SecretReference",
                  sslEnabled = predicates.isType '"Bool",
                  storageMode = predicates.isType '"String",
                  storagePool = predicates.isType '"String",
                  system = predicates.isType '"String",
                  volumeName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ScaleIOVolumeSource"
            | doc m%"
            ScaleIOVolumeSource represents a persistent ScaleIO volume
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "gateway", "secretRef", "system" ],
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  gateway = predicates.isType '"String",
                  protectionDomain = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.LocalObjectReference",
                  sslEnabled = predicates.isType '"Bool",
                  storageMode = predicates.isType '"String",
                  storagePool = predicates.isType '"String",
                  system = predicates.isType '"String",
                  volumeName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ScopeSelector"
            | doc m%"
            A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  matchExpressions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ScopedResourceSelectorRequirement"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ScopedResourceSelectorRequirement"
            | doc m%"
            A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "operator", "scopeName" ],
                predicates.records.record
                {
                  operator = predicates.isType '"String",
                  scopeName = predicates.isType '"String",
                  values = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.SeccompProfile"
            | doc m%"
            SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                {
                  localhostProfile = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Secret"
            | doc m%"
            Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  data = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  immutable = predicates.isType '"Bool",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  stringData = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.SecretEnvSource"
            | doc m%"
            SecretEnvSource selects a Secret to populate the environment variables with.
            
            The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  "optional" = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.SecretKeySelector"
            | doc m%"
            SecretKeySelector selects a key of a Secret.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "key" ],
                predicates.records.record
                {
                  key = predicates.isType '"String",
                  name = predicates.isType '"String",
                  "optional" = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.SecretList"
            | doc m%"
            SecretList is a list of Secret.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Secret"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.SecretProjection"
            | doc m%"
            Adapts a secret into a projected volume.
            
            The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.KeyToPath"
                      ],
                  name = predicates.isType '"String",
                  "optional" = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.SecretReference"
            | doc m%"
            SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.SecretVolumeSource"
            | doc m%"
            Adapts a Secret into a volume.
            
            The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  defaultMode = predicates.isType 'Integer,
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.KeyToPath"
                      ],
                  "optional" = predicates.isType '"Bool",
                  secretName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.SecurityContext"
            | doc m%"
            SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  allowPrivilegeEscalation = predicates.isType '"Bool",
                  capabilities =
                    definitions.predicate."io.k8s.api.core.v1.Capabilities",
                  privileged = predicates.isType '"Bool",
                  procMount = predicates.isType '"String",
                  readOnlyRootFilesystem = predicates.isType '"Bool",
                  runAsGroup = predicates.isType 'Integer,
                  runAsNonRoot = predicates.isType '"Bool",
                  runAsUser = predicates.isType 'Integer,
                  seLinuxOptions =
                    definitions.predicate."io.k8s.api.core.v1.SELinuxOptions",
                  seccompProfile =
                    definitions.predicate."io.k8s.api.core.v1.SeccompProfile",
                  windowsOptions =
                    definitions.predicate."io.k8s.api.core.v1.WindowsSecurityContextOptions",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Service"
            | doc m%"
            Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec = definitions.predicate."io.k8s.api.core.v1.ServiceSpec",
                  status =
                    definitions.predicate."io.k8s.api.core.v1.ServiceStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ServiceAccount"
            | doc m%"
            ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  automountServiceAccountToken = predicates.isType '"Bool",
                  imagePullSecrets = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.LocalObjectReference"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  secrets = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ObjectReference"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ServiceAccountList"
            | doc m%"
            ServiceAccountList is a list of ServiceAccount objects
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ServiceAccount"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ServiceAccountTokenProjection"
            | doc m%"
            ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "path" ],
                predicates.records.record
                {
                  audience = predicates.isType '"String",
                  expirationSeconds = predicates.isType 'Integer,
                  path = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ServiceList"
            | doc m%"
            ServiceList holds a list of services.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Service"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ServicePort"
            | doc m%"
            ServicePort contains information on service's port.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "port" ],
                predicates.records.record
                {
                  appProtocol = predicates.isType '"String",
                  name = predicates.isType '"String",
                  nodePort = predicates.isType 'Integer,
                  port = predicates.isType 'Integer,
                  protocol = predicates.isType '"String",
                  targetPort =
                    definitions.predicate."io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ServiceSpec"
            | doc m%"
            ServiceSpec describes the attributes that a user creates on a service.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  allocateLoadBalancerNodePorts = predicates.isType '"Bool",
                  clusterIP = predicates.isType '"String",
                  clusterIPs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  externalIPs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  externalName = predicates.isType '"String",
                  externalTrafficPolicy = predicates.isType '"String",
                  healthCheckNodePort = predicates.isType 'Integer,
                  ipFamilies = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  ipFamilyPolicy = predicates.isType '"String",
                  loadBalancerIP = predicates.isType '"String",
                  loadBalancerSourceRanges = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  ports = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.ServicePort"
                      ],
                  publishNotReadyAddresses = predicates.isType '"Bool",
                  selector = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  sessionAffinity = predicates.isType '"String",
                  sessionAffinityConfig =
                    definitions.predicate."io.k8s.api.core.v1.SessionAffinityConfig",
                  topologyKeys = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.ServiceStatus"
            | doc m%"
            ServiceStatus represents the current status of a service.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
                      ],
                  loadBalancer =
                    definitions.predicate."io.k8s.api.core.v1.LoadBalancerStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.SessionAffinityConfig"
            | doc m%"
            SessionAffinityConfig represents the configurations of session affinity.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  clientIP =
                    definitions.predicate."io.k8s.api.core.v1.ClientIPConfig",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.StorageOSPersistentVolumeSource"
            | doc m%"
            Represents a StorageOS persistent volume resource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.ObjectReference",
                  volumeName = predicates.isType '"String",
                  volumeNamespace = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.StorageOSVolumeSource"
            | doc m%"
            Represents a StorageOS persistent volume resource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  secretRef =
                    definitions.predicate."io.k8s.api.core.v1.LocalObjectReference",
                  volumeName = predicates.isType '"String",
                  volumeNamespace = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Sysctl"
            | doc m%"
            Sysctl defines a kernel parameter to be set
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "value" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  value = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.TCPSocketAction"
            | doc m%"
            TCPSocketAction describes an action based on opening a socket
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "port" ],
                predicates.records.record
                {
                  host = predicates.isType '"String",
                  port =
                    definitions.predicate."io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Taint"
            | doc m%"
            The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "effect", "key" ],
                predicates.records.record
                {
                  effect = predicates.isType '"String",
                  key = predicates.isType '"String",
                  timeAdded =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  value = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Toleration"
            | doc m%"
            The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  effect = predicates.isType '"String",
                  key = predicates.isType '"String",
                  operator = predicates.isType '"String",
                  tolerationSeconds = predicates.isType 'Integer,
                  value = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.TopologySelectorLabelRequirement"
            | doc m%"
            A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "key", "values" ],
                predicates.records.record
                {
                  key = predicates.isType '"String",
                  values = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.TopologySelectorTerm"
            | doc m%"
            A topology selector term represents the result of label queries. A null or empty topology selector term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  matchLabelExpressions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.TopologySelectorLabelRequirement"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.TopologySpreadConstraint"
            | doc m%"
            TopologySpreadConstraint specifies how to spread matching pods among the given topology.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "maxSkew", "topologyKey", "whenUnsatisfiable" ],
                predicates.records.record
                {
                  labelSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  maxSkew = predicates.isType 'Integer,
                  topologyKey = predicates.isType '"String",
                  whenUnsatisfiable = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.TypedLocalObjectReference"
            | doc m%"
            TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "kind", "name" ],
                predicates.records.record
                {
                  apiGroup = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.Volume"
            | doc m%"
            Volume represents a named volume in a pod that may be accessed by any container in the pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  awsElasticBlockStore =
                    definitions.predicate."io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
                  azureDisk =
                    definitions.predicate."io.k8s.api.core.v1.AzureDiskVolumeSource",
                  azureFile =
                    definitions.predicate."io.k8s.api.core.v1.AzureFileVolumeSource",
                  cephfs =
                    definitions.predicate."io.k8s.api.core.v1.CephFSVolumeSource",
                  cinder =
                    definitions.predicate."io.k8s.api.core.v1.CinderVolumeSource",
                  configMap =
                    definitions.predicate."io.k8s.api.core.v1.ConfigMapVolumeSource",
                  csi =
                    definitions.predicate."io.k8s.api.core.v1.CSIVolumeSource",
                  downwardAPI =
                    definitions.predicate."io.k8s.api.core.v1.DownwardAPIVolumeSource",
                  emptyDir =
                    definitions.predicate."io.k8s.api.core.v1.EmptyDirVolumeSource",
                  ephemeral =
                    definitions.predicate."io.k8s.api.core.v1.EphemeralVolumeSource",
                  fc =
                    definitions.predicate."io.k8s.api.core.v1.FCVolumeSource",
                  flexVolume =
                    definitions.predicate."io.k8s.api.core.v1.FlexVolumeSource",
                  flocker =
                    definitions.predicate."io.k8s.api.core.v1.FlockerVolumeSource",
                  gcePersistentDisk =
                    definitions.predicate."io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
                  gitRepo =
                    definitions.predicate."io.k8s.api.core.v1.GitRepoVolumeSource",
                  glusterfs =
                    definitions.predicate."io.k8s.api.core.v1.GlusterfsVolumeSource",
                  hostPath =
                    definitions.predicate."io.k8s.api.core.v1.HostPathVolumeSource",
                  iscsi =
                    definitions.predicate."io.k8s.api.core.v1.ISCSIVolumeSource",
                  name = predicates.isType '"String",
                  nfs =
                    definitions.predicate."io.k8s.api.core.v1.NFSVolumeSource",
                  persistentVolumeClaim =
                    definitions.predicate."io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource",
                  photonPersistentDisk =
                    definitions.predicate."io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
                  portworxVolume =
                    definitions.predicate."io.k8s.api.core.v1.PortworxVolumeSource",
                  projected =
                    definitions.predicate."io.k8s.api.core.v1.ProjectedVolumeSource",
                  quobyte =
                    definitions.predicate."io.k8s.api.core.v1.QuobyteVolumeSource",
                  rbd =
                    definitions.predicate."io.k8s.api.core.v1.RBDVolumeSource",
                  scaleIO =
                    definitions.predicate."io.k8s.api.core.v1.ScaleIOVolumeSource",
                  secret =
                    definitions.predicate."io.k8s.api.core.v1.SecretVolumeSource",
                  storageos =
                    definitions.predicate."io.k8s.api.core.v1.StorageOSVolumeSource",
                  vsphereVolume =
                    definitions.predicate."io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.VolumeDevice"
            | doc m%"
            volumeDevice describes a mapping of a raw block device within a container.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "devicePath", "name" ],
                predicates.records.record
                {
                  devicePath = predicates.isType '"String",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.VolumeMount"
            | doc m%"
            VolumeMount describes a mounting of a Volume within a container.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "mountPath", "name" ],
                predicates.records.record
                {
                  mountPath = predicates.isType '"String",
                  mountPropagation = predicates.isType '"String",
                  name = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                  subPath = predicates.isType '"String",
                  subPathExpr = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.VolumeNodeAffinity"
            | doc m%"
            VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  required =
                    definitions.predicate."io.k8s.api.core.v1.NodeSelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.VolumeProjection"
            | doc m%"
            Projection that may be projected along with other supported volume types
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  configMap =
                    definitions.predicate."io.k8s.api.core.v1.ConfigMapProjection",
                  downwardAPI =
                    definitions.predicate."io.k8s.api.core.v1.DownwardAPIProjection",
                  secret =
                    definitions.predicate."io.k8s.api.core.v1.SecretProjection",
                  serviceAccountToken =
                    definitions.predicate."io.k8s.api.core.v1.ServiceAccountTokenProjection",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource"
            | doc m%"
            Represents a vSphere volume resource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "volumePath" ],
                predicates.records.record
                {
                  fsType = predicates.isType '"String",
                  storagePolicyID = predicates.isType '"String",
                  storagePolicyName = predicates.isType '"String",
                  volumePath = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.WeightedPodAffinityTerm"
            | doc m%"
            The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "podAffinityTerm", "weight" ],
                predicates.records.record
                {
                  podAffinityTerm =
                    definitions.predicate."io.k8s.api.core.v1.PodAffinityTerm",
                  weight = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.core.v1.WindowsSecurityContextOptions"
            | doc m%"
            WindowsSecurityContextOptions contain Windows-specific options and credentials.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  gmsaCredentialSpec = predicates.isType '"String",
                  gmsaCredentialSpecName = predicates.isType '"String",
                  runAsUserName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.discovery.v1beta1.Endpoint"
            | doc m%"
            Endpoint represents a single logical "backend" implementing a service.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "addresses" ],
                predicates.records.record
                {
                  addresses = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  conditions =
                    definitions.predicate."io.k8s.api.discovery.v1beta1.EndpointConditions",
                  hostname = predicates.isType '"String",
                  nodeName = predicates.isType '"String",
                  targetRef =
                    definitions.predicate."io.k8s.api.core.v1.ObjectReference",
                  topology = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.discovery.v1beta1.EndpointConditions"
            | doc m%"
            EndpointConditions represents the current condition of an endpoint.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  ready = predicates.isType '"Bool",
                  serving = predicates.isType '"Bool",
                  terminating = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.discovery.v1beta1.EndpointPort"
            | doc m%"
            EndpointPort represents a Port used by an EndpointSlice
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  appProtocol = predicates.isType '"String",
                  name = predicates.isType '"String",
                  port = predicates.isType 'Integer,
                  protocol = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.discovery.v1beta1.EndpointSlice"
            | doc m%"
            EndpointSlice represents a subset of the endpoints that implement a service. For a given service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of endpoints.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "addressType", "endpoints" ],
                predicates.records.record
                {
                  addressType = predicates.isType '"String",
                  apiVersion = predicates.isType '"String",
                  endpoints = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.discovery.v1beta1.Endpoint"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  ports = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.discovery.v1beta1.EndpointPort"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.discovery.v1beta1.EndpointSliceList"
            | doc m%"
            EndpointSliceList represents a list of endpoint slices
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.discovery.v1beta1.EndpointSlice"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.events.v1.Event"
            | doc m%"
            Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "eventTime", "metadata" ],
                predicates.records.record
                {
                  action = predicates.isType '"String",
                  apiVersion = predicates.isType '"String",
                  deprecatedCount = predicates.isType 'Integer,
                  deprecatedFirstTimestamp =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  deprecatedLastTimestamp =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  deprecatedSource =
                    definitions.predicate."io.k8s.api.core.v1.EventSource",
                  eventTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  note = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  regarding =
                    definitions.predicate."io.k8s.api.core.v1.ObjectReference",
                  related =
                    definitions.predicate."io.k8s.api.core.v1.ObjectReference",
                  reportingController = predicates.isType '"String",
                  reportingInstance = predicates.isType '"String",
                  series =
                    definitions.predicate."io.k8s.api.events.v1.EventSeries",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.events.v1.EventList"
            | doc m%"
            EventList is a list of Event objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.events.v1.Event"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.events.v1.EventSeries"
            | doc m%"
            EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in "k8s.io/client-go/tools/events/event_broadcaster.go" shows how this struct is updated on heartbeats and can guide customized reporter implementations.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "count", "lastObservedTime" ],
                predicates.records.record
                {
                  count = predicates.isType 'Integer,
                  lastObservedTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.events.v1beta1.Event"
            | doc m%"
            Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "eventTime", "metadata" ],
                predicates.records.record
                {
                  action = predicates.isType '"String",
                  apiVersion = predicates.isType '"String",
                  deprecatedCount = predicates.isType 'Integer,
                  deprecatedFirstTimestamp =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  deprecatedLastTimestamp =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  deprecatedSource =
                    definitions.predicate."io.k8s.api.core.v1.EventSource",
                  eventTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  note = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  regarding =
                    definitions.predicate."io.k8s.api.core.v1.ObjectReference",
                  related =
                    definitions.predicate."io.k8s.api.core.v1.ObjectReference",
                  reportingController = predicates.isType '"String",
                  reportingInstance = predicates.isType '"String",
                  series =
                    definitions.predicate."io.k8s.api.events.v1beta1.EventSeries",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.events.v1beta1.EventList"
            | doc m%"
            EventList is a list of Event objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.events.v1beta1.Event"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.events.v1beta1.EventSeries"
            | doc m%"
            EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "count", "lastObservedTime" ],
                predicates.records.record
                {
                  count = predicates.isType 'Integer,
                  lastObservedTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.extensions.v1beta1.HTTPIngressPath"
            | doc m%"
            HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "backend" ],
                predicates.records.record
                {
                  backend =
                    definitions.predicate."io.k8s.api.extensions.v1beta1.IngressBackend",
                  path = predicates.isType '"String",
                  pathType = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue"
            | doc m%"
            HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "paths" ],
                predicates.records.record
                {
                  paths = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.extensions.v1beta1.HTTPIngressPath"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.extensions.v1beta1.Ingress"
            | doc m%"
            Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc. DEPRECATED - This group version of Ingress is deprecated by networking.k8s.io/v1beta1 Ingress. See the release notes for more information.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.extensions.v1beta1.IngressSpec",
                  status =
                    definitions.predicate."io.k8s.api.extensions.v1beta1.IngressStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.extensions.v1beta1.IngressBackend"
            | doc m%"
            IngressBackend describes all endpoints for a given service and port.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  resource =
                    definitions.predicate."io.k8s.api.core.v1.TypedLocalObjectReference",
                  serviceName = predicates.isType '"String",
                  servicePort =
                    definitions.predicate."io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.extensions.v1beta1.IngressList"
            | doc m%"
            IngressList is a collection of Ingress.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.extensions.v1beta1.Ingress"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.extensions.v1beta1.IngressRule"
            | doc m%"
            IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  host = predicates.isType '"String",
                  http =
                    definitions.predicate."io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.extensions.v1beta1.IngressSpec"
            | doc m%"
            IngressSpec describes the Ingress the user wishes to exist.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  backend =
                    definitions.predicate."io.k8s.api.extensions.v1beta1.IngressBackend",
                  ingressClassName = predicates.isType '"String",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.extensions.v1beta1.IngressRule"
                      ],
                  tls = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.extensions.v1beta1.IngressTLS"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.extensions.v1beta1.IngressStatus"
            | doc m%"
            IngressStatus describe the current state of the Ingress.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  loadBalancer =
                    definitions.predicate."io.k8s.api.core.v1.LoadBalancerStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.extensions.v1beta1.IngressTLS"
            | doc m%"
            IngressTLS describes the transport layer security associated with an Ingress.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  hosts = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  secretName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.FlowDistinguisherMethod"
            | doc m%"
            FlowDistinguisherMethod specifies the method of a flow distinguisher.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                { type = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.FlowSchema"
            | doc m%"
            FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.FlowSchemaSpec",
                  status =
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.FlowSchemaStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaCondition"
            | doc m%"
            FlowSchemaCondition describes conditions for a FlowSchema.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaList"
            | doc m%"
            FlowSchemaList is a list of FlowSchema objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.FlowSchema"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaSpec"
            | doc m%"
            FlowSchemaSpec describes how the FlowSchema's specification looks like.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "priorityLevelConfiguration" ],
                predicates.records.record
                {
                  distinguisherMethod =
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.FlowDistinguisherMethod",
                  matchingPrecedence = predicates.isType 'Integer,
                  priorityLevelConfiguration =
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationReference",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.PolicyRulesWithSubjects"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaStatus"
            | doc m%"
            FlowSchemaStatus represents the current state of a FlowSchema.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.FlowSchemaCondition"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.GroupSubject"
            | doc m%"
            GroupSubject holds detailed information for group-kind subject.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                { name = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.LimitResponse"
            | doc m%"
            LimitResponse defines how to handle requests that can not be executed right now.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                {
                  queuing =
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.QueuingConfiguration",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.LimitedPriorityLevelConfiguration"
            | doc m%"
            LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
             * How are requests for this priority level limited?
             * What should be done with requests that exceed the limit?
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  assuredConcurrencyShares = predicates.isType 'Integer,
                  limitResponse =
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.LimitResponse",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.NonResourcePolicyRule"
            | doc m%"
            NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "nonResourceURLs", "verbs" ],
                predicates.records.record
                {
                  nonResourceURLs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  verbs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.PolicyRulesWithSubjects"
            | doc m%"
            PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "subjects" ],
                predicates.records.record
                {
                  nonResourceRules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.NonResourcePolicyRule"
                      ],
                  resourceRules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.ResourcePolicyRule"
                      ],
                  subjects = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.Subject"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration"
            | doc m%"
            PriorityLevelConfiguration represents the configuration of a priority level.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec",
                  status =
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationCondition"
            | doc m%"
            PriorityLevelConfigurationCondition defines the condition of priority level.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationList"
            | doc m%"
            PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationReference"
            | doc m%"
            PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                { name = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec"
            | doc m%"
            PriorityLevelConfigurationSpec specifies the configuration of a priority level.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                {
                  limited =
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.LimitedPriorityLevelConfiguration",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationStatus"
            | doc m%"
            PriorityLevelConfigurationStatus represents the current state of a "request-priority".
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationCondition"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.QueuingConfiguration"
            | doc m%"
            QueuingConfiguration holds the configuration parameters for queuing
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  handSize = predicates.isType 'Integer,
                  queueLengthLimit = predicates.isType 'Integer,
                  queues = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.ResourcePolicyRule"
            | doc m%"
            ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "apiGroups", "resources", "verbs" ],
                predicates.records.record
                {
                  apiGroups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  clusterScope = predicates.isType '"Bool",
                  namespaces = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resources = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  verbs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.ServiceAccountSubject"
            | doc m%"
            ServiceAccountSubject holds detailed information for service-account-kind subject.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "namespace" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.Subject"
            | doc m%"
            Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "kind" ],
                predicates.records.record
                {
                  group =
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.GroupSubject",
                  kind = predicates.isType '"String",
                  serviceAccount =
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.ServiceAccountSubject",
                  user =
                    definitions.predicate."io.k8s.api.flowcontrol.v1alpha1.UserSubject",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1alpha1.UserSubject"
            | doc m%"
            UserSubject holds detailed information for user-kind subject.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                { name = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.FlowDistinguisherMethod"
            | doc m%"
            FlowDistinguisherMethod specifies the method of a flow distinguisher.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                { type = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.FlowSchema"
            | doc m%"
            FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.FlowSchemaSpec",
                  status =
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.FlowSchemaStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.FlowSchemaCondition"
            | doc m%"
            FlowSchemaCondition describes conditions for a FlowSchema.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.FlowSchemaList"
            | doc m%"
            FlowSchemaList is a list of FlowSchema objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1beta1.FlowSchema"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.FlowSchemaSpec"
            | doc m%"
            FlowSchemaSpec describes how the FlowSchema's specification looks like.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "priorityLevelConfiguration" ],
                predicates.records.record
                {
                  distinguisherMethod =
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.FlowDistinguisherMethod",
                  matchingPrecedence = predicates.isType 'Integer,
                  priorityLevelConfiguration =
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationReference",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1beta1.PolicyRulesWithSubjects"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.FlowSchemaStatus"
            | doc m%"
            FlowSchemaStatus represents the current state of a FlowSchema.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1beta1.FlowSchemaCondition"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.GroupSubject"
            | doc m%"
            GroupSubject holds detailed information for group-kind subject.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                { name = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.LimitResponse"
            | doc m%"
            LimitResponse defines how to handle requests that can not be executed right now.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                {
                  queuing =
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.QueuingConfiguration",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.LimitedPriorityLevelConfiguration"
            | doc m%"
            LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:
             * How are requests for this priority level limited?
             * What should be done with requests that exceed the limit?
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  assuredConcurrencyShares = predicates.isType 'Integer,
                  limitResponse =
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.LimitResponse",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.NonResourcePolicyRule"
            | doc m%"
            NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "nonResourceURLs", "verbs" ],
                predicates.records.record
                {
                  nonResourceURLs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  verbs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.PolicyRulesWithSubjects"
            | doc m%"
            PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "subjects" ],
                predicates.records.record
                {
                  nonResourceRules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1beta1.NonResourcePolicyRule"
                      ],
                  resourceRules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1beta1.ResourcePolicyRule"
                      ],
                  subjects = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1beta1.Subject"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfiguration"
            | doc m%"
            PriorityLevelConfiguration represents the configuration of a priority level.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationSpec",
                  status =
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationCondition"
            | doc m%"
            PriorityLevelConfigurationCondition defines the condition of priority level.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationList"
            | doc m%"
            PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfiguration"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationReference"
            | doc m%"
            PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                { name = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationSpec"
            | doc m%"
            PriorityLevelConfigurationSpec specifies the configuration of a priority level.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "type" ],
                predicates.records.record
                {
                  limited =
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.LimitedPriorityLevelConfiguration",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationStatus"
            | doc m%"
            PriorityLevelConfigurationStatus represents the current state of a "request-priority".
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.flowcontrol.v1beta1.PriorityLevelConfigurationCondition"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.QueuingConfiguration"
            | doc m%"
            QueuingConfiguration holds the configuration parameters for queuing
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  handSize = predicates.isType 'Integer,
                  queueLengthLimit = predicates.isType 'Integer,
                  queues = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.ResourcePolicyRule"
            | doc m%"
            ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "apiGroups", "resources", "verbs" ],
                predicates.records.record
                {
                  apiGroups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  clusterScope = predicates.isType '"Bool",
                  namespaces = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resources = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  verbs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.ServiceAccountSubject"
            | doc m%"
            ServiceAccountSubject holds detailed information for service-account-kind subject.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "namespace" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.Subject"
            | doc m%"
            Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "kind" ],
                predicates.records.record
                {
                  group =
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.GroupSubject",
                  kind = predicates.isType '"String",
                  serviceAccount =
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.ServiceAccountSubject",
                  user =
                    definitions.predicate."io.k8s.api.flowcontrol.v1beta1.UserSubject",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.flowcontrol.v1beta1.UserSubject"
            | doc m%"
            UserSubject holds detailed information for user-kind subject.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                { name = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.HTTPIngressPath"
            | doc m%"
            HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "backend" ],
                predicates.records.record
                {
                  backend =
                    definitions.predicate."io.k8s.api.networking.v1.IngressBackend",
                  path = predicates.isType '"String",
                  pathType = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.HTTPIngressRuleValue"
            | doc m%"
            HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "paths" ],
                predicates.records.record
                {
                  paths = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1.HTTPIngressPath"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.IPBlock"
            | doc m%"
            IPBlock describes a particular CIDR (Ex. "192.168.1.1/24","2001:db9::/64") that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The except entry describes CIDRs that should not be included within this rule.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "cidr" ],
                predicates.records.record
                {
                  cidr = predicates.isType '"String",
                  except = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.Ingress"
            | doc m%"
            Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.networking.v1.IngressSpec",
                  status =
                    definitions.predicate."io.k8s.api.networking.v1.IngressStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.IngressBackend"
            | doc m%"
            IngressBackend describes all endpoints for a given service and port.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  resource =
                    definitions.predicate."io.k8s.api.core.v1.TypedLocalObjectReference",
                  service =
                    definitions.predicate."io.k8s.api.networking.v1.IngressServiceBackend",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.IngressClass"
            | doc m%"
            IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.networking.v1.IngressClassSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.IngressClassList"
            | doc m%"
            IngressClassList is a collection of IngressClasses.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1.IngressClass"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.IngressClassSpec"
            | doc m%"
            IngressClassSpec provides information about the class of an Ingress.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  controller = predicates.isType '"String",
                  parameters =
                    definitions.predicate."io.k8s.api.core.v1.TypedLocalObjectReference",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.IngressList"
            | doc m%"
            IngressList is a collection of Ingress.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1.Ingress"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.IngressRule"
            | doc m%"
            IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  host = predicates.isType '"String",
                  http =
                    definitions.predicate."io.k8s.api.networking.v1.HTTPIngressRuleValue",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.IngressServiceBackend"
            | doc m%"
            IngressServiceBackend references a Kubernetes Service as a Backend.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  port =
                    definitions.predicate."io.k8s.api.networking.v1.ServiceBackendPort",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.IngressSpec"
            | doc m%"
            IngressSpec describes the Ingress the user wishes to exist.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  defaultBackend =
                    definitions.predicate."io.k8s.api.networking.v1.IngressBackend",
                  ingressClassName = predicates.isType '"String",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1.IngressRule"
                      ],
                  tls = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1.IngressTLS"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.IngressStatus"
            | doc m%"
            IngressStatus describe the current state of the Ingress.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  loadBalancer =
                    definitions.predicate."io.k8s.api.core.v1.LoadBalancerStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.IngressTLS"
            | doc m%"
            IngressTLS describes the transport layer security associated with an Ingress.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  hosts = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  secretName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.NetworkPolicy"
            | doc m%"
            NetworkPolicy describes what network traffic is allowed for a set of Pods
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.networking.v1.NetworkPolicySpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.NetworkPolicyEgressRule"
            | doc m%"
            NetworkPolicyEgressRule describes a particular set of traffic that is allowed out of pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and to. This type is beta-level in 1.8
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  ports = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1.NetworkPolicyPort"
                      ],
                  to = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1.NetworkPolicyPeer"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.NetworkPolicyIngressRule"
            | doc m%"
            NetworkPolicyIngressRule describes a particular set of traffic that is allowed to the pods matched by a NetworkPolicySpec's podSelector. The traffic must match both ports and from.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  from = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1.NetworkPolicyPeer"
                      ],
                  ports = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1.NetworkPolicyPort"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.NetworkPolicyList"
            | doc m%"
            NetworkPolicyList is a list of NetworkPolicy objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1.NetworkPolicy"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.NetworkPolicyPeer"
            | doc m%"
            NetworkPolicyPeer describes a peer to allow traffic to/from. Only certain combinations of fields are allowed
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  ipBlock =
                    definitions.predicate."io.k8s.api.networking.v1.IPBlock",
                  namespaceSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  podSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.NetworkPolicyPort"
            | doc m%"
            NetworkPolicyPort describes a port to allow traffic on
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  port =
                    definitions.predicate."io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                  protocol = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.NetworkPolicySpec"
            | doc m%"
            NetworkPolicySpec provides the specification of a NetworkPolicy
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "podSelector" ],
                predicates.records.record
                {
                  egress = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1.NetworkPolicyEgressRule"
                      ],
                  ingress = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1.NetworkPolicyIngressRule"
                      ],
                  podSelector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                  policyTypes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1.ServiceBackendPort"
            | doc m%"
            ServiceBackendPort is the service port being referenced.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  number = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1beta1.HTTPIngressPath"
            | doc m%"
            HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "backend" ],
                predicates.records.record
                {
                  backend =
                    definitions.predicate."io.k8s.api.networking.v1beta1.IngressBackend",
                  path = predicates.isType '"String",
                  pathType = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1beta1.HTTPIngressRuleValue"
            | doc m%"
            HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "paths" ],
                predicates.records.record
                {
                  paths = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1beta1.HTTPIngressPath"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1beta1.Ingress"
            | doc m%"
            Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.networking.v1beta1.IngressSpec",
                  status =
                    definitions.predicate."io.k8s.api.networking.v1beta1.IngressStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1beta1.IngressBackend"
            | doc m%"
            IngressBackend describes all endpoints for a given service and port.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  resource =
                    definitions.predicate."io.k8s.api.core.v1.TypedLocalObjectReference",
                  serviceName = predicates.isType '"String",
                  servicePort =
                    definitions.predicate."io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1beta1.IngressClass"
            | doc m%"
            IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The `ingressclass.kubernetes.io/is-default-class` annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.networking.v1beta1.IngressClassSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1beta1.IngressClassList"
            | doc m%"
            IngressClassList is a collection of IngressClasses.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1beta1.IngressClass"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1beta1.IngressClassSpec"
            | doc m%"
            IngressClassSpec provides information about the class of an Ingress.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  controller = predicates.isType '"String",
                  parameters =
                    definitions.predicate."io.k8s.api.core.v1.TypedLocalObjectReference",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1beta1.IngressList"
            | doc m%"
            IngressList is a collection of Ingress.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1beta1.Ingress"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1beta1.IngressRule"
            | doc m%"
            IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  host = predicates.isType '"String",
                  http =
                    definitions.predicate."io.k8s.api.networking.v1beta1.HTTPIngressRuleValue",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1beta1.IngressSpec"
            | doc m%"
            IngressSpec describes the Ingress the user wishes to exist.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  backend =
                    definitions.predicate."io.k8s.api.networking.v1beta1.IngressBackend",
                  ingressClassName = predicates.isType '"String",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1beta1.IngressRule"
                      ],
                  tls = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.networking.v1beta1.IngressTLS"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1beta1.IngressStatus"
            | doc m%"
            IngressStatus describe the current state of the Ingress.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  loadBalancer =
                    definitions.predicate."io.k8s.api.core.v1.LoadBalancerStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.networking.v1beta1.IngressTLS"
            | doc m%"
            IngressTLS describes the transport layer security associated with an Ingress.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  hosts = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  secretName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.node.v1.Overhead"
            | doc m%"
            Overhead structure represents the resource overhead associated with running a pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  podFixed = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.node.v1.RuntimeClass"
            | doc m%"
            RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://kubernetes.io/docs/concepts/containers/runtime-class/
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "handler" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  handler = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  overhead =
                    definitions.predicate."io.k8s.api.node.v1.Overhead",
                  scheduling =
                    definitions.predicate."io.k8s.api.node.v1.Scheduling",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.node.v1.RuntimeClassList"
            | doc m%"
            RuntimeClassList is a list of RuntimeClass objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.node.v1.RuntimeClass"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.node.v1.Scheduling"
            | doc m%"
            Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  nodeSelector = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  tolerations = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Toleration"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.node.v1alpha1.Overhead"
            | doc m%"
            Overhead structure represents the resource overhead associated with running a pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  podFixed = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.node.v1alpha1.RuntimeClass"
            | doc m%"
            RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.node.v1alpha1.RuntimeClassSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.node.v1alpha1.RuntimeClassList"
            | doc m%"
            RuntimeClassList is a list of RuntimeClass objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.node.v1alpha1.RuntimeClass"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.node.v1alpha1.RuntimeClassSpec"
            | doc m%"
            RuntimeClassSpec is a specification of a RuntimeClass. It contains parameters that are required to describe the RuntimeClass to the Container Runtime Interface (CRI) implementation, as well as any other components that need to understand how the pod will be run. The RuntimeClassSpec is immutable.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "runtimeHandler" ],
                predicates.records.record
                {
                  overhead =
                    definitions.predicate."io.k8s.api.node.v1alpha1.Overhead",
                  runtimeHandler = predicates.isType '"String",
                  scheduling =
                    definitions.predicate."io.k8s.api.node.v1alpha1.Scheduling",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.node.v1alpha1.Scheduling"
            | doc m%"
            Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  nodeSelector = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  tolerations = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Toleration"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.node.v1beta1.Overhead"
            | doc m%"
            Overhead structure represents the resource overhead associated with running a pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  podFixed = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.api.resource.Quantity"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.node.v1beta1.RuntimeClass"
            | doc m%"
            RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "handler" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  handler = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  overhead =
                    definitions.predicate."io.k8s.api.node.v1beta1.Overhead",
                  scheduling =
                    definitions.predicate."io.k8s.api.node.v1beta1.Scheduling",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.node.v1beta1.RuntimeClassList"
            | doc m%"
            RuntimeClassList is a list of RuntimeClass objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.node.v1beta1.RuntimeClass"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.node.v1beta1.Scheduling"
            | doc m%"
            Scheduling specifies the scheduling constraints for nodes supporting a RuntimeClass.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  nodeSelector = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  tolerations = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.Toleration"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.AllowedCSIDriver"
            | doc m%"
            AllowedCSIDriver represents a single inline CSI Driver that is allowed to be used.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name" ],
                predicates.records.record
                { name = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.AllowedFlexVolume"
            | doc m%"
            AllowedFlexVolume represents a single Flexvolume that is allowed to be used.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "driver" ],
                predicates.records.record
                { driver = predicates.isType '"String", }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.AllowedHostPath"
            | doc m%"
            AllowedHostPath defines the host volume conditions that will be enabled by a policy for pods to use. It requires the path prefix to be defined.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  pathPrefix = predicates.isType '"String",
                  readOnly = predicates.isType '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.Eviction"
            | doc m%"
            Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/<pod name>/evictions.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  deleteOptions =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.FSGroupStrategyOptions"
            | doc m%"
            FSGroupStrategyOptions defines the strategy type and options used to create the strategy.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  ranges = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.policy.v1beta1.IDRange"
                      ],
                  rule = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.HostPortRange"
            | doc m%"
            HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "max", "min" ],
                predicates.records.record
                {
                  max = predicates.isType 'Integer,
                  min = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.IDRange"
            | doc m%"
            IDRange provides a min/max of an allowed range of IDs.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "max", "min" ],
                predicates.records.record
                {
                  max = predicates.isType 'Integer,
                  min = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.PodDisruptionBudget"
            | doc m%"
            PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec",
                  status =
                    definitions.predicate."io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.PodDisruptionBudgetList"
            | doc m%"
            PodDisruptionBudgetList is a collection of PodDisruptionBudgets.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.policy.v1beta1.PodDisruptionBudget"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec"
            | doc m%"
            PodDisruptionBudgetSpec is a description of a PodDisruptionBudget.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  maxUnavailable =
                    definitions.predicate."io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                  minAvailable =
                    definitions.predicate."io.k8s.apimachinery.pkg.util.intstr.IntOrString",
                  selector =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus"
            | doc m%"
            PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [
                  "currentHealthy",
                  "desiredHealthy",
                  "disruptionsAllowed",
                  "expectedPods"
                ],
                predicates.records.record
                {
                  currentHealthy = predicates.isType 'Integer,
                  desiredHealthy = predicates.isType 'Integer,
                  disruptedPods = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time"
                      ],
                  disruptionsAllowed = predicates.isType 'Integer,
                  expectedPods = predicates.isType 'Integer,
                  observedGeneration = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.PodSecurityPolicy"
            | doc m%"
            PodSecurityPolicy governs the ability to make requests that affect the Security Context that will be applied to a pod and container.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.policy.v1beta1.PodSecurityPolicySpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.PodSecurityPolicyList"
            | doc m%"
            PodSecurityPolicyList is a list of PodSecurityPolicy objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.policy.v1beta1.PodSecurityPolicy"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.PodSecurityPolicySpec"
            | doc m%"
            PodSecurityPolicySpec defines the policy enforced.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "fsGroup", "runAsUser", "seLinux", "supplementalGroups" ],
                predicates.records.record
                {
                  allowPrivilegeEscalation = predicates.isType '"Bool",
                  allowedCSIDrivers = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.policy.v1beta1.AllowedCSIDriver"
                      ],
                  allowedCapabilities = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  allowedFlexVolumes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.policy.v1beta1.AllowedFlexVolume"
                      ],
                  allowedHostPaths = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.policy.v1beta1.AllowedHostPath"
                      ],
                  allowedProcMountTypes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  allowedUnsafeSysctls = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  defaultAddCapabilities = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  defaultAllowPrivilegeEscalation = predicates.isType '"Bool",
                  forbiddenSysctls = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  fsGroup =
                    definitions.predicate."io.k8s.api.policy.v1beta1.FSGroupStrategyOptions",
                  hostIPC = predicates.isType '"Bool",
                  hostNetwork = predicates.isType '"Bool",
                  hostPID = predicates.isType '"Bool",
                  hostPorts = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.policy.v1beta1.HostPortRange"
                      ],
                  privileged = predicates.isType '"Bool",
                  readOnlyRootFilesystem = predicates.isType '"Bool",
                  requiredDropCapabilities = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  runAsGroup =
                    definitions.predicate."io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions",
                  runAsUser =
                    definitions.predicate."io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions",
                  runtimeClass =
                    definitions.predicate."io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions",
                  seLinux =
                    definitions.predicate."io.k8s.api.policy.v1beta1.SELinuxStrategyOptions",
                  supplementalGroups =
                    definitions.predicate."io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions",
                  volumes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions"
            | doc m%"
            RunAsGroupStrategyOptions defines the strategy type and any options used to create the strategy.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "rule" ],
                predicates.records.record
                {
                  ranges = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.policy.v1beta1.IDRange"
                      ],
                  rule = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions"
            | doc m%"
            RunAsUserStrategyOptions defines the strategy type and any options used to create the strategy.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "rule" ],
                predicates.records.record
                {
                  ranges = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.policy.v1beta1.IDRange"
                      ],
                  rule = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions"
            | doc m%"
            RuntimeClassStrategyOptions define the strategy that will dictate the allowable RuntimeClasses for a pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "allowedRuntimeClassNames" ],
                predicates.records.record
                {
                  allowedRuntimeClassNames = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  defaultRuntimeClassName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.SELinuxStrategyOptions"
            | doc m%"
            SELinuxStrategyOptions defines the strategy type and any options used to create the strategy.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "rule" ],
                predicates.records.record
                {
                  rule = predicates.isType '"String",
                  seLinuxOptions =
                    definitions.predicate."io.k8s.api.core.v1.SELinuxOptions",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions"
            | doc m%"
            SupplementalGroupsStrategyOptions defines the strategy type and options used to create the strategy.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  ranges = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.policy.v1beta1.IDRange"
                      ],
                  rule = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1.AggregationRule"
            | doc m%"
            AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  clusterRoleSelectors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1.ClusterRole"
            | doc m%"
            ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  aggregationRule =
                    definitions.predicate."io.k8s.api.rbac.v1.AggregationRule",
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1.PolicyRule"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1.ClusterRoleBinding"
            | doc m%"
            ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "roleRef" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  roleRef = definitions.predicate."io.k8s.api.rbac.v1.RoleRef",
                  subjects = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1.Subject"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1.ClusterRoleBindingList"
            | doc m%"
            ClusterRoleBindingList is a collection of ClusterRoleBindings
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1.ClusterRoleBinding"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1.ClusterRoleList"
            | doc m%"
            ClusterRoleList is a collection of ClusterRoles
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1.ClusterRole"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1.PolicyRule"
            | doc m%"
            PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "verbs" ],
                predicates.records.record
                {
                  apiGroups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  nonResourceURLs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resourceNames = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resources = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  verbs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1.Role"
            | doc m%"
            Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1.PolicyRule"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1.RoleBinding"
            | doc m%"
            RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "roleRef" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  roleRef = definitions.predicate."io.k8s.api.rbac.v1.RoleRef",
                  subjects = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1.Subject"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1.RoleBindingList"
            | doc m%"
            RoleBindingList is a collection of RoleBindings
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1.RoleBinding"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1.RoleList"
            | doc m%"
            RoleList is a collection of Roles
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1.Role"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1.RoleRef"
            | doc m%"
            RoleRef contains information that points to the role being used
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "apiGroup", "kind", "name" ],
                predicates.records.record
                {
                  apiGroup = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1.Subject"
            | doc m%"
            Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "kind", "name" ],
                predicates.records.record
                {
                  apiGroup = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1alpha1.AggregationRule"
            | doc m%"
            AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  clusterRoleSelectors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1alpha1.ClusterRole"
            | doc m%"
            ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  aggregationRule =
                    definitions.predicate."io.k8s.api.rbac.v1alpha1.AggregationRule",
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1alpha1.PolicyRule"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1alpha1.ClusterRoleBinding"
            | doc m%"
            ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "roleRef" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  roleRef =
                    definitions.predicate."io.k8s.api.rbac.v1alpha1.RoleRef",
                  subjects = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1alpha1.Subject"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList"
            | doc m%"
            ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindings, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1alpha1.ClusterRoleBinding"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1alpha1.ClusterRoleList"
            | doc m%"
            ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1alpha1.ClusterRole"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1alpha1.PolicyRule"
            | doc m%"
            PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "verbs" ],
                predicates.records.record
                {
                  apiGroups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  nonResourceURLs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resourceNames = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resources = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  verbs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1alpha1.Role"
            | doc m%"
            Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1alpha1.PolicyRule"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1alpha1.RoleBinding"
            | doc m%"
            RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "roleRef" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  roleRef =
                    definitions.predicate."io.k8s.api.rbac.v1alpha1.RoleRef",
                  subjects = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1alpha1.Subject"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1alpha1.RoleBindingList"
            | doc m%"
            RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1alpha1.RoleBinding"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1alpha1.RoleList"
            | doc m%"
            RoleList is a collection of Roles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1alpha1.Role"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1alpha1.RoleRef"
            | doc m%"
            RoleRef contains information that points to the role being used
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "apiGroup", "kind", "name" ],
                predicates.records.record
                {
                  apiGroup = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1alpha1.Subject"
            | doc m%"
            Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "kind", "name" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1beta1.AggregationRule"
            | doc m%"
            AggregationRule describes how to locate ClusterRoles to aggregate into the ClusterRole
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  clusterRoleSelectors = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1beta1.ClusterRole"
            | doc m%"
            ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  aggregationRule =
                    definitions.predicate."io.k8s.api.rbac.v1beta1.AggregationRule",
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1beta1.PolicyRule"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
            | doc m%"
            ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBinding, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "roleRef" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  roleRef =
                    definitions.predicate."io.k8s.api.rbac.v1beta1.RoleRef",
                  subjects = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1beta1.Subject"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1beta1.ClusterRoleBindingList"
            | doc m%"
            ClusterRoleBindingList is a collection of ClusterRoleBindings. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoleBindingList, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1beta1.ClusterRoleBinding"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1beta1.ClusterRoleList"
            | doc m%"
            ClusterRoleList is a collection of ClusterRoles. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRoles, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1beta1.ClusterRole"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1beta1.PolicyRule"
            | doc m%"
            PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "verbs" ],
                predicates.records.record
                {
                  apiGroups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  nonResourceURLs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resourceNames = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  resources = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  verbs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1beta1.Role"
            | doc m%"
            Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 Role, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  rules = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1beta1.PolicyRule"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1beta1.RoleBinding"
            | doc m%"
            RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace. Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBinding, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "roleRef" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  roleRef =
                    definitions.predicate."io.k8s.api.rbac.v1beta1.RoleRef",
                  subjects = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1beta1.Subject"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1beta1.RoleBindingList"
            | doc m%"
            RoleBindingList is a collection of RoleBindings Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleBindingList, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1beta1.RoleBinding"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1beta1.RoleList"
            | doc m%"
            RoleList is a collection of Roles Deprecated in v1.17 in favor of rbac.authorization.k8s.io/v1 RoleList, and will no longer be served in v1.22.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.rbac.v1beta1.Role"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1beta1.RoleRef"
            | doc m%"
            RoleRef contains information that points to the role being used
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "apiGroup", "kind", "name" ],
                predicates.records.record
                {
                  apiGroup = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.rbac.v1beta1.Subject"
            | doc m%"
            Subject contains a reference to the object or user identities a role binding applies to.  This can either hold a direct API object reference, or a value for non-objects such as user and group names.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "kind", "name" ],
                predicates.records.record
                {
                  apiGroup = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.scheduling.v1.PriorityClass"
            | doc m%"
            PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "value" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  description = predicates.isType '"String",
                  globalDefault = predicates.isType '"Bool",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  preemptionPolicy = predicates.isType '"String",
                  value = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.scheduling.v1.PriorityClassList"
            | doc m%"
            PriorityClassList is a collection of priority classes.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.scheduling.v1.PriorityClass"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.scheduling.v1alpha1.PriorityClass"
            | doc m%"
            DEPRECATED - This group version of PriorityClass is deprecated by scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "value" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  description = predicates.isType '"String",
                  globalDefault = predicates.isType '"Bool",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  preemptionPolicy = predicates.isType '"String",
                  value = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.scheduling.v1alpha1.PriorityClassList"
            | doc m%"
            PriorityClassList is a collection of priority classes.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.scheduling.v1alpha1.PriorityClass"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.scheduling.v1beta1.PriorityClass"
            | doc m%"
            DEPRECATED - This group version of PriorityClass is deprecated by scheduling.k8s.io/v1/PriorityClass. PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "value" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  description = predicates.isType '"String",
                  globalDefault = predicates.isType '"Bool",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  preemptionPolicy = predicates.isType '"String",
                  value = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.scheduling.v1beta1.PriorityClassList"
            | doc m%"
            PriorityClassList is a collection of priority classes.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.scheduling.v1beta1.PriorityClass"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.CSIDriver"
            | doc m%"
            CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.storage.v1.CSIDriverSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.CSIDriverList"
            | doc m%"
            CSIDriverList is a collection of CSIDriver objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.storage.v1.CSIDriver"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.CSIDriverSpec"
            | doc m%"
            CSIDriverSpec is the specification of a CSIDriver.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  attachRequired = predicates.isType '"Bool",
                  fsGroupPolicy = predicates.isType '"String",
                  podInfoOnMount = predicates.isType '"Bool",
                  requiresRepublish = predicates.isType '"Bool",
                  storageCapacity = predicates.isType '"Bool",
                  tokenRequests = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.storage.v1.TokenRequest"
                      ],
                  volumeLifecycleModes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.CSINode"
            | doc m%"
            CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.storage.v1.CSINodeSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.CSINodeDriver"
            | doc m%"
            CSINodeDriver holds information about the specification of one CSI driver installed on a node
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "nodeID" ],
                predicates.records.record
                {
                  allocatable =
                    definitions.predicate."io.k8s.api.storage.v1.VolumeNodeResources",
                  name = predicates.isType '"String",
                  nodeID = predicates.isType '"String",
                  topologyKeys = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.CSINodeList"
            | doc m%"
            CSINodeList is a collection of CSINode objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.storage.v1.CSINode"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.CSINodeSpec"
            | doc m%"
            CSINodeSpec holds information about the specification of all CSI drivers installed on a node
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "drivers" ],
                predicates.records.record
                {
                  drivers = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.storage.v1.CSINodeDriver"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.StorageClass"
            | doc m%"
            StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
            
            StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "provisioner" ],
                predicates.records.record
                {
                  allowVolumeExpansion = predicates.isType '"Bool",
                  allowedTopologies = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.TopologySelectorTerm"
                      ],
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  mountOptions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  parameters = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  provisioner = predicates.isType '"String",
                  reclaimPolicy = predicates.isType '"String",
                  volumeBindingMode = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.StorageClassList"
            | doc m%"
            StorageClassList is a collection of storage classes.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.storage.v1.StorageClass"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.TokenRequest"
            | doc m%"
            TokenRequest contains parameters of a service account token.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "audience" ],
                predicates.records.record
                {
                  audience = predicates.isType '"String",
                  expirationSeconds = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.VolumeAttachment"
            | doc m%"
            VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
            
            VolumeAttachment objects are non-namespaced.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.storage.v1.VolumeAttachmentSpec",
                  status =
                    definitions.predicate."io.k8s.api.storage.v1.VolumeAttachmentStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.VolumeAttachmentList"
            | doc m%"
            VolumeAttachmentList is a collection of VolumeAttachment objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.storage.v1.VolumeAttachment"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.VolumeAttachmentSource"
            | doc m%"
            VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  inlineVolumeSpec =
                    definitions.predicate."io.k8s.api.core.v1.PersistentVolumeSpec",
                  persistentVolumeName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.VolumeAttachmentSpec"
            | doc m%"
            VolumeAttachmentSpec is the specification of a VolumeAttachment request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "attacher", "nodeName", "source" ],
                predicates.records.record
                {
                  attacher = predicates.isType '"String",
                  nodeName = predicates.isType '"String",
                  source =
                    definitions.predicate."io.k8s.api.storage.v1.VolumeAttachmentSource",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.VolumeAttachmentStatus"
            | doc m%"
            VolumeAttachmentStatus is the status of a VolumeAttachment request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "attached" ],
                predicates.records.record
                {
                  attachError =
                    definitions.predicate."io.k8s.api.storage.v1.VolumeError",
                  attached = predicates.isType '"Bool",
                  attachmentMetadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  detachError =
                    definitions.predicate."io.k8s.api.storage.v1.VolumeError",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.VolumeError"
            | doc m%"
            VolumeError captures an error encountered during a volume operation.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  message = predicates.isType '"String",
                  time =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1.VolumeNodeResources"
            | doc m%"
            VolumeNodeResources is a set of resource limits for scheduling of volumes.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                { count = predicates.isType 'Integer, }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1alpha1.VolumeAttachment"
            | doc m%"
            VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
            
            VolumeAttachment objects are non-namespaced.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.storage.v1alpha1.VolumeAttachmentSpec",
                  status =
                    definitions.predicate."io.k8s.api.storage.v1alpha1.VolumeAttachmentStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1alpha1.VolumeAttachmentList"
            | doc m%"
            VolumeAttachmentList is a collection of VolumeAttachment objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.storage.v1alpha1.VolumeAttachment"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1alpha1.VolumeAttachmentSource"
            | doc m%"
            VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  inlineVolumeSpec =
                    definitions.predicate."io.k8s.api.core.v1.PersistentVolumeSpec",
                  persistentVolumeName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1alpha1.VolumeAttachmentSpec"
            | doc m%"
            VolumeAttachmentSpec is the specification of a VolumeAttachment request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "attacher", "nodeName", "source" ],
                predicates.records.record
                {
                  attacher = predicates.isType '"String",
                  nodeName = predicates.isType '"String",
                  source =
                    definitions.predicate."io.k8s.api.storage.v1alpha1.VolumeAttachmentSource",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1alpha1.VolumeAttachmentStatus"
            | doc m%"
            VolumeAttachmentStatus is the status of a VolumeAttachment request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "attached" ],
                predicates.records.record
                {
                  attachError =
                    definitions.predicate."io.k8s.api.storage.v1alpha1.VolumeError",
                  attached = predicates.isType '"Bool",
                  attachmentMetadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  detachError =
                    definitions.predicate."io.k8s.api.storage.v1alpha1.VolumeError",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1alpha1.VolumeError"
            | doc m%"
            VolumeError captures an error encountered during a volume operation.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  message = predicates.isType '"String",
                  time =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.CSIDriver"
            | doc m%"
            CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.storage.v1beta1.CSIDriverSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.CSIDriverList"
            | doc m%"
            CSIDriverList is a collection of CSIDriver objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.storage.v1beta1.CSIDriver"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.CSIDriverSpec"
            | doc m%"
            CSIDriverSpec is the specification of a CSIDriver.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  attachRequired = predicates.isType '"Bool",
                  fsGroupPolicy = predicates.isType '"String",
                  podInfoOnMount = predicates.isType '"Bool",
                  requiresRepublish = predicates.isType '"Bool",
                  storageCapacity = predicates.isType '"Bool",
                  tokenRequests = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.storage.v1beta1.TokenRequest"
                      ],
                  volumeLifecycleModes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.CSINode"
            | doc m%"
            DEPRECATED - This group version of CSINode is deprecated by storage/v1/CSINode. See the release notes for more information. CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn't create this object. CSINode has an OwnerReference that points to the corresponding node object.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.storage.v1beta1.CSINodeSpec",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.CSINodeDriver"
            | doc m%"
            CSINodeDriver holds information about the specification of one CSI driver installed on a node
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "nodeID" ],
                predicates.records.record
                {
                  allocatable =
                    definitions.predicate."io.k8s.api.storage.v1beta1.VolumeNodeResources",
                  name = predicates.isType '"String",
                  nodeID = predicates.isType '"String",
                  topologyKeys = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.CSINodeList"
            | doc m%"
            CSINodeList is a collection of CSINode objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.storage.v1beta1.CSINode"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.CSINodeSpec"
            | doc m%"
            CSINodeSpec holds information about the specification of all CSI drivers installed on a node
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "drivers" ],
                predicates.records.record
                {
                  drivers = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.storage.v1beta1.CSINodeDriver"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.StorageClass"
            | doc m%"
            StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
            
            StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "provisioner" ],
                predicates.records.record
                {
                  allowVolumeExpansion = predicates.isType '"Bool",
                  allowedTopologies = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.core.v1.TopologySelectorTerm"
                      ],
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  mountOptions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  parameters = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  provisioner = predicates.isType '"String",
                  reclaimPolicy = predicates.isType '"String",
                  volumeBindingMode = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.StorageClassList"
            | doc m%"
            StorageClassList is a collection of storage classes.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.storage.v1beta1.StorageClass"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.TokenRequest"
            | doc m%"
            TokenRequest contains parameters of a service account token.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "audience" ],
                predicates.records.record
                {
                  audience = predicates.isType '"String",
                  expirationSeconds = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.VolumeAttachment"
            | doc m%"
            VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.
            
            VolumeAttachment objects are non-namespaced.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.api.storage.v1beta1.VolumeAttachmentSpec",
                  status =
                    definitions.predicate."io.k8s.api.storage.v1beta1.VolumeAttachmentStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.VolumeAttachmentList"
            | doc m%"
            VolumeAttachmentList is a collection of VolumeAttachment objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.api.storage.v1beta1.VolumeAttachment"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.VolumeAttachmentSource"
            | doc m%"
            VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  inlineVolumeSpec =
                    definitions.predicate."io.k8s.api.core.v1.PersistentVolumeSpec",
                  persistentVolumeName = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.VolumeAttachmentSpec"
            | doc m%"
            VolumeAttachmentSpec is the specification of a VolumeAttachment request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "attacher", "nodeName", "source" ],
                predicates.records.record
                {
                  attacher = predicates.isType '"String",
                  nodeName = predicates.isType '"String",
                  source =
                    definitions.predicate."io.k8s.api.storage.v1beta1.VolumeAttachmentSource",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.VolumeAttachmentStatus"
            | doc m%"
            VolumeAttachmentStatus is the status of a VolumeAttachment request.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "attached" ],
                predicates.records.record
                {
                  attachError =
                    definitions.predicate."io.k8s.api.storage.v1beta1.VolumeError",
                  attached = predicates.isType '"Bool",
                  attachmentMetadata = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  detachError =
                    definitions.predicate."io.k8s.api.storage.v1beta1.VolumeError",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.VolumeError"
            | doc m%"
            VolumeError captures an error encountered during a volume operation.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  message = predicates.isType '"String",
                  time =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.api.storage.v1beta1.VolumeNodeResources"
            | doc m%"
            VolumeNodeResources is a set of resource limits for scheduling of volumes.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                { count = predicates.isType 'Integer, }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition"
            | doc m%"
            CustomResourceColumnDefinition specifies a column for server side printing.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "jsonPath", "name", "type" ],
                predicates.records.record
                {
                  description = predicates.isType '"String",
                  format = predicates.isType '"String",
                  jsonPath = predicates.isType '"String",
                  name = predicates.isType '"String",
                  "priority" = predicates.isType 'Integer,
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion"
            | doc m%"
            CustomResourceConversion describes how to convert different versions of a CR.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "strategy" ],
                predicates.records.record
                {
                  strategy = predicates.isType '"String",
                  webhook =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition"
            | doc m%"
            CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec",
                  status =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition"
            | doc m%"
            CustomResourceDefinitionCondition contains details for the current condition of this pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList"
            | doc m%"
            CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames"
            | doc m%"
            CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "kind", "plural" ],
                predicates.records.record
                {
                  categories = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  kind = predicates.isType '"String",
                  listKind = predicates.isType '"String",
                  plural = predicates.isType '"String",
                  shortNames = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  singular = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec"
            | doc m%"
            CustomResourceDefinitionSpec describes how a user wants their resource to appear
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "group", "names", "scope", "versions" ],
                predicates.records.record
                {
                  conversion =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion",
                  group = predicates.isType '"String",
                  names =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames",
                  preserveUnknownFields = predicates.isType '"Bool",
                  scope = predicates.isType '"String",
                  versions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus"
            | doc m%"
            CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  acceptedNames =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames",
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition"
                      ],
                  storedVersions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion"
            | doc m%"
            CustomResourceDefinitionVersion describes a version for CRD.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "served", "storage" ],
                predicates.records.record
                {
                  additionalPrinterColumns = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition"
                      ],
                  deprecated = predicates.isType '"Bool",
                  deprecationWarning = predicates.isType '"String",
                  name = predicates.isType '"String",
                  schema =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation",
                  served = predicates.isType '"Bool",
                  storage = predicates.isType '"Bool",
                  subresources =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale"
            | doc m%"
            CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "specReplicasPath", "statusReplicasPath" ],
                predicates.records.record
                {
                  labelSelectorPath = predicates.isType '"String",
                  specReplicasPath = predicates.isType '"String",
                  statusReplicasPath = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus"
            | doc m%"
            CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza
            "%
            = predicates.isType 'Record,
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources"
            | doc m%"
            CustomResourceSubresources defines the status and scale subresources for CustomResources.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  scale =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale",
                  status =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation"
            | doc m%"
            CustomResourceValidation is a list of validation methods for CustomResources.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  openAPIV3Schema =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation"
            | doc m%"
            ExternalDocumentation allows referencing an external resource for extended documentation.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  description = predicates.isType '"String",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
            | doc m%"
            JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
            "%
            = predicates.always,
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
            | doc m%"
            JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  "$ref" = predicates.isType '"String",
                  "$schema" = predicates.isType '"String",
                  additionalItems =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool",
                  additionalProperties =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool",
                  allOf = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                      ],
                  anyOf = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                      ],
                  "default" =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON",
                  definitions = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                      ],
                  dependencies = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray"
                      ],
                  description = predicates.isType '"String",
                  enum = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
                      ],
                  example =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON",
                  exclusiveMaximum = predicates.isType '"Bool",
                  exclusiveMinimum = predicates.isType '"Bool",
                  externalDocs =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation",
                  format = predicates.isType '"String",
                  id = predicates.isType '"String",
                  items =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray",
                  maxItems = predicates.isType 'Integer,
                  maxLength = predicates.isType 'Integer,
                  maxProperties = predicates.isType 'Integer,
                  maximum = predicates.isType '"Number",
                  minItems = predicates.isType 'Integer,
                  minLength = predicates.isType 'Integer,
                  minProperties = predicates.isType 'Integer,
                  minimum = predicates.isType '"Number",
                  multipleOf = predicates.isType '"Number",
                  not =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps",
                  nullable = predicates.isType '"Bool",
                  oneOf = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                      ],
                  pattern = predicates.isType '"String",
                  patternProperties = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                      ],
                  properties = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
                      ],
                  required = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  title = predicates.isType '"String",
                  type = predicates.isType '"String",
                  uniqueItems = predicates.isType '"Bool",
                  x-kubernetes-embedded-resource = predicates.isType '"Bool",
                  x-kubernetes-int-or-string = predicates.isType '"Bool",
                  x-kubernetes-list-map-keys = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  x-kubernetes-list-type = predicates.isType '"String",
                  x-kubernetes-map-type = predicates.isType '"String",
                  x-kubernetes-preserve-unknown-fields = predicates.isType
                      '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray"
            | doc m%"
            JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.
            "%
            = predicates.always,
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
            | doc m%"
            JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
            "%
            = predicates.always,
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray"
            | doc m%"
            JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.
            "%
            = predicates.always,
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference"
            | doc m%"
            ServiceReference holds a reference to Service.legacy.k8s.io
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "namespace" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                  path = predicates.isType '"String",
                  port = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig"
            | doc m%"
            WebhookClientConfig contains the information to make a TLS connection with the webhook.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  caBundle = predicates.isType '"String",
                  service =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion"
            | doc m%"
            WebhookConversion describes how to call a conversion webhook
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "conversionReviewVersions" ],
                predicates.records.record
                {
                  clientConfig =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig",
                  conversionReviewVersions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition"
            | doc m%"
            CustomResourceColumnDefinition specifies a column for server side printing.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "JSONPath", "name", "type" ],
                predicates.records.record
                {
                  JSONPath = predicates.isType '"String",
                  description = predicates.isType '"String",
                  format = predicates.isType '"String",
                  name = predicates.isType '"String",
                  "priority" = predicates.isType 'Integer,
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceConversion"
            | doc m%"
            CustomResourceConversion describes how to convert different versions of a CR.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "strategy" ],
                predicates.records.record
                {
                  conversionReviewVersions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  strategy = predicates.isType '"String",
                  webhookClientConfig =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.WebhookClientConfig",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
            | doc m%"
            CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format <.spec.name>.<.spec.group>. Deprecated in v1.16, planned for removal in v1.22. Use apiextensions.k8s.io/v1 CustomResourceDefinition instead.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "spec" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec",
                  status =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionCondition"
            | doc m%"
            CustomResourceDefinitionCondition contains details for the current condition of this pod.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionList"
            | doc m%"
            CustomResourceDefinitionList is a list of CustomResourceDefinition objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames"
            | doc m%"
            CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "kind", "plural" ],
                predicates.records.record
                {
                  categories = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  kind = predicates.isType '"String",
                  listKind = predicates.isType '"String",
                  plural = predicates.isType '"String",
                  shortNames = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  singular = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec"
            | doc m%"
            CustomResourceDefinitionSpec describes how a user wants their resource to appear
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "group", "names", "scope" ],
                predicates.records.record
                {
                  additionalPrinterColumns = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition"
                      ],
                  conversion =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceConversion",
                  group = predicates.isType '"String",
                  names =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames",
                  preserveUnknownFields = predicates.isType '"Bool",
                  scope = predicates.isType '"String",
                  subresources =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources",
                  validation =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation",
                  version = predicates.isType '"String",
                  versions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionVersion"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionStatus"
            | doc m%"
            CustomResourceDefinitionStatus indicates the state of the CustomResourceDefinition
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  acceptedNames =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames",
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionCondition"
                      ],
                  storedVersions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionVersion"
            | doc m%"
            CustomResourceDefinitionVersion describes a version for CRD.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "served", "storage" ],
                predicates.records.record
                {
                  additionalPrinterColumns = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition"
                      ],
                  deprecated = predicates.isType '"Bool",
                  deprecationWarning = predicates.isType '"String",
                  name = predicates.isType '"String",
                  schema =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation",
                  served = predicates.isType '"Bool",
                  storage = predicates.isType '"Bool",
                  subresources =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceScale"
            | doc m%"
            CustomResourceSubresourceScale defines how to serve the scale subresource for CustomResources.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "specReplicasPath", "statusReplicasPath" ],
                predicates.records.record
                {
                  labelSelectorPath = predicates.isType '"String",
                  specReplicasPath = predicates.isType '"String",
                  statusReplicasPath = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceStatus"
            | doc m%"
            CustomResourceSubresourceStatus defines how to serve the status subresource for CustomResources. Status is represented by the `.status` JSON path inside of a CustomResource. When set, * exposes a /status subresource for the custom resource * PUT requests to the /status subresource take a custom resource object, and ignore changes to anything except the status stanza * PUT/POST/PATCH requests to the custom resource ignore changes to the status stanza
            "%
            = predicates.isType 'Record,
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources"
            | doc m%"
            CustomResourceSubresources defines the status and scale subresources for CustomResources.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  scale =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceScale",
                  status =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation"
            | doc m%"
            CustomResourceValidation is a list of validation methods for CustomResources.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  openAPIV3Schema =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ExternalDocumentation"
            | doc m%"
            ExternalDocumentation allows referencing an external resource for extended documentation.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  description = predicates.isType '"String",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON"
            | doc m%"
            JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
            "%
            = predicates.always,
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
            | doc m%"
            JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  "$ref" = predicates.isType '"String",
                  "$schema" = predicates.isType '"String",
                  additionalItems =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool",
                  additionalProperties =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool",
                  allOf = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                      ],
                  anyOf = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                      ],
                  "default" =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON",
                  definitions = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                      ],
                  dependencies = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrStringArray"
                      ],
                  description = predicates.isType '"String",
                  enum = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON"
                      ],
                  example =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON",
                  exclusiveMaximum = predicates.isType '"Bool",
                  exclusiveMinimum = predicates.isType '"Bool",
                  externalDocs =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ExternalDocumentation",
                  format = predicates.isType '"String",
                  id = predicates.isType '"String",
                  items =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrArray",
                  maxItems = predicates.isType 'Integer,
                  maxLength = predicates.isType 'Integer,
                  maxProperties = predicates.isType 'Integer,
                  maximum = predicates.isType '"Number",
                  minItems = predicates.isType 'Integer,
                  minLength = predicates.isType 'Integer,
                  minProperties = predicates.isType 'Integer,
                  minimum = predicates.isType '"Number",
                  multipleOf = predicates.isType '"Number",
                  not =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps",
                  nullable = predicates.isType '"Bool",
                  oneOf = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                      ],
                  pattern = predicates.isType '"String",
                  patternProperties = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                      ],
                  properties = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
                      ],
                  required = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  title = predicates.isType '"String",
                  type = predicates.isType '"String",
                  uniqueItems = predicates.isType '"Bool",
                  x-kubernetes-embedded-resource = predicates.isType '"Bool",
                  x-kubernetes-int-or-string = predicates.isType '"Bool",
                  x-kubernetes-list-map-keys = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  x-kubernetes-list-type = predicates.isType '"String",
                  x-kubernetes-map-type = predicates.isType '"String",
                  x-kubernetes-preserve-unknown-fields = predicates.isType
                      '"Bool",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrArray"
            | doc m%"
            JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.
            "%
            = predicates.always,
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool"
            | doc m%"
            JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
            "%
            = predicates.always,
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrStringArray"
            | doc m%"
            JSONSchemaPropsOrStringArray represents a JSONSchemaProps or a string array.
            "%
            = predicates.always,
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ServiceReference"
            | doc m%"
            ServiceReference holds a reference to Service.legacy.k8s.io
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "namespace" ],
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                  path = predicates.isType '"String",
                  port = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.WebhookClientConfig"
            | doc m%"
            WebhookClientConfig contains the information to make a TLS connection with the webhook.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  caBundle = predicates.isType '"String",
                  service =
                    definitions.predicate."io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ServiceReference",
                  url = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.api.resource.Quantity"
            | doc m%"
            Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.
            
            The serialization format is:
            
            <quantity>        ::= <signedNumber><suffix>
              (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
            <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= "+" | "-" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei
              (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
            <decimalSI>       ::= m | "" | k | M | G | T | P | E
              (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
            <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
            
            No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.
            
            When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.
            
            Before serializing, Quantity will be put in "canonical form". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:
              a. No precision is lost
              b. No fractional digits will be emitted
              c. The exponent (or suffix) is as large as possible.
            The sign will be omitted unless the number is negative.
            
            Examples:
              1.5 will be serialized as "1500m"
              1.5Gi will be serialized as "1536Mi"
            
            Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.
            
            Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)
            
            This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
            "%
            = predicates.isType '"String",
          "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            | doc m%"
            APIGroup contains the name, the supported versions, and the preferred version of a group.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "name", "versions" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                  preferredVersion =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery",
                  serverAddressByClientCIDRs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
                      ],
                  versions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList"
            | doc m%"
            APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "groups" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  groups = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
                      ],
                  kind = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
            | doc m%"
            APIResource specifies the name of a resource and whether it is namespaced.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "kind", "name", "namespaced", "singularName", "verbs" ],
                predicates.records.record
                {
                  categories = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  group = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                  namespaced = predicates.isType '"Bool",
                  shortNames = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  singularName = predicates.isType '"String",
                  storageVersionHash = predicates.isType '"String",
                  verbs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  version = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            | doc m%"
            APIResourceList is a list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "groupVersion", "resources" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  groupVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  resources = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions"
            | doc m%"
            APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "serverAddressByClientCIDRs", "versions" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  serverAddressByClientCIDRs = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
                      ],
                  versions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.Condition"
            | doc m%"
            Condition contains details for one aspect of the current state of this API Resource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "lastTransitionTime", "message", "reason", "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  observedGeneration = predicates.isType 'Integer,
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            | doc m%"
            DeleteOptions may be provided when deleting an API object.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  dryRun = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  gracePeriodSeconds = predicates.isType 'Integer,
                  kind = predicates.isType '"String",
                  orphanDependents = predicates.isType '"Bool",
                  preconditions =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions",
                  propagationPolicy = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1"
            | doc m%"
            FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
            
            Each key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.
            
            The exact format is defined in sigs.k8s.io/structured-merge-diff
            "%
            = predicates.isType 'Record,
          "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
            | doc m%"
            GroupVersion contains the "group/version" and "version" string of a version. It is made a struct to keep extensibility.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "groupVersion", "version" ],
                predicates.records.record
                {
                  groupVersion = predicates.isType '"String",
                  version = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
            | doc m%"
            A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  matchExpressions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
                      ],
                  matchLabels = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
            | doc m%"
            A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "key", "operator" ],
                predicates.records.record
                {
                  key = predicates.isType '"String",
                  operator = predicates.isType '"String",
                  values = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
            | doc m%"
            ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  continue = predicates.isType '"String",
                  remainingItemCount = predicates.isType 'Integer,
                  resourceVersion = predicates.isType '"String",
                  selfLink = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
            | doc m%"
            ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  fieldsType = predicates.isType '"String",
                  fieldsV1 =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1",
                  manager = predicates.isType '"String",
                  operation = predicates.isType '"String",
                  time =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime"
            | doc m%"
            MicroTime is version of Time with microsecond level precision.
            "%
            = predicates.isType '"String",
          "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta"
            | doc m%"
            ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  annotations = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  clusterName = predicates.isType '"String",
                  creationTimestamp =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  deletionGracePeriodSeconds = predicates.isType 'Integer,
                  deletionTimestamp =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  finalizers = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf (predicates.isType '"String")
                      ],
                  generateName = predicates.isType '"String",
                  generation = predicates.isType 'Integer,
                  labels = predicates.allOf
                      [
                        predicates.isType 'Record,
                        predicates.records.record {  } {  } true
                        (predicates.isType '"String")
                      ],
                  managedFields = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
                      ],
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                  ownerReferences = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
                      ],
                  resourceVersion = predicates.isType '"String",
                  selfLink = predicates.isType '"String",
                  uid = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
            | doc m%"
            OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "apiVersion", "kind", "name", "uid" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  blockOwnerDeletion = predicates.isType '"Bool",
                  controller = predicates.isType '"Bool",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                  uid = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            | doc m%"
            Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.
            "%
            = predicates.isType 'Record,
          "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions"
            | doc m%"
            Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  resourceVersion = predicates.isType '"String",
                  uid = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
            | doc m%"
            ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "clientCIDR", "serverAddress" ],
                predicates.records.record
                {
                  clientCIDR = predicates.isType '"String",
                  serverAddress = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            | doc m%"
            Status is a return value for calls that don't return other objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  code = predicates.isType 'Integer,
                  details =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails",
                  kind = predicates.isType '"String",
                  message = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
            | doc m%"
            StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  field = predicates.isType '"String",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails"
            | doc m%"
            StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  causes = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
                      ],
                  group = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  name = predicates.isType '"String",
                  retryAfterSeconds = predicates.isType 'Integer,
                  uid = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.apis.meta.v1.Time"
            | doc m%"
            Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
            "%
            = predicates.isType '"String",
          "io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent"
            | doc m%"
            Event represents a single event to a watched resource.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "object", "type" ],
                predicates.records.record
                {
                  object =
                    definitions.predicate."io.k8s.apimachinery.pkg.runtime.RawExtension",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.apimachinery.pkg.runtime.RawExtension"
            | doc m%"
            RawExtension is used to hold extensions in external versions.
            
            To use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.
            
            // Internal package: type MyAPIObject struct {
            	runtime.TypeMeta `json:",inline"`
            	MyPlugin runtime.Object `json:"myPlugin"`
            } type PluginA struct {
            	AOption string `json:"aOption"`
            }
            
            // External package: type MyAPIObject struct {
            	runtime.TypeMeta `json:",inline"`
            	MyPlugin runtime.RawExtension `json:"myPlugin"`
            } type PluginA struct {
            	AOption string `json:"aOption"`
            }
            
            // On the wire, the JSON will look something like this: {
            	"kind":"MyAPIObject",
            	"apiVersion":"v1",
            	"myPlugin": {
            		"kind":"PluginA",
            		"aOption":"foo",
            	},
            }
            
            So what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)
            "%
            = predicates.isType 'Record,
          "io.k8s.apimachinery.pkg.util.intstr.IntOrString"
            | doc m%"
            IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.
            "%
            = predicates.anyOf
              [ predicates.isType 'Integer, predicates.isType '"String" ],
          "io.k8s.apimachinery.pkg.version.Info"
            | doc m%"
            Info contains versioning information. how we'll want to distribute that information.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [
                  "buildDate",
                  "compiler",
                  "gitCommit",
                  "gitTreeState",
                  "gitVersion",
                  "goVersion",
                  "major",
                  "minor",
                  "platform"
                ],
                predicates.records.record
                {
                  buildDate = predicates.isType '"String",
                  compiler = predicates.isType '"String",
                  gitCommit = predicates.isType '"String",
                  gitTreeState = predicates.isType '"String",
                  gitVersion = predicates.isType '"String",
                  goVersion = predicates.isType '"String",
                  major = predicates.isType '"String",
                  minor = predicates.isType '"String",
                  platform = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
            | doc m%"
            APIService represents a server for a particular GroupVersion. Name must be "version.group".
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec",
                  status =
                    definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition"
            | doc m%"
            APIServiceCondition describes the state of an APIService at a particular point
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList"
            | doc m%"
            APIServiceList is a list of APIService objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec"
            | doc m%"
            APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "groupPriorityMinimum", "versionPriority" ],
                predicates.records.record
                {
                  caBundle = predicates.isType '"String",
                  group = predicates.isType '"String",
                  groupPriorityMinimum = predicates.isType 'Integer,
                  insecureSkipTLSVerify = predicates.isType '"Bool",
                  service =
                    definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference",
                  version = predicates.isType '"String",
                  versionPriority = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus"
            | doc m%"
            APIServiceStatus contains derived information about an API server
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference"
            | doc m%"
            ServiceReference holds a reference to Service.legacy.k8s.io
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                  port = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
            | doc m%"
            APIService represents a server for a particular GroupVersion. Name must be "version.group".
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
                  spec =
                    definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec",
                  status =
                    definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceStatus",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition"
            | doc m%"
            APIServiceCondition describes the state of an APIService at a particular point
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "status", "type" ],
                predicates.records.record
                {
                  lastTransitionTime =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.Time",
                  message = predicates.isType '"String",
                  reason = predicates.isType '"String",
                  status = predicates.isType '"String",
                  type = predicates.isType '"String",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceList"
            | doc m%"
            APIServiceList is a list of APIService objects.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required [ "items" ],
                predicates.records.record
                {
                  apiVersion = predicates.isType '"String",
                  items = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService"
                      ],
                  kind = predicates.isType '"String",
                  metadata =
                    definitions.predicate."io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec"
            | doc m%"
            APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.required
                [ "groupPriorityMinimum", "versionPriority" ],
                predicates.records.record
                {
                  caBundle = predicates.isType '"String",
                  group = predicates.isType '"String",
                  groupPriorityMinimum = predicates.isType 'Integer,
                  insecureSkipTLSVerify = predicates.isType '"Bool",
                  service =
                    definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference",
                  version = predicates.isType '"String",
                  versionPriority = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceStatus"
            | doc m%"
            APIServiceStatus contains derived information about an API server
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  conditions = predicates.allOf
                      [
                        predicates.isType '"Array",
                        predicates.arrays.arrayOf
                        definitions.predicate."io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition"
                      ],
                }
                {  }
                true
                predicates.always
              ],
          "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference"
            | doc m%"
            ServiceReference holds a reference to Service.legacy.k8s.io
            "%
            = predicates.allOf
              [
                predicates.isType 'Record,
                predicates.records.record
                {
                  name = predicates.isType '"String",
                  namespace = predicates.isType '"String",
                  port = predicates.isType 'Integer,
                }
                {  }
                true
                predicates.always
              ],
        },
  }
in

predicates.contract_from_predicate
(predicates.allOf
[
  predicates.isType 'Record,
  predicates.oneOf
  [
    definitions.predicate."io.argoproj.eventbus.v1alpha1.EventBus",
    definitions.predicate."io.argoproj.eventsource.v1alpha1.EventSource",
    definitions.predicate."io.argoproj.sensor.v1alpha1.Sensor"
  ]
])