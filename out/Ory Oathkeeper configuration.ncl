# DO NOT EDIT
# This file was automatically generated using json-schema-to-nickel
let js2n
  = import "../lib/main.ncl"
  in
let rec refs
    = {
      "oneOf.0.allOf.1" =
        {
            access_rules
              | {
                matching_strategy
                  | std.enum.TagOrString
                  | [| 'regexp, 'glob |]
                  | doc "This an optional field describing matching strategy. Currently supported values are 'glob' and 'regexp'."
                  | optional,
                repositories
                  | Array String
                  | doc m%"
                    Locations (list of URLs) where access rules should be fetched from on boot. It is expected that the documents at those locations return a JSON or YAML Array containing ORY Oathkeeper Access Rules:
                    
                    - If the URL Scheme is `file://`, the access rules (an array of access rules is expected) will be fetched from the local file system.
                    - If the URL Scheme is `inline://`, the access rules (an array of access rules is expected) are expected to be a base64 encoded (with padding!) JSON/YAML string (base64_encode(`[{"id":"foo-rule","authenticators":[....]}]`)).
                    - If the URL Scheme is `http://` or `https://`, the access rules (an array of access rules is expected) will be fetched from the provided HTTP(s) location.
                    - If the URL Scheme is `s3://`, `gs://` or `azblob://`, the access rules (an array of access rules is expected) will be fetched by an object storage (AWS S3, Google Cloud Storage, Azure Blob Storage).
                    
                    S3 storage also supports S3-compatible endpoints served by Minio or Ceph. See aws.ConfigFromURLParams (https://godoc.org/gocloud.dev/aws#ConfigFromURLParams) for more details on supported URL options for S3.
                  "%
                  | optional,
              }
              | doc "Configure access rules. All sub-keys support configuration reloading without restarting."
              | optional,
            authenticators
              | {
                anonymous
                  | {
                    config
                      | refs."oneOf.0.allOf.1.definitions.configAuthenticatorsAnonymous"
                      | { _ | Dyn }
                      | optional,
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                  }
                  | doc "The [`anonymous` authenticator](https://www.ory.sh/oathkeeper/docs/pipeline/authn#anonymous)."
                  | optional,
                bearer_token
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    config =
                                      std.contract.Sequence
                                          [
                                            refs."oneOf.0.allOf.1.definitions.configAuthenticatorsBearerToken",
                                            { _ | Dyn }
                                          ],
                                    enabled = js2n.Const true,
                                  },
                              required = { config = true, },
                            },
                          Array Dyn
                        ],
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { enabled = js2n.Const false, },
                              required = {},
                            },
                          Array Dyn
                        ]
                    ]
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                    ..
                  }
                  | doc "The [`bearer_token` authenticator](https://www.ory.sh/oathkeeper/docs/pipeline/authn#bearer_token)."
                  | optional,
                cookie_session
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    config =
                                      std.contract.Sequence
                                          [
                                            refs."oneOf.0.allOf.1.definitions.configAuthenticatorsCookieSession",
                                            { _ | Dyn }
                                          ],
                                    enabled = js2n.Const true,
                                  },
                              required = { config = true, },
                            },
                          Array Dyn
                        ],
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { enabled = js2n.Const false, },
                              required = {},
                            },
                          Array Dyn
                        ]
                    ]
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                    ..
                  }
                  | doc "The [`cookie_session` authenticator](https://www.ory.sh/oathkeeper/docs/pipeline/authn#cookie_session)."
                  | optional,
                jwt
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    config =
                                      std.contract.Sequence
                                          [
                                            refs."oneOf.0.allOf.1.definitions.configAuthenticatorsJwt",
                                            { _ | Dyn }
                                          ],
                                    enabled = js2n.Const true,
                                  },
                              required = { config = true, },
                            },
                          Array Dyn
                        ],
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { enabled = js2n.Const false, },
                              required = {},
                            },
                          Array Dyn
                        ]
                    ]
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                    ..
                  }
                  | doc "The [`jwt` authenticator](https://www.ory.sh/oathkeeper/docs/pipeline/authn#jwt)."
                  | optional,
                noop
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                  }
                  | doc "The [`noop` authenticator](https://www.ory.sh/oathkeeper/docs/pipeline/authn#noop)."
                  | optional,
                oauth2_client_credentials
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    config =
                                      std.contract.Sequence
                                          [
                                            refs."oneOf.0.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                            { _ | Dyn }
                                          ],
                                    enabled = js2n.Const true,
                                  },
                              required = { config = true, },
                            },
                          Array Dyn
                        ],
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { enabled = js2n.Const false, },
                              required = {},
                            },
                          Array Dyn
                        ]
                    ]
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                    ..
                  }
                  | doc "The [`oauth2_client_credentials` authenticator](https://www.ory.sh/oathkeeper/docs/pipeline/authn#oauth2_client_credentials)."
                  | optional,
                oauth2_introspection
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    config =
                                      std.contract.Sequence
                                          [
                                            refs."oneOf.0.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                            { _ | Dyn }
                                          ],
                                    enabled = js2n.Const true,
                                  },
                              required = { config = true, },
                            },
                          Array Dyn
                        ],
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { enabled = js2n.Const false, },
                              required = {},
                            },
                          Array Dyn
                        ]
                    ]
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                    ..
                  }
                  | doc "The [`oauth2_introspection` authenticator](https://www.ory.sh/oathkeeper/docs/pipeline/authn#oauth2_introspection)."
                  | optional,
                unauthorized
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                  }
                  | doc "The [`unauthorized` authenticator](https://www.ory.sh/oathkeeper/docs/pipeline/authn#unauthorized)."
                  | optional,
              }
              | doc "For more information on authenticators head over to: https://www.ory.sh/oathkeeper/docs/pipeline/authn"
              | optional,
            authorizers
              | {
                allow
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                  }
                  | doc "The [`allow` authorizer](https://www.ory.sh/oathkeeper/docs/pipeline/authz#allow)."
                  | optional,
                deny
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                  }
                  | doc "The [`deny` authorizer](https://www.ory.sh/oathkeeper/docs/pipeline/authz#deny)."
                  | optional,
                keto_engine_acp_ory
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    config =
                                      std.contract.Sequence
                                          [
                                            refs."oneOf.0.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                            { _ | Dyn }
                                          ],
                                    enabled = js2n.Const true,
                                  },
                              required = { config = true, },
                            },
                          Array Dyn
                        ],
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { enabled = js2n.Const false, },
                              required = {},
                            },
                          Array Dyn
                        ]
                    ]
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                    ..
                  }
                  | doc "The [`keto_engine_acp_ory` authorizer](https://www.ory.sh/oathkeeper/docs/pipeline/authz#keto_engine_acp_ory)."
                  | optional,
                remote
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    config =
                                      std.contract.Sequence
                                          [
                                            refs."oneOf.0.allOf.1.definitions.configAuthorizersRemote",
                                            { _ | Dyn }
                                          ],
                                    enabled = js2n.Const true,
                                  },
                              required = { config = true, },
                            },
                          Array Dyn
                        ],
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { enabled = js2n.Const false, },
                              required = {},
                            },
                          Array Dyn
                        ]
                    ]
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                    ..
                  }
                  | doc "The [`remote` authorizer](https://www.ory.sh/oathkeeper/docs/pipeline/authz#remote)."
                  | optional,
                remote_json
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    config =
                                      std.contract.Sequence
                                          [
                                            refs."oneOf.0.allOf.1.definitions.configAuthorizersRemoteJSON",
                                            { _ | Dyn }
                                          ],
                                    enabled = js2n.Const true,
                                  },
                              required = { config = true, },
                            },
                          Array Dyn
                        ],
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { enabled = js2n.Const false, },
                              required = {},
                            },
                          Array Dyn
                        ]
                    ]
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                    ..
                  }
                  | doc "The [`remote_json` authorizer](https://www.ory.sh/oathkeeper/docs/pipeline/authz#remote_json)."
                  | optional,
              }
              | doc "For more information on authorizers head over to: https://www.ory.sh/oathkeeper/docs/pipeline/authz"
              | optional,
            errors
              | {
                fallback
                  | Array String
                  | doc "This array defines how to handle errors when no \"when\" clause matches. If you have, for example, enabled redirect and json in your access rule, you could tell ORY Oathkeeper to try sending JSON if the request does not match the access rule definition"
                  | optional,
                handlers
                  | {
                    json
                      | std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          {
                            enabled
                              | Bool
                              | doc "En-/disables this component."
                              | optional,
                            ..
                          },
                          Array Dyn
                        ]
                      | js2n.OneOf
                        [
                          std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              String,
                              js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        config =
                                          std.contract.Sequence
                                              [
                                                refs."oneOf.0.allOf.1.definitions.configErrorsJSON",
                                                { _ | Dyn }
                                              ],
                                        enabled = js2n.Const true,
                                      },
                                  required = { config = true, },
                                },
                              Array Dyn
                            ],
                          std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              String,
                              js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties = { enabled = js2n.Const false, },
                                  required = {},
                                },
                              Array Dyn
                            ]
                        ]
                      | doc "Responds with a JSON error response"
                      | optional,
                    redirect
                      | js2n.OneOf
                        [
                          std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              String,
                              js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        config =
                                          std.contract.Sequence
                                              [
                                                refs."oneOf.0.allOf.1.definitions.configErrorsRedirect",
                                                { _ | Dyn }
                                              ],
                                        enabled = js2n.Const true,
                                      },
                                  required = { config = true, },
                                },
                              Array Dyn
                            ],
                          std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              String,
                              js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties = { enabled = js2n.Const false, },
                                  required = {},
                                },
                              Array Dyn
                            ]
                        ]
                      | {
                        enabled
                          | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                          | Bool
                          | optional,
                        ..
                      }
                      | doc "Responds with a 301/302 HTTP redirect."
                      | optional,
                    www_authenticate
                      | js2n.OneOf
                        [
                          std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              String,
                              js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        config =
                                          std.contract.Sequence
                                              [
                                                refs."oneOf.0.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                { _ | Dyn }
                                              ],
                                        enabled = js2n.Const true,
                                      },
                                  required = { config = true, },
                                },
                              Array Dyn
                            ],
                          std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              String,
                              js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties = { enabled = js2n.Const false, },
                                  required = {},
                                },
                              Array Dyn
                            ]
                        ]
                      | {
                        enabled
                          | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                          | Bool
                          | optional,
                        ..
                      }
                      | doc "Responds with the WWW-Authenticate HTTP Response"
                      | optional,
                  }
                  | optional,
              }
              | optional,
            log
              | {
                format
                  | std.enum.TagOrString
                  | [| 'text, 'gelf, 'json_pretty, 'json |]
                  | doc "The output format of log messages."
                  | optional,
                leak_sensitive_values
                  | Bool
                  | doc "If set will leak sensitive values (e.g. emails) in the logs."
                  | optional,
                level
                  | std.enum.TagOrString
                  | [| 'trace, 'debug, 'info, 'warn, 'error, 'fatal, 'panic |]
                  | doc "The level of log entries to show. Debug enables stack traces on errors."
                  | optional,
                redaction_text
                  | String
                  | doc "Text to use, when redacting sensitive log value."
                  | optional,
              }
              | doc "Configure logging using the following options. Logs will always be sent to stdout and stderr."
              | optional,
            mutators
              | {
                cookie
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    config =
                                      std.contract.Sequence
                                          [
                                            refs."oneOf.0.allOf.1.definitions.configMutatorsCookie",
                                            { _ | Dyn }
                                          ],
                                    enabled = js2n.Const true,
                                  },
                              required = { config = true, },
                            },
                          Array Dyn
                        ],
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { enabled = js2n.Const false, },
                              required = {},
                            },
                          Array Dyn
                        ]
                    ]
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                    ..
                  }
                  | doc "The [`cookie` mutator](https://www.ory.sh/oathkeeper/docs/pipeline/mutator#cookie)."
                  | optional,
                header
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    config =
                                      std.contract.Sequence
                                          [
                                            refs."oneOf.0.allOf.1.definitions.configMutatorsHeader",
                                            { _ | Dyn }
                                          ],
                                    enabled = js2n.Const true,
                                  },
                              required = { config = true, },
                            },
                          Array Dyn
                        ],
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { enabled = js2n.Const false, },
                              required = {},
                            },
                          Array Dyn
                        ]
                    ]
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                    ..
                  }
                  | doc "The [`header` mutator](https://www.ory.sh/oathkeeper/docs/pipeline/mutator#header)."
                  | optional,
                hydrator
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    config =
                                      std.contract.Sequence
                                          [
                                            refs."oneOf.0.allOf.1.definitions.configMutatorsHydrator",
                                            { _ | Dyn }
                                          ],
                                    enabled = js2n.Const true,
                                  },
                              required = { config = true, },
                            },
                          Array Dyn
                        ],
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { enabled = js2n.Const false, },
                              required = {},
                            },
                          Array Dyn
                        ]
                    ]
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                    ..
                  }
                  | doc "The [`hydrator` mutator](https://www.ory.sh/oathkeeper/docs/pipeline/mutator#hydrator)."
                  | optional,
                id_token
                  | js2n.OneOf
                    [
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties =
                                {
                                    config =
                                      std.contract.Sequence
                                          [
                                            refs."oneOf.0.allOf.1.definitions.configMutatorsIdToken",
                                            { _ | Dyn }
                                          ],
                                    enabled = js2n.Const true,
                                  },
                              required = { config = true, },
                            },
                          Array Dyn
                        ],
                      std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { enabled = js2n.Const false, },
                              required = {},
                            },
                          Array Dyn
                        ]
                    ]
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                    ..
                  }
                  | doc "The [`id_token` mutator](https://www.ory.sh/oathkeeper/docs/pipeline/mutator#id_token)."
                  | optional,
                noop
                  | {
                    enabled
                      | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                      | Bool
                      | optional,
                  }
                  | doc "The [`noop` mutator](https://www.ory.sh/oathkeeper/docs/pipeline/mutator#noop)."
                  | optional,
              }
              | doc "For more information on mutators head over to: https://www.ory.sh/oathkeeper/docs/pipeline/mutator"
              | optional,
            profiling
              | std.enum.TagOrString
              | [| '"", 'mem, 'cpu |]
              | doc "Enables CPU or memory profiling if set. For more details on profiling Go programs read [Profiling Go Programs](https://blog.golang.org/profiling-go-programs)."
              | optional,
            serve
              | {
                api
                  | {
                    cors
                      | refs."oneOf.0.allOf.1.definitions.cors"
                      | { _ | Dyn }
                      | optional,
                    host
                      | String
                      | doc "The network interface to listen on."
                      | optional,
                    port
                      | std.number.Integer
                      | doc "The port to listen on."
                      | optional,
                    timeout
                      | refs."oneOf.0.allOf.1.definitions.serverTimeout"
                      | { _ | Dyn }
                      | optional,
                    tls
                      | refs."oneOf.0.allOf.1.definitions.tlsx"
                      | { _ | Dyn }
                      | optional,
                  }
                  | optional,
                prometheus
                  | {
                    collapse_request_paths
                      | Bool
                      | doc "When set to true the request label will include just the first segment of the request path"
                      | optional,
                    hide_request_paths
                      | Bool
                      | doc "When set to true the request label will be set to an empty value"
                      | optional,
                    host
                      | String
                      | doc "The network interface to listen on. Leave empty to listen on all interfaces."
                      | optional,
                    metric_name_prefix
                      | String
                      | doc "Prefix appended to Prometheus request metrics"
                      | optional,
                    metrics_path
                      | String
                      | doc "The path to provide metrics on"
                      | optional,
                    port
                      | std.number.Integer
                      | doc "The port to listen on."
                      | optional,
                  }
                  | optional,
                proxy
                  | {
                    cors
                      | refs."oneOf.0.allOf.1.definitions.cors"
                      | { _ | Dyn }
                      | optional,
                    host
                      | String
                      | doc "The network interface to listen on. Leave empty to listen on all interfaces."
                      | optional,
                    port
                      | std.number.Integer
                      | doc "The port to listen on."
                      | optional,
                    timeout
                      | refs."oneOf.0.allOf.1.definitions.serverTimeout"
                      | { _ | Dyn }
                      | optional,
                    tls
                      | refs."oneOf.0.allOf.1.definitions.tlsx"
                      | { _ | Dyn }
                      | optional,
                    trust_forwarded_headers
                      | Bool
                      | doc "Trust the X-Forwarded-* headers from the reverse proxy. This is useful when running behind a load balancer or similar. Set this to false if you are not running behind a reverse proxy that prevents Hop-by-Hop attacks."
                      | optional,
                  }
                  | optional,
              }
              | optional,
            tracing
              | {
                deployment_environment
                  | String
                  | doc "Specifies the deployment environment to use on the tracer."
                  | optional,
                provider
                  | std.enum.TagOrString
                  | [| 'zipkin, 'otel, 'jaeger |]
                  | doc "Set this to the tracing backend you wish to use. Supports Jaeger, Zipkin, and OTEL."
                  | optional,
                providers
                  | {
                    jaeger
                      | {
                        local_agent_address
                          | std.contract.any_of
                            [
                              js2n.string.Matches
                                "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                              js2n.string.Matches
                                "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                              js2n.string.Matches
                                "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                            ]
                          | doc "The address of the jaeger-agent where spans should be sent to."
                          | optional,
                        sampling
                          | js2n.record.PropertyNames
                            (std.contract.Sequence
                              [
                                std.enum.TagOrString,
                                [| 'trace_id_ratio, 'server_url |]
                              ])
                          | {
                            server_url
                              | String
                              | doc "The address of jaeger-agent's HTTP sampling server"
                              | optional,
                            trace_id_ratio
                              | Number
                              | doc "Trace Id ratio sample"
                              | optional,
                          }
                          | optional,
                      }
                      | doc "Configures the jaeger tracing backend."
                      | optional,
                    otlp
                      | {
                        authorization_header | String | optional,
                        insecure
                          | Bool
                          | doc "Will use HTTP if set to true; defaults to HTTPS."
                          | optional,
                        sampling
                          | js2n.record.PropertyNames
                            (std.contract.Sequence
                              [ std.enum.TagOrString, [| 'sampling_ratio |] ])
                          | {
                            sampling_ratio
                              | Number
                              | doc "Sampling ratio for spans."
                              | optional,
                          }
                          | optional,
                        server_url
                          | std.contract.any_of
                            [
                              js2n.string.Matches
                                "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                              js2n.string.Matches
                                "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                              js2n.string.Matches
                                "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                            ]
                          | doc "The endpoint of the OTLP exporter (HTTP) where spans should be sent to."
                          | optional,
                      }
                      | doc "Configures the OTLP tracing backend."
                      | optional,
                    zipkin
                      | {
                        sampling
                          | js2n.record.PropertyNames
                            (std.contract.Sequence
                              [ std.enum.TagOrString, [| 'sampling_ratio |] ])
                          | {
                            sampling_ratio
                              | Number
                              | doc "Sampling ratio for spans."
                              | optional,
                          }
                          | optional,
                        server_url
                          | String
                          | doc "The address of the Zipkin server where spans should be sent to."
                          | optional,
                      }
                      | doc "Configures the zipkin tracing backend."
                      | optional,
                  }
                  | optional,
                service_name
                  | String
                  | doc "Specifies the service name to use on the tracer."
                  | optional,
              }
              | doc "Configure distributed tracing using OpenTelemetry"
              | optional,
            version
              | js2n.string.Matches
                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
              | doc "SemVer according to https://semver.org/ prefixed with `v` as in our releases."
              | optional,
          },
      "oneOf.0.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.0.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            prefix
              | String
              | doc "The token is considered only if it starts with this string."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.0.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request."
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.0.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.0.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.0.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_tokens
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache. If the token exp time is lower than the set value the token exp time will be used instead."
                  | optional,
              }
              | optional,
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.0.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.0.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max cost to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            prefix
              | String
              | doc "The token is considered only if it starts with this string."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.0.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.0.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.0.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.0.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.0.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.0.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.0.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.0.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.0.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.0.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.0.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.0.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.0.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.0.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.0.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.0.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.0.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.0.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.0.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.0.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.0.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.0.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.0.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.0.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.0.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.0.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.0.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.0.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.0.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.1.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.1.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.1.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request."
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.1.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.1.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.1.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.1.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_tokens
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache. If the token exp time is lower than the set value the token exp time will be used instead."
                  | optional,
              }
              | optional,
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.1.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.1.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.1.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.1.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.1.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.1.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.1.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.1.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.1.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.1.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.1.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.1.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.1.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.1.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.1.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.1.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.1.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.1.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.1.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.1.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.1.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.1.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.1.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.1.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.1.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.1.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.1.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.1.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.1.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.1.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.1.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.1.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.1.allOf.1.properties.log" =
        {
            format
              | std.enum.TagOrString
              | [| 'text, 'gelf, 'json_pretty, 'json |]
              | doc "The output format of log messages."
              | optional,
            leak_sensitive_values
              | Bool
              | doc "If set will leak sensitive values (e.g. emails) in the logs."
              | optional,
            level
              | std.enum.TagOrString
              | [| 'trace, 'debug, 'info, 'warn, 'error, 'fatal, 'panic |]
              | doc "The level of log entries to show. Debug enables stack traces on errors."
              | optional,
            redaction_text
              | String
              | doc "Text to use, when redacting sensitive log value."
              | optional,
          },
      "oneOf.1.allOf.1.properties.tracing" =
        {
            provider
              | std.enum.TagOrString
              | [| 'instana, 'elastic-apm, 'datadog, 'zipkin, 'jaeger |]
              | doc "Set this to the tracing backend you wish to use. Supports Jaeger, Zipkin DataDog, Elastic APM and Instana. If omitted or empty, tracing will be disabled. Use environment variables to configure DataDog (see https://docs.datadoghq.com/tracing/setup/go/#configuration)."
              | optional,
            providers
              | {
                jaeger
                  | {
                    local_agent_address
                      | js2n.OneOf
                        [
                          std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              js2n.string.Matches
                                "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                              { _ | Dyn },
                              Array Dyn
                            ],
                          std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              js2n.string.Matches
                                "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                              { _ | Dyn },
                              Array Dyn
                            ],
                          std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              String,
                              { _ | Dyn },
                              Array Dyn
                            ]
                        ]
                      | String
                      | doc "The address of the jaeger-agent where spans should be sent to."
                      | optional,
                    max_tag_value_length
                      | std.number.Integer
                      | js2n.number.Minimum 0
                      | doc "The value passed to the max tag value length that has been configured."
                      | optional,
                    propagation
                      | String
                      | doc "The tracing header format"
                      | optional,
                    sampling
                      | js2n.record.PropertyNames
                        (std.contract.Sequence
                          [
                            std.enum.TagOrString,
                            [| 'server_url, 'value, 'type |]
                          ])
                      | js2n.OneOf
                        [
                          std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              String,
                              js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        type = js2n.Const "const",
                                        value =
                                          std.contract.Sequence
                                              [
                                                std.number.Integer,
                                                js2n.number.Maximum 1,
                                                js2n.number.Minimum 0
                                              ],
                                      },
                                  required = {},
                                },
                              Array Dyn
                            ],
                          std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              String,
                              js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        type = js2n.Const "rateLimiting",
                                        value =
                                          std.contract.Sequence
                                              [
                                                std.number.Integer,
                                                js2n.number.Minimum 0
                                              ],
                                      },
                                  required = {},
                                },
                              Array Dyn
                            ],
                          std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              String,
                              js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties =
                                    {
                                        type = js2n.Const "probabilistic",
                                        value =
                                          std.contract.Sequence
                                              [
                                                js2n.number.Maximum 1,
                                                js2n.number.Minimum 0
                                              ],
                                      },
                                  required = {},
                                },
                              Array Dyn
                            ]
                        ]
                      | {
                        server_url
                          | String
                          | doc "The address of jaeger-agent's HTTP sampling server"
                          | optional,
                        ..
                      }
                      | optional,
                  }
                  | doc "Configures the jaeger tracing backend."
                  | optional,
                zipkin
                  | {
                    server_url
                      | String
                      | doc "The address of Zipkin server where spans should be sent to."
                      | optional,
                  }
                  | doc "Configures the zipkin tracing backend."
                  | optional,
              }
              | optional,
            service_name
              | String
              | doc "Specifies the service name to use on the tracer."
              | optional,
          },
      "oneOf.10.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.10.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.10.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.10.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.10.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.10.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.10.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.10.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.10.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.10.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.10.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.10.allOf.1.definitions.configAuthorizersRemote" =
        {
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
          },
      "oneOf.10.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
          },
      "oneOf.10.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.10.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.10.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.10.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.10.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.10.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.10.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.10.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.10.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.10.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.10.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.10.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.10.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.10.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.10.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.10.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.10.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.10.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.10.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.10.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.10.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.10.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.11.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.11.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.11.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.11.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.11.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.11.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.11.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.11.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.11.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.11.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.11.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.11.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.11.allOf.1.definitions.configAuthorizersRemote" =
        {
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
          },
      "oneOf.11.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
          },
      "oneOf.11.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.11.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.11.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.11.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.11.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.11.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.11.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.11.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.11.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.11.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.11.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.11.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.11.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.11.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.11.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.11.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.11.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.11.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.11.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.11.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.11.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.11.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.12.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.12.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.12.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.12.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.12.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.12.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.12.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.12.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.12.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.12.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.12.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.12.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.12.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
          },
      "oneOf.12.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
          },
      "oneOf.12.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.12.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.12.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.12.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.12.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.12.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.12.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.12.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.12.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.12.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.12.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.12.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.12.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.12.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.12.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.12.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.12.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.12.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.12.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.12.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.12.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.12.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.13.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.13.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.13.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request."
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.13.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.13.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.13.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.13.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.13.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.13.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.13.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.13.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.13.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.13.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
          },
      "oneOf.13.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
          },
      "oneOf.13.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.13.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.13.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.13.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.13.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.13.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.13.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.13.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.13.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.13.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.13.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.13.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.13.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.13.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.13.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.13.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.13.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.13.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.13.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.13.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.13.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.13.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.14.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.14.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.14.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request."
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.14.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.14.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.14.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.14.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.14.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.14.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.14.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.14.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.14.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.14.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.14.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.14.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.14.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.14.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.14.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.14.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.14.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.14.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.14.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.14.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.14.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.14.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.14.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.14.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.14.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.14.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.14.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.14.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.14.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.14.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.14.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.14.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.14.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.14.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.14.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.15.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.15.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.15.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request."
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.15.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.15.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.15.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.15.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.15.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.15.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.15.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.15.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.15.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.15.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.15.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.15.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.15.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.15.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.15.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.15.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.15.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.15.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.15.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.15.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.15.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.15.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.15.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.15.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.15.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.15.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.15.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.15.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.15.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.15.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.15.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.15.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.15.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.15.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.15.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.16.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.16.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.16.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request."
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.16.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.16.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.16.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.16.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_tokens
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache. If the token exp time is lower than the set value the token exp time will be used instead."
                  | optional,
              }
              | optional,
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.16.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.16.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.16.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.16.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.16.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.16.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.16.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.16.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.16.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.16.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.16.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.16.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.16.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.16.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.16.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.16.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.16.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.16.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.16.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.16.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.16.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.16.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.16.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.16.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.16.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.16.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.16.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.16.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.16.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.16.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.16.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.16.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.2.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.2.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.2.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request."
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.2.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.2.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.2.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.2.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_tokens
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache. If the token exp time is lower than the set value the token exp time will be used instead."
                  | optional,
              }
              | optional,
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.2.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.2.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.2.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.2.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.2.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.2.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.2.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.2.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.2.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.2.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.2.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.2.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.2.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.2.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.2.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.2.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.2.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.2.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.2.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.2.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.2.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.2.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.2.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.2.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.2.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.2.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.2.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.2.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.2.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.2.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.2.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.2.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.3.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.3.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.3.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request."
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.3.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.3.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.3.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.3.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_tokens
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache. If the token exp time is lower than the set value the token exp time will be used instead."
                  | optional,
              }
              | optional,
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.3.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.3.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.3.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.3.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.3.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.3.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.3.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.3.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.3.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.3.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.3.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.3.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.3.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.3.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.3.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.3.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.3.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.3.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.3.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.3.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.3.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.3.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.3.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.3.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.3.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.3.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.3.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.3.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.3.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.3.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.3.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.3.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.4.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.4.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.4.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request."
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.4.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.4.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.4.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.4.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_tokens
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache. If the token exp time is lower than the set value the token exp time will be used instead."
                  | optional,
              }
              | optional,
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.4.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.4.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.4.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.4.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.4.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.4.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.4.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.4.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.4.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.4.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.4.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.4.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.4.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.4.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.4.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.4.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.4.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.4.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.4.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.4.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.4.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.4.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.4.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.4.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.4.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.4.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.4.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.4.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.4.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.4.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.4.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.4.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.5.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.5.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.5.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request."
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.5.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.5.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.5.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.5.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_tokens
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache. If the token exp time is lower than the set value the token exp time will be used instead."
                  | optional,
              }
              | optional,
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.5.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.5.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.5.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.5.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.5.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.5.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.5.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.5.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.5.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.5.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.5.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.5.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.5.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.5.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.5.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.5.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.5.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.5.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.5.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.5.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.5.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.5.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.5.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.5.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.5.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.5.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.5.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.5.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.5.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.5.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.5.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.5.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.6.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.6.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.6.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request."
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.6.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.6.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.6.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.6.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_tokens
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache. If the token exp time is lower than the set value the token exp time will be used instead."
                  | optional,
              }
              | optional,
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.6.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.6.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.6.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.6.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.6.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.6.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.6.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.6.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.6.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.6.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.6.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.6.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.6.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.6.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.6.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.6.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.6.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.6.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.6.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.6.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.6.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.6.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.6.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.6.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.6.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.6.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.6.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.6.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.6.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.6.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.6.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.6.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.7.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.7.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.7.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request."
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.7.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.7.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.7.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.7.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_tokens
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache. If the token exp time is lower than the set value the token exp time will be used instead."
                  | optional,
              }
              | optional,
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.7.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.7.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.7.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.7.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.7.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.7.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.7.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.7.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.7.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.7.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.7.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.7.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.7.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.7.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.7.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.7.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.7.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.7.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.7.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.7.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.7.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.7.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.7.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.7.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.7.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.7.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.7.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.7.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.7.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.7.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.7.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.7.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.8.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.8.allOf.1.definitions.configAuthenticatorsBearerToken" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
          },
      "oneOf.8.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            additional_headers
              | { _ | String }
              | doc "Set additional HTTP Headers for the Session Check URL."
              | optional,
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            force_method
              | String
              | doc "When set uses the given HTTP method instead of the request HTTP method."
              | optional,
            forward_http_headers
              | Array Dyn
              | doc "Set HTTP Headers allowed forwarding to upstream."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_host
              | Bool
              | doc "When set to true the HTTP Header X-Forwarded-Host will be set to the original HTTP host."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request."
              | optional,
            preserve_query
              | Bool
              | doc "When unset or set to true, any query parameters specified in `check_session_url` will be preserved instead of overwriting them with the query parameters from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.8.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_max_wait
              | String
              | doc "The configuration which sets the max wait threshold when fetching new JWKs"
              | optional,
            jwks_ttl
              | String
              | doc "The time interval for which fetched JWKs are cached"
              | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.8.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.8.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.8.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_tokens
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache. If the token exp time is lower than the set value the token exp time will be used instead."
                  | optional,
              }
              | optional,
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.8.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.8.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.8.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                max_cost
                  | std.number.Integer
                  | doc "Max number of tokens to cache."
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                audience
                  | String
                  | doc "The OAuth 2.0 Audience to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.8.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.8.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.8.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.8.allOf.1.definitions.configAuthorizersRemote" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.8.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.8.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            forward_response_headers_to_upstream
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the remote is allowed to return to mutate requests."
              | optional,
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
            retry
              | refs."oneOf.8.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.8.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.8.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.8.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.8.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.8.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.8.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.8.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.8.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.8.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.8.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.8.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.8.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.8.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.8.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.8.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.8.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.8.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.8.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.8.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.8.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.8.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.8.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
      "oneOf.9.allOf.1.definitions.configAuthenticatorsAnonymous" =
        { subject | String | doc "Sets the anonymous username." | optional, },
      "oneOf.9.allOf.1.definitions.configAuthenticatorsCookieSession" =
        {
            check_session_url
              | String
              | doc m%"
                The origin to proxy requests to. If the response is a 200 with body `{ "subject": "...", "extra": {} }`. The request will pass the subject through successfully, otherwise it will be marked as unauthorized.
                
                >If this authenticator is enabled, this value is required.
              "%,
            extra_from
              | String
              | doc "The `extra` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `extra`, and could be `@this` (for the root element), `foo.bar` (for key foo.bar), or any other valid GJSON path. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
            only
              | Array String
              | doc "A list of possible cookies to look for on incoming requests, and will fallthrough to the next authenticator if none of the passed cookies are set on the request."
              | optional,
            preserve_path
              | Bool
              | doc "When set to true, any path specified in `check_session_url` will be preserved instead of overwriting the path with the path from the original request"
              | optional,
            subject_from
              | String
              | doc "The `subject` field in the ORY Oathkeeper authentication session is set using this JSON Path. Defaults to `subject`. See [GSJON Syntax](https://github.com/tidwall/gjson/blob/master/SYNTAX.md) for reference."
              | optional,
          },
      "oneOf.9.allOf.1.definitions.configAuthenticatorsJwt" =
        {
            allowed_algorithms | Array String | optional,
            jwks_urls
              | Array String
              | doc m%"
                URLs where ORY Oathkeeper can retrieve JSON Web Keys from for validating the JSON Web Token. Usually something like "https://my-keys.com/.well-known/jwks.json". The response of that endpoint must return a JSON Web Key Set (JWKS).
                
                >If this authenticator is enabled, this value is required.
              "%,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            scope_strategy
              | refs."oneOf.9.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers | Array String | optional,
          },
      "oneOf.9.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials" =
        {
            required_scope
              | Array String
              | doc m%"
                Scopes is an array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this rule.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.9.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            token_url
              | String
              | doc m%"
                The OAuth 2.0 Token Endpoint that will be used to validate the client credentials.
                
                >If this authenticator is enabled, this value is required.
              "%,
          },
      "oneOf.9.allOf.1.definitions.configAuthenticatorsOauth2Introspection" =
        {
            cache
              | {
                enabled
                  | refs."oneOf.9.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "Can override the default behaviour of using the token exp time, and specify a set time to live for the token in the cache."
                  | optional,
              }
              | optional,
            introspection_request_headers
              | { _ | Dyn }
              | doc "Additional headers to be added to the introspection request."
              | optional,
            introspection_url
              | String
              | doc m%"
                The OAuth 2.0 Token Introspection endpoint URL.
                
                >If this authenticator is enabled, this value is required.
              "%,
            pre_authorization
              | js2n.OneOf
                [
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties = { enabled = js2n.Const false, },
                          required = {},
                        },
                      Array Dyn
                    ],
                  std.contract.any_of
                    [
                      js2n.Null,
                      Bool,
                      Number,
                      String,
                      js2n.record.Record
                        {
                          additional = 'Some Dyn,
                          patterns = {},
                          properties =
                            {
                                client_id = String,
                                client_secret = String,
                                enabled = js2n.Const true,
                                scope = js2n.array.ArrayOf String,
                                token_url = String,
                              },
                          required =
                            {
                                client_id = true,
                                client_secret = true,
                                token_url = true,
                              },
                        },
                      Array Dyn
                    ]
                ]
              | {
                client_id
                  | String
                  | doc m%"
                    The OAuth 2.0 Client ID to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                client_secret
                  | String
                  | doc m%"
                    The OAuth 2.0 Client Secret to be used for the OAuth 2.0 Client Credentials Grant.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
                enabled | Bool | optional,
                scope
                  | Array String
                  | doc "The OAuth 2.0 Scope to be requested during the OAuth 2.0 Client Credentials Grant."
                  | optional,
                token_url
                  | String
                  | doc m%"
                    The OAuth 2.0 Token Endpoint where the OAuth 2.0 Client Credentials Grant will be performed.
                    
                    >If pre-authorization is enabled, this value is required.
                  "%
                  | optional,
              }
              | doc "Enable pre-authorization in cases where the OAuth 2.0 Token Introspection endpoint is protected by OAuth 2.0 Bearer Tokens that can be retrieved using the OAuth 2.0 Client Credentials grant."
              | optional,
            required_scope
              | Array String
              | doc m%"
                An array of OAuth 2.0 scopes that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header did not request that specific scope, the request is denied.
              "%
              | optional,
            retry
              | refs."oneOf.9.allOf.1.definitions.retry"
              | { _ | Dyn }
              | optional,
            scope_strategy
              | refs."oneOf.9.allOf.1.definitions.scopeStrategy"
              | String
              | optional,
            target_audience
              | Array String
              | doc m%"
                An array of audiences that are required when accessing an endpoint protected by this handler.
                 If the token used in the Authorization header is not intended for any of the requested audiences, the request is denied.
              "%
              | optional,
            token_from
              | js2n.OneOf
                [
                  js2n.Null,
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { header = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { query_parameter = String, },
                      required = {},
                    },
                  js2n.record.Record
                    {
                      additional = 'None,
                      patterns = {},
                      properties = { cookie = String, },
                      required = {},
                    }
                ]
              | doc m%"
                The location of the token.
                 If not configured, the token will be received from a default location - 'Authorization' header.
                 One and only one location (header or query) must be specified.
              "%
              | optional,
            trusted_issuers
              | Array String
              | doc "The token must have been issued by one of the issuers listed in this array."
              | optional,
          },
      "oneOf.9.allOf.1.definitions.configAuthorizersKetoEngineAcpOry" =
        {
            base_url
              | String
              | doc m%"
                The base URL of ORY Keto.
                
                >If this authorizer is enabled, this value is required.
              "%,
            flavor | String | optional,
            required_action | String,
            required_resource | String,
            subject | String | optional,
          },
      "oneOf.9.allOf.1.definitions.configAuthorizersRemote" =
        {
            headers | { _ | String } | optional,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
          },
      "oneOf.9.allOf.1.definitions.configAuthorizersRemoteJSON" =
        {
            payload
              | String
              | doc m%"
                The JSON payload of the request sent to the remote authorizer. The string will be parsed by the Go text/template package and applied to an AuthenticationSession object.
                
                >If this authorizer is enabled, this value is required.
              "%,
            remote
              | String
              | doc m%"
                The URL of the remote authorizer. The remote authorizer is expected to return either 200 OK or 403 Forbidden to allow/deny access.
                
                >If this authorizer is enabled, this value is required.
              "%,
          },
      "oneOf.9.allOf.1.definitions.configErrorsJSON" =
        {
            verbose | Bool | optional,
            when
              | refs."oneOf.9.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.9.allOf.1.definitions.configErrorsRedirect" =
        {
            code
              | std.number.Integer
              | js2n.Enum [ 301, 302 ]
              | doc "Defines the HTTP Redirect status code which can bei 301 (Moved Permanently) or 302 (Found)."
              | optional,
            return_to_query_param
              | js2n.string.Matches "^[A-Za-z0-9,._~-]*$"
              | doc "Adds the original URL the request tried to access to the query parameter."
              | optional,
            to
              | String
              | doc "Set the redirect target. Can either be a http/https URL, or a relative URL.",
            when
              | refs."oneOf.9.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.9.allOf.1.definitions.configErrorsWWWAuthenticate" =
        {
            realm
              | String
              | doc "This is a message that will be displayed by the browser. Most browsers show a message like \"The website says: `,<realm>`\". Using a real message is thus more appropriate than a Realm identifier."
              | optional,
            when
              | refs."oneOf.9.allOf.1.definitions.configErrorsWhen"
              | Array Dyn
              | optional,
          },
      "oneOf.9.allOf.1.definitions.configErrorsWhen" =
        Array
            {
              error
                | Array (
                  std.contract.Sequence
                    [
                      std.enum.TagOrString,
                      [|
                        'not_found,
                        'internal_server_error,
                        'forbidden,
                        'unauthorized
                      |]
                    ]
                )
                | doc "Defines which error this error handler should listen to. The list uses OR (e.g. when the error is not_found OR unauthorized). If left empty, all errors will be handled by this error handler."
                | optional,
              request
                | {
                  cidr
                    | Array String
                    | doc "Defines one or more CIDR masks to match the client IP (remote address and X-Forwarded-For) against. If empty, all IPs will be matched. If more than one value, OR will be applied (e.g. 129.168.1.0/24 OR 188.177.0.0/16."
                    | optional,
                  header
                    | {
                      accept
                        | Array Dyn
                        | doc "Defines the HTTP Header Accept condition. If left empty, all accept values match. If more than one element is defined, at least one has to match."
                        | optional,
                      content_type
                        | Array Dyn
                        | doc "Defines the HTTP Header Content-Type condition. If left empty, all content types match. If more than one element is defined, at least one has to match."
                        | optional,
                    }
                    | doc "Defines conditions the HTTP Request Header must full fill for this handler to match the request. Subkeys are matched with AND. If, for example, both content_type and accept are set, both requirements must be matched for the handler to be responsible."
                    | optional,
                }
                | doc "Defines which HTTP Request conditions must be met for this error handler to be executed. If left empty, all HTTP requests will match. All subkeys (e.g. cidr, header.accept, header.content_type) are handled as AND."
                | optional,
            },
      "oneOf.9.allOf.1.definitions.configMutatorsCookie" =
        { cookies | { _ | String }, },
      "oneOf.9.allOf.1.definitions.configMutatorsHeader" =
        { headers | { _ | String }, },
      "oneOf.9.allOf.1.definitions.configMutatorsHydrator" =
        {
            api
              | {
                auth
                  | {
                    basic
                      | { password | String, username | String, }
                      | optional,
                  }
                  | optional,
                retry
                  | refs."oneOf.9.allOf.1.definitions.retry"
                  | { _ | Dyn }
                  | optional,
                url | String,
              },
            cache
              | {
                enabled
                  | refs."oneOf.9.allOf.1.definitions.handlerSwitch"
                  | Bool
                  | optional,
                ttl
                  | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
                  | doc "How long to cache hydrate calls"
                  | optional,
              }
              | optional,
          },
      "oneOf.9.allOf.1.definitions.configMutatorsIdToken" =
        {
            claims | String | optional,
            issuer_url
              | String
              | doc m%"
                Sets the "iss" value of the ID Token.
                
                >If this mutator is enabled, this value is required.
              "%,
            jwks_url
              | String
              | doc m%"
                Sets the URL where keys should be fetched from. Supports remote locations (http, https) as well as local filesystem paths.
                
                >If this mutator is enabled, this value is required.
              "%,
            ttl
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "Sets the time-to-live of the JSON Web Token."
              | optional,
          },
      "oneOf.9.allOf.1.definitions.cors" =
        {
            allow_credentials
              | Bool
              | doc "Indicates whether the request can include user credentials like cookies, HTTP authentication or client side SSL certificates."
              | optional,
            allowed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "A list of non simple headers the client is allowed to use with cross-domain requests."
              | optional,
            allowed_methods
              | js2n.array.UniqueItems
              | Array (
                std.contract.Sequence
                  [
                    std.enum.TagOrString,
                    [|
                      'PATCH,
                      'TRACE,
                      'CONNECT,
                      'DELETE,
                      'PUT,
                      'POST,
                      'HEAD,
                      'GET
                    |]
                  ]
              )
              | doc "A list of methods the client is allowed to use with cross-domain requests."
              | optional,
            allowed_origins
              | js2n.array.UniqueItems
              | Array (js2n.string.MinLength 1)
              | doc "A list of origins a cross-domain request can be executed from. If the special * value is present in the list, all origins will be allowed. An origin may contain a wildcard (*) to replace 0 or more characters (i.e.: http://*.domain.com). Usage of wildcards implies a small performance penality. Only one wildcard can be used per origin."
              | optional,
            debug
              | Bool
              | doc "Set to true to debug server side CORS issues."
              | optional,
            enabled
              | Bool
              | doc "If set to true, CORS will be enabled and preflight-requests (OPTION) will be answered."
              | optional,
            exposed_headers
              | js2n.array.UniqueItems
              | Array String
              | doc "Indicates which headers are safe to expose to the API of a CORS API specification"
              | optional,
            max_age
              | std.number.Integer
              | doc "Indicates how long (in seconds) the results of a preflight request can be cached. The default is 0 which stands for no max age."
              | optional,
          },
      "oneOf.9.allOf.1.definitions.handlerSwitch" = Bool,
      "oneOf.9.allOf.1.definitions.retry" =
        {
            give_up_after
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
            max_delay
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | optional,
          },
      "oneOf.9.allOf.1.definitions.scopeStrategy" =
        std.contract.Sequence
            [
              std.enum.TagOrString,
              [| 'none, 'wildcard, 'exact, 'hierarchic |]
            ],
      "oneOf.9.allOf.1.definitions.serverTimeout" =
        {
            idle
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc " The maximum amount of time to wait for any action of a request session, reading data or writing the response."
              | optional,
            read
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration for reading the entire request, including the body."
              | optional,
            write
              | js2n.string.Matches "^[0-9]+(ns|us|ms|s|m|h)$"
              | doc "The maximum duration before timing out writes of the response. Increase this parameter to prevent unexpected closing a client connection if an upstream request is responding slowly."
              | optional,
          },
      "oneOf.9.allOf.1.definitions.tlsx" =
        {
            cert
              | refs."oneOf.9.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
            key
              | refs."oneOf.9.allOf.1.definitions.tlsxSource"
              | { _ | Dyn }
              | optional,
          },
      "oneOf.9.allOf.1.definitions.tlsxSource" =
        {
            base64
              | String
              | doc "The base64 string of the PEM-encoded file content. Can be generated using for example `base64 -i path/to/file.pem`."
              | optional,
            path | String | optional,
          },
    }
    in
  std.contract.Sequence
      [
        js2n.OneOf
          [
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.40.9", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.0.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.0.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.0.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.0.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.0.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.0.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.0.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.0.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.0.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.0.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.0.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.0.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'text,
                                                  'gelf,
                                                  'json_pretty,
                                                  'json
                                                |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'trace,
                                                  'debug,
                                                  'info,
                                                  'warn,
                                                  'error,
                                                  'fatal,
                                                  'panic
                                                |]
                                              ],
                                        redaction_text = String,
                                      },
                                  required = {},
                                },
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.0.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.0.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.0.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.0.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.0.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.0.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.0.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.0.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      hide_request_paths = Bool,
                                                      host = String,
                                                      metric_name_prefix =
                                                        String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.0.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.0.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.0.allOf.1.definitions.tlsx",
                                                      trust_forwarded_headers =
                                                        Bool,
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        deployment_environment = String,
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'zipkin, 'otel, 'jaeger |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'trace_id_ratio,
                                                                                    'server_url
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                      trace_id_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      otlp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    authorization_header =
                                                                      String,
                                                                    insecure =
                                                                      Bool,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.40.7", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.1.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.1.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.1.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.1.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.1.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.1.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.1.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.1.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.1.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.1.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.1.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.1.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'text,
                                                  'gelf,
                                                  'json_pretty,
                                                  'json
                                                |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'trace,
                                                  'debug,
                                                  'info,
                                                  'warn,
                                                  'error,
                                                  'fatal,
                                                  'panic
                                                |]
                                              ],
                                        redaction_text = String,
                                      },
                                  required = {},
                                },
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.1.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.1.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.1.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.1.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.1.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.1.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.1.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.1.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      hide_request_paths = Bool,
                                                      host = String,
                                                      metric_name_prefix =
                                                        String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.1.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.1.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.1.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'instana,
                                                  'elastic-apm,
                                                  'datadog,
                                                  'zipkin,
                                                  'jaeger
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    max_tag_value_length =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.40.6", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.2.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.2.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.2.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.2.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.2.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.2.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.2.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.2.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.2.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.2.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.2.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.2.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log = refs."oneOf.1.allOf.1.properties.log",
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.2.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.2.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.2.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.2.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.2.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.2.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.2.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.2.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      hide_request_paths = Bool,
                                                      host = String,
                                                      metric_name_prefix =
                                                        String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.2.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.2.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.2.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          tracing = refs."oneOf.1.allOf.1.properties.tracing",
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.40.5", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.3.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.3.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.3.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.3.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.3.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.3.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.3.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.3.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.3.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.3.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.3.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.3.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log = refs."oneOf.1.allOf.1.properties.log",
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.3.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.3.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.3.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.3.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.3.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.3.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.3.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.3.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      hide_request_paths = Bool,
                                                      host = String,
                                                      metric_name_prefix =
                                                        String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.3.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.3.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.3.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          tracing = refs."oneOf.1.allOf.1.properties.tracing",
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.40.4", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.4.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.4.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.4.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.4.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.4.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.4.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.4.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.4.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.4.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.4.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.4.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.4.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log = refs."oneOf.1.allOf.1.properties.log",
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.4.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.4.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.4.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.4.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.4.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.4.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.4.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.4.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      hide_request_paths = Bool,
                                                      host = String,
                                                      metric_name_prefix =
                                                        String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.4.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.4.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.4.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          tracing = refs."oneOf.1.allOf.1.properties.tracing",
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.40.3", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.5.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.5.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.5.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.5.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.5.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.5.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.5.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.5.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.5.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.5.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.5.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.5.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log = refs."oneOf.1.allOf.1.properties.log",
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.5.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.5.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.5.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.5.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.5.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.5.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.5.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.5.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      hide_request_paths = Bool,
                                                      host = String,
                                                      metric_name_prefix =
                                                        String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.5.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.5.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.5.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          tracing = refs."oneOf.1.allOf.1.properties.tracing",
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.40.2", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.6.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.6.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.6.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.6.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.6.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.6.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.6.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.6.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.6.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.6.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.6.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.6.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log = refs."oneOf.1.allOf.1.properties.log",
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.6.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.6.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.6.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.6.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.6.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.6.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.6.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.6.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      hide_request_paths = Bool,
                                                      host = String,
                                                      metric_name_prefix =
                                                        String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.6.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.6.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.6.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          tracing = refs."oneOf.1.allOf.1.properties.tracing",
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.40.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.7.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.7.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.7.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.7.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.7.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.7.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.7.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.7.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.7.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.7.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.7.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.7.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.7.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.7.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.7.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.7.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.7.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.7.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.7.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.7.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      hide_request_paths = Bool,
                                                      host = String,
                                                      metric_name_prefix =
                                                        String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.7.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.7.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.7.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'zipkin, 'otel, 'jaeger |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'trace_id_ratio,
                                                                                    'server_url
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                      trace_id_ratio =
                                                                                        std.contract.Sequence
                                                                                            [
                                                                                              js2n.number.Maximum
                                                                                                1,
                                                                                              js2n.number.Minimum
                                                                                                0
                                                                                            ],
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      otlp =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    insecure =
                                                                      Bool,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      std.contract.any_of
                                                                          [
                                                                            js2n.string.Matches
                                                                              "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                            js2n.string.Matches
                                                                              "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9]):([0-9]*)$"
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'sampling_ratio
                                                                                  |]
                                                                                ]),
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'None,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      sampling_ratio =
                                                                                        Number,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.40.0", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.8.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.8.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.8.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.8.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.8.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.8.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.8.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.8.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.8.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.8.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.8.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.8.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.8.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.8.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.8.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.8.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.8.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.8.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.8.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.8.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      hide_request_paths = Bool,
                                                      host = String,
                                                      metric_name_prefix =
                                                        String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.8.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.8.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.8.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'elastic-apm,
                                                  'datadog,
                                                  'jaeger,
                                                  'zipkin
                                                |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    max_tag_value_length =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.38.4-beta.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.9.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.9.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.9.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.9.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.9.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.9.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.9.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.9.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.9.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.9.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.9.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'json, 'text |]
                                              ],
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'debug,
                                                  'info,
                                                  'warn,
                                                  'error,
                                                  'fatal,
                                                  'panic
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.9.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.9.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.9.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.9.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.9.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.9.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.9.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.9.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      host = String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.9.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.9.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.9.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.38.5-beta.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.10.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.10.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.10.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.10.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.10.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.10.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.10.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.10.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.10.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.10.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.10.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'json, 'text |]
                                              ],
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'debug,
                                                  'info,
                                                  'warn,
                                                  'error,
                                                  'fatal,
                                                  'panic
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.10.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.10.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.10.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.10.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.10.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.10.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.10.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.10.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      host = String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.10.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.10.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.10.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.38.9-beta.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.11.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.11.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.11.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.11.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.11.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.11.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.11.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.11.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.11.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.11.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.11.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.11.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.11.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.11.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.11.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.11.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.11.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.11.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.11.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.11.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      host = String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.11.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.11.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.11.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.38.14-beta.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.12.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.12.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.12.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.12.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.12.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.12.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.12.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.12.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.12.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.12.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.12.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.12.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.12.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.12.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.12.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.12.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.12.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.12.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.12.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.12.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      host = String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.12.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.12.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.12.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.38.15-beta.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.13.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.13.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.13.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.13.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.13.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.13.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.13.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.13.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.13.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.13.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.13.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.13.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.13.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.13.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.13.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.13.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.13.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.13.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.13.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.13.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      host = String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.13.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.13.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.13.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.38.17-beta.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.14.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.14.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.14.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.14.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.14.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.14.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.14.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.14.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.14.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.14.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.14.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.14.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.14.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.14.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.14.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.14.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.14.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.14.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.14.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.14.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      host = String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.14.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.14.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.14.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'jaeger, 'zipkin |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    max_tag_value_length =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.38.19-beta.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.15.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.15.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.15.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.15.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.15.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.15.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.15.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.15.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.15.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.15.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.15.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.15.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.15.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.15.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.15.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.15.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.15.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.15.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.15.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.15.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      host = String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.15.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.15.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.15.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'jaeger, 'zipkin |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    max_tag_value_length =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.record.Record
                  {
                    additional = 'Some Dyn,
                    patterns = {},
                    properties = { version = js2n.Const "v0.38.20-beta.1", },
                    required = { version = true, },
                  },
                js2n.record.Record
                  {
                    additional = 'None,
                    patterns = {},
                    properties =
                      {
                          access_rules =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        matching_strategy =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'regexp, 'glob |]
                                              ],
                                        repositories =
                                          js2n.array.ArrayOf String,
                                      },
                                  required = {},
                                },
                          authenticators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        anonymous =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      config =
                                                        refs."oneOf.16.allOf.1.definitions.configAuthenticatorsAnonymous",
                                                      enabled =
                                                        refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        bearer_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.16.allOf.1.definitions.configAuthenticatorsBearerToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        cookie_session =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.16.allOf.1.definitions.configAuthenticatorsCookieSession",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        jwt =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.16.allOf.1.definitions.configAuthenticatorsJwt",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        oauth2_client_credentials =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.16.allOf.1.definitions.configAuthenticatorsOauth2ClientCredentials",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        oauth2_introspection =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.16.allOf.1.definitions.configAuthenticatorsOauth2Introspection",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        unauthorized =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          authorizers =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        allow =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        deny =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                        keto_engine_acp_ory =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.16.allOf.1.definitions.configAuthorizersKetoEngineAcpOry",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.16.allOf.1.definitions.configAuthorizersRemote",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        remote_json =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.16.allOf.1.definitions.configAuthorizersRemoteJSON",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                      },
                                  required = {},
                                },
                          errors =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        fallback = js2n.array.ArrayOf String,
                                        handlers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      json =
                                                        std.contract.Sequence
                                                            [
                                                              std.contract.any_of
                                                                [
                                                                  js2n.Null,
                                                                  Bool,
                                                                  Number,
                                                                  String,
                                                                  js2n.record.Record
                                                                    {
                                                                      additional =
                                                                        'Some
                                                                            Dyn,
                                                                      patterns =
                                                                        {},
                                                                      properties =
                                                                        {
                                                                            enabled =
                                                                              Bool,
                                                                          },
                                                                      required =
                                                                        {},
                                                                    },
                                                                  Array Dyn
                                                                ],
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.16.allOf.1.definitions.configErrorsJSON",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ]
                                                            ],
                                                      redirect =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.16.allOf.1.definitions.configErrorsRedirect",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                      www_authenticate =
                                                        std.contract.Sequence
                                                            [
                                                              js2n.OneOf
                                                                [
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                config =
                                                                                  refs."oneOf.16.allOf.1.definitions.configErrorsWWWAuthenticate",
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      true,
                                                                              },
                                                                          required =
                                                                            {
                                                                                config =
                                                                                  true,
                                                                              },
                                                                        },
                                                                      Array Dyn
                                                                    ],
                                                                  std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      js2n.record.Record
                                                                        {
                                                                          additional =
                                                                            'Some
                                                                                Dyn,
                                                                          patterns =
                                                                            {},
                                                                          properties =
                                                                            {
                                                                                enabled =
                                                                                  js2n.Const
                                                                                      false,
                                                                              },
                                                                          required =
                                                                            {},
                                                                        },
                                                                      Array Dyn
                                                                    ]
                                                                ],
                                                              js2n.record.Record
                                                                {
                                                                  additional =
                                                                    'Some Dyn,
                                                                  patterns = {},
                                                                  properties =
                                                                    {
                                                                        enabled =
                                                                          refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                                      },
                                                                  required = {},
                                                                }
                                                            ],
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          log =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        format =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'text, 'json |]
                                              ],
                                        leak_sensitive_values = Bool,
                                        level =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [|
                                                  'panic,
                                                  'fatal,
                                                  'error,
                                                  'warning,
                                                  'info,
                                                  'debug,
                                                  'trace
                                                |]
                                              ],
                                      },
                                  required = {},
                                },
                          mutators =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        cookie =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.16.allOf.1.definitions.configMutatorsCookie",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        header =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.16.allOf.1.definitions.configMutatorsHeader",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        hydrator =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.16.allOf.1.definitions.configMutatorsHydrator",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        id_token =
                                          std.contract.Sequence
                                              [
                                                js2n.OneOf
                                                  [
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  config =
                                                                    refs."oneOf.16.allOf.1.definitions.configMutatorsIdToken",
                                                                  enabled =
                                                                    js2n.Const
                                                                        true,
                                                                },
                                                            required =
                                                              {
                                                                  config = true,
                                                                },
                                                          },
                                                        Array Dyn
                                                      ],
                                                    std.contract.any_of
                                                      [
                                                        js2n.Null,
                                                        Bool,
                                                        Number,
                                                        String,
                                                        js2n.record.Record
                                                          {
                                                            additional =
                                                              'Some Dyn,
                                                            patterns = {},
                                                            properties =
                                                              {
                                                                  enabled =
                                                                    js2n.Const
                                                                        false,
                                                                },
                                                            required = {},
                                                          },
                                                        Array Dyn
                                                      ]
                                                  ],
                                                js2n.record.Record
                                                  {
                                                    additional = 'Some Dyn,
                                                    patterns = {},
                                                    properties =
                                                      {
                                                          enabled =
                                                            refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                        },
                                                    required = {},
                                                  }
                                              ],
                                        noop =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      enabled =
                                                        refs."oneOf.16.allOf.1.definitions.handlerSwitch",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          profiling =
                            std.contract.Sequence
                                [ std.enum.TagOrString, [| '"", 'mem, 'cpu |] ],
                          serve =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        api =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.16.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.16.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.16.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                        prometheus =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      collapse_request_paths =
                                                        Bool,
                                                      host = String,
                                                      metrics_path = String,
                                                      port = std.number.Integer,
                                                    },
                                                required = {},
                                              },
                                        proxy =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      cors =
                                                        refs."oneOf.16.allOf.1.definitions.cors",
                                                      host = String,
                                                      port = std.number.Integer,
                                                      timeout =
                                                        refs."oneOf.16.allOf.1.definitions.serverTimeout",
                                                      tls =
                                                        refs."oneOf.16.allOf.1.definitions.tlsx",
                                                    },
                                                required = {},
                                              },
                                      },
                                  required = {},
                                },
                          tracing =
                            js2n.record.Record
                                {
                                  additional = 'None,
                                  patterns = {},
                                  properties =
                                    {
                                        provider =
                                          std.contract.Sequence
                                              [
                                                std.enum.TagOrString,
                                                [| 'jaeger, 'zipkin |]
                                              ],
                                        providers =
                                          js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      jaeger =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    local_agent_address =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^\\[(([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))]:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    js2n.string.Matches
                                                                                      "^([0-9]{1,3}\\.){3}[0-9]{1,3}:([0-9]*)$",
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    {
                                                                                      _ | Dyn
                                                                                    },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            String
                                                                          ],
                                                                    max_tag_value_length =
                                                                      std.contract.Sequence
                                                                          [
                                                                            std.number.Integer,
                                                                            js2n.number.Minimum
                                                                              0
                                                                          ],
                                                                    propagation =
                                                                      String,
                                                                    sampling =
                                                                      std.contract.Sequence
                                                                          [
                                                                            js2n.record.PropertyNames
                                                                              (std.contract.Sequence
                                                                                [
                                                                                  std.enum.TagOrString,
                                                                                  [|
                                                                                    'server_url,
                                                                                    'value,
                                                                                    'type
                                                                                  |]
                                                                                ]),
                                                                            js2n.OneOf
                                                                              [
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "const",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "rateLimiting",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      std.number.Integer,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ],
                                                                                std.contract.any_of
                                                                                  [
                                                                                    js2n.Null,
                                                                                    Bool,
                                                                                    Number,
                                                                                    String,
                                                                                    js2n.record.Record
                                                                                      {
                                                                                        additional =
                                                                                          'Some
                                                                                              Dyn,
                                                                                        patterns =
                                                                                          {},
                                                                                        properties =
                                                                                          {
                                                                                              type =
                                                                                                js2n.Const
                                                                                                    "probabilistic",
                                                                                              value =
                                                                                                std.contract.Sequence
                                                                                                    [
                                                                                                      js2n.number.Maximum
                                                                                                        1,
                                                                                                      js2n.number.Minimum
                                                                                                        0
                                                                                                    ],
                                                                                            },
                                                                                        required =
                                                                                          {},
                                                                                      },
                                                                                    Array
                                                                                      Dyn
                                                                                  ]
                                                                              ],
                                                                            js2n.record.Record
                                                                              {
                                                                                additional =
                                                                                  'Some
                                                                                      Dyn,
                                                                                patterns =
                                                                                  {},
                                                                                properties =
                                                                                  {
                                                                                      server_url =
                                                                                        String,
                                                                                    },
                                                                                required =
                                                                                  {},
                                                                              }
                                                                          ],
                                                                  },
                                                              required = {},
                                                            },
                                                      zipkin =
                                                        js2n.record.Record
                                                            {
                                                              additional =
                                                                'None,
                                                              patterns = {},
                                                              properties =
                                                                {
                                                                    server_url =
                                                                      String,
                                                                  },
                                                              required = {},
                                                            },
                                                    },
                                                required = {},
                                              },
                                        service_name = String,
                                      },
                                  required = {},
                                },
                          version =
                            js2n.string.Matches
                                "^v(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$",
                        },
                    required = {},
                  }
              ],
            std.contract.Sequence
              [
                js2n.OneOf
                  [
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        js2n.record.Record
                          {
                            additional = 'Some Dyn,
                            patterns = {},
                            properties = { version = js2n.string.MaxLength 0, },
                            required = { version = true, },
                          },
                        Array Dyn
                      ],
                    std.contract.not
                      (std.contract.any_of
                        [
                          js2n.Null,
                          Bool,
                          Number,
                          String,
                          js2n.record.Record
                            {
                              additional = 'Some Dyn,
                              patterns = {},
                              properties = { version = js2n.Always, },
                              required = { version = true, },
                            },
                          Array Dyn
                        ])
                  ],
                refs."oneOf.0.allOf.1"
              ]
          ],
        { _ | Dyn }
      ]