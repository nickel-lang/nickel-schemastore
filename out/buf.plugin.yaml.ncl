# DO NOT EDIT
# This file was automatically generated using json-schema-to-nickel
let js2n
  = import "../lib/main.ncl"
  in
let rec refs
    = {}
    in
  {
      deps
        | Array
          {
            plugin
              | String
              | doc "The reference to the plugin dependency with format `{name}:{plugin_version}`.",
            revision
              | std.number.Integer
              | js2n.number.Minimum 0
              | doc "If specified, the dependency will be to a specific version of a plugin. It is recommended to leave this off (the plugin will depend on the latest revision at time of publishing)."
              | optional,
          }
        | doc "A list of dependencies on other plugins used by Generated SDKs."
        | optional,
      description | String | doc "Description of the plugin." | optional,
      integration_guide_url
        | String
        | doc "The URL to the integration guide for the plugin."
        | optional,
      name
        | String
        | doc "The plugin identity with format `{remote}/{organization_name}/{plugin_name}`.",
      output_languages
        | Array (
          std.contract.Sequence
            [
              std.enum.TagOrString,
              [|
                'c,
                'scala,
                'csharp,
                'php,
                'objective_c,
                'kotlin,
                'ruby,
                'python,
                'rust,
                'dart,
                'java,
                'cpp,
                'swift,
                'typescript,
                'javascript,
                'go
              |]
            ]
        )
        | doc "The output language types generated by the plugin. See the PluginLanguage enum for existing languages. Open a GitHub issue in the Buf CLI (https://github.com/bufbuild/buf) if the output language isn't found for a plugin."
        | optional,
      plugin_version
        | String
        | doc "The plugin version with format`v{semver}`, the `v` prefix is required and the version must be valid [semantic versioning](https://semver.org/).",
      registry
        | {
          cargo
            | {
              deps
                | Array
                  {
                    default_features
                      | Bool
                      | doc "Whether or not to enable default features for the dependency."
                      | optional,
                    features
                      | Array String
                      | doc "The features to enable for the dependency."
                      | optional,
                    name
                      | String
                      | doc "The name of the dependency."
                      | optional,
                    req
                      | String
                      | doc "The version request of the dependency."
                      | optional,
                  }
                | doc "Crates.io dependencies for the Generated SDK."
                | optional,
              rust_version
                | String
                | doc "The rust-version set for the generated crate."
                | optional,
            }
            | doc "Generated SDK configuration for a Rust plugin."
            | optional,
          cmake
            | {}
            | doc "Generated SDK configuration for a CMake plugin."
            | optional,
          go
            | {
              deps
                | Array
                  {
                    module | String | doc "Go module name." | optional,
                    version | String | doc "Go module version." | optional,
                  }
                | doc "A list of Go module requirements. Each requirement corresponds to a require directive in the `go.mod` file. See https://go.dev/ref/mod#go-mod-file-require."
                | optional,
              min_version
                | String
                | doc "The minimum Go version required by the plugin (e.g. `1.19`), used as the go directive in the `go.mod` file. See https://go.dev/ref/mod#go-mod-file-go."
                | optional,
            }
            | doc "Generated SDK configuration for a Go plugin."
            | optional,
          maven
            | {
              additional_runtimes
                | Array
                  {
                    deps
                      | js2n.array.UniqueItems
                      | Array String
                      | doc "Dependencies for the runtime. These override `registry -> maven -> deps` if specified."
                      | optional,
                    name
                      | std.contract.Equal "lite"
                      | doc "The name of the additional runtime. The only known name at this time is `lite` for Protobuf lite runtime support.",
                    opts
                      | Array String
                      | doc "Plugin options for the additional runtime."
                      | optional,
                  }
                | doc "Configures additional supported runtimes."
                | optional,
              compiler
                | {
                  java
                    | {
                      encoding
                        | String
                        | doc "Encoding of source files."
                        | optional,
                      release
                        | std.number.Integer
                        | doc "Target Java release."
                        | optional,
                      source
                        | std.number.Integer
                        | doc "Source bytecode level."
                        | optional,
                      target
                        | std.number.Integer
                        | doc "Target bytecode level."
                        | optional,
                    }
                    | doc "Java compiler settings."
                    | optional,
                  kotlin
                    | {
                      api_version
                        | String
                        | doc "Kotlin API version."
                        | optional,
                      jvm_target
                        | String
                        | doc "JVM bytecode target version"
                        | optional,
                      language_version
                        | String
                        | doc "Kotlin version source compatibility."
                        | optional,
                      version | String | doc "Version of the Kotlin compiler",
                    }
                    | doc "Kotlin compiler settings."
                    | optional,
                }
                | optional,
              deps
                | js2n.array.UniqueItems
                | Array String
                | doc "Runtime dependencies of the generated Java/Kotlin code (in GAV format)."
                | optional,
            }
            | doc "Generated SDK configuration for a Java/Kotlin plugin."
            | optional,
          npm
            | {
              deps
                | Array
                  {
                    package
                      | String
                      | doc "The name of the NPM package dependency."
                      | optional,
                    version
                      | String
                      | doc "The version of the NPM package dependency (see https://docs.npmjs.com/about-semantic-versioning#using-semantic-versioning-to-specify-update-types-your-package-can-accept for more details)."
                      | optional,
                  }
                | doc "NPM package dependencies for the Generated SDK."
                | optional,
              import_style
                | std.enum.TagOrString
                | [| 'commonjs, 'module |]
                | doc "One of either `module` or `commonjs`.",
              rewrite_import_path_suffix
                | String
                | doc "The suffix used in the generated files and their imported dependencies (supported by @bufbuild/protoplugin (https://www.npmjs.com/package/@bufbuild/protoplugin) plugins)."
                | optional,
            }
            | doc "Generated SDK configuration for a JavaScript/TypeScript plugin."
            | optional,
          nuget
            | {
              deps
                | Array
                  {
                    name
                      | String
                      | doc "The package ID of the dependency."
                      | optional,
                    target_frameworks
                      | Array String
                      | doc "The target frameworks the dependency applies to."
                      | optional,
                    version
                      | String
                      | doc "The version range of the dependency."
                      | optional,
                  }
                | doc "nuget.org dependencies for the Generated SDK."
                | optional,
              target_frameworks
                | Array String
                | doc "The target frameworks the generated package supports."
                | optional,
            }
            | doc "Generated SDK configuration for a C# plugin."
            | optional,
          opts
            | Array String
            | doc "Options supplied to the plugin when generating code for the SDK."
            | optional,
          python
            | {
              deps
                | js2n.array.UniqueItems
                | Array String
                | doc "Runtime dependencies of the generated code."
                | optional,
              package_type
                | std.enum.TagOrString
                | [| 'stub-only, 'runtime |]
                | doc "One of `runtime` or `stub-only`.",
              requires_python
                | String
                | doc "Specifies the `Requires-Python` of the generated package."
                | optional,
            }
            | doc "Generated SDK configuration for a Python plugin."
            | optional,
          swift
            | {
              deps
                | Array
                  {
                    package
                      | String
                      | doc "Name of the Swift package."
                      | optional,
                    platforms
                      | {
                        ios
                          | String
                          | doc "Version of the iOS platform."
                          | optional,
                        macos
                          | String
                          | doc "Version of the macOS platform."
                          | optional,
                        tvos
                          | String
                          | doc "Version of the tvOS platform."
                          | optional,
                        watchos
                          | String
                          | doc "Version of the watchOS platform."
                          | optional,
                      }
                      | optional,
                    products
                      | Array String
                      | doc "Products to import."
                      | optional,
                    source
                      | String
                      | doc "URL of the Swift package."
                      | optional,
                    swift_versions
                      | Array String
                      | doc "Versions of Swift the package supports."
                      | optional,
                    version
                      | String
                      | doc "Version of the Swift package."
                      | optional,
                  }
                | doc "Dependencies of the generated code."
                | optional,
            }
            | doc "Generated SDK configuration for a Swift plugin."
            | optional,
        }
        | doc "Configuration to enable a plugin for use with Generated SDKs."
        | optional,
      source_url
        | String
        | doc "URL to the source code of the Protobuf plugin."
        | optional,
      spdx_license_id
        | String
        | doc "The license id for the plugin from https://spdx.org/licenses."
        | optional,
      version
        | std.contract.Equal "v1"
        | doc "The YAML configuration version, must be `v1`.",
      ..
    }