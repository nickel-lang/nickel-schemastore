# DO NOT EDIT
# This file was automatically generated using json-schema-to-nickel
let js2n
  = import "../lib/main.ncl"
  in
let rec refs
    = {
      "oneOf.3.allOf.1.allOf.0" =
        {
            apiVersion
              | std.enum.TagOrString
              | [| 'v3 |]
              | doc "The schema version of entity type. The field is known as schema-version in the previous version",
            datadog
              | { _ | Dyn }
              | doc "The Datadog product associations for the entity."
              | optional,
            extensions
              | {  .. }
              | doc "Custom extensions. This is the free-formed field to send client side metadata. No Datadog features are affected by this field."
              | optional,
            integrations
              | { _ | Dyn }
              | doc "The external integrations of the entity."
              | optional,
            kind
              | js2n.string.MinLength 1
              | doc "Kind describes the type of entity",
            metadata
              | {
                additionalOwners
                  | Array (
                    std.contract.any_of
                      [
                        js2n.Null,
                        Bool,
                        Number,
                        String,
                        {
                          name | String | doc "Team name",
                          type | String | doc "Team type" | optional,
                          ..
                        },
                        Array Dyn
                      ]
                  )
                  | doc "The additional owners of the entity, usually a team"
                  | optional,
                contacts
                  | Array (
                    std.contract.Sequence
                      [
                        js2n.IfThenElse
                          (std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              String,
                              js2n.record.Record
                                {
                                  additional = 'Some Dyn,
                                  patterns = {},
                                  properties = { type = js2n.Const "email", },
                                  required = {},
                                },
                              Array Dyn
                            ])
                          (std.contract.any_of
                            [
                              js2n.Null,
                              Bool,
                              Number,
                              String,
                              {
                                contact
                                  | std.contract.any_of
                                    [
                                      js2n.Null,
                                      Bool,
                                      Number,
                                      String,
                                      { _ | Dyn },
                                      Array Dyn
                                    ]
                                  | optional,
                                ..
                              },
                              Array Dyn
                            ]) js2n.Always,
                        {
                          contact | String | doc "Contact value",
                          name
                            | js2n.string.MinLength 2
                            | doc "Contact name"
                            | optional,
                          type
                            | String
                            | doc "Contact type. See examples for a list of recognizable types",
                        }
                      ]
                  )
                  | doc "A list of contacts for the entity"
                  | optional,
                description
                  | String
                  | doc "Short description of the entity. The UI can leverage the description for display"
                  | optional,
                displayName
                  | String
                  | doc "User friendly name of the entity. The UI can leverage the displayName for display"
                  | optional,
                id
                  | js2n.string.MinLength 1
                  | doc "A read-only globally unique identifier for the entity generated by Datadog.  User supplied values are ignored."
                  | optional,
                inheritFrom
                  | String
                  | doc "The entity reference from which to inherit metadata"
                  | optional,
                links
                  | Array
                    {
                      name | String | doc "Link name",
                      provider
                        | String
                        | doc "Link provider. See examples for a list of recognizable providers"
                        | optional,
                      type
                        | String
                        | doc "Link type. See examples for a list of recognizable types",
                      url | String | doc "Link url",
                    }
                  | doc "A list of links for the entity"
                  | optional,
                managed
                  | {  .. }
                  | doc "A read-only set of Datadog managed attributes generated by Datadog.  User supplied values are ignored."
                  | optional,
                name
                  | js2n.string.MinLength 1
                  | doc "Unique name given to an entity under the kind/namespace ",
                owner
                  | String
                  | doc "The owner of the entity, usually a team"
                  | optional,
                tags | Array String | doc "A set of custom tags" | optional,
              }
              | doc "Metadata fields common to all versions/kinds of an entity.",
            spec | { _ | Dyn } | doc "The spec of the entity." | optional,
          },
      "oneOf.3.allOf.1.allOf.1.properties.datadog.properties.codeLocations" =
        Array Dyn,
      "oneOf.3.allOf.1.allOf.1.properties.datadog.properties.events" =
        Array (
            std.contract.any_of
              [
                js2n.Null,
                Bool,
                Number,
                String,
                {
                  name | String | doc "The name of the query" | optional,
                  query | String | doc "The query to run" | optional,
                  ..
                },
                Array Dyn
              ]
          ),
      "oneOf.3.allOf.1.allOf.1.properties.datadog.properties.logs" =
        Array (
            std.contract.any_of
              [
                js2n.Null,
                Bool,
                Number,
                String,
                {
                  name | String | doc "The name of the query" | optional,
                  query | String | doc "The query to run" | optional,
                  ..
                },
                Array Dyn
              ]
          ),
      "oneOf.3.allOf.1.allOf.1.properties.datadog.properties.performanceData" =
        {
            tags
              | Array String
              | doc "A list of APM entity tags that associates the APM Stats data with the entity"
              | optional,
          },
      "oneOf.3.allOf.1.allOf.1.properties.datadog.properties.pipelines" =
        {
            fingerprints
              | Array String
              | doc "A list of CI Fingerprints that associate CI Pipelines with the entity"
              | optional,
          },
      "oneOf.3.allOf.1.allOf.1.properties.integrations" =
        {
            opsgenie
              | {
                region
                  | js2n.string.MinLength 1
                  | doc "The region for the Opsgenie integration."
                  | optional,
                serviceURL
                  | js2n.string.MinLength 1
                  | doc "The service url for the Opsgenie integration.",
              }
              | doc "An Opsgenie integration schema"
              | optional,
            pagerduty
              | {
                serviceURL
                  | js2n.string.MinLength 1
                  | doc "The service url for the PagerDuty integration.",
              }
              | doc "An PagerDuty integration schema"
              | optional,
          },
    }
    in
  js2n.OneOf
      [
        std.contract.Sequence
          [
            js2n.record.Record
              {
                additional = 'Some Dyn,
                patterns = {},
                properties = { schema-version = js2n.Const "v2", },
                required = {},
              },
            js2n.record.Record
              {
                additional = 'None,
                patterns = {},
                properties =
                  {
                      contacts =
                        js2n.array.ArrayOf
                            (std.contract.any_of
                              [
                                js2n.Null,
                                Bool,
                                { _ | Dyn },
                                Array Dyn,
                                Number,
                                String
                              ]),
                      dd-service = js2n.string.MinLength 1,
                      dd-team =
                        std.contract.Sequence
                            [
                              js2n.string.MinLength 1,
                              js2n.string.Matches "[^A-Z ]+"
                            ],
                      docs =
                        js2n.array.ArrayOf
                            (std.contract.any_of
                              [
                                js2n.Null,
                                Bool,
                                { _ | Dyn },
                                Array Dyn,
                                Number,
                                String
                              ]),
                      extensions = { _ | js2n.Always },
                      integrations =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    opsgenie =
                                      js2n.record.Record
                                          {
                                            additional = 'None,
                                            patterns = {},
                                            properties =
                                              {
                                                  region =
                                                    std.contract.Sequence
                                                        [
                                                          std.enum.TagOrString,
                                                          [| 'EU, 'US |]
                                                        ],
                                                  service-url =
                                                    js2n.string.Matches
                                                        "^(https?://)?[a-zA-Z\\d_\\-.]+\\.opsgenie\\.com/service/([a-zA-Z\\d_\\-]+)/?$",
                                                },
                                            required = { service-url = true, },
                                          },
                                    pagerduty =
                                      js2n.string.Matches
                                          "^(https?://)?[a-zA-Z\\d_\\-.]+\\.pagerduty\\.com/service-directory/(P[a-zA-Z\\d_\\-]+)/?$",
                                  },
                              required = {},
                            },
                      links =
                        js2n.array.ArrayOf
                            (std.contract.any_of
                              [
                                js2n.Null,
                                Bool,
                                { _ | Dyn },
                                Array Dyn,
                                Number,
                                String
                              ]),
                      repos =
                        js2n.array.ArrayOf
                            (std.contract.any_of
                              [
                                js2n.Null,
                                Bool,
                                { _ | Dyn },
                                Array Dyn,
                                Number,
                                String
                              ]),
                      schema-version =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| 'v2 |] ],
                      tags = js2n.array.ArrayOf String,
                      team = js2n.string.MinLength 1,
                    },
                required = { dd-service = true, schema-version = true, },
              }
          ],
        std.contract.Sequence
          [
            js2n.record.Record
              {
                additional = 'Some Dyn,
                patterns = {},
                properties = { schema-version = js2n.Const "v2.1", },
                required = {},
              },
            js2n.record.Record
              {
                additional = 'None,
                patterns = {},
                properties =
                  {
                      application = String,
                      contacts =
                        js2n.array.ArrayOf
                            (std.contract.any_of
                              [
                                js2n.Null,
                                Bool,
                                { _ | Dyn },
                                Array Dyn,
                                Number,
                                String
                              ]),
                      dd-service = String,
                      description = String,
                      extensions = { _ | js2n.Always },
                      integrations =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    opsgenie =
                                      js2n.record.Record
                                          {
                                            additional = 'None,
                                            patterns = {},
                                            properties =
                                              {
                                                  region =
                                                    std.contract.Sequence
                                                        [
                                                          std.enum.TagOrString,
                                                          [| 'EU, 'US |]
                                                        ],
                                                  service-url =
                                                    js2n.string.Matches
                                                        "^(https?://)?[a-zA-Z\\d_\\-.]+\\.opsgenie\\.com/service/([a-zA-Z\\d_\\-]+)/?$",
                                                },
                                            required = { service-url = true, },
                                          },
                                    pagerduty =
                                      js2n.record.Record
                                          {
                                            additional = 'None,
                                            patterns = {},
                                            properties =
                                              {
                                                  service-url =
                                                    js2n.string.Matches
                                                        "^(https?://)?[a-zA-Z\\d_\\-.]+\\.pagerduty\\.com/service-directory/(P[a-zA-Z\\d_\\-]+)/?$",
                                                },
                                            required = { service-url = true, },
                                          },
                                  },
                              required = {},
                            },
                      lifecycle = String,
                      links =
                        js2n.array.ArrayOf
                            (std.contract.any_of
                              [
                                js2n.Null,
                                Bool,
                                { _ | Dyn },
                                Array Dyn,
                                Number,
                                String
                              ]),
                      schema-version =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| '"v2.1" |] ],
                      tags = js2n.array.ArrayOf String,
                      team = String,
                      tier = String,
                    },
                required = { dd-service = true, schema-version = true, },
              }
          ],
        std.contract.Sequence
          [
            js2n.record.Record
              {
                additional = 'Some Dyn,
                patterns = {},
                properties = { schema-version = js2n.Const "v2.2", },
                required = {},
              },
            js2n.record.Record
              {
                additional = 'None,
                patterns = {},
                properties =
                  {
                      application = String,
                      ci-pipeline-fingerprints = js2n.array.ArrayOf String,
                      contacts =
                        js2n.array.ArrayOf
                            (std.contract.any_of
                              [
                                js2n.Null,
                                Bool,
                                { _ | Dyn },
                                Array Dyn,
                                Number,
                                String
                              ]),
                      dd-service = String,
                      description = String,
                      extensions = { _ | js2n.Always },
                      integrations =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    opsgenie =
                                      js2n.record.Record
                                          {
                                            additional = 'None,
                                            patterns = {},
                                            properties =
                                              {
                                                  region =
                                                    std.contract.Sequence
                                                        [
                                                          std.enum.TagOrString,
                                                          [| 'EU, 'US |]
                                                        ],
                                                  service-url =
                                                    js2n.string.Matches
                                                        "^(https?://)?[a-zA-Z\\d_\\-.]+\\.opsgenie\\.com/service/([a-zA-Z\\d_\\-]+)/?$",
                                                },
                                            required = { service-url = true, },
                                          },
                                    pagerduty =
                                      js2n.record.Record
                                          {
                                            additional = 'None,
                                            patterns = {},
                                            properties =
                                              {
                                                  service-url =
                                                    js2n.string.Matches
                                                        "^(https?://)?[a-zA-Z\\d_\\-.]+\\.pagerduty\\.com/service-directory/(P[a-zA-Z\\d_\\-]+)/?$",
                                                },
                                            required = { service-url = true, },
                                          },
                                  },
                              required = {},
                            },
                      languages = js2n.array.ArrayOf String,
                      lifecycle = String,
                      links =
                        js2n.array.ArrayOf
                            (std.contract.any_of
                              [
                                js2n.Null,
                                Bool,
                                { _ | Dyn },
                                Array Dyn,
                                Number,
                                String
                              ]),
                      schema-version =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| '"v2.2" |] ],
                      tags = js2n.array.ArrayOf String,
                      team = String,
                      tier = String,
                      type =
                        std.contract.Sequence
                            [
                              std.enum.TagOrString,
                              [|
                                'custom,
                                'mobile,
                                'browser,
                                'function,
                                'cache,
                                'db,
                                'web
                              |]
                            ],
                    },
                required = { dd-service = true, schema-version = true, },
              }
          ],
        std.contract.Sequence
          [
            js2n.record.Record
              {
                additional = 'Some Dyn,
                patterns = {},
                properties =
                  {
                      apiVersion = js2n.Const "v3",
                      kind = js2n.Const "service",
                    },
                required = {},
              },
            js2n.record.Record
              {
                additional = 'None,
                patterns = {},
                properties =
                  {
                      apiVersion =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| 'v3 |] ],
                      datadog = { _ | Dyn },
                      extensions = { _ | js2n.Always },
                      integrations = { _ | Dyn },
                      kind = js2n.string.MinLength 1,
                      metadata =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    additionalOwners =
                                      js2n.array.ArrayOf
                                          (std.contract.any_of
                                            [
                                              js2n.Null,
                                              Bool,
                                              Number,
                                              String,
                                              js2n.record.Record
                                                {
                                                  additional = 'Some Dyn,
                                                  patterns = {},
                                                  properties =
                                                    {
                                                        name = String,
                                                        type = String,
                                                      },
                                                  required = { name = true, },
                                                },
                                              Array Dyn
                                            ]),
                                    contacts =
                                      js2n.array.ArrayOf
                                          (std.contract.Sequence
                                            [
                                              js2n.IfThenElse
                                                (std.contract.any_of
                                                  [
                                                    js2n.Null,
                                                    Bool,
                                                    Number,
                                                    String,
                                                    js2n.record.Record
                                                      {
                                                        additional = 'Some Dyn,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              type =
                                                                js2n.Const
                                                                    "email",
                                                            },
                                                        required = {},
                                                      },
                                                    Array Dyn
                                                  ])
                                                (std.contract.any_of
                                                  [
                                                    js2n.Null,
                                                    Bool,
                                                    Number,
                                                    String,
                                                    js2n.record.Record
                                                      {
                                                        additional = 'Some Dyn,
                                                        patterns = {},
                                                        properties =
                                                          {
                                                              contact =
                                                                std.contract.any_of
                                                                    [
                                                                      js2n.Null,
                                                                      Bool,
                                                                      Number,
                                                                      String,
                                                                      {
                                                                        _ | Dyn
                                                                      },
                                                                      Array Dyn
                                                                    ],
                                                            },
                                                        required = {},
                                                      },
                                                    Array Dyn
                                                  ]) js2n.Always,
                                              js2n.record.Record
                                                {
                                                  additional = 'None,
                                                  patterns = {},
                                                  properties =
                                                    {
                                                        contact = String,
                                                        name =
                                                          js2n.string.MinLength
                                                              2,
                                                        type = String,
                                                      },
                                                  required =
                                                    {
                                                        contact = true,
                                                        type = true,
                                                      },
                                                }
                                            ]),
                                    description = String,
                                    displayName = String,
                                    id = js2n.string.MinLength 1,
                                    inheritFrom = String,
                                    links =
                                      js2n.array.ArrayOf
                                          (js2n.record.Record
                                            {
                                              additional = 'None,
                                              patterns = {},
                                              properties =
                                                {
                                                    name = String,
                                                    provider = String,
                                                    type = String,
                                                    url = String,
                                                  },
                                              required =
                                                {
                                                    name = true,
                                                    type = true,
                                                    url = true,
                                                  },
                                            }),
                                    managed = { _ | js2n.Always },
                                    name = js2n.string.MinLength 1,
                                    owner = String,
                                    tags = js2n.array.ArrayOf String,
                                  },
                              required = { name = true, },
                            },
                      spec = { _ | Dyn },
                    },
                required = { apiVersion = true, kind = true, metadata = true, },
              },
            js2n.record.Record
              {
                additional = 'None,
                patterns = {},
                properties =
                  {
                      apiVersion =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| 'v3 |] ],
                      datadog =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    codeLocations = Array Dyn,
                                    events =
                                      js2n.array.ArrayOf
                                          (std.contract.any_of
                                            [
                                              js2n.Null,
                                              Bool,
                                              Number,
                                              String,
                                              js2n.record.Record
                                                {
                                                  additional = 'Some Dyn,
                                                  patterns = {},
                                                  properties =
                                                    {
                                                        name = String,
                                                        query = String,
                                                      },
                                                  required = {},
                                                },
                                              Array Dyn
                                            ]),
                                    logs =
                                      js2n.array.ArrayOf
                                          (std.contract.any_of
                                            [
                                              js2n.Null,
                                              Bool,
                                              Number,
                                              String,
                                              js2n.record.Record
                                                {
                                                  additional = 'Some Dyn,
                                                  patterns = {},
                                                  properties =
                                                    {
                                                        name = String,
                                                        query = String,
                                                      },
                                                  required = {},
                                                },
                                              Array Dyn
                                            ]),
                                    performanceData =
                                      js2n.record.Record
                                          {
                                            additional = 'None,
                                            patterns = {},
                                            properties =
                                              {
                                                  tags =
                                                    js2n.array.ArrayOf String,
                                                },
                                            required = {},
                                          },
                                    pipelines =
                                      js2n.record.Record
                                          {
                                            additional = 'None,
                                            patterns = {},
                                            properties =
                                              {
                                                  fingerprints =
                                                    js2n.array.ArrayOf String,
                                                },
                                            required = {},
                                          },
                                  },
                              required = {},
                            },
                      extensions = { _ | Dyn },
                      integrations =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    opsgenie =
                                      js2n.record.Record
                                          {
                                            additional = 'None,
                                            patterns = {},
                                            properties =
                                              {
                                                  region =
                                                    js2n.string.MinLength 1,
                                                  serviceURL =
                                                    js2n.string.MinLength 1,
                                                },
                                            required = { serviceURL = true, },
                                          },
                                    pagerduty =
                                      js2n.record.Record
                                          {
                                            additional = 'None,
                                            patterns = {},
                                            properties =
                                              {
                                                  serviceURL =
                                                    js2n.string.MinLength 1,
                                                },
                                            required = { serviceURL = true, },
                                          },
                                  },
                              required = {},
                            },
                      kind =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| 'service |] ],
                      metadata = { _ | Dyn },
                      spec =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    componentOf = js2n.array.ArrayOf String,
                                    dependsOn = js2n.array.ArrayOf String,
                                    languages = js2n.array.ArrayOf String,
                                    lifecycle = js2n.string.MinLength 1,
                                    tier = js2n.string.MinLength 1,
                                    type = String,
                                  },
                              required = {},
                            },
                    },
                required = { apiVersion = true, kind = true, metadata = true, },
              }
          ],
        std.contract.Sequence
          [
            refs."oneOf.3.allOf.1.allOf.0",
            js2n.record.Record
              {
                additional = 'Some Dyn,
                patterns = {},
                properties =
                  { apiVersion = js2n.Const "v3", kind = js2n.Const "queue", },
                required = {},
              },
            js2n.record.Record
              {
                additional = 'None,
                patterns = {},
                properties =
                  {
                      apiVersion =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| 'v3 |] ],
                      datadog =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    events =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.events",
                                    logs =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.logs",
                                    performanceData =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.performanceData",
                                  },
                              required = {},
                            },
                      extensions = { _ | Dyn },
                      integrations =
                        refs."oneOf.3.allOf.1.allOf.1.properties.integrations",
                      kind =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| 'queue |] ],
                      metadata = { _ | Dyn },
                      spec =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    componentOf = js2n.array.ArrayOf String,
                                    lifecycle = js2n.string.MinLength 1,
                                    tier = js2n.string.MinLength 1,
                                    type = String,
                                  },
                              required = {},
                            },
                    },
                required = {},
              }
          ],
        std.contract.Sequence
          [
            refs."oneOf.3.allOf.1.allOf.0",
            js2n.record.Record
              {
                additional = 'Some Dyn,
                patterns = {},
                properties =
                  {
                      apiVersion = js2n.Const "v3",
                      kind = js2n.Const "datastore",
                    },
                required = {},
              },
            js2n.record.Record
              {
                additional = 'None,
                patterns = {},
                properties =
                  {
                      apiVersion =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| 'v3 |] ],
                      datadog =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    events =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.events",
                                    logs =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.logs",
                                    performanceData =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.performanceData",
                                  },
                              required = {},
                            },
                      extensions = { _ | Dyn },
                      integrations =
                        refs."oneOf.3.allOf.1.allOf.1.properties.integrations",
                      kind =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| 'datastore |] ],
                      metadata = { _ | Dyn },
                      spec =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    componentOf = js2n.array.ArrayOf String,
                                    lifecycle = js2n.string.MinLength 1,
                                    tier = js2n.string.MinLength 1,
                                    type = String,
                                  },
                              required = {},
                            },
                    },
                required = {},
              }
          ],
        std.contract.Sequence
          [
            refs."oneOf.3.allOf.1.allOf.0",
            js2n.record.Record
              {
                additional = 'Some Dyn,
                patterns = {},
                properties =
                  { apiVersion = js2n.Const "v3", kind = js2n.Const "api", },
                required = {},
              },
            js2n.record.Record
              {
                additional = 'None,
                patterns = {},
                properties =
                  {
                      apiVersion =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| 'v3 |] ],
                      datadog =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    codeLocations =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.codeLocations",
                                    events =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.events",
                                    logs =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.logs",
                                    performanceData =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.performanceData",
                                    pipelines =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.pipelines",
                                  },
                              required = {},
                            },
                      extensions = { _ | Dyn },
                      integrations =
                        refs."oneOf.3.allOf.1.allOf.1.properties.integrations",
                      kind =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| 'api |] ],
                      metadata = { _ | Dyn },
                      spec =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    componentOf = js2n.array.ArrayOf String,
                                    implementedBy = js2n.array.ArrayOf String,
                                    interface =
                                      std.contract.Sequence
                                          [
                                            js2n.OneOf
                                              [
                                                std.contract.any_of
                                                  [
                                                    js2n.Null,
                                                    Bool,
                                                    Number,
                                                    String,
                                                    js2n.record.Required
                                                      [ "fileRef" ],
                                                    Array Dyn
                                                  ],
                                                std.contract.any_of
                                                  [
                                                    js2n.Null,
                                                    Bool,
                                                    Number,
                                                    String,
                                                    js2n.record.Required
                                                      [ "definition" ],
                                                    Array Dyn
                                                  ]
                                              ],
                                            js2n.record.Record
                                              {
                                                additional = 'None,
                                                patterns = {},
                                                properties =
                                                  {
                                                      definition = { _ | Dyn },
                                                      fileRef = String,
                                                    },
                                                required = {},
                                              }
                                          ],
                                    lifecycle = js2n.string.MinLength 1,
                                    tier = js2n.string.MinLength 1,
                                    type = String,
                                  },
                              required = {},
                            },
                    },
                required = {},
              }
          ],
        std.contract.Sequence
          [
            refs."oneOf.3.allOf.1.allOf.0",
            js2n.record.Record
              {
                additional = 'Some Dyn,
                patterns = {},
                properties =
                  { apiVersion = js2n.Const "v3", kind = js2n.Const "system", },
                required = {},
              },
            js2n.record.Record
              {
                additional = 'None,
                patterns = {},
                properties =
                  {
                      apiVersion =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| 'v3 |] ],
                      datadog =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    codeLocations =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.codeLocations",
                                    events =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.events",
                                    logs =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.logs",
                                    performanceData =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.performanceData",
                                    pipelines =
                                      refs."oneOf.3.allOf.1.allOf.1.properties.datadog.properties.pipelines",
                                  },
                              required = {},
                            },
                      extensions = { _ | Dyn },
                      integrations =
                        refs."oneOf.3.allOf.1.allOf.1.properties.integrations",
                      kind =
                        std.contract.Sequence
                            [ std.enum.TagOrString, [| 'system |] ],
                      metadata = { _ | Dyn },
                      spec =
                        js2n.record.Record
                            {
                              additional = 'None,
                              patterns = {},
                              properties =
                                {
                                    componentOf = js2n.array.ArrayOf String,
                                    components = js2n.array.ArrayOf String,
                                    lifecycle = js2n.string.MinLength 1,
                                    tier = js2n.string.MinLength 1,
                                  },
                              required = {},
                            },
                    },
                required = {},
              }
          ]
      ]