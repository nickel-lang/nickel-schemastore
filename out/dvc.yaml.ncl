# DO NOT EDIT
# This file was automatically generated using json-schema-to-nickel
let js2n
  = import "../lib/main.ncl"
  in
let rec refs
    = {
      "definitions.CustomParamFileKeys" =
        {
            _ | std.contract.Sequence
              [
                js2n.array.UniqueItems,
                Array (
                  std.contract.Sequence [ refs."definitions.ParamKey", String ]
                )
              ]
          },
      "definitions.DepModel" = String,
      "definitions.Dependencies" =
        std.contract.Sequence
            [
              js2n.array.UniqueItems,
              Array (
                std.contract.Sequence [ refs."definitions.DepModel", String ]
              )
            ],
      "definitions.EmptyParamFileKeys" = { _ | js2n.Null },
      "definitions.EmptyTopLevelPlotFlags" = js2n.Null,
      "definitions.ForeachDo" =
        {
            do
              | refs."definitions.Stage"
              | { _ | Dyn }
              | doc "Parametrized stage definition that'll be substituted over for each of the value from the foreach data.",
            foreach
              | std.contract.any_of
                [
                  js2n.string.Matches "^\\$\\{.*?\\}$",
                  Array js2n.Always,
                  { _ | Dyn }
                ]
              | doc m%"
                Iterable to loop through in foreach. Can be a parametrized string, list or a dict.
                
                The stages will be generated by iterating through this data, by substituting data in the `do` block.
              "%,
          },
      "definitions.Matrix" =
        {
            always_changed
              | Bool
              | doc "Assume stage as always changed"
              | optional,
            cmd
              | std.contract.any_of [ String, Array String ]
              | doc m%"
                (Required) Command to run (anything your system terminal can run).
                
                Can be a string or a list of commands.
              "%,
            deps
              | refs."definitions.Dependencies"
              | Array Dyn
              | doc "List of the dependencies for the stage."
              | optional,
            desc | String | doc "Description of the stage" | optional,
            frozen | Bool | doc "Assume stage as unchanged" | optional,
            matrix
              | {
                _ | std.contract.any_of
                  [ Array js2n.Always, js2n.string.Matches "^\\$\\{.*?\\}$" ]
              }
              | doc m%"
                Generate stages based on combination of variables.
                
                The variable can be a list of values, or a parametrized string referencing a list.
              "%,
            meta
              | std.contract.any_of
                [ js2n.Null, Bool, Number, String, { _ | Dyn }, Array Dyn ]
              | doc "Additional information/metadata"
              | optional,
            metrics
              | refs."definitions.Outs"
              | Array Dyn
              | doc "List of metrics of the stage written to JSON/TOML/YAML."
              | optional,
            outs
              | refs."definitions.Outs"
              | Array Dyn
              | doc "List of the outputs of the stage."
              | optional,
            params
              | refs."definitions.Params"
              | Array Dyn
              | doc m%"
                List of dot-separated parameter dependency keys to track from `params.yaml`.
                
                May contain other YAML/JSON/TOML/Python parameter file names, with a sub-list of the param names to track in them (leave empty to include all).
              "%
              | optional,
            plots
              | refs."definitions.Plots"
              | Array Dyn
              | doc m%"
                List of plots of the stage for visualization.
                
                Plots may be written to JSON/YAML/CSV/TSV for data or JPEG/GIF/PNG for images.
              "%
              | optional,
            vars
              | refs."definitions.Vars"
              | Array Dyn
              | doc m%"
                List of stage-specific values for substitution.
                
                May include any dict or a path to a params file.
                
                Use in the stage with the `${}` substitution expression.
              "%
              | optional,
            wdir
              | String
              | doc "Working directory for the cmd, relative to `dvc.yaml`"
              | optional,
          },
      "definitions.Out" =
        std.contract.any_of
            [
              String,
              {
                _ | std.contract.Sequence
                  [ refs."definitions.OutFlags", { _ | Dyn } ]
              }
            ],
      "definitions.OutFlags" =
        {
            cache | Bool | doc "Cache output by DVC" | optional,
            checkpoint
              | Bool
              | doc "Indicate that the output is associated with in-code checkpoints"
              | optional,
            desc | String | doc "User description for the output" | optional,
            labels
              | js2n.array.UniqueItems
              | Array String
              | doc "User assigned labels of the output"
              | optional,
            meta
              | { _ | Dyn }
              | doc "Custom metadata of the output."
              | optional,
            persist | Bool | doc "Persist output between runs" | optional,
            push
              | Bool
              | doc "Whether the output should be pushed to remote during `dvc push`"
              | optional,
            remote
              | String
              | doc "Name of the remote to use for pushing/fetching"
              | optional,
            type | String | doc "User assigned type of the output" | optional,
          },
      "definitions.Outs" =
        std.contract.Sequence
            [ js2n.array.UniqueItems, Array refs."definitions.Out" ],
      "definitions.Param" =
        js2n.OneOf
            [
              std.contract.Sequence [ refs."definitions.ParamKey", String ],
              std.contract.Sequence
                [ refs."definitions.CustomParamFileKeys", { _ | Dyn } ],
              std.contract.Sequence
                [ refs."definitions.EmptyParamFileKeys", { _ | Dyn } ]
            ],
      "definitions.ParamKey" = String,
      "definitions.Params" =
        std.contract.Sequence
            [ js2n.array.UniqueItems, Array refs."definitions.Param" ],
      "definitions.Plot" =
        std.contract.any_of
            [
              String,
              {
                _ | std.contract.Sequence
                  [ refs."definitions.PlotFlags", { _ | Dyn } ]
              }
            ],
      "definitions.PlotFlags" =
        {
            cache | Bool | doc "Cache output by DVC" | optional,
            checkpoint
              | Bool
              | doc "Indicate that the output is associated with in-code checkpoints"
              | optional,
            desc | String | doc "User description for the output" | optional,
            header
              | Bool
              | doc "Whether the target CSV or TSV has a header or not"
              | optional,
            labels
              | js2n.array.UniqueItems
              | Array String
              | doc "User assigned labels of the output"
              | optional,
            meta
              | { _ | Dyn }
              | doc "Custom metadata of the output."
              | optional,
            persist | Bool | doc "Persist output between runs" | optional,
            push
              | Bool
              | doc "Whether the output should be pushed to remote during `dvc push`"
              | optional,
            remote
              | String
              | doc "Name of the remote to use for pushing/fetching"
              | optional,
            template | String | doc "Default plot template" | optional,
            title | String | doc "Default plot title" | optional,
            type | String | doc "User assigned type of the output" | optional,
            x
              | String
              | doc "Default field name to use as x-axis data"
              | optional,
            x_label | String | doc "Default label for the x-axis" | optional,
            y
              | String
              | doc "Default field name to use as y-axis data"
              | optional,
            y_label | String | doc "Default label for the y-axis" | optional,
          },
      "definitions.Plots" =
        std.contract.Sequence
            [ js2n.array.UniqueItems, Array refs."definitions.Plot" ],
      "definitions.Stage" =
        {
            always_changed
              | Bool
              | doc "Assume stage as always changed"
              | optional,
            cmd
              | std.contract.any_of [ String, Array String ]
              | doc m%"
                (Required) Command to run (anything your system terminal can run).
                
                Can be a string or a list of commands.
              "%,
            deps
              | refs."definitions.Dependencies"
              | Array Dyn
              | doc "List of the dependencies for the stage."
              | optional,
            desc | String | doc "Description of the stage" | optional,
            frozen | Bool | doc "Assume stage as unchanged" | optional,
            meta
              | std.contract.any_of
                [ js2n.Null, Bool, Number, String, { _ | Dyn }, Array Dyn ]
              | doc "Additional information/metadata"
              | optional,
            metrics
              | refs."definitions.Outs"
              | Array Dyn
              | doc "List of metrics of the stage written to JSON/TOML/YAML."
              | optional,
            outs
              | refs."definitions.Outs"
              | Array Dyn
              | doc "List of the outputs of the stage."
              | optional,
            params
              | refs."definitions.Params"
              | Array Dyn
              | doc m%"
                List of dot-separated parameter dependency keys to track from `params.yaml`.
                
                May contain other YAML/JSON/TOML/Python parameter file names, with a sub-list of the param names to track in them (leave empty to include all).
              "%
              | optional,
            plots
              | refs."definitions.Plots"
              | Array Dyn
              | doc m%"
                List of plots of the stage for visualization.
                
                Plots may be written to JSON/YAML/CSV/TSV for data or JPEG/GIF/PNG for images.
              "%
              | optional,
            vars
              | refs."definitions.Vars"
              | Array Dyn
              | doc m%"
                List of stage-specific values for substitution.
                
                May include any dict or a path to a params file.
                
                Use in the stage with the `${}` substitution expression.
              "%
              | optional,
            wdir
              | String
              | doc "Working directory for the cmd, relative to `dvc.yaml`"
              | optional,
          },
      "definitions.TopLevelArtifactFlags" =
        {
            desc | String | doc "Description for the artifact" | optional,
            labels
              | js2n.array.UniqueItems
              | Array String
              | doc "Labels for the artifact"
              | optional,
            meta
              | { _ | Dyn }
              | doc "Custom metadata for the artifact"
              | optional,
            path | String | doc "Path to the artifact",
            type | String | doc "Type of the artifact" | optional,
          },
      "definitions.TopLevelArtifacts" =
        js2n.record.Record
            {
              additional =
                'Some
                    (std.contract.Sequence
                      [
                        refs."definitions.TopLevelArtifactFlags",
                        { _ | Dyn }
                      ]),
              patterns =
                {
                    "^[a-z0-9]([a-z0-9-/]*[a-z0-9])?$" =
                      std.contract.Sequence
                          [
                            refs."definitions.TopLevelArtifactFlags",
                            { _ | Dyn }
                          ],
                  },
              properties = {},
              required = {},
            },
      "definitions.TopLevelPlotFlags" =
        {
            template | String | doc "Default plot template" | optional,
            title | String | doc "Default plot title" | optional,
            x
              | std.contract.any_of
                [
                  String,
                  std.contract.Sequence [ refs."definitions.X", { _ | Dyn } ]
                ]
              | doc "A single column name, or a dictionary of data-source and column pair"
              | optional,
            x_label | String | doc "Default label for the x-axis" | optional,
            y
              | std.contract.any_of
                [
                  String,
                  std.contract.Sequence
                    [ js2n.array.UniqueItems, Array String ],
                  std.contract.Sequence [ refs."definitions.Y", { _ | Dyn } ]
                ]
              | doc "A single column name, list of columns, or a dictionary of data-source and column pair"
              | optional,
            y_label | String | doc "Default label for the y-axis" | optional,
          },
      "definitions.TopLevelPlots" =
        {
            _ | std.contract.any_of
              [
                std.contract.Sequence
                  [ refs."definitions.TopLevelPlotFlags", { _ | Dyn } ],
                std.contract.Sequence
                  [ refs."definitions.EmptyTopLevelPlotFlags", js2n.Null ]
              ]
          },
      "definitions.TopLevelPlotsList" =
        Array (
            std.contract.any_of
              [
                String,
                std.contract.Sequence
                  [ refs."definitions.TopLevelPlots", { _ | Dyn } ]
              ]
          ),
      "definitions.VarDecl" = { _ | Dyn },
      "definitions.VarPath" = String,
      "definitions.Vars" =
        Array (
            std.contract.any_of
              [
                std.contract.Sequence [ refs."definitions.VarPath", String ],
                std.contract.Sequence
                  [ refs."definitions.VarDecl", { _ | Dyn } ]
              ]
          ),
      "definitions.X" = { _ | String },
      "definitions.Y" =
        {
            _ | std.contract.any_of
              [
                String,
                std.contract.Sequence [ js2n.array.UniqueItems, Array String ]
              ]
          },
    }
    in
  {
      artifacts
        | refs."definitions.TopLevelArtifacts"
        | doc "Top level artifacts definition."
        | optional,
      metrics
        | js2n.array.UniqueItems
        | Array String
        | doc "List of metric files"
        | optional,
      params
        | js2n.array.UniqueItems
        | Array String
        | doc "List of parameter files"
        | optional,
      plots
        | std.contract.any_of
          [
            refs."definitions.TopLevelPlots",
            refs."definitions.TopLevelPlotsList"
          ]
        | doc "Top level plots definition."
        | optional,
      stages
        | {
          _ | js2n.OneOf
            [
              refs."definitions.ForeachDo",
              refs."definitions.Matrix",
              refs."definitions.Stage"
            ]
        }
        | doc "List of stages that form a pipeline."
        | optional,
      vars
        | refs."definitions.Vars"
        | doc m%"
          List of values for substitution.
          
          May include any dict or a path to a params file which may be a string or a dict to params in the file).
          
          Use elsewhere in `dvc.yaml` with the `${}` substitution expression.
        "%
        | optional,
    }